<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL6-常见问题</title>
      <link href="/2022/10/17/04-database/mysql6-chang-jian-wen-ti/"/>
      <url>/2022/10/17/04-database/mysql6-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL常见问题"><a href="#MySQL常见问题" class="headerlink" title="MySQL常见问题"></a>MySQL常见问题</h1><p>Q：<code>error code [1366]; Incorrect string value: '\xF0\x9F\x98\x81</code><br>A：这个问题是由于数据库编码方式引起的；</p><p>  可通过修改数据库及表字符集解决该问题；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查询当前数据库字符集</span>SHOW VARIABLES WHERE Variable_name LIKE <span class="token string">'character\_set\_%'</span> OR Variable_name LIKE <span class="token string">'collation%'</span><span class="token punctuation">;</span><span class="token comment"># 方案一</span><span class="token comment">## 修改数据库及表字符集</span>ALTER DATABASE dscsupport CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci<span class="token punctuation">;</span>  alter table dsc_bus_wechat_record character <span class="token builtin class-name">set</span> utf8mb4 collate utf8mb4_general_ci<span class="token comment"># 方案二</span><span class="token comment">## 修改服务配置 my.cnf</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span> character-set-server<span class="token operator">=</span>utf8mb4 <span class="token comment">## 重启MySQL服务</span>systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>utf8一般是指UTF-8，是一种针对Unicode的可变长度字符编码，每个字符最多三个字节，也叫utf8mb3<br>utf8mb4是utf8的超集，mb4是<code>most bytes 4</code>的缩写，专门用于兼容四字节的Unicode，MySQL 5.5.3之后增加的字符编码支持；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用操作</title>
      <link href="/2022/10/17/04-database/mysql-chang-yong-cao-zuo/"/>
      <url>/2022/10/17/04-database/mysql-chang-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="字符集操作"><a href="#字符集操作" class="headerlink" title="字符集操作"></a>字符集操作</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查询字符集</span><span class="token comment">## 查询数据库默认字符集</span>SHOW CREATE DATABASE dbname<span class="token punctuation">;</span><span class="token comment">## 查询数据表默认字符集</span>show table status from dbname like <span class="token string">'%dsc_cus_customer_info%'</span><span class="token punctuation">;</span><span class="token comment"># 修改字符集</span><span class="token comment">## 修改数据库默认字符集</span>alter database dbname character <span class="token builtin class-name">set</span> utf8mb4 collate utf8mb4_general_ci<span class="token punctuation">;</span><span class="token comment">## 修改数据表默认字符集</span>alter table dsc_supt_warn_info convert to character <span class="token builtin class-name">set</span> utf8mb4 collate utf8mb4_general_ci<span class="token punctuation">;</span><span class="token comment">## 查看数据库实例字符集相关</span>sHOW VARIABLES WHERE Variable_name LIKE <span class="token string">'character\_set\_%'</span> OR Variable_name LIKE <span class="token string">'collation%'</span><span class="token punctuation">;</span><span class="token comment">## 修改数据库、连接及服务器字符集</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">collation_connection</span><span class="token operator">=</span>utf8mb4_unicode_ci<span class="token punctuation">;</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">collation_database</span><span class="token operator">=</span>utf8mb4_unicode_ci<span class="token punctuation">;</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">collation_server</span><span class="token operator">=</span>utf8mb4_unicode_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="快速生成数据"><a href="#快速生成数据" class="headerlink" title="快速生成数据"></a>快速生成数据</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 快速生成数字序列</span><span class="token comment">-- 指定步长</span><span class="token keyword">SELECT</span> <span class="token variable">@xi</span>:<span class="token operator">=</span><span class="token variable">@xi</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> xc <span class="token keyword">from</span>  <span class="token comment">-- xc1 * xc2 为终止值</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">2</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">3</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">4</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">5</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">6</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">7</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">8</span><span class="token punctuation">)</span> xc1<span class="token punctuation">,</span>   <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">2</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">3</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">4</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">5</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">6</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">7</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">8</span><span class="token punctuation">)</span> xc2<span class="token punctuation">,</span>   <span class="token comment">-- 指定序列起始值</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token variable">@xi</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> xc0<span class="token comment">-- 快速生成连续时间</span><span class="token keyword">SELECT</span> DATE_FORMAT<span class="token punctuation">(</span>DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> xc <span class="token keyword">MONTH</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">date</span>  <span class="token keyword">FROM</span> <span class="token punctuation">(</span>           <span class="token keyword">SELECT</span> <span class="token variable">@xi</span>:<span class="token operator">=</span><span class="token variable">@xi</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> xc <span class="token keyword">from</span>   <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">2</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">3</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">4</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">5</span><span class="token punctuation">)</span> xc1<span class="token punctuation">,</span>   <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">2</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">3</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">4</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token number">5</span><span class="token punctuation">)</span> xc2<span class="token punctuation">,</span>   <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token variable">@xi</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> xc0       <span class="token punctuation">)</span> xcxc<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像制作</title>
      <link href="/2022/10/17/05-dev/docker-jing-xiang-zhi-zuo/"/>
      <url>/2022/10/17/05-dev/docker-jing-xiang-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>Dockerfile是一个文本文件，其内包含一系列指令，用于构建镜像，每条指定对应一层镜像；<br>Dockerfile的格式：</p><ul><li>以<code>#</code>开头的注释行</li><li>以专用指令开头的指令行</li></ul><h1 id="镜像构建原理"><a href="#镜像构建原理" class="headerlink" title="镜像构建原理"></a>镜像构建原理</h1><p>docker镜像构建命令格式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>上下文资源/URL<span class="token operator">&gt;</span><span class="token comment"># 范例</span><span class="token comment">## demo为镜像名</span><span class="token comment">## v1为标签名</span><span class="token comment">## . 上下文路径</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> demo:v1 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Dockerfile常用指令"><a href="#Dockerfile常用指令" class="headerlink" title="Dockerfile常用指令"></a>Dockerfile常用指令</h1><table><thead><tr><th>指令名</th><th>指令功能说明</th></tr></thead><tbody><tr><td>FROM</td><td>指定新建镜像时使用的基础镜像，通常为Dockerfile的第一个指令，其前可出现ARG指令</td></tr><tr><td>LABEL</td><td>附加到镜像上的元数据信息，以键值对存在</td></tr><tr><td>ENV</td><td>以键值对形式配置环境变量，可被其后指令使用，并可在生成的容器中使用</td></tr><tr><td>RUN</td><td>以FROM中定义的镜像为基础环境，运行指令并生成一个新的镜像层，并可由后续指令使用</td></tr><tr><td>CMD</td><td>基于该Dockerfile生成的镜像生成容器时，CMD可指定容器默认运行的程序，因此仅需定义一次，默认为<code>bash</code></td></tr><tr><td>ENTRYPOINT</td><td>类似于CMD指令的功能，但不能被CMD指定的默认运行程序覆盖，与CMD共存时，CMD内容将作为ENTRYPOINT定义程序的参数</td></tr><tr><td>WORKDIR</td><td>为其他指定设定默认工作目录</td></tr><tr><td>COPY</td><td>复制主机上或上一层镜像生成的文件或目录并生成新的镜像层</td></tr><tr><td>ADD</td><td>与COPY功能类似，可额外支持URL作为源文件</td></tr><tr><td>VOLUMN</td><td>指定基于镜像生成的容器运行时，期望作为VOLUMN使用的目录</td></tr><tr><td>EXPOSE</td><td>指定基于镜像生成的容器运行时，期望暴露的端口，但实际是否暴露由容器启动命令来决定</td></tr><tr><td>USER</td><td>为Dockerfile中该指令之后所有指令指定运行的用户uid及可选的gid</td></tr><tr><td>ARG</td><td>专门用于Dockerfile运行过程中的变量，但仅对其后指定有效，支持build时动态传入</td></tr><tr><td>ONBUILD</td><td>触发器，生效于由该Dockerfile生成的镜像被用于其他镜像的from来源时</td></tr><tr><td>SHELL</td><td>定义容器运行时默认的SHELL程序，Linux默认为[“/bin/sh”,”-c”]，Windows默认为[“cmd”,”/S”,”/C”]</td></tr></tbody></table><h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><p>构建镜像时需要执行的命令，有以下两种执行方式：</p><ul><li>shell方式：<pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 格式  RUN  &lt;command&gt;RUN echo "hello"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>exec方式：<pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 格式 RUN ["executeable","param1","param2"]RUN ["/bin/bash","start.sh","sshd"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h2><p>将资源添加到容器中，tar类型文件添加进容器中会自动解压（通过网络下载的tar资源不会解压），可访问网络，类似<code>wget</code>；<br>ADD指令支持模糊匹配，相对路径及绝对路径；</p><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 格式： ADD &lt;SRC&gt; ... &lt;DEST&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p>Q1：CentOS镜像启动服务时报错提示<code>Failed to get D-Bus connection: Operation not permitted</code><br>A1：镜像启动时需使用指定语句并授予权限：<code>docker run -d --name centos7 --privileged=true centos:7 /usr/sbin/init</code></p><p>Q2：CentOS8 yum地址无法解析 <code>Error: Failed to download metadata for repo 'appstream': Cannot prepare internal mirrorlist: No URLs in mirrorlist</code><br>A2：<code>sed -i -e "s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g" /etc/yum.repos.d/CentOS-*</code></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian主题</title>
      <link href="/2022/10/17/06-skill/obsidian-zhu-ti/"/>
      <url>/2022/10/17/06-skill/obsidian-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Everforest主题"><a href="#Everforest主题" class="headerlink" title="Everforest主题"></a>Everforest主题</h1><p>一个好看的obsidian主题分享：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/***** TABLE OF CONTENTS *****/</span><span class="token comment">/* TODO: Reformat entire CSS file as below./* 1. Font/* 2. Colours/* 2.1. Dark theme color variables/* 2.2. Light theme color variables/* 2.3. Dark theme implementation/* 2.4. Light theme implementation/* 3. General UI/* 3.1. Title Bar/* 4. Markdown (editor / preview)/* 4.1. Headings/* 4.1.1. Fix font weights/* 4.2. Links/* 4.2.1. Nifty arrow before internal links (also applies to embeds)/* 4.3. Embeds/* 4.4. Tables/* 4.5. Popovers/* 4.6. Task Lists/* 4.7. Blockquotes/* 4.8. Code/* 4.9. Bulleted lists/* 4.10. Misc Fixes/* 5. Graph view colours/* 6. Notion Colour Blocks/* 7. In-document header (scrolls with the document) [remove for compatibility with Andy's mode]/* 7.1. Adjustments for non-in-document headers (graphs, etc)\/* 7.2. Active pane border/* 7.3. Misc fixes/* 8. Tags/* 8.1. Tag custom colours/***** *****/</span>  <span class="token comment">/* 1. Font */</span><span class="token selector">body</span> <span class="token punctuation">{</span><span class="token comment">/* font stacks taken directly from Notion */</span><span class="token property">--font-monospace</span><span class="token punctuation">:</span> <span class="token string">"Hack Nerd Font"</span><span class="token punctuation">,</span> <span class="token string">"Source Code Pro"</span><span class="token punctuation">,</span> monospace<span class="token punctuation">;</span><span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">/* 2. Colours */</span><span class="token selector">:root</span><span class="token punctuation">{</span><span class="token comment">/* 2.1 Dark theme color variables */</span><span class="token property">--bg0-dark</span><span class="token punctuation">:</span> #22282c<span class="token punctuation">;</span><span class="token property">--bg1-dark</span><span class="token punctuation">:</span> #272f34<span class="token punctuation">;</span><span class="token property">--bg-dark</span><span class="token punctuation">:</span> #2f383e<span class="token punctuation">;</span><span class="token property">--bg2-dark</span><span class="token punctuation">:</span> #374247<span class="token punctuation">;</span><span class="token property">--bg3-dark</span><span class="token punctuation">:</span> #404c51<span class="token punctuation">;</span><span class="token property">--bg4-dark</span><span class="token punctuation">:</span> #4a555b<span class="token punctuation">;</span><span class="token property">--bg5-dark</span><span class="token punctuation">:</span> #525c62<span class="token punctuation">;</span><span class="token property">--bg_visual</span><span class="token punctuation">:</span> #503946<span class="token punctuation">;</span><span class="token property">--bg_red</span><span class="token punctuation">:</span> #4e3e43<span class="token punctuation">;</span><span class="token property">--bg_green</span><span class="token punctuation">:</span> #404d44<span class="token punctuation">;</span><span class="token property">--bg_blue</span><span class="token punctuation">:</span> #394f5a<span class="token punctuation">;</span><span class="token property">--bg_yellow</span><span class="token punctuation">:</span> #4a4940<span class="token punctuation">;</span><span class="token property">--shadow</span><span class="token punctuation">:</span> #00000070<span class="token punctuation">;</span>  <span class="token property">--fg-dark</span><span class="token punctuation">:</span> #d3c6aa<span class="token punctuation">;</span><span class="token property">--grey0-dark</span><span class="token punctuation">:</span> #7f897d<span class="token punctuation">;</span><span class="token property">--grey1-dark</span><span class="token punctuation">:</span> #859289<span class="token punctuation">;</span><span class="token property">--grey2-dark</span><span class="token punctuation">:</span> #9aa79d<span class="token punctuation">;</span>  <span class="token property">--faded-red</span><span class="token punctuation">:</span> #e67e80<span class="token punctuation">;</span><span class="token property">--faded-orange</span><span class="token punctuation">:</span> #e69875<span class="token punctuation">;</span><span class="token property">--faded-yellow</span><span class="token punctuation">:</span> #dbbc7f<span class="token punctuation">;</span><span class="token property">--faded-green</span><span class="token punctuation">:</span> #a7c080<span class="token punctuation">;</span><span class="token property">--faded-aqua</span><span class="token punctuation">:</span> #83c092<span class="token punctuation">;</span><span class="token property">--faded-blue</span><span class="token punctuation">:</span> #7fbbb3<span class="token punctuation">;</span><span class="token property">--faded-purple</span><span class="token punctuation">:</span> #d699b6<span class="token punctuation">;</span>  <span class="token property">--dim-red</span><span class="token punctuation">:</span> #da6362<span class="token punctuation">;</span><span class="token property">--dim-orange</span><span class="token punctuation">:</span> #d77f48<span class="token punctuation">;</span><span class="token property">--dim-yellow</span><span class="token punctuation">:</span> #bf983d<span class="token punctuation">;</span><span class="token property">--dim-green</span><span class="token punctuation">:</span> #899c40<span class="token punctuation">;</span><span class="token property">--dim-aqua</span><span class="token punctuation">:</span> #569d79<span class="token punctuation">;</span><span class="token property">--dim-blue</span><span class="token punctuation">:</span> #5a93a2<span class="token punctuation">;</span><span class="token property">--dim-purple</span><span class="token punctuation">:</span> #b87b9d<span class="token punctuation">;</span>    <span class="token comment">/* 2.2 Light theme color variables */</span><span class="token property">--bg0-light</span><span class="token punctuation">:</span> #f0edd8<span class="token punctuation">;</span><span class="token property">--bg1-light</span><span class="token punctuation">:</span> #f6f1dd<span class="token punctuation">;</span><span class="token property">--bg-light</span><span class="token punctuation">:</span> #fdf6e3<span class="token punctuation">;</span><span class="token property">--bg2-light</span><span class="token punctuation">:</span> #f3efda<span class="token punctuation">;</span><span class="token property">--bg3-light</span><span class="token punctuation">:</span> #edead5<span class="token punctuation">;</span><span class="token property">--bg4-light</span><span class="token punctuation">:</span> #e4e1cd<span class="token punctuation">;</span><span class="token property">--bg5-light</span><span class="token punctuation">:</span> #dfdbc8<span class="token punctuation">;</span><span class="token property">--grey0-light</span><span class="token punctuation">:</span> #a4ad9e<span class="token punctuation">;</span><span class="token property">--grey1-light</span><span class="token punctuation">:</span> #939f91<span class="token punctuation">;</span><span class="token property">--grey2-light</span><span class="token punctuation">:</span> #879686<span class="token punctuation">;</span><span class="token property">--shadow-light</span><span class="token punctuation">:</span> #3c474d20<span class="token punctuation">;</span>    <span class="token property">--bg_visual_light</span><span class="token punctuation">:</span> #eaedc8<span class="token punctuation">;</span><span class="token property">--bg_red_light</span><span class="token punctuation">:</span> #fbe3da<span class="token punctuation">;</span><span class="token property">--bg_green_light</span><span class="token punctuation">:</span> #f0f1d2<span class="token punctuation">;</span><span class="token property">--bg_blue_light</span><span class="token punctuation">:</span> #e9f0e9<span class="token punctuation">;</span><span class="token property">--bg_yellow_light</span><span class="token punctuation">:</span> #faedcd<span class="token punctuation">;</span>  <span class="token property">--fg-light</span><span class="token punctuation">:</span> #5c6a72<span class="token punctuation">;</span><span class="token property">--light-red</span><span class="token punctuation">:</span> #f85552<span class="token punctuation">;</span><span class="token property">--light-orange</span><span class="token punctuation">:</span> #f57d26<span class="token punctuation">;</span><span class="token property">--light-yellow</span><span class="token punctuation">:</span> #bf983d<span class="token punctuation">;</span><span class="token property">--light-green</span><span class="token punctuation">:</span> #899c40<span class="token punctuation">;</span><span class="token property">--light-aqua</span><span class="token punctuation">:</span> #569d79<span class="token punctuation">;</span><span class="token property">--light-blue</span><span class="token punctuation">:</span> #5a93a2<span class="token punctuation">;</span><span class="token property">--light-purple</span><span class="token punctuation">:</span> #b87b9d<span class="token punctuation">;</span>  <span class="token property">--light-dim-red</span><span class="token punctuation">:</span> #f1706f<span class="token punctuation">;</span><span class="token property">--light-dim-orange</span><span class="token punctuation">:</span> #f39459<span class="token punctuation">;</span><span class="token property">--light-dim-yellow</span><span class="token punctuation">:</span> #e4b649<span class="token punctuation">;</span><span class="token property">--light-dim-green</span><span class="token punctuation">:</span> #a4bb4a<span class="token punctuation">;</span><span class="token property">--light-dim-aqua</span><span class="token punctuation">:</span> #6ec398<span class="token punctuation">;</span><span class="token property">--light-dim-blue</span><span class="token punctuation">:</span> #6cb3c6<span class="token punctuation">;</span><span class="token property">--light-dim-purple</span><span class="token punctuation">:</span> #e092be<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment">/* 2.3 Dark theme implementation */</span><span class="token selector">.theme-dark</span><span class="token punctuation">{</span><span class="token property">--background-primary</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--background-primary-alt</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--background-secondary</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--background-secondary-alt</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-normal</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fg-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-faint</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--grey1-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h1</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h2</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-orange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h3</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h4</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-green<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h5</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-aqua<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h6</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-purple<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-link</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--faded-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-a</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-aqua<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-a-hover</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--faded-aqua<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-mark</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>215<span class="token punctuation">,</span> 153<span class="token punctuation">,</span> 33<span class="token punctuation">,</span> 0.4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* light-yellow */</span><span class="token property">--pre-code</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg1-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-highlight-bg</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg_green<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--interactive-accent</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-aqua<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--interactive-before</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg5-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--background-modifier-border</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg5-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-accent</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--interactive-accent-rgb</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--inline-code</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dim-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--code-block</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fg-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--vim-cursor</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--faded-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-selection</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg5-dark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">/* 2.4 Light theme implementation */</span><span class="token selector">.theme-light</span><span class="token punctuation">{</span><span class="token property">--background-primary</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--background-primary-alt</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--background-secondary</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--background-secondary-alt</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-normal</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fg-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-faint</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--grey1-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h1</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h2</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-orange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h3</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h4</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-green<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h5</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-aqua<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-title-h6</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-purple<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-link</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-a</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-dim-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-a-hover</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-mark</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>215<span class="token punctuation">,</span> 153<span class="token punctuation">,</span> 33<span class="token punctuation">,</span> 0.4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* light-yellow */</span><span class="token property">--pre-code</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg1-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-highlight-bg</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-dim-green<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--interactive-accent</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg5-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--interactive-before</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg5-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--background-modifier-border</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg5-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-accent</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg5-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--interactive-accent-rgb</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-dim-green<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--inline-code</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--code-block</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fg-light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--vim-cursor</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--light-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">--text-selection</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>189<span class="token punctuation">,</span> 174<span class="token punctuation">,</span> 147<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* light3 */</span><span class="token punctuation">}</span>  <span class="token selector">.theme-dark code[class*="language-"],.theme-dark pre[class*="language-"],.theme-light code[class*="language-"],.theme-light pre[class*="language-"]</span><span class="token punctuation">{</span><span class="token property">text-shadow</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--pre-code<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">/* 3. General UI */</span><span class="token selector">.view-header-title</span> <span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 3.1. Title bar */</span><span class="token selector">.titlebar</span> <span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-secondary-alt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.titlebar-inner</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-normal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.graph-view.color-circle,.graph-view.color-fill-highlight,.graph-view.color-line-highlight</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--interactive-accent-rgb<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.graph-view.color-text</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-a-hover<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*.graph-view.color-fill{color: var(--background-secondary);}.graph-view.color-line{color: var(--background-modifier-border);}*/</span>  <span class="token selector">html,body</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 16px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">strong</span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 600 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">a,.cm-hmd-internal-link</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-a<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">a:hover,.cm-hmd-internal-link:hover,.cm-url</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-a-hover<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">mark</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-mark<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.view-actions a</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-normal<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.view-actions a:hover</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-a<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.HyperMD-codeblock-bg</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--pre-code<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.HyperMD-codeblock</span><span class="token punctuation">{</span><span class="token property">line-height</span><span class="token punctuation">:</span> 1.6em <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--code-block<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.HyperMD-codeblock-begin</span><span class="token punctuation">{</span><span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 4px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 4px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.HyperMD-codeblock-end</span><span class="token punctuation">{</span><span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 4px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 4px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">th</span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 600 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">thead</span><span class="token punctuation">{</span><span class="token property">border-bottom</span><span class="token punctuation">:</span> 2px solid <span class="token function">var</span><span class="token punctuation">(</span>--background-modifier-border<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.HyperMD-table-row</span><span class="token punctuation">{</span><span class="token property">line-height</span><span class="token punctuation">:</span> normal <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">padding-left</span><span class="token punctuation">:</span> 4px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">padding-right</span><span class="token punctuation">:</span> 4px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token comment">/* background-color: var(--pre-code) !important; */</span><span class="token punctuation">}</span>  <span class="token selector">.HyperMD-table-row-0</span><span class="token punctuation">{</span><span class="token property">padding-top</span><span class="token punctuation">:</span> 4px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.CodeMirror-foldgutter-folded,.is-collapsed .nav-folder-collapse-indicator</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-a<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.nav-file-tag</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-a<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.is-active .nav-file-title</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-a<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-primary-alt<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.nav-file-title</span><span class="token punctuation">{</span><span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">img</span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> block <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> auto <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">margin-right</span><span class="token punctuation">:</span> auto <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.HyperMD-list-line</span><span class="token punctuation">{</span><span class="token property">padding-top</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.CodeMirror-code,.CodeMirror-linenumber,.cm-formatting</span><span class="token punctuation">{</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-monospace<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 1.4em<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.markdown-preview-section pre code,.markdown-preview-section code</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 0.9em <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--pre-code<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.markdown-preview-section pre code</span><span class="token punctuation">{</span><span class="token property">padding</span><span class="token punctuation">:</span> 4px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> 1.4em <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> block <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--code-block<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.markdown-preview-section code</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--inline-code<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> 1.4em <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.cm-s-obsidian,.cm-inline-code</span><span class="token punctuation">{</span><span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> auto <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.cm-inline-code</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--inline-code<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--pre-code<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 1px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.workspace-leaf-header-title</span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 600 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.side-dock-title</span><span class="token punctuation">{</span><span class="token property">padding-top</span><span class="token punctuation">:</span> 15px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 20px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.side-dock-ribbon-tab:hover,.side-dock-ribbon-action:hover,.side-dock-ribbon-action.is-active:hover,.nav-action-button:hover,.side-dock-collapse-btn:hover</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.side-dock</span><span class="token punctuation">{</span><span class="token property">border-right</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.cm-s-obsidian,.markdown-preview-view</span><span class="token punctuation">{</span><span class="token comment">/* padding-left: 10px !important; */</span><span class="token property">padding-right</span><span class="token punctuation">:</span> 10px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> 1.6em<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">/* vertical resize-handle */</span><span class="token selector">.workspace-split.mod-vertical &gt; * &gt; .workspace-leaf-resize-handle,.workspace-split.mod-left-split &gt; .workspace-leaf-resize-handle,.workspace-split.mod-right-split &gt; .workspace-leaf-resize-handle</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 1px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-secondary-alt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">/* horizontal resize-handle */</span><span class="token selector">.workspace-split.mod-horizontal &gt; * &gt; .workspace-leaf-resize-handle</span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span> 1px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-secondary-alt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">/* Remove vertical split padding */</span><span class="token selector">.workspace-split.mod-root .workspace-split.mod-vertical .workspace-leaf-content,.workspace-split.mod-vertical &gt; .workspace-split,.workspace-split.mod-vertical &gt; .workspace-leaf,.workspace-tabs</span><span class="token punctuation">{</span><span class="token property">padding-right</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.markdown-embed-title</span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 600 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.markdown-embed</span><span class="token punctuation">{</span><span class="token property">padding-left</span><span class="token punctuation">:</span> 10px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">padding-right</span><span class="token punctuation">:</span> 10px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 10px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">margin-right</span><span class="token punctuation">:</span> 10px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.cm-header-1,.markdown-preview-section h1</span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 500 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 34px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-title-h1<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.cm-header-2,.markdown-preview-section h2</span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 500 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 26px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-title-h2<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.cm-header-3,.markdown-preview-section h3</span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 500 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 22px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-title-h3<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.cm-header-4,.markdown-preview-section h4</span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 500 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 20px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-title-h4<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.cm-header-5,.markdown-preview-section h5</span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 500 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 18px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-title-h5<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.cm-header-6,.markdown-preview-section h6</span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 500 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 18px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-title-h6<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.suggestion-item.is-selected</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-selection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.empty-state-container:hover</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-secondary-alt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 5px solid <span class="token function">var</span><span class="token punctuation">(</span>--interactive-accent<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.checkbox-container</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--interactive-before<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.checkbox-container:after</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--interactive-accent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.mod-cta</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-secondary-alt<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 600 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.mod-cta a</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-secondary-alt<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 600 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.mod-cta:hover</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--interactive-before<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 600 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.CodeMirror-cursor</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--vim-cursor<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token property">opacity</span><span class="token punctuation">:</span> 60% <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">input.task-list-item-checkbox</span> <span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">var</span><span class="token punctuation">(</span>--faded-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">input.task-list-item-checkbox:checked</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--faded-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0 0 0 2px <span class="token function">var</span><span class="token punctuation">(</span>--background-primary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">::selection</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-selection<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.mermaid .note</span><span class="token punctuation">{</span><span class="token property">fill</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dark3<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">.frontmatter-container</span> <span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">/* Bullet point relationship lines */</span><span class="token selector">.cm-hmd-list-indent .cm-tab, ul ul</span> <span class="token punctuation">{</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">.cm-hmd-list-indent .cm-tab::before, ul ul::before</span> <span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token property">border-left</span><span class="token punctuation">:</span> 1px solid <span class="token function">var</span><span class="token punctuation">(</span>--dim-blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.cm-hmd-list-indent .cm-tab::before</span> <span class="token punctuation">{</span> <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul ul::before</span> <span class="token punctuation">{</span> <span class="token property">left</span><span class="token punctuation">:</span> -11px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OneDrive使用</title>
      <link href="/2022/10/17/06-skill/onedrive-shi-yong/"/>
      <url>/2022/10/17/06-skill/onedrive-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="OneDrive不同步"><a href="#OneDrive不同步" class="headerlink" title="OneDrive不同步"></a>OneDrive不同步</h3><pre class="line-numbers language-none"><code class="language-none">%localappdata%\Microsoft\OneDrive\onedrive.exe /reset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> onedrive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密算法</title>
      <link href="/2022/10/17/02-program/jia-jie-mi-suan-fa/"/>
      <url>/2022/10/17/02-program/jia-jie-mi-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="加密算法简介"><a href="#加密算法简介" class="headerlink" title="加密算法简介"></a>加密算法简介</h1><p>加密算法整体可分为可逆加密与不可逆加密；其中可逆加密算法又可分为：对称加密与非对称加密；</p><h2 id="不可逆加密"><a href="#不可逆加密" class="headerlink" title="不可逆加密"></a>不可逆加密</h2><p><a href="http://www.elecfans.com/emb/202008031263663.html">http://www.elecfans.com/emb/202008031263663.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataGrid对接Hive</title>
      <link href="/2022/10/17/03-hadoop/datagrid-dui-jie-hive/"/>
      <url>/2022/10/17/03-hadoop/datagrid-dui-jie-hive/</url>
      
        <content type="html"><![CDATA[<h1 id="DataGrid支持Kerberos"><a href="#DataGrid支持Kerberos" class="headerlink" title="DataGrid支持Kerberos"></a>DataGrid支持Kerberos</h1><h2 id="DataGrid连接Hive"><a href="#DataGrid连接Hive" class="headerlink" title="DataGrid连接Hive"></a>DataGrid连接Hive</h2><p>DataGrid可通过jdbc方式连接Hive/Impala；<br>驱动依赖Jar包如下：</p><pre class="line-numbers language-none"><code class="language-none">commons-collections-3.2.2.jarcommons-configuration-1.6.jarcommons-httpclient-3.0.1.jarcommons-logging-1.1.3.jarcurator-client-2.10.0.jarcurator-framework-2.10.0.jarhadoop-auth-2.9.2.jarhadoop-common-2.9.2.jarhive-common-2.1.1.jarhive-exec-2.1.1.jarhive-jdbc-2.1.1.jarhive-metastore-2.1.1.jarhive-service-2.1.1.jarhttpclient-4.5.6.jarhttpcore-4.4.6.jarlog4j-api-2.16.0.jarlog4j-core-2.16.0.jarslf4j-api-1.7.25.jarstax2-api-3.1.4.jarwoodstox-core-5.0.3.jarzookeeper-3.4.6.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连接信息配置：将URL选项配置为完整JDBC连接串即可</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/8Qao33.png" alt="8Qao33"><h2 id="Kerberos支持"><a href="#Kerberos支持" class="headerlink" title="Kerberos支持"></a>Kerberos支持</h2><p>通过高级选项添加jvm参数实现kerberos支持</p><pre class="line-numbers language-none"><code class="language-none">com.sun.security.jgss.initiate{      com.sun.security.auth.module.Krb5LoginModule required      useKeyTab=true      useTicketCache=false      keyTab="/Users/semon/wks/tools/dsc_support.keytab"      principal="dsc_support/dev@BDMS.163.COM"      doNotPrompt=true      debug=true      debugNative=true;   };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/OkZISb.png" alt="OkZISb"><p>[^1]: </p><p>[^2]: </p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/17/03-hadoop/da-shu-ju-chang-jian-yun-wei-wen-ti/"/>
      <url>/2022/10/17/03-hadoop/da-shu-ju-chang-jian-yun-wei-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><p>Q： Hive执行报错：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">'<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>yarn<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>YarnRuntimeException</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>InterruptedException</span><span class="token operator">:</span> sleep interrupted<span class="token punctuation">)</span>'<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>yarn<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>YarnRuntimeException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>InterruptedException</span><span class="token operator">:</span> sleep interrupted       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>ClientServiceDelegate</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">ClientServiceDelegate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">339</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>ClientServiceDelegate</span><span class="token punctuation">.</span><span class="token function">getTaskReports</span><span class="token punctuation">(</span><span class="token class-name">ClientServiceDelegate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">444</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>YARNRunner</span><span class="token punctuation">.</span><span class="token function">getTaskReports</span><span class="token punctuation">(</span><span class="token class-name">YARNRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">572</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span>Job</span>$<span class="token number">3.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Job</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">543</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span>Job</span>$<span class="token number">3.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Job</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">541</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span>Subject</span><span class="token punctuation">.</span><span class="token function">doAs</span><span class="token punctuation">(</span><span class="token class-name">Subject</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">415</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>UserGroupInformation</span><span class="token punctuation">.</span><span class="token function">doAs</span><span class="token punctuation">(</span><span class="token class-name">UserGroupInformation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1642</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span>Job</span><span class="token punctuation">.</span><span class="token function">getTaskReports</span><span class="token punctuation">(</span><span class="token class-name">Job</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">541</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>JobClient</span><span class="token punctuation">.</span><span class="token function">getTaskReports</span><span class="token punctuation">(</span><span class="token class-name">JobClient</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">639</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>JobClient</span><span class="token punctuation">.</span><span class="token function">getMapTaskReports</span><span class="token punctuation">(</span><span class="token class-name">JobClient</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">629</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>mr<span class="token punctuation">.</span></span>HadoopJobExecHelper</span><span class="token punctuation">.</span><span class="token function">progress</span><span class="token punctuation">(</span><span class="token class-name">HadoopJobExecHelper</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">259</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>mr<span class="token punctuation">.</span></span>HadoopJobExecHelper</span><span class="token punctuation">.</span><span class="token function">progress</span><span class="token punctuation">(</span><span class="token class-name">HadoopJobExecHelper</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">547</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>mr<span class="token punctuation">.</span></span>ExecDriver</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">ExecDriver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">426</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>mr<span class="token punctuation">.</span></span>MapRedTask</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">MapRedTask</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">136</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span></span>Task</span><span class="token punctuation">.</span><span class="token function">executeTask</span><span class="token punctuation">(</span><span class="token class-name">Task</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">153</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span></span>TaskRunner</span><span class="token punctuation">.</span><span class="token function">runSequential</span><span class="token punctuation">(</span><span class="token class-name">TaskRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">85</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span></span>TaskRunner</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TaskRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token comment">// 错误堆栈2</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token operator">:</span> 断开的管道       at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span></span>FileDispatcherImpl</span><span class="token punctuation">.</span><span class="token function">write0</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span></span>SocketDispatcher</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">SocketDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">47</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span></span>IOUtil</span><span class="token punctuation">.</span><span class="token function">writeFromNativeBuffer</span><span class="token punctuation">(</span><span class="token class-name">IOUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">93</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span></span>IOUtil</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">IOUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">65</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span></span>SocketChannelImpl</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">SocketChannelImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">487</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketOutputStream</span>$<span class="token class-name">Writer</span><span class="token punctuation">.</span><span class="token function">performIO</span><span class="token punctuation">(</span><span class="token class-name">SocketOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">63</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketIOWithTimeout</span><span class="token punctuation">.</span><span class="token function">doIO</span><span class="token punctuation">(</span><span class="token class-name">SocketIOWithTimeout</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">142</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketOutputStream</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">SocketOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">159</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketOutputStream</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">SocketOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">117</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedOutputStream</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">BufferedOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">122</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>DataOutputStream</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">DataOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">107</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span></span>DFSOutputStream</span>$<span class="token class-name">Packet</span><span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span><span class="token class-name">DFSOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">285</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span></span>DFSOutputStream</span>$<span class="token class-name">DataStreamer</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DFSOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">591</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">46</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">127</span> <span class="token constant">WARN</span>  <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">hdfs<span class="token punctuation">.</span></span>DFSClient</span> <span class="token punctuation">(</span><span class="token class-name">DFSOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token function">waitForAckedSeqno</span><span class="token punctuation">(</span><span class="token number">2074</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Slow</span> waitForAckedSeqno took <span class="token number">73275</span>ms <span class="token punctuation">(</span>threshold<span class="token operator">=</span><span class="token number">30000</span>ms<span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">46</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">140</span> <span class="token constant">WARN</span>  <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">hdfs<span class="token punctuation">.</span></span>DFSClient</span> <span class="token punctuation">(</span><span class="token class-name">DFSOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token function">waitForAckedSeqno</span><span class="token punctuation">(</span><span class="token number">2074</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Slow</span> waitForAckedSeqno took <span class="token number">73884</span>ms <span class="token punctuation">(</span>threshold<span class="token operator">=</span><span class="token number">30000</span>ms<span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">46</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">190</span> <span class="token constant">WARN</span>  <span class="token punctuation">[</span><span class="token class-name">DataStreamer</span> <span class="token keyword">for</span> file <span class="token operator">/</span>tmp<span class="token operator">/</span>hadoop<span class="token operator">-</span>yarn<span class="token operator">/</span>staging<span class="token operator">/</span>hhive<span class="token operator">/</span><span class="token punctuation">.</span>staging<span class="token operator">/</span>job_1439027917379_19257<span class="token operator">/</span>job<span class="token punctuation">.</span>jar block <span class="token constant">BP</span><span class="token operator">-</span><span class="token number">1797264656</span><span class="token operator">-</span><span class="token number">192.168</span><span class="token number">.4</span><span class="token number">.128</span><span class="token operator">-</span><span class="token number">1431244532842</span><span class="token operator">:</span>blk_1094532259_20796961<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">hdfs<span class="token punctuation">.</span></span>DFSClient</span> <span class="token punctuation">(</span><span class="token class-name">DFSOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">639</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">DataStreamer</span> <span class="token class-name">Exception</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A：此类问题一般是由于DN或NN压力过大无法及时响应，可通过调整以下参数改善（<code>hdfs-site.xml</code>）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dfs.datanode.handler.count： <span class="token comment"># 增大，提升DN服务线程数，增加DN接收请求、处理指令能力</span>dfs.namenode.handler.count： <span class="token comment"># 增大， 提升NN服务线程数，提升处理RPC请求能力</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Q：操作文件失败</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>EOFException</span><span class="token operator">:</span> <span class="token class-name">Premature</span> <span class="token constant">EOF</span><span class="token operator">:</span> no length prefix available       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>protocolPB<span class="token punctuation">.</span></span>PBHelper</span><span class="token punctuation">.</span><span class="token function">vintPrefixed</span><span class="token punctuation">(</span><span class="token class-name">PBHelper</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2109</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>datatransfer<span class="token punctuation">.</span></span>PipelineAck</span><span class="token punctuation">.</span><span class="token function">readFields</span><span class="token punctuation">(</span><span class="token class-name">PipelineAck</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">176</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A：文件操作超出租期，即dataStreamer操作文件过程中，文件已经被删除导致，可通过修改<code>hdfs-site.xml</code>参数优化</p><pre class="line-numbers language-none"><code class="language-none">dfs.datanode.max.transfer.threads # 增大该参数，可提升DN节点并发能力<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Q：链接被重置问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token operator">:</span> <span class="token class-name">Connection</span> reset by peer       at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span></span>FileDispatcherImpl</span><span class="token punctuation">.</span><span class="token function">write0</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span></span>SocketDispatcher</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">SocketDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">47</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span></span>IOUtil</span><span class="token punctuation">.</span><span class="token function">writeFromNativeBuffer</span><span class="token punctuation">(</span><span class="token class-name">IOUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">93</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span></span>IOUtil</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">IOUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">65</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span></span>SocketChannelImpl</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">SocketChannelImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">487</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketOutputStream</span>$<span class="token class-name">Writer</span><span class="token punctuation">.</span><span class="token function">performIO</span><span class="token punctuation">(</span><span class="token class-name">SocketOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">63</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketIOWithTimeout</span><span class="token punctuation">.</span><span class="token function">doIO</span><span class="token punctuation">(</span><span class="token class-name">SocketIOWithTimeout</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">142</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketOutputStream</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">SocketOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">159</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedOutputStream</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token class-name">BufferedOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">140</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>DataOutputStream</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token class-name">DataOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>datanode<span class="token punctuation">.</span></span>BlockReceiver</span>$<span class="token class-name">PacketResponder</span><span class="token punctuation">.</span><span class="token function">sendAckUpstreamUnprotected</span><span class="token punctuation">(</span><span class="token class-name">BlockReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1396</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>datanode<span class="token punctuation">.</span></span>BlockReceiver</span>$<span class="token class-name">PacketResponder</span><span class="token punctuation">.</span><span class="token function">sendAckUpstream</span><span class="token punctuation">(</span><span class="token class-name">BlockReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1335</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>datanode<span class="token punctuation">.</span></span>BlockReceiver</span>$<span class="token class-name">PacketResponder</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">BlockReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1256</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A：解决方案为优化NN性能，通过修改<code>hdfs-site.xml</code>参数实现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dfs.namenode.handler.count <span class="token comment"># （加大）  NN的服务线程数。用于处理RPC请求</span>dfs.namenode.replication.interval <span class="token comment">#（减小）  NN周期性计算DN的副本情况的频率，秒</span>dfs.client.failover.connection.retries <span class="token comment">#（建议加大）  专家设置。IPC客户端失败重试次数。在网络不稳定时建议加大此值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Q：Socket链接超时问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token operator">:</span> <span class="token class-name">Bad</span> response <span class="token constant">ERROR</span> <span class="token keyword">for</span> block <span class="token constant">BP</span><span class="token operator">-</span><span class="token number">1797264656</span><span class="token operator">-</span><span class="token number">192.168</span><span class="token number">.4</span><span class="token number">.128</span><span class="token operator">-</span><span class="token number">1431244532842</span><span class="token operator">:</span>blk_1094409843_20674430 from datanode <span class="token number">192.168</span><span class="token number">.4</span><span class="token number">.118</span><span class="token operator">:</span><span class="token number">50010</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span></span>DFSOutputStream</span>$<span class="token class-name">DataStreamer</span>$<span class="token class-name">ResponseProcessor</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DFSOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">840</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketTimeoutException</span><span class="token operator">:</span> <span class="token number">60000</span> millis timeout <span class="token keyword">while</span> waiting <span class="token keyword">for</span> channel <span class="token keyword">to</span> <span class="token namespace">be</span> ready <span class="token keyword">for</span> read<span class="token punctuation">.</span> ch <span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span>SocketChannel</span><span class="token punctuation">[</span>connected local<span class="token operator">=</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.16</span><span class="token number">.70</span><span class="token operator">:</span><span class="token number">50010</span> remote<span class="token operator">=</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.4</span><span class="token number">.143</span><span class="token operator">:</span><span class="token number">52416</span><span class="token punctuation">]</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketIOWithTimeout</span><span class="token punctuation">.</span><span class="token function">doIO</span><span class="token punctuation">(</span><span class="token class-name">SocketIOWithTimeout</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">164</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">SocketInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">161</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">SocketInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">131</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedInputStream</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">235</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedInputStream</span><span class="token punctuation">.</span><span class="token function">read1</span><span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">275</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">334</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>DataInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">DataInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">149</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOUtils</span><span class="token punctuation">.</span><span class="token function">readFully</span><span class="token punctuation">(</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">192</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>datatransfer<span class="token punctuation">.</span></span>PacketReceiver</span><span class="token punctuation">.</span><span class="token function">doReadFully</span><span class="token punctuation">(</span><span class="token class-name">PacketReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">213</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>datatransfer<span class="token punctuation">.</span></span>PacketReceiver</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token class-name">PacketReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">134</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>datatransfer<span class="token punctuation">.</span></span>PacketReceiver</span><span class="token punctuation">.</span><span class="token function">receiveNextPacket</span><span class="token punctuation">(</span><span class="token class-name">PacketReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">109</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>datanode<span class="token punctuation">.</span></span>BlockReceiver</span><span class="token punctuation">.</span><span class="token function">receivePacket</span><span class="token punctuation">(</span><span class="token class-name">BlockReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">468</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>datanode<span class="token punctuation">.</span></span>BlockReceiver</span><span class="token punctuation">.</span><span class="token function">receiveBlock</span><span class="token punctuation">(</span><span class="token class-name">BlockReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">772</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>datanode<span class="token punctuation">.</span></span>DataXceiver</span><span class="token punctuation">.</span><span class="token function">writeBlock</span><span class="token punctuation">(</span><span class="token class-name">DataXceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">724</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>datatransfer<span class="token punctuation">.</span></span>Receiver</span><span class="token punctuation">.</span><span class="token function">opWriteBlock</span><span class="token punctuation">(</span><span class="token class-name">Receiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">126</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>datatransfer<span class="token punctuation">.</span></span>Receiver</span><span class="token punctuation">.</span><span class="token function">processOp</span><span class="token punctuation">(</span><span class="token class-name">Receiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">72</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>datanode<span class="token punctuation">.</span></span>DataXceiver</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DataXceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">226</span><span class="token punctuation">)</span>       at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A： 通过调整DN参数优化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dfs.datanode.socket.write.timeout <span class="token comment">#（加大）向datanode写入数据超时设置</span>dfs.client.socket-timeout <span class="token comment">#（加大） dfsclients与集群间进行网络通信的超时设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas教程</title>
      <link href="/2022/10/17/02-program/python/pandas-jiao-cheng/"/>
      <url>/2022/10/17/02-program/python/pandas-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Pandas简介"><a href="#Pandas简介" class="headerlink" title="Pandas简介"></a>Pandas简介</h1><p>Pandas是一个开放源码的Python库，它使用强大的数据结构提供高性能的数据操作。Pandas纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。Pandas提供了大量能使我们快速便捷处理数据的函数和方法；<br>Pandas用于广泛的领域，包括金融、经济、统计、分析等学术和商业领域。</p><h2 id="Pandas特点"><a href="#Pandas特点" class="headerlink" title="Pandas特点"></a>Pandas特点</h2><ul><li>快速高效的DataFrame对象，具有默认和自定义索引；</li><li>将数据从不同文件格式加载到内存中的数据对象的工具；</li><li>基于标签的切片、索引和大数据集子集；</li><li>删除或插入来自数据结构的列；</li><li>按数据分组进行聚合及转换；</li><li>高性能合并及数据加入；</li><li>时间序列；<h2 id="Pandas数据结构"><a href="#Pandas数据结构" class="headerlink" title="Pandas数据结构"></a>Pandas数据结构</h2></li><li><code>Series</code>：一维数组，与Numpy中的一维array类似，与Python基本数据结构List也相近；Series可以保存不同数据类型，如字符串、Boolean、数字等；大小不可变；</li><li><code>Time-Series</code>：以时间为索引的Series；</li><li><code>DataFrame</code>：二维的表格型数据结构，可以理解为Series的容器；大小可变；</li><li><code>Panel</code>：三维数组，可以理解为DataFrame的容器；大小可变；<h1 id="Series序列"><a href="#Series序列" class="headerlink" title="Series序列"></a>Series序列</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> dtype<span class="token punctuation">,</span> copy<span class="token punctuation">)</span><span class="token comment"># data: 支持多种数据类型，如 ndarray、list、constants</span><span class="token comment"># index：索引值必须唯一，与data长度相同，默认为np.arange(n)</span><span class="token comment"># dtype：数据类型</span><span class="token comment"># copy：是否赋值数据，默认为false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Series创建"><a href="#Series创建" class="headerlink" title="Series创建"></a>Series创建</h2><ul><li><p>创建空的Series</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pds <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>从ndarray创建一个Series</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果数据是ndarray，则传递的索引必须具有相同的长度；如果没有传递索引值，那么默认的索引范围为range(n)，其中n为数组的长度</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 不传索引值，采用默认索引值0 ~ len(data)-1</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span><span class="token number">0</span>    a<span class="token number">1</span>    b<span class="token number">2</span>    c<span class="token number">3</span>    ddtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span class="token comment"># 传递索引值</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span><span class="token number">100</span>    a<span class="token number">101</span>    b<span class="token number">102</span>    c<span class="token number">103</span>    ddtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>从字典创建一个Series</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字典作为输入传递，如果没有指定索引，则按排序从字典中提取键值作为索引，如果传递了索引，则按照索引顺序从字典中提取数值；</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token comment"># 不传索引</span>s<span class="token operator">=</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>a    <span class="token number">0</span>b    <span class="token number">1</span>c    <span class="token number">2</span>d    <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64<span class="token comment"># 传递索引,索引值为字典的key，如不存在则对应值为NaN填充</span>s<span class="token operator">=</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>a    <span class="token number">0.0</span>c    <span class="token number">2.0</span>d    <span class="token number">3.0</span>e    NaNdtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>从常量创建一个Series</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 当数据是常量时，必须提供索引，索引数量为该常量重复次数</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> nps <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span><span class="token number">0</span>    <span class="token number">1</span><span class="token number">1</span>    <span class="token number">1</span><span class="token number">2</span>    <span class="token number">1</span><span class="token number">3</span>    <span class="token number">1</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Series访问"><a href="#Series访问" class="headerlink" title="Series访问"></a>Series访问</h2><ul><li>根据索引位置访问<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pds<span class="token operator">=</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 访问第一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 输出结果如下</span><span class="token number">1</span><span class="token comment"># 访问前三个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 输出结果如下：</span>a    <span class="token number">1</span>b    <span class="token number">2</span>c    <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>s[a:] 为提取该索引后所有数据<br>s[a:b]为提取a和b索引之间的所有数据</p></blockquote><ul><li>根据索引访问数据<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pds<span class="token operator">=</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 访问指定索引数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 输出结果如下</span><span class="token number">1</span><span class="token comment"># 访问多个索引数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 输出结果如下</span>a    <span class="token number">1</span>c    <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>访问不存在索引将会抛出<code>KeyError</code>错误</p></blockquote><h1 id="DataFrame数据帧"><a href="#DataFrame数据帧" class="headerlink" title="DataFrame数据帧"></a>DataFrame数据帧</h1><p>DataFrame是二维的数据结构，它包含一组有序的列，每列可以是不同的数据类型，DataFrame既有行索引，也有列索引，它可以看成是Series组成的字典，不过Series公用一个索引；<br>DataFrame的功能特点为：</p><ul><li>不同列可以是不同数据类型；</li><li>大小可变；</li><li>含有行索引与列索引；</li><li>可以对行和列执行算术运算；</li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/XEDElg.png" alt="XEDElg"><h2 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pandas<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> dtype<span class="token punctuation">,</span> copy<span class="token punctuation">)</span><span class="token comment"># data: 支持多种数据类型，如ndarray、series、map、lists、dict、constant或DataFrame</span><span class="token comment"># index：行标签，如果没有传递索引值，默认为np.arrange(n)</span><span class="token comment"># columns：列标签，如果没有传递索引值，默认为np.arrange(n)</span><span class="token comment"># dtype：每列的数据类型</span><span class="token comment"># copy：是否赋值数据，默认为False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DataFrame创建"><a href="#DataFrame创建" class="headerlink" title="DataFrame创建"></a>DataFrame创建</h2><ul><li><p>创建一个空的DataFrame</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>Empty  DataFrameColumns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Index<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>从列表创建DataFrame</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 一维列表</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>   <span class="token number">0</span><span class="token number">0</span>  <span class="token number">1</span><span class="token number">1</span>  <span class="token number">2</span><span class="token number">2</span>  <span class="token number">3</span><span class="token number">3</span>  <span class="token number">4</span><span class="token number">4</span>  <span class="token number">5</span><span class="token comment"># 二维列表，指定列名</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Alex'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'Clarke'</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">]</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>     Name  Age<span class="token number">0</span>    Alex   <span class="token number">10</span><span class="token number">1</span>     Bob   <span class="token number">20</span><span class="token number">2</span>  Clarke   <span class="token number">13</span><span class="token comment"># 二维列表指定数据类型,指定数据类型会将数值类型转换为dtype指定的类型</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>     Name   Age<span class="token number">0</span>    Alex  <span class="token number">10.0</span><span class="token number">1</span>     Bob  <span class="token number">20.0</span><span class="token number">2</span>  Clarke  <span class="token number">13.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>从字典创建DataFrame</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 字典中的列表长度需保持一致</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> <span class="token string">'Ricky'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>    Name  Age<span class="token number">0</span>    Tom   <span class="token number">23</span><span class="token number">1</span>   Jack   <span class="token number">26</span><span class="token number">2</span>  Steve   <span class="token number">19</span><span class="token number">3</span>  Ricky   <span class="token number">30</span><span class="token comment"># 使用列表作为索引</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'rank1'</span><span class="token punctuation">,</span> <span class="token string">'rank2'</span><span class="token punctuation">,</span> <span class="token string">'rank3'</span><span class="token punctuation">,</span> <span class="token string">'rank4'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>        Name  Agerank1    Tom   <span class="token number">23</span>rank2   Jack   <span class="token number">26</span>rank3  Steve   <span class="token number">19</span>rank4  Ricky   <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>从字典列表创建DataFrame</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">]</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>    a   b     c<span class="token number">0</span>   <span class="token number">1</span>   <span class="token number">2</span>   NaN<span class="token number">1</span>  <span class="token number">10</span>  <span class="token number">20</span>  <span class="token number">30.0</span><span class="token comment"># 传入索引及列名,指定索引在字典key中不存在时，则数据为NaN</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'1st'</span><span class="token punctuation">,</span><span class="token string">'2nd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'aa'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>      a    aa1st   <span class="token number">1</span>   NaN2nd  <span class="token number">10</span>   NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>从Series创建DataFrame</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'one'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下,第一列会自动转换为浮点数</span>   one  twoa  <span class="token number">1.0</span>   <span class="token number">10</span>b  <span class="token number">2.0</span>   <span class="token number">20</span>c  <span class="token number">3.0</span>   <span class="token number">30</span>d  NaN   <span class="token number">40</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="DataFrame操作"><a href="#DataFrame操作" class="headerlink" title="DataFrame操作"></a>DataFrame操作</h2><ul><li><p>DataFrame读取列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'one'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 读取一列</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>a    <span class="token number">1.0</span>b    <span class="token number">2.0</span>c    <span class="token number">3.0</span>d    NaNName<span class="token punctuation">:</span> one<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span class="token comment"># 读取多列</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>   one  twoa  <span class="token number">1.0</span>   <span class="token number">10</span>b  <span class="token number">2.0</span>   <span class="token number">20</span>c  <span class="token number">3.0</span>   <span class="token number">30</span>d  NaN   <span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>DataFrame添加列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'one'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 添加列</span>df<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>   one  two  threea  <span class="token number">1.0</span>   <span class="token number">10</span>  <span class="token number">100.0</span>b  <span class="token number">2.0</span>   <span class="token number">20</span>  <span class="token number">200.0</span>c  <span class="token number">3.0</span>   <span class="token number">30</span>  <span class="token number">300.0</span>d  NaN   <span class="token number">40</span>    NaN<span class="token comment"># 列计算</span>df<span class="token punctuation">[</span><span class="token string">'four'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>   one  two  three   foura  <span class="token number">1.0</span>   <span class="token number">10</span>  <span class="token number">100.0</span>  <span class="token number">101.0</span>b  <span class="token number">2.0</span>   <span class="token number">20</span>  <span class="token number">200.0</span>  <span class="token number">202.0</span>c  <span class="token number">3.0</span>   <span class="token number">30</span>  <span class="token number">300.0</span>  <span class="token number">303.0</span>d  NaN   <span class="token number">40</span>    NaN    NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>DataFrame删除列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'one'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">del</span> df<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>   twoa   <span class="token number">10</span>b   <span class="token number">20</span>c   <span class="token number">30</span>d   <span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>DataFrame读取行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'one'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 通过loc函数接收行索引查询行，并将结果进行转置</span><span class="token comment">## 查询索引编号为b的行</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>one     <span class="token number">2.0</span>two    <span class="token number">20.0</span>Name<span class="token punctuation">:</span> b<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span class="token comment"># 通过iloc函数接收行索引位置查询行，并将结果转置</span><span class="token comment">## 查询第4行</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>one     NaNtwo    <span class="token number">40.0</span>Name<span class="token punctuation">:</span> d<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span class="token comment"># 通过切片查询多行</span><span class="token comment">## 查询第2至第4行（不含第4行）</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>   one  twob  <span class="token number">2.0</span>   <span class="token number">20</span>c  <span class="token number">3.0</span>   <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>DataFrame添加行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 类似数据库表插入</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>   a  b<span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span><span class="token number">1</span>  <span class="token number">3</span>  <span class="token number">4</span><span class="token number">0</span>  <span class="token number">5</span>  <span class="token number">6</span><span class="token number">1</span>  <span class="token number">7</span>  <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>DataFrame删除行</p><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pddf = pd.DataFrame([[1,2],[3,4]], columns = ['a','b'])df2 = pd.DataFrame([[5,6],[7,8]],columns = ['a','b'])df = df.append(df2)# 删除行索引为0的行df = df.drop(0)print(df)# 执行结果如下   a  b1  3  41  7  8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="DataFrame属性和方法"><a href="#DataFrame属性和方法" class="headerlink" title="DataFrame属性和方法"></a>DataFrame属性和方法</h1><p>DataFrame常用属性和方法如下：</p><p><code>T</code>：转置行与列；<br><code>axes</code>：返回一个列，行轴标签与列轴标签为唯一成员；<br><code>dtypes</code>：返回对象中的数据类型；<br><code>empty</code>：如果DataFrame为空，则返回True，即任何轴的长度均为0；<br><code>shape</code>：返回表示DataFrame的维度的数组；数组第一个元素为行数，第二个元素为列数；<br><code>size</code>：DataFrame中的元素个数；<br><code>head</code>：返回开头前N行；默认为5行；<br><code>tail</code>：返回最后N行；默认为5行；</p><h2 id="T方法"><a href="#T方法" class="headerlink" title="T方法"></a>T方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token string">'Ricky'</span><span class="token punctuation">,</span> <span class="token string">'Vin'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Age'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Rating'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.23</span><span class="token punctuation">,</span><span class="token number">3.33</span><span class="token punctuation">,</span><span class="token number">4.11</span><span class="token punctuation">,</span><span class="token number">4.66</span><span class="token punctuation">,</span><span class="token number">5.24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'******************'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>    Name  Age  Rating<span class="token number">0</span>    Tom   <span class="token number">24</span>    <span class="token number">4.23</span><span class="token number">1</span>  James   <span class="token number">26</span>    <span class="token number">3.33</span><span class="token number">2</span>  Ricky   <span class="token number">27</span>    <span class="token number">4.11</span><span class="token number">3</span>    Vin   <span class="token number">33</span>    <span class="token number">4.66</span><span class="token number">4</span>  Steve   <span class="token number">22</span>    <span class="token number">5.24</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>           <span class="token number">0</span>      <span class="token number">1</span>      <span class="token number">2</span>     <span class="token number">3</span>      <span class="token number">4</span>Name     Tom  James  Ricky   Vin  SteveAge       <span class="token number">24</span>     <span class="token number">26</span>     <span class="token number">27</span>    <span class="token number">33</span>     <span class="token number">22</span>Rating  <span class="token number">4.23</span>   <span class="token number">3.33</span>   <span class="token number">4.11</span>  <span class="token number">4.66</span>   <span class="token number">5.24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axes方法"><a href="#axes方法" class="headerlink" title="axes方法"></a>axes方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token string">'Ricky'</span><span class="token punctuation">,</span> <span class="token string">'Vin'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Age'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Rating'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.23</span><span class="token punctuation">,</span><span class="token number">3.33</span><span class="token punctuation">,</span><span class="token number">4.11</span><span class="token punctuation">,</span><span class="token number">4.66</span><span class="token punctuation">,</span><span class="token number">5.24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'******************'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>axes<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>    Name  Age  Rating<span class="token number">0</span>    Tom   <span class="token number">24</span>    <span class="token number">4.23</span><span class="token number">1</span>  James   <span class="token number">26</span>    <span class="token number">3.33</span><span class="token number">2</span>  Ricky   <span class="token number">27</span>    <span class="token number">4.11</span><span class="token number">3</span>    Vin   <span class="token number">33</span>    <span class="token number">4.66</span><span class="token number">4</span>  Steve   <span class="token number">22</span>    <span class="token number">5.24</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span>RangeIndex<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">,</span> <span class="token string">'Rating'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dtypes方法"><a href="#dtypes方法" class="headerlink" title="dtypes方法"></a>dtypes方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token string">'Ricky'</span><span class="token punctuation">,</span> <span class="token string">'Vin'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Age'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Rating'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.23</span><span class="token punctuation">,</span> <span class="token number">3.33</span><span class="token punctuation">,</span> <span class="token number">4.11</span><span class="token punctuation">,</span> <span class="token number">4.66</span><span class="token punctuation">,</span> <span class="token number">5.24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>dtypes<span class="token punctuation">)</span><span class="token comment"># 执行结果如下</span>Name       <span class="token builtin">object</span>Age         int64Rating    float64dtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="empty方法"><a href="#empty方法" class="headerlink" title="empty方法"></a>empty方法</h2><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd    data = {'Name': pd.Series(['Tom', 'James', 'Ricky', 'Vin', 'Steve']),   'Age': pd.Series([24, 26, 27, 33, 22]),   'Rating': pd.Series([4.23, 3.33, 4.11, 4.66, 5.24])}  df = pd.DataFrame(data)  print(df.empty)# 执行结果如下False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shape方法"><a href="#shape方法" class="headerlink" title="shape方法"></a>shape方法</h2><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd    data = {'Name': pd.Series(['Tom', 'James', 'Ricky', 'Vin', 'Steve']),   'Age': pd.Series([24, 26, 27, 33, 22]),   'Rating': pd.Series([4.23, 3.33, 4.11, 4.66, 5.24])}  df = pd.DataFrame(data)  print(df.shape)# 执行结果如下(5, 3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="size方法"><a href="#size方法" class="headerlink" title="size方法"></a>size方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token string">'Ricky'</span><span class="token punctuation">,</span> <span class="token string">'Vin'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Age'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Rating'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.23</span><span class="token punctuation">,</span> <span class="token number">3.33</span><span class="token punctuation">,</span> <span class="token number">4.11</span><span class="token punctuation">,</span> <span class="token number">4.66</span><span class="token punctuation">,</span> <span class="token number">5.24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment">#  执行结果如下</span><span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="values方法"><a href="#values方法" class="headerlink" title="values方法"></a>values方法</h2><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd    data = {'Name': pd.Series(['Tom', 'James', 'Ricky', 'Vin', 'Steve']),   'Age': pd.Series([24, 26, 27, 33, 22]),   'Rating': pd.Series([4.23, 3.33, 4.11, 4.66, 5.24])}  df = pd.DataFrame(data)  print(df.values)# 执行结果如下[['Tom' 24 4.23] ['James' 26 3.33] ['Ricky' 27 4.11] ['Vin' 33 4.66] ['Steve' 22 5.24]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="head与tail方法"><a href="#head与tail方法" class="headerlink" title="head与tail方法"></a>head与tail方法</h2><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd    data = {'Name': pd.Series(['Tom', 'James', 'Ricky', 'Vin', 'Steve']),   'Age': pd.Series([24, 26, 27, 33, 22]),   'Rating': pd.Series([4.23, 3.33, 4.11, 4.66, 5.24])}  df = pd.DataFrame(data)  print(df.head())# 执行结果如下    Name  Age  Rating0    Tom   24    4.231  James   26    3.33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DataFrame操作-1"><a href="#DataFrame操作-1" class="headerlink" title="DataFrame操作"></a>DataFrame操作</h1><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pdimport numpy as np# 自定义函数def adder(e1,e2): return e1+e2df = pd.DataFrame(np.random.randn(4,3),columns=['c1','c2','c3'])# 通过pipe函数对DataFrame所有元素加3df.pipe(adder,3)# 通过apply函数对DataFrame的行或列进行操作df.apply(np.mean)  # 计算列平均值df.apply(np.mean, axis=1) # 计算行平均值# 通过applymap对逐个元素进行操作print(df.applymap(lambda x: x * 100))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重置索引"><a href="#重置索引" class="headerlink" title="重置索引"></a>重置索引</h2><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd  import numpy as np    df = pd.DataFrame(np.random.randn(4, 3), columns=['c1', 'c2', 'c3'])    print(df)  # 根据列名与索引编号调整顺序df = df.reindex(index=[0, 1, 3], columns=['c2', 'c1', 'c3'])    print(df)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重命名标签"><a href="#重命名标签" class="headerlink" title="重命名标签"></a>重命名标签</h2><p>重命名行名与列名；<br>rename() 方法提供了一个 inplace 参数，默认值为 False，表示拷贝一份原数据，并在复制后的数据上做重命名操作。若 inplace=True 则表示在原数据的基础上重命名。</p><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd  import numpy as np    df = pd.DataFrame(np.random.randn(4, 3), columns=['c1', 'c2', 'c3'])    print(df)    df = df.rename(columns={'c1': 'A', 'c2': 'B', 'c3': 'B'}, index={0: 'row1', 1: 'row2', 2: 'row3', 3: 'row4'})    print(df)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>DataFrame支持含找索引、列名、列值进行排序；</p><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd  import numpy as np    # 行标签乱序排列，列标签乱序排列  unsorted_df = pd.DataFrame(np.random.randn(10, 2), index=[1, 6, 4, 2, 3, 5, 9, 8, 0, 7], columns=['col2', 'col1'])  # 按索引进行排序  sorted_df = unsorted_df.sort_index(ascending=False)    # 按列名进行排序  sorted_df = unsorted_df.sort_index(axis=1)    # 按列值进行排序  sorted_df = unsorted_df.sort_values(by='col1')    # 按指定算法进行排序  sorted_df = unsorted_df.sort_values(by='col1' ,kind='mergesort')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sort_values() 提供了参数<code>kind</code>用来指定排序算法。这里有三种排序算法：</p><ul><li>  mergesort</li><li>  heapsort</li><li>  quicksort<br>默认为 quicksort(快速排序) ，其中 Mergesort 归并排序是最稳定的算法。</li></ul><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>drop_duplicates()函数的语法格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># subset：表示要去重的列名，默认为None</span><span class="token comment"># keep：有三个可选参数，分别为first、last、False，</span><span class="token comment">## 默认为first，表示保留第一次出现的重复项，删除其他重复项</span><span class="token comment">## last表示保留最后一次出现的重复项，</span><span class="token comment">## False表示删除所有重复项</span><span class="token comment"># inplace：布尔值参数，默认为Flase表示删除重复项后返回一个副本，若为True则表示直接在原数据上删除重复项；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd    data = {        'A': [1, 0, 1, 1],   'B': [0, 2, 5, 0],   'C': [4, 0, 4, 4],   'D': [1, 0, 1, 1]  }  df = pd.DataFrame(data=data)  print(df)  # 只有当两行完全相同时才会被去重df = df.drop_duplicates()  print(df)# 指定列名后，将以指定列值作为是否重复进行判断df = df.drop_duplicates('B')  print(df)# 指定多列名后，将以指定列值作为是否重复进行判断df = df.drop_duplicates(['B','A'])  print(df)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据选取"><a href="#数据选取" class="headerlink" title="数据选取"></a>数据选取</h2><p>loc：基于标签索引选取数据，该函数具有以下访问方式</p><ul><li>一个标量标签，如loc[‘a’]</li><li>标签列表，如loc[ [‘a’,’b’,’c’,’d’],[‘A’] ]</li><li>标签切片，如loc[‘a’:’c’]，取值为前闭后闭区间</li><li>布尔数组，<br>iloc：基于整数索引选取数据，该函数具有以下访问方式</li><li>整数索引，如iloc[2:,]</li><li>整数列表，如iloc[ [1,3,5],[‘name’,’age’] ]</li><li>数值范围，如iloc[1:3,:]，取值为前闭后开区间</li></ul><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import numpy as np  import pandas as pd    # 创建一组数据  data = {'name': ['John', 'Mike', 'Mozla', 'Rose', 'David', 'Marry', 'Wansi', 'Sidy', 'Jack', 'Alic'],   'age': [20, 32, 29, np.nan, 15, 28, 21, 30, 37, 25],   'gender': [0, 0, 1, 1, 0, 1, 0, 0, 1, 1],   'isMarried': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}  label = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  df = pd.DataFrame(data, index=label)  print(df)    print('************')  # loc([行号],[列名]) print(df.loc['a':'d', ['name', 'age']])  # 等同于df.loc['a':'d']# iloc[行位置,[列位置]]print(df.iloc[1:3,[1,2]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>Pandas 提供的 merge() 函数能够进行高效的合并操作，merge 翻译为“合并”，指的是将两个 DataFrame 数据表按照指定的规则进行连接，最后拼接成一个新的 DataFrame 数据表。<br>merge() 函数的法格式如下：</p><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">pd.merge(left, right, how='inner', on=None, left_on=None, right_on=None,left_index=False, right_index=False, sort=True,suffixes=('_x', '_y'), copy=True)# left/right：两个不同的DataFrame对象# on：指定用于链接的键（列名称），该键需同时存在与两个DataFrame中；如未指定，则以两个DataFrame中所有相同类名作为关联键# left_on：指定left用于关联的键名，需与right_on配合使用# right_on：指定right用于关联的键名，需与left_on配合使用# left_index：默认为False，若为True则使用行索引进行关联，如果有多层索引，需层的数量与连接键的数量相等；# right_index：默认为False，如果True，则使用行索引作为连接键# how：指定合并的类型，默认为inner，可选参数为{'left','right','outer','inner'}# sort：默认为True，会将合并后数据进行排序，若设置为False，则按照how给定的参数值进行排序# suffixes：字符串组成的元组，当左右DataFrame存在相同列名时，可通过该参数在相同列名后添加后缀，默认为('_x','_y')# copy：默认为True，表示对数据进行复制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd    left = pd.DataFrame({      'id': [1, 2, 3, 4],   'Name': ['Smith', 'Maiki', 'Hunter', 'Hilen'],   'subject_id': ['sub1', 'sub2', 'sub4', 'sub6']})  right = pd.DataFrame({      'id': [1, 2, 3, 4],   'Name': ['William', 'Albert', 'Tony', 'Allen'],   'subject_id': ['sub2', 'sub4', 'sub3', 'sub6']})  print(left)  print(right)# 指定id作为关联键print(pd.merge(left,right,on='id'))# 指定多个字段作为关联键print(pd.merge(left,right,on=['id','subject_id']))# 指定关联方式print(pd.merge(left, right, on='subject_id', how="left"))  print(pd.merge(left, right, on='subject_id', how="right"))# 指定不同关联字段right = right.rename(columns={'id': 'seq'})    print(pd.merge(left, right, left_on='id', right_on='seq'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>Pandas 通过 concat() 函数能够轻松地将 Series 与 DataFrame 对象组合在一起，函数的语法格式如下：</p><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">pd.concat(objs,axis=0,join='outer',join_axes=None,ignore_index=False)# objs：一个序列或者Series、DataFrame对象# axis：表示在哪个轴方向上进行链接，默认axis=0表示行方向# join：指定链接方式，取值为{'inner','outer'}，默认为outer表示取并集，inner表示取交集# ignore_index：布尔值参数，默认为False，如果为True，表示不在链接的轴上使用索引# join_axes：表示索引对象的列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新增列（函数赋值）"><a href="#新增列（函数赋值）" class="headerlink" title="新增列（函数赋值）"></a>新增列（函数赋值）</h2><p>通过apply函数，根据已有列应用函数为新增列赋值；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd  <span class="token keyword">import</span>  hashlib    data5 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'four'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">'one'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">'three'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">'two'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data5<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abcde'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>          str1 <span class="token operator">=</span> x <span class="token operator">+</span> y          hash_md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>          hash_md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>          <span class="token keyword">return</span> hash_md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 其中添加if条件是为了避免出现error：must be convertible to a buffer, not Series</span>df<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> md5<span class="token punctuation">(</span>x<span class="token punctuation">.</span>four<span class="token punctuation">,</span>x<span class="token punctuation">.</span>one<span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token punctuation">.</span>four <span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment">##########################</span>   four  one  three  two                                <span class="token builtin">id</span>a     <span class="token number">4</span>    <span class="token number">1</span>      <span class="token number">3</span>    <span class="token number">2</span>  3e27b3aa6b89137cce48b3379a2a6610b     <span class="token number">5</span>    <span class="token number">2</span>      <span class="token number">4</span>    <span class="token number">3</span>  f5be5308b59e045b7c5b33ee8908cfb7c     <span class="token number">6</span>    <span class="token number">3</span>      <span class="token number">5</span>    <span class="token number">4</span>  fcf5af2016adf65a97b579a67730f1b6d     <span class="token number">7</span>    <span class="token number">4</span>      <span class="token number">6</span>    <span class="token number">5</span>  9e4a85729f78b2975359db968fd85c01e     <span class="token number">8</span>    <span class="token number">5</span>      <span class="token number">7</span>    <span class="token number">6</span>  e8db777ce92139db987e9ac3a2e92eec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd    a = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],   'B': ['B0', 'B1', 'B2', 'B3'],   'C': ['C0', 'C1', 'C2', 'C3'],   'D': ['D0', 'D1', 'D2', 'D3']},   index=[0, 1, 2, 3])  b = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],   'B': ['B4', 'B5', 'B6', 'B7'],   'C': ['C4', 'C5', 'C6', 'C7'],   'D': ['D1', 'D2', 'D5', 'D6']},   index=[4, 5, 6, 7])  c = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],   'B': ['B8', 'B9', 'B10', 'B7'],   'C': ['C9', 'C8', 'C7', 'C6'],   'D': ['D8', 'D5', 'D7', 'D6']},   index=[8, 9, 10, 11])  # 连接a与b,并对来自不同DataFrame的数据添加标签  print(pd.concat([a, b], keys=['x', 'y'], ignore_index=True))    # 横向连接  print(pd.concat([a, b], axis=1))    # 连接多个DataFrame  print(pd.concat[a, c, b])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>当使用 Pandas 做数据分析的时，需要读取事先准备好的数据集，这是做数据分析的第一步。Panda 提供了多种读取数据的方法：</p><ul><li>  read_csv() 用于读取文本文件</li><li>  read_json() 用于读取 json 文件</li><li>  read_sql_query() 读取 sql 语句结果</li><li>read_excel() 用于读取excel文件<br>read_excel() 方法，其语法格式如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>io<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              usecols<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> squeeze<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              converters<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> true_values<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> false_values<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              skiprows<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> nrows<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> na_values<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> parse_dates<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>              date_parser<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> thousands<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> skipfooter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>              convert_float<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwds<span class="token punctuation">)</span><span class="token comment"># io： 表示Excel文件路径</span><span class="token comment"># sheet_name：读取的工作表名称</span><span class="token comment"># header：指定作为列名的行，默认为0，即取第一行的值为列名；若数据不包含列名，则设定header=None；若设定header=2，则表示前两行为多重索引</span><span class="token comment"># names：一般适用于Excel缺少列名，或者需要重新定义列名的情况；names长度必须等于Excel表格列的长度，否则报错</span><span class="token comment"># index_col：用作行索引的列，可以是工作表的列名称，如index_col='列名'，也可以是整数或者列表</span><span class="token comment"># usecols：int或list类型，默认为None，表示需要读取所有列</span><span class="token comment"># squeeze：boolean，默认为False，如果解析的数据只包含一列，则返回一个Series</span><span class="token comment"># converters： 规定每一列的数据类型</span><span class="token comment"># skiprows：接受一个列表，表示跳过指定行数的数据，从头部第一列开始</span><span class="token comment"># nrows：要读取的行数</span><span class="token comment"># skipfooter：接受一个列表，省略指定行数的数据，从尾部最后一行开始</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd# 指定跳过前N行df1 = pandas.read_csv('C:/Users/Administrator/Desktop/hrd.csv',skiprows=2)df2 = pd.read_json('C:/Users/Administrator/Desktop/hrd.json')df3 = pd.read_sql_query("SELECT * FROM information",con)# 读取excel数据  # index_col选择前两列作为索引列  # 选择前三列数据，name列作为行索引  df = pd.read_excel('website.xlsx', index_col='name', index_col=[0, 1], usecols=[1, 2, 3])  # 处理未命名列，固定用法  df.columns = df.columns.str.replace('Unnamed.*', 'col_label')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件写出"><a href="#文件写出" class="headerlink" title="文件写出"></a>文件写出</h3><p>to_csv：Pandas 提供的 to_csv() 函数用于将 DataFrame 转换为 CSV 数据。如果想要把 CSV 数据写入文件，只需向函数传递一个文件对象即可。否则，CSV 数据将以字符串格式返回。<br>to_excel：通过 to_excel() 函数可以将 Dataframe 中的数据写入到 Excel 文件。如果想要把单个对象写入 Excel 文件，那么必须指定目标文件名；如果想要写入到多张工作表中，则需要创建一个带有目标文件名的<code>ExcelWriter</code>对象，并通过<code>sheet_name</code>参数依次指定工作表的名称。<br>to_ecxel() 语法格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DataFrame<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>excel_writer<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'Sheet1'</span><span class="token punctuation">,</span> na_rep<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> float_format<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index_label<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> startrow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> startcol<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> merge_cells<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> inf_rep<span class="token operator">=</span><span class="token string">'inf'</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> freeze_panes<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># excel_writer：文件路径或者ExcelWrite对象</span><span class="token comment"># sheet_name：指定要写入数据的工作表名称</span><span class="token comment"># na_rep：缺失值的表示形式</span><span class="token comment"># float_format：它是一个可选参数，用于格式化浮点数字符串</span><span class="token comment"># columns：指定要写入的列</span><span class="token comment"># header：写出每一列的列名，如果给出的是字符串列表，则表示列的别名</span><span class="token comment"># index：表示要写入的索引</span><span class="token comment"># index_label：引用索引列的列标签，如果未指定，并且header和index均为True，则使用索引名称；如果DF使用MultiIndex，则需要给出一个序列</span><span class="token comment"># startrow：初始写入的行位置，默认为0；表示引用左上角行单元格来存储DF</span><span class="token comment"># startcol：初始写入的列位置，默认为0；表示引用左上角的列单元格存储DF</span><span class="token comment"># engine：它是一个可选参数，用于指定要使用的引擎，可以是openpyxl或xlswriter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">import pandas as pd  #创建DataFrame数据  info_website = pd.DataFrame({'name': ['编程帮', 'c语言中文网', '微学苑', '92python'],   'rank': [1, 2, 3, 4],   'language': ['PHP', 'C', 'PHP','Python' ],   'url': ['www.bianchneg.com', 'c.bianchneg.net', 'www.weixueyuan.com','www.92python.com' ]})  #创建ExcelWrite对象  writer = pd.ExcelWriter('website.xlsx')  info_website.to_excel(writer)  writer.save()  print('输出成功')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python多版本管理</title>
      <link href="/2022/10/17/02-program/python/python-duo-ban-ben-guan-li/"/>
      <url>/2022/10/17/02-program/python/python-duo-ban-ben-guan-li/</url>
      
        <content type="html"><![CDATA[<p>在开发Python应用程序的时候，一般系统会默认安装一个<code>Python</code>。所有第三方的包都会被<code>pip</code>安装到<code>Python</code>的<code>site-packages</code>目录下。<br>如果我们需要开发多个应用程序，且基于不同<code>Python</code>版本，我们就需要使用第三方管理工具来为每个应用创建一套”隔离”的<code>Python</code>运行环境；<br>常见的第三方管理工具有<code>Anaconda</code>、<code>virtualenv</code>、<code>pyenv</code>、<code>miniconda</code>等；</p><h1 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h1><p>Anaconda就是可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本。Anaconda包含了conda、Python在内的超过180个科学包及其依赖项。<br>Anaconda包含：</p><ul><li>conda包</li><li>环境管理器</li><li>1000+开源库<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建新环境</span><span class="token comment">## env_name：新创建的环境名，建议以英文命名且不含空格</span><span class="token comment">## package_names： 安装在环境中的包名；</span>conda create <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>package_names<span class="token operator">&gt;</span><span class="token comment">## 创建名为python2的环境，安装2.7版本python，以及pandas包</span>conda create <span class="token parameter variable">--name</span> python2 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">2.7</span> pandas<span class="token comment"># 切换环境</span><span class="token comment">## linux/macOS</span>conda activate <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span><span class="token comment">## windows</span>activate <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span><span class="token comment"># 退出环境至root</span><span class="token comment">## linux/macOS</span> conda deactivate<span class="token comment">## windows</span>deactivate<span class="token comment"># 显示已创建环境</span>conda info <span class="token parameter variable">--envs</span> <span class="token punctuation">(</span>-e<span class="token punctuation">)</span>conda <span class="token function">env</span> list<span class="token comment"># 复制环境</span>conda create <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>new_env_name<span class="token operator">&gt;</span> <span class="token parameter variable">--clone</span> <span class="token operator">&lt;</span>src_env_name<span class="token operator">&gt;</span><span class="token comment"># 删除环境</span>conda remove <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span> <span class="token parameter variable">--all</span><span class="token comment"># 精确查找包</span>conda search --full-name  <span class="token operator">&lt;</span>package_full_name<span class="token operator">&gt;</span><span class="token comment"># 模糊查找</span>conda search <span class="token operator">&lt;</span>text<span class="token operator">&gt;</span><span class="token comment"># 查看已安装包</span>conda list<span class="token comment"># 当前环境安装包</span>conda <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span><span class="token comment"># 当前环境移除包</span>conda remove <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span><span class="token comment"># 指定环境安装包</span>conda <span class="token function">install</span> <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span><span class="token comment"># 指定环境移除包</span>conda remove <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span><span class="token comment"># 更新所有包</span>conda update <span class="token parameter variable">-all</span>conda upgrade <span class="token parameter variable">--all</span><span class="token comment"># 更新指定包</span>conda update <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span>conda upgrade <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span><span class="token comment"># 配置国内源</span>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h1><p>virtualenv用来创建独立的Python虚拟环境，可以将每个项目与其他项目独立开来，互不影响，解决了依赖包版本冲突的问题。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装virtualenv</span>pip <span class="token function">install</span> virtualenv<span class="token comment"># 创建虚拟环境</span>virtualenv <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span><span class="token comment"># 指定python版本创建虚拟环境</span>virtualenv <span class="token parameter variable">--python</span> /usr/local/bin/python3  <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span><span class="token comment"># 复制python已安装模块至虚拟环境</span>virtualenv --system-site-packages <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span><span class="token comment"># 创建纯净虚拟环境</span>virtualenv --no-site-package <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span><span class="token comment"># 启动虚拟环境</span><span class="token builtin class-name">source</span> <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span>/bin/activate<span class="token comment"># 退出虚拟环境</span>deactivate<span class="token comment"># 使用virtualenvwrapper</span>pip <span class="token function">install</span> virtualenvwrapper<span class="token comment">## 创建虚拟环境</span>mkvirtualenv  <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span><span class="token comment">## 显示虚拟环境列表</span>lsvirtualenv<span class="token comment">## 切换虚拟环境</span>workon <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h1><p>pyenv用于管理python多版本，例如安装多个版本python，如果使用windows系统则需要使用pyenv-win，pyenv可集成virtual-env插件；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span><span class="token comment">## linux</span><span class="token function">curl</span> https://pyenv.run <span class="token operator">|</span> <span class="token function">bash</span><span class="token comment">## macos</span>brew <span class="token function">install</span> pyenv <span class="token comment">## windows</span>https://github.com/pyenv-win/pyenv-win<span class="token comment"># 常用命令</span><span class="token comment">## 显示所有子命令</span>pyenv  commands<span class="token comment">## 显示已安装版本，带星号为默认使用版本</span>pyenv versions<span class="token comment">## 显示局部或全局python版本</span>pyenv version<span class="token comment">## 列举所有可安装的python版本</span>pyenv <span class="token function">install</span> <span class="token parameter variable">-l</span><span class="token comment">## 安装版本，安装在{pyenv home}/versions/</span>pyenv <span class="token function">install</span> xxx<span class="token comment">## 在指定目录切换版本，在该目录下使用{version}的python</span>pyenv <span class="token builtin class-name">local</span> <span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token comment">## 全局切换python版本</span>pyenv global <span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token comment">## 当前shell切换为{version}版本python</span>pyenv shell <span class="token punctuation">{</span>version<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pyenv-virtualenv插件"><a href="#pyenv-virtualenv插件" class="headerlink" title="pyenv-virtualenv插件"></a>pyenv-virtualenv插件</h2><p>pyenv-virtualenv是pyenv的virtualenv功能实现，pyenv用于管理多个python版本，而pyenv-virtualenv用于创建虚拟环境；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装插件</span>brew <span class="token function">install</span> pyenv-virtualenv<span class="token comment"># 环境变量</span><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>pyenv virtualenv-init -<span class="token variable">)</span></span>"</span><span class="token comment"># 创建虚拟环境</span><span class="token comment">## 创建一个名为demo，python版本为3.7.4版本的虚拟环境</span>pyenv virtualenv <span class="token number">3.7</span>.4  demo<span class="token comment">## 查看所有虚拟环境</span>pyenv virtualenvs<span class="token comment">## 删除虚拟环境</span>pyenv uninstall <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span><span class="token comment">## 激活虚拟环境</span>pyenv activate <span class="token operator">&lt;</span>env_name<span class="token operator">&gt;</span><span class="token comment">## 取消虚拟环境</span>pyenv deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="miniconda"><a href="#miniconda" class="headerlink" title="miniconda"></a>miniconda</h1><p>Miniconda是一款小巧的python环境管理工具，安装包大约只有50M多点，其安装程序中包含conda软件包管理器和Python，以及相关的必须依赖项；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><h2 id="Anaconda-1"><a href="#Anaconda-1" class="headerlink" title="Anaconda"></a>Anaconda</h2><p>Anaconda包含180+科学包机器依赖项的发行版本。其科学包包括： conda、numpy、scipy、ipython notebook等；</p><h2 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h2><p>conda是包机器依赖项和环境的管理工具；</p><ul><li>适用语言：python、R、Ruby、Lua、Scala、Java、JavaScript、C/C++等；</li><li>适用平台：Windows、macOS、Linux</li><li>用途：<ul><li>快速安装、运行和升级包及其依赖项；</li><li>便捷创建、保存、加载和切换环境；</li></ul></li><li>特点：<ul><li>显示所需其他依赖包；</li><li>安装时自动安装依赖项；</li><li>便捷切换不同独立环境；<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2>pip用于安装和管理软件包的管理器；</li></ul></li><li>不一定会显示所需依赖包；</li><li>可能会忽略依赖项安装，如果出现错误会在结果中提示；<h2 id="virtualenv-1"><a href="#virtualenv-1" class="headerlink" title="virtualenv"></a>virtualenv</h2>virtualenv用于创建一个独立的<code>Python</code>环境工具；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS介绍</title>
      <link href="/2022/10/17/02-program/qian-duan-bian-cheng/css-jie-shao/"/>
      <url>/2022/10/17/02-program/qian-duan-bian-cheng/css-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><p>CSS选择器一共包括四类：ID选择器，标签选择器、类选择器以及通配符选择器</p><h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><p>以#开头定义ID选择器，通过<code>id=</code>引用该样式，仅可使用一次；</p><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><p>以HTML标签名定义，多所有该标签名均有效；</p><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>以<code>.</code>开头，名称支持用户自定义，通过<code>class=</code>引用该样式定义,支持复用；</p><h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>定义名称为<code>*</code>,针对所有标签样式生效，无需单独引用；</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8" /&gt;&lt;link rel="icon" type="image/svg+xml" href="/vite.svg" /&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;&lt;title&gt;Vite + Vue + TS&lt;/title&gt;&lt;style&gt;/* id选择器 */#app {color: red;}/* 标签选择器 */div {color: gray;}  /* 类选择器 */.demo {color: gray;}/* 通配符选择器 */* {color: black;}  &lt;/style&gt;&lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt;id选择器，仅可调用一次&lt;/div&gt;&lt;div&gt;标签选择自动生效&lt;/div&gt;&lt;div class="demo"&gt;类选择器&lt;/div&gt;&lt;script type="module" src="/src/main.ts"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CSS元素显示模式"><a href="#CSS元素显示模式" class="headerlink" title="CSS元素显示模式"></a>CSS元素显示模式</h1><p>元素显示模式主要分为块元素和行元素；</p><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><ol><li>块元素比较霸道，自己独占一行；</li><li>块元素可自定义高度、宽度及内外边距大小；</li><li>块元素宽度默认与父级元素保持大小一致；</li><li>块元素是一个容器级盒子，里面可以放行级元素或块级元素；<blockquote><p>文字类标签内部不允许放块级元素，如<code>&lt;p&gt;</code>,<code>&lt;h&gt;</code>等；</p></blockquote></li></ol><h2 id="行元素"><a href="#行元素" class="headerlink" title="行元素"></a>行元素</h2><ol><li>相邻行元素在同一行上，一行可以显示多个行元素；</li><li>高、宽无法直接设置；</li><li>宽度为元素本身内容的宽度；</li><li>行元素内只能放文字或其他行元素；<blockquote><p>链接内不能再放链接</p></blockquote></li></ol><h2 id="行块元素互转"><a href="#行块元素互转" class="headerlink" title="行块元素互转"></a>行块元素互转</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token comment">/* 块转行元素*/</span><span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span> <span class="token punctuation">{</span><span class="token property">weight</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token comment">/* 行转块元素 */</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span</span> <span class="token punctuation">{</span><span class="token property">weight</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token comment">/* 行转行内块元素 */</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h1><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">{background-color: red;background-repeat: no-repeat;background-image: url('image/logo.png')/* 支持参数left right top bottom center，如省略参数，则默认省略方向为居中 *//* 支持精确单位指定，第一个参数为x轴坐标，第二个为y轴坐标（可省略），如省略代表垂直居中 *//* 参数与精确单位可混合使用 */background-position: top center;/* 定义背景图片是跟随滚动还是固定 */background-attachment: fixed;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上5个属性可合并在一个属性中：<code>background: 颜色 图片  是否重复  位置 是否固定</code></p></blockquote><h1 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h1><h2 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h2><p>相同选择器，冲突样式采用就近原则，不冲突则全部生效；与结构最近的样式将会生效；</p><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><p>子标签会继承父标签的颜色、字号等文字相关样式；<br>行高可继承，但父级需显示指定行高，行高不带单位，则为当前文字大小的对应倍数；</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>选择器相同，执行层叠性；<br>不同选择器，则按照权重执行；<br>| 选择器           | 权重    |<br>| —————- | ——- |<br>| 继承或通配选择器 | 0,0,0,0 |<br>| 元素选择器       | 0,0,0,1 |<br>| 类选择器         | 0,0,1,0 |<br>| ID选择器         | 0,1,0,0 |<br>| 行内样式         | 1,0,0,0 |<br>| !important                 |     无穷大    |</p><h3 id="权重叠加"><a href="#权重叠加" class="headerlink" title="权重叠加"></a>权重叠加</h3><p>复合选择器由复合层级各自的权重进行叠加计算后进行优先级比较；但不存在进位；</p><h1 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h1><p>CSS盒子模型的本质就是一个盒子，包括内外边距，边框及内容；</p><h2 id="边框-Border"><a href="#边框-Border" class="headerlink" title="边框-Border"></a>边框-Border</h2><p>边框由粗细、样式及颜色组成；</p><ul><li><code>border-width</code>：以像素为单位；</li><li><code>border-style</code>：由枚举参数指定，常用参数有：无-<code>none</code>，实线-<code>solid</code>，虚线-<code>dashed</code>，点线-<code>dotted</code>；</li><li><code>border-color</code>：支持枚举颜色及十六进制编码；</li><li><code>border-radius</code>：圆角边框，参数为内切圆半径长度或百分比（CSS3特性）；</li></ul><blockquote><ol><li><code>border-radius</code>设置为50%，则为圆形；</li><li><code>border-radius</code>设置为高度的一半，则为圆角矩形；</li><li><code>border-radius</code>后可接多个参数，与内外边距原理一致，可设置不同角的弧度；</li></ol></blockquote><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">/* 完整模式 */.demo {border-width: 10px;border-style: solid;border-color: red;border-radius：10px;}/* 简写模式 */.demo1 {border: 12px solid red;border-radius：10px;}/* 单独指定上边框 */.demo2 {border-top: 1px solid greed;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>边框宽度会影响盒子实际大小；</p></blockquote><h2 id="内边距-Padding"><a href="#内边距-Padding" class="headerlink" title="内边距-Padding"></a>内边距-Padding</h2><p>内边距是边框与内容之间的距离；</p><ul><li><code>padding-left</code>：距离左侧边框距离</li><li><code>padding-right</code>：距离右侧边框距离</li><li> <code>padding-top</code>：距离上侧边框距离</li><li> <code>padding-bottom</code>：距离下侧边框距离</li></ul><table><thead><tr><th>简写方式</th><th>表达意思</th></tr></thead><tbody><tr><td><code>padding： 5px</code></td><td>表示上下左右内边距都为5px</td></tr><tr><td><code>padding： 5px 10px</code></td><td>表示上下内边距为5px，左右内边距为10px</td></tr><tr><td><code>padding： 5px 10px 20px</code></td><td>表示上内边距为5px 左右内边距为10px 下内边距为20px</td></tr><tr><td><code>padding：5px 10px 20px 30px</code></td><td>表示从上开始按顺时针方向对应内边距</td></tr></tbody></table><blockquote><ol><li>内边距会影响盒子实际大小；</li><li>不指定盒子的width/height，盒子继承父级大小，而设置内边距后，向内坍缩，不影响盒子大小；</li></ol></blockquote><h2 id="外边距-Margin"><a href="#外边距-Margin" class="headerlink" title="外边距-Margin"></a>外边距-Margin</h2><p>外边距是盒子与盒子之间的距离；</p><ul><li><code>margin-left</code>：距离左侧盒子距离</li><li><code>margin-right</code>：距离右侧盒子距离</li><li> <code>margin-top</code>：距离上边盒子距离</li><li> <code>margin-bottom</code>：距离下边盒子距离<br>简写方式与<code>padding</code>一致；</li></ul><h3 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h3><h4 id="盒子水平居中"><a href="#盒子水平居中" class="headerlink" title="盒子水平居中"></a>盒子水平居中</h4><p>通过外边距让块级盒子水平居中；</p><ul><li>盒子必须设置宽度；</li><li>盒子左右外边距设置为<code>auto</code><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.demo</span> <span class="token punctuation">{</span>width：100px；margin：0 auto<span class="token punctuation">;</span>  <span class="token comment">/* 其中0 可以省略 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="行内元素水平居中"><a href="#行内元素水平居中" class="headerlink" title="行内元素水平居中"></a>行内元素水平居中</h4><p> 行内元素或行内块元素通过给其父元素添加<code>text-align: center</code>实现；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.demo {width：100px；margin：0 auto;  /* 其中0 可以省略 */text-align: center;}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>demo<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>行内元素水平居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="嵌套盒子"><a href="#嵌套盒子" class="headerlink" title="嵌套盒子"></a>嵌套盒子</h4><p>两个盒子存在嵌套关系时，父盒子与子盒子同时配置上外边距时，父元素会向下塌陷两个外边距较大值；<br>解决方案为：</p><ol><li>对父盒子设置边框；</li><li>对父盒子设置内边距；</li><li>对父盒子添加<code>overflow:hidden</code>；—常用</li><li>设置浮动、固定等，绝对定位盒子不存在塌陷问题；</li></ol><h4 id="通用样式"><a href="#通用样式" class="headerlink" title="通用样式"></a>通用样式</h4><ol><li>因不同浏览器对HTML标签设置了默认的内外边距，为避免不同浏览器兼容问题，可通过通配符选择器设置所有页面内外边距为0，有需要设置边距，可以在对应样式中进行覆盖；</li><li><code>li</code>标签自动添加的圆点多数情况需去除；</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">li</span> <span class="token punctuation">{</span><span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><p>盒子支持配置阴影属性；<br><code>box-shadow：水平位置 垂直位置 模糊程度 阴影大小  阴影颜色  内外阴影</code></p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">div: hover { box-shadow: 10px 10px 10px 4px gray inset}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h1><p>CSS布局传统模式有三种：标准流、浮动、定位；</p><h2 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h2><p>所谓标准流，就是HTML标签按照默认方式排列；</p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p><code>float</code>属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘；<br><code>float</code>：枚举值参数-none，left及right；</p><h3 id="浮动特性"><a href="#浮动特性" class="headerlink" title="浮动特性"></a>浮动特性</h3><ol><li>元素添加了浮动属性后，将脱离标准流的控制移动到指定的位置，俗称”脱标“；</li><li>浮动的盒子不在保留原先的位置；其原先占有的位置将被其他标准流进行补位，即浮动盒子与标准流将会出现层叠（浮动仅会与其后标准流出现层叠）；</li><li>如果多个盒子同时设置浮动，将按照盒子上沿对齐在一行内显示，但超出父级宽度，则另起一行显示；</li><li>浮动元素具备行内块属性；</li></ol><h3 id="典型应用-1"><a href="#典型应用-1" class="headerlink" title="典型应用"></a>典型应用</h3><ol><li>标准流父元素排列上下位置，内部元素采用浮动排列左右位置；</li><li>先设置盒子大小，再设置盒子位置；</li><li>同一层级盒子内所有元素需保持浮动一致开启或关闭；</li></ol><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>当父级不便于指定高度时，需通过清除浮动，让父级根据浮动的子盒子自动检测高度，避免影响父级同级盒子位置错乱；<br><code>clear</code>：参数为枚举值，[both、left、right]</p><h4 id="清除浮动方法"><a href="#清除浮动方法" class="headerlink" title="清除浮动方法"></a>清除浮动方法</h4><ol><li>额外标签法，也称为隔墙法；缺点为增加额外标签，结构化差；</li><li>父级添加<code>overflow</code>属性；缺点为无法显示溢出部分；</li><li>父级添加<code>after</code>伪元素；兼容性差；</li><li>父级添加双伪元素；兼容性差；</li></ol><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">.parent {width: 200px;overflow: hidden;}/* 伪元素 */.clearfix: after {content: "",display: block;height: 0;clear: both;visibility: hidden;}/* 双伪元素 */.clearfix:before, .clearfix:after {content: "";display: table;}clearfix {*zoom: 1;}.child1 {float: left;}.child2 {float: left;}.child3 {float: left;}.child4 {float: left;}/* 隔墙法，必须为块元素 */.clear {clear: both;}&lt;div class="parent clearfix"&gt;&lt;div class="child1"&gt;child1&lt;/div&gt;&lt;div class="child2"&gt;child2&lt;/div&gt;&lt;div class="child3"&gt;child3&lt;/div&gt;&lt;div class="child4"&gt;child4&lt;/div&gt;&lt;div class="clear"&gt;clear&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>定位 = 定位模式 + 边偏移；<br>定位模式用于指定一个元素在文档中的定位方式；<br>边偏移则决定了该元素的最终位置；</p><h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><p>静态定位是元素的默认定位方式，无定位的意思；<br>静态定位按照标准流摆放位置，无边偏移；</p><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>相对定位是元素在移动位置的时候，是相对于它原来的位置（未配置定位前的位置）来说的；<br>相对定位移动后，原来在标准流的位置继续占有，其他标准流仍然按照该位置存在元素对待；（不脱标）</p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>绝对定位是元素在移动位置的时候，相对于它的父级元素来说的；<br>如果没有父级元素或父级元素没有定位，则以浏览器为标准进行偏移；<br>如果父级元素有定位，则以最近一级有定位的父级元素为标准进行偏移；<br>决定定位移动后，不再占有标准流位置；（脱标）</p><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>固定定位是元素固定在浏览器可视区位置；主要使用场景为：在浏览器滚动时元素的位置不会变动；<br>以浏览器的可视窗口为标准进行偏移；<br>跟父元素没有关系；<br>不随滚动条变化；<br>不占有原先的位置；（脱标）</p><h3 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h3><p>粘性定位可以被认为是相对定位与固定定位的混合体；<br>以浏览器的可视区为参考点移动；<br>占有标准流位置；（不脱标）<br>必须添加<code>left、right、top、bottom</code>中一个才会生效；</p><h3 id="定位叠放"><a href="#定位叠放" class="headerlink" title="定位叠放"></a>定位叠放</h3><p>在使用定位布局时，可能出现盒子重叠现象，此时，可使用<code>z-index</code>来控制盒子的前后次序（z轴）</p><ul><li><code>z-index</code>取值为整数，包括正整数、0及负整数，默认为auto；数值越大，层级越高；</li><li> <code>z-index</code>数值相同，按照书写顺序，后来居上；</li></ul><h3 id="布局原则"><a href="#布局原则" class="headerlink" title="布局原则"></a>布局原则</h3><p>上下或左右排列，使用标准流布局；<br>多个块级元素使用浮动布局；<br>元素自由在盒子内移动使用定位布局；</p><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>子绝父相：子级元素使用决定定位，父级元素使用相对定位；</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">.parent {position: relative;top: 100px;}.child {position: absolute;right: -4px;}&lt;div class="parent"&gt;&lt;div class="child"&gt;&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>绝对定位水平居中：添加定位后，无法通过<code>margin： auto</code>实现水平居中；需通过算法实现；</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">.middle {position: absolute;left: 50%;   /* 左偏移父级宽度一半 */margin-left: -100px;  /* 自身宽度的一半 */  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浮动与标准流重叠：浮动元素会覆盖标准流的元素，但标准流中的文字或图片会自动偏移让出浮动元素长度，文字会图片会完整显示；浮动相当于文字环绕效果；</p><h2 id="元素显示与隐藏"><a href="#元素显示与隐藏" class="headerlink" title="元素显示与隐藏"></a>元素显示与隐藏</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p><code>display</code>设置元素如何显示，参数为枚举值；</p><ul><li><code>none</code>：隐藏（脱标）；</li><li><code>block</code>：转换该元素为块级元素并显示；</li></ul><h3 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h3><p><code>visibility</code>指定一个元素是可见还是隐藏，参数为枚举值；</p><ul><li><code>visible</code>：元素可见；</li><li><code>hidden</code>：元素隐藏（不脱标）；</li></ul><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p><code>overflow</code>指定一个元素溢出元素部分是否隐藏，参数为枚举值；</p><ul><li><code>auto</code>：存在溢出部分显示滚动条，没有溢出部分不显示滚动条；</li><li><code>hidden</code>：不显示溢出部分；</li><li><code>scroll</code>：总是显示滚动条，用于滚动查看溢出部分；</li></ul><h1 id="CSS属性书写顺序"><a href="#CSS属性书写顺序" class="headerlink" title="CSS属性书写顺序"></a>CSS属性书写顺序</h1><ol><li>布局定位属性：display、position、float、clear、visibility、overflow等，建议display第一个写；</li><li>自身属性：width、height、margin、padding、border、background；</li><li>文本属性：color、font、text-decoration、text-align、vertical-align、white-space、break-word；</li><li>其他属性/CSS3特性：content、cursor、border-radius、box-shadow、text-shadow；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iconfont使用</title>
      <link href="/2022/10/17/02-program/qian-duan-bian-cheng/iconfont-shi-yong/"/>
      <url>/2022/10/17/02-program/qian-duan-bian-cheng/iconfont-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>iconfont一般使用阿里巴巴矢量图标库,地址为：<a href="https://www.iconfont.cn/%EF%BC%9B">https://www.iconfont.cn/；</a><br>使用方式为：</p><ol><li>搜索需要的图标，加入项目；</li><li>通过资源管理–我的项目，进入到项目中，支持对加入项目中图标进行编辑；</li><li>支持在线或下载至本地使用；</li><li>以在线使用为例：<ol><li>创建css文件，内容为：<code>@import //at.alicdn.com/t/font_2995826_z9ck1auxb9.css</code></li><li>在<code>main.ts</code>文件中，添加引入代码<code>import css/iconfont.css</code></li><li>在需要使用图标的文件中，定位需要添加图标位置，添加<code>&lt;i class="iconfont icon-password"&gt;&lt;/i&gt;</code>；其中iconfont为项目中指定的Font Family，icon-password为指定的图标名字；</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iconfont </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alluxio介绍</title>
      <link href="/2022/10/17/03-hadoop/alluxio/alluxio-jie-shao/"/>
      <url>/2022/10/17/03-hadoop/alluxio/alluxio-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Alluxio是一个以内存为中心的分布式虚拟存储系统。Alluxio在上层计算框架和底层存储系统之间架起了桥梁，应用层只需要访问Alluxio即可以访问底层对接的任意存储系统的数据。Alluxio作者李浩源/范斌都是中国人。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/5hUV2k.png" alt="5hUV2k"><h1 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h1><ul><li>灵活的API</li><li>兼容Hadoop的HDFS文件系统接口</li><li>分级存储，自定义分配和回收策略</li><li>统一命名空间</li><li>完整的命令行</li><li>Web UI</li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol><li>Immutable data：存储层数据一旦写入，不可以改变，例如hdfs、oss等存储引擎；</li><li>Deterministic job：任务能够通过重试稳定复现，例如MapReduce、Spark、Presto等，使用recomputation处理失效恢复；</li><li>Locality based scheduling：任务调度基于数据的locality特性，如果不能满足，就会从磁盘IO问题转变为网络IO问题；</li><li>All data与Working set：底库数据集非常大，但实际访问的数据差不多可以存储内存中；</li><li>Program size与Data size：在大数据里面，类似的操作重复访问相同的数据，适合使用缓存技术来解决；<br>从技术的角度，如果数据存储主要使用RAM，不太可能通过传统的多副本技术来解决节点故障问题，在单副本限制下，作者通过lineage、checkpoint、recomputation来解决；</li></ol><ul><li>lineage技术解决节点失效后recomputation问题</li><li>checkpoint机制解决lineage链路过长效率低下问题</li><li>资源调度策略解决recomputation资源调度的效率和公平问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alluxio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hue集群对接</title>
      <link href="/2022/10/17/03-hadoop/cdh/hue-ji-qun-dui-jie/"/>
      <url>/2022/10/17/03-hadoop/cdh/hue-ji-qun-dui-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>HUE是Hadoop User Experience Hue是一个开源的Apache Hadoop UI系统，由Cloudera Desktop演化而来，最后Cloudera公司将其贡献给Apache基金会的Hadoop社区，它是基于Python Web框架Django实现的。<br>通过使用Hue我们可以在浏览器端的Web控制台上与Hadoop集群进行交互来分析处理数据，例如操作HDFS上的数据，运行MapReduce Job，执行Hive的SQL语句，浏览Hbase数据库等等。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h2><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">sudo yum install ant asciidoc cyrus-sasl-devel cyrus-sasl-gssapi cyrus-sasl-plain gcc gcc-c++ krb5-devel libffi-devel libxml2-devel libxslt-devel make mysql mysql-devel openldap-devel python-devel sqlite-devel gmp-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建数据湖</title>
      <link href="/2022/10/17/03-hadoop/shu-ju-hu/gou-jian-shu-ju-hu/"/>
      <url>/2022/10/17/03-hadoop/shu-ju-hu/gou-jian-shu-ju-hu/</url>
      
        <content type="html"><![CDATA[<h1 id="数据湖简介–Iceberg"><a href="#数据湖简介–Iceberg" class="headerlink" title="数据湖简介–Iceberg"></a>数据湖简介–Iceberg</h1><h2 id="数据湖生态"><a href="#数据湖生态" class="headerlink" title="数据湖生态"></a>数据湖生态</h2><img src="https://github.com/destinys/image_host/tree/master/uPic/k0IomQ.png" alt="k0IomQ"><p>如上图所示，对于一个成熟的数据湖生态而言：<br>首先，下层需具备海量存储的能力，常见的有对象存储、公有云存储以及HDFS;<br>在此之上，需要支持丰富的数据类型，包括非结构化的图像视频，半结构化的CSV、XML、Log以及结构化的数据库表；<br>除此之外，需要高效统一的元数据管理，使得计算引擎可以方便地索引到各种类型数据来做分析；<br>最后，需要支持丰富的计算引擎，包括Flink、Spark、Hive、Presto等，从而方便对接企业中已与的一些应用架构；</p><h2 id="结构化数据在数据湖上应用场景"><a href="#结构化数据在数据湖上应用场景" class="headerlink" title="结构化数据在数据湖上应用场景"></a>结构化数据在数据湖上应用场景</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/jlrI7E.png" alt="jlrI7E"><p>上图为一个典型的数据湖上应用场景；<br>数据源上可能会有各种数据，不同的数据源和不同格式。比如事务数据、日志、埋点信息、IOT等；这些数据经过数据流然后进入计算平台，这个时候它需要一个结构化的方案，把数据组织放到一个存储平台上，然后供后端的数据应用进行实时计算或实时查询；<br>该方案具备以下特征：<br>首先，数据源类型繁多，需要支持比较丰富的数据Schema的组织；<br>其次，数据注入过程需要支撑实时的数据查询，需要ACID保证，确保不会读到未完成的脏数据；<br>最后，数据需支持临时变更，如格式调整或新增列，需避免像传统数仓将数据读取处理后重新写入，而是需要一个轻量级的解决方案来达成需求；<br>Iceberg数据库的定位就在于实现这样的功能，于上对哦街计算平台，于下对接存储平台；</p><h2 id="结构化数据在数据库上解决方案"><a href="#结构化数据在数据库上解决方案" class="headerlink" title="结构化数据在数据库上解决方案"></a>结构化数据在数据库上解决方案</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/IjR1hE.png" alt="IjR1hE"><p>对于数据结构化组织，典型的解决方式是用数据库传统的组织方式；<br>如上图所示，上方有命名空间，数据库表的隔离；中间有多个表，可以提供多种数据Schema的保存；底下存放数据，表格需要提供ACID的特性，同时支持局部Schema的演进；</p><h2 id="Iceberg表数据组织架构"><a href="#Iceberg表数据组织架构" class="headerlink" title="Iceberg表数据组织架构"></a>Iceberg表数据组织架构</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/NCiabx.png" alt="NCiabx"><ul><li>快照Metadata：表格Schema、Partition、Partition spec、Manifest List路径、当前快照等；</li><li>Manifest List：Manifest File路径及其Partition、数据文件统计信息；</li><li>Manifest File：Data File路径及其每列数据上下边界；</li><li>Data File：实际数据内容，支持Parquet、ORC、Avro等数据格式；</li></ul><h2 id="Iceberg写入流程"><a href="#Iceberg写入流程" class="headerlink" title="Iceberg写入流程"></a>Iceberg写入流程</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/EmPgiu.png" alt="EmPgiu"><p>以Flink写入数据至iceberg举例：<br>Data Workers会从元数据上读取数据并解析，然后将记录交给iceberg进行存储；iceberg与常见数据库一样，也支持预定义分区，根据根据分区键将数据写入到不同分区，形成一些数据文件；同时会形成文件清单文件，并提交给Commit Worker；Commit Worker读取当前快照信息并与新接收到的文件清单文件合并，生成一个新的Manifest List以及后续元数据的标文件信息，之后进行提交，成功后形成新的快照；</p><h2 id="Iceberg读取流程"><a href="#Iceberg读取流程" class="headerlink" title="Iceberg读取流程"></a>Iceberg读取流程</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/9AjJOU.png" alt="9AjJOU"><p>以Flink从iceberg读取数据举例：<br>Flink Table scan worker发起scan操作，scan的时候按照树形结构，从根开始，找到当前快照或者用户指定的历史快照，然后从快照中拿出当前快照的Manifest List文件，根据当时保存的信息，过滤出满足查询条件的Manifest File；<br>根据Manifest File记录的信息，过滤出需要的Data Files，获取到Data File后转交给Record reader workers，由它读取Data Files中满足条件的Record并返回给上层调用；<br>iceberg文件已树形结构组织，不需要使用List，都是单路径指向，对于对象存储比较友好（因为对象存储在List上是比较消耗资源的操作）；</p><h2 id="Iceberg-Catalog功能介绍"><a href="#Iceberg-Catalog功能介绍" class="headerlink" title="Iceberg Catalog功能介绍"></a>Iceberg Catalog功能介绍</h2><p>Iceberg提供Catalog用良好的抽象来对接数据存储和元数据管理；任何一个存储，只要实现Iceberg的Catalog抽象，就与机会跟Iceberg对接，用来组织接入数据湖方案；<br><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/TO9cB4.png" alt="TO9cB4"></p><p>Catalog提供如下抽象：</p><ul><li>Iceberg定义了一系列角色文件；</li><li>支持File IO定制，包括读写与删除；</li><li>支持定制命名空间和表操作，也可称为元数据操作；</li><li>支持定制表的读取、扫描及提交<br>Catalog提供灵活的操作空间，方便对接各种下层的各种存储；</li></ul><h1 id="对象存储支撑Iceberg数据湖"><a href="#对象存储支撑Iceberg数据湖" class="headerlink" title="对象存储支撑Iceberg数据湖"></a>对象存储支撑Iceberg数据湖</h1><h2 id="Iceberg-Catalog实现"><a href="#Iceberg-Catalog实现" class="headerlink" title="Iceberg Catalog实现"></a>Iceberg Catalog实现</h2><p>目前社区Iceberg Catalog实现分为两部分，一是数据IO部分，二是元数据管理部分；<br><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/6yign9.png" alt="6yign9"></p><p>当前缺少面向私有对象存储的Catalog实现；</p><h2 id="对象存储与HDFS比较"><a href="#对象存储与HDFS比较" class="headerlink" title="对象存储与HDFS比较"></a>对象存储与HDFS比较</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/6fPc46.png" alt="6fPc46"><ul><li>对象存储在集群扩展性，小文件油耗，多站点部署和低存储开销上更加有优势；</li><li>HDFS提供最佳上传和原子性Rename；（这两个优势正是Iceberg需要的特性）</li></ul><h3 id="比较之：集群扩展性"><a href="#比较之：集群扩展性" class="headerlink" title="比较之：集群扩展性"></a>比较之：集群扩展性</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/IrCAFw.png" alt="IrCAFw"><p>HDFS架构使用单个NN保存所有元数据，这决定了它单节点的能力有限，所以在元数据方便没有横向扩展能力；<br>对象存储一般采用哈希方式，把元数据分割成各个块，把这个块交给不同Node上面的服务来进行管理，天然地它元数据上限会更高，甚至在极端情况下可以进行rehash，将块切的更细，交给更多的Node来管理元数据，达到扩展能力；</p><h3 id="比较之：小文件友好"><a href="#比较之：小文件友好" class="headerlink" title="比较之：小文件友好"></a>比较之：小文件友好</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/Y68WNz.png" alt="Y68WNz"><p>在大数据应用中，小文件越来越常见，并逐渐称为一个痛点；<br>HDFS基于架构的限制，小文件存储受限于NN内存等资源，虽然HDFS提供了Archive的方法来合并小文件，减少对NN的压力，但这需要额外增加复杂度，且非原生功能；<br>同样，小文件的TPS也是受限于NN的处理能力，因为它只有单个NN；对象存储的元数据是分布式存储和管理，流量可以很好地分布到各个Node上，这样单节点就可以存储海量的小文件；<br>当前，很多对象存储提供多介质、分层加速，提升小文件性能；</p><h3 id="比较之：多站点部署"><a href="#比较之：多站点部署" class="headerlink" title="比较之：多站点部署"></a>比较之：多站点部署</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/hx0sfM.png" alt="hx0sfM"><p>对象存储支持多站点部署全局命名空间支持丰富的规则配置<br>对象存储的多站点部署能力适用于两地三中心多活架构，而HDFS没有原生的多站点部署能力；</p><h3 id="比较之：低存储开销"><a href="#比较之：低存储开销" class="headerlink" title="比较之：低存储开销"></a>比较之：低存储开销</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/H7iAvZ.png" alt="H7iAvZ"><p>对于存储系统来说，为了适应随机的硬件故障，它一般会有副本机制来保护数据；常见的如三副本，将数据存储三份，分布到不同节点上，存储开销也是三倍，但可以容忍最高两副本故障而不丢失数据；另一种是Erasure Coding，简称EC，以10+2举例，将数据切分为10个数据块，然后用算法算出两个代码块，一共12个块；将12个块分布至四个节点上，存储开销是1.2倍，同样可以容忍最高两副本故障而不丢失数据，这种情况可以用剩余的10个块算出所有的数据，这样减少存储开销，同事达到故障容忍程度；<br>HDFS默认使用三副本机制，新版本HDFS也已经支持EC能力；它基于文件做EC，所以对小文件有天然的劣势，因为如果小文件的大小小于分块要求的大小时，它的开销就会比原定的开销更大，因为两个代码块这边是不能省的；在极端情况下，如果它的大小等同于单个代码块的大小，它就等同于三副本；同时，HDFS一旦启用EC，就不能再支持append、hflush、hsync等操作，这会极大地影响EC能够使用的场景；对象存储原生支持EC，对于小文件，它内部会把小文件合并成一个大的块再做EC，这样确保数据开销方面始终是恒定的，基于预先配置的策略。</p><h2 id="对象存储的挑战：数据追加与上传"><a href="#对象存储的挑战：数据追加与上传" class="headerlink" title="对象存储的挑战：数据追加与上传"></a>对象存储的挑战：数据追加与上传</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/vZpacl.png" alt="vZpacl"><p>在S3协议中，对象在上传时需要提供大小；<br>以S3标准为例，对象存储跟Iceberg对接时，S3标准对象存储不支持数据追加上传的接口，协议要求上传文件时提供文件大小，这种情况对于流失File IO传入不太友好；</p><h3 id="解决方案一：S3-Catalog数据追加上传-小文件缓存本地-内存"><a href="#解决方案一：S3-Catalog数据追加上传-小文件缓存本地-内存" class="headerlink" title="解决方案一：S3 Catalog数据追加上传-小文件缓存本地/内存"></a>解决方案一：S3 Catalog数据追加上传-小文件缓存本地/内存</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/ZQLMmQ.png" alt="ZQLMmQ"><p>对小文件，流失传入时先写入到本地缓存/内存中，等数据写完后，再上传到对象存储中；</p><h3 id="解决方案二：S3-Catalog数据追加上传-MPU分段上传大文件"><a href="#解决方案二：S3-Catalog数据追加上传-MPU分段上传大文件" class="headerlink" title="解决方案二：S3 Catalog数据追加上传-MPU分段上传大文件"></a>解决方案二：S3 Catalog数据追加上传-MPU分段上传大文件</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/v1N4lh.png" alt="v1N4lh"><p>对于大文件，使用S3标准定义的MPU分段上传；<br>一般分为几个步骤：<br>创建初始化的MPU，拿到一个Upload ID，然后给每一个分段赋予一个Upload ID以及一个编号，这些分块就可以并行上传；<br>上传完成后，还需要进行Complete操作，相当于通知系统，将基于同一个Upload ID以及所有的编号，从小到大排列起来，组成一个大文件；</p><p>MPU优缺点：</p><ul><li>MPU分片数量存在上限，S3标准里只有1W个分片；想支持大文件，分块不能太小，所以对于小分块的文件，依然要利用前面一种方法进行缓存上传；</li><li>MPU支持并行上传；假设进行一个异步上传，文件在缓存达到以后，不用等上一个分块上传成功，就可以继续缓存下一个，之后开始上传；当前面注入的速度足够块，后端异步提交就变成了并行操作，达到更快上传能力；<h2 id="对象存储挑战：原子提交"><a href="#对象存储挑战：原子提交" class="headerlink" title="对象存储挑战：原子提交"></a>对象存储挑战：原子提交</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/CxxVBv.png" alt="CxxVBv"></li></ul><p>数据注入过程，提交部分分为几个步骤，是一个线性事务；首先读取当前的快照版本，然后将这一次的文件清单合并，接着提交自己的新版本；类似编程常见的’i=i+1’，并不是原子操作，对象存储的标准里也没有提供这个能力；</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datalake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firewalld规则配置</title>
      <link href="/2022/10/17/01-linux/firewalld-gui-ze-pei-zhi/"/>
      <url>/2022/10/17/01-linux/firewalld-gui-ze-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="防火墙简介"><a href="#防火墙简介" class="headerlink" title="防火墙简介"></a>防火墙简介</h1><p>CentOS7中防火墙已经成为一个非常强大的功能，它对Iptables防火墙进行了升级；<br>firewalld是一款动态防火墙管理工具。所谓动态防火墙，是指firewalld在运行时，任何规则的变更都不需要对防火墙规则列表进行重新加载，只需要将变更部分保存并更新运行即可。<br>firewalld支持针对网络区域（zone）、服务（service）、端口（port）、网桥（eth）及富规则（rich-role）进行防火墙规则配置；同时支持支持IPv4和IPv6设置以及临时或永久规则配置；</p><h2 id="Zone"><a href="#Zone" class="headerlink" title="Zone"></a>Zone</h2><p>Zone一般翻译为网络区域，是firewalld引入的一个新的概念，网络区域定义了网络链接的可信级别；<br>firewalld内置了9种区域：</p><ul><li>drop：翻译为丢弃区域，丢弃所有传入流量，并且不产生包含ICMP的错误响应；</li><li>block：翻译为限制区域，拒绝所有传入流量，并给予回复；</li><li>public：翻译为公共区域，允许与ssh或dhcpv6-client预定义服务匹配的传入流量，其余均拒绝；public是网卡的默认区域</li><li>external：翻译为外部区域，允许与 ssh 预定义服务匹配的传入流量，其余均拒绝。 默认将通过此区域转发的IPv4传出流量将进行地址伪装，可用于为 路由器启用了伪装功能的外部网络；</li><li>dmz：翻译为隔离区或非军事区，该区域公开提供外部访问，允许与 ssh 预定义服务匹配的传入流量进入内部网络，其余均拒绝；</li><li>work：翻译为工作区域，允许与 ssh、ipp-client、dhcpv6-client 预定义服务匹配的传入流量，其余均拒绝；</li><li>home：翻译为家庭区域，允许与ssh、ipp-client、mdns、samba-client或dhcpv6-client预定义服务匹配的传入流量，其余均拒绝；</li><li>internal：翻译为内部区域，默认值时与home区域相同；</li><li>trusted：翻译为信任区域，可接受所有网络请求；</li></ul><h1 id="防火墙数据处理流程"><a href="#防火墙数据处理流程" class="headerlink" title="防火墙数据处理流程"></a>防火墙数据处理流程</h1><p>firewalld对于进入系统的数据包，会根据数据包的源IP地址或传入的网络接口等条件，将数据流量转入相应区域的防火墙规则。对于进入系统的数据包，首先检查的就是其源地址；</p><ol><li>若源地址关联到特定的区域（即源地址或接口绑定的区域有冲突），则执行该区域所制定的规则</li><li>若源地址未关联到特定的区域（即源地址或接口绑定的区域没有冲突），则使用传入网络接口的区域并执行该区域所制定的规则</li><li>若网络接口也未关联到特定的区域（即源地址或接口都没有绑定特定的某个区域），则使用默认区域并执行该区域所制定的规则</li><li>rich-rule规则：<ol><li>priority规则</li><li>日志规则</li><li>drop/reject规则</li><li>accept规则<blockquote><p>iptables规则优先级为按照精确匹配优先，上下顺序优先规则；与firewalld优先级区别较大；</p></blockquote></li></ol></li></ol><h1 id="firewalld管理"><a href="#firewalld管理" class="headerlink" title="firewalld管理"></a>firewalld管理</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 服务安装与启动</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> firewalldsystemctl <span class="token builtin class-name">umask</span> firewalldsystemctl start firewalld<span class="token comment"># 显示防火墙状态</span>firewall-cmd state<span class="token comment"># 查看全部配置</span>firewall-cmd --list-all<span class="token comment"># 重新加载防火墙规则</span>firewall-cmd <span class="token parameter variable">--reload</span><span class="token comment"># 设置默认区域</span>firewall-cmd --set-default-zone<span class="token operator">=</span>home<span class="token comment"># 修改网卡默认区域</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>external <span class="token parameter variable">--change</span> <span class="token assign-left variable">interface</span><span class="token operator">=</span>eno16777728<span class="token comment"># 添加服务规则 默认为临时规则</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public  --add-service<span class="token operator">=</span>http<span class="token comment"># 添加端口规则，指定permanent参数添加永久规则，未指定zone则添加至默认zone中</span>firewall-cmd <span class="token parameter variable">--permanent</span> --add-port<span class="token operator">=</span><span class="token number">8080</span>/tcp<span class="token comment"># 移除端口规则</span>firewall-cmd <span class="token parameter variable">--permanent</span> --remove-port<span class="token operator">=</span><span class="token number">8080</span>/tcp<span class="token comment"># 端口转发规则 将tcp协议888端口流量转发至192.168.10.10主机tcp协议22端口</span>firewall-cmd <span class="token parameter variable">--permanent</span> --add-forwardport<span class="token operator">=</span>port<span class="token operator">=</span><span class="token number">888</span>:proto<span class="token operator">=</span>tcp:toport<span class="token operator">=</span><span class="token number">22</span>:toaddr<span class="token operator">=</span><span class="token number">192.168</span>.10.10<span class="token comment"># 添加富规则，拒绝192.168.10.0/24网段ipv4协议ssh服务请求</span>firewall-cmd --add-rich-rule<span class="token operator">=</span><span class="token string">"rule family="</span>ipv4<span class="token string">" source address="</span><span class="token number">192.168</span>.10.0/24<span class="token string">" service name="</span><span class="token function">ssh</span><span class="token string">" reject"</span><span class="token comment"># 添加富规则 接受192.168.10.0/24网段ipv4协议1024-2000端口请求</span>firewall-cmd --add-rich-rule<span class="token operator">=</span><span class="token string">"rule family="</span>ipv4<span class="token string">" source address="</span><span class="token number">192.168</span>.10.0/24<span class="token string">" port protocol="</span>tcp<span class="token string">" port="</span><span class="token number">1024</span>-2000<span class="token string">"  accept"</span><span class="token comment"># 当前防火墙规则转为永久规则</span>firewall-cmd  --runtime-to-permanent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h1><ol><li>80端口仅允许集群内部访问，其他端口完全开放 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置默认public区域，开放所有端口，添加富规则指定80端口仅允许集群访问</span>firewall-cmd <span class="token parameter variable">--permanent</span> --add-port<span class="token operator">=</span><span class="token string">"1-65535"</span>firewall-cmd --add-rich-role<span class="token operator">=</span><span class="token string">'rule family="ipv4" source address="192.168.1.0/24" port protocol="tcp" port="80" accept'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firewall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unix及Mac命令</title>
      <link href="/2022/10/17/01-linux/unix-ji-mac-ming-ling/"/>
      <url>/2022/10/17/01-linux/unix-ji-mac-ming-ling/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -j：指定日期</span><span class="token comment"># -f：定义指定日期的格式</span><span class="token comment"># -v：定义日期加减法</span><span class="token function">date</span> -v+2d <span class="token parameter variable">-j</span> <span class="token parameter variable">-f</span> <span class="token string">"%Y%m%d"</span> <span class="token string">"20220101"</span> <span class="token string">"+%Y-%m-%d"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh限制登陆</title>
      <link href="/2022/10/17/01-linux/ssh-xian-zhi-deng-lu/"/>
      <url>/2022/10/17/01-linux/ssh-xian-zhi-deng-lu/</url>
      
        <content type="html"><![CDATA[<ul><li>限制指定IP地址登陆</li></ul><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># vim /etc/hosts.allow最后一行加入：  `sshd:192.168.0.*:allow //指定网段可用星号模糊匹配，单个ip则配置精确地址`  # vim /etc/hosts.deny最后一行加入：  `sshd:ALL //除了上面允许登录的IP，其它IP都拒绝登录`systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>限制指定用户登陆<pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># vim /etc/ssh/sshd_config最后一行加入  `AllowUsers keyso@192.168.0.222 root@192.168.1.135 //多个用户名@IP之间使用空格分隔`systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCrypt加密解密逻辑</title>
      <link href="/2022/10/17/02-program/javascript/bcrypt-jia-mi-jie-mi-luo-ji/"/>
      <url>/2022/10/17/02-program/javascript/bcrypt-jia-mi-jie-mi-luo-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="BCrypt算法"><a href="#BCrypt算法" class="headerlink" title="BCrypt算法"></a>BCrypt算法</h1><p>Bcrypt是一种单向加密算法，不可反向破解生成明文密码；</p><h2 id="BCrypt加密逻辑"><a href="#BCrypt加密逻辑" class="headerlink" title="BCrypt加密逻辑"></a>BCrypt加密逻辑</h2><p>Bcrypt有四个变量：</p><ul><li>saltRounds：一个正整数，表示hash杂凑次数，数值越高越安全，默认为10次；</li><li>myPassword：明文密码字符串</li><li>salt：盐，一个128bits随机字符串，即22个随机字符</li><li>myHash：对加盐后的明文密码进行hash算法</li></ul><p>每次明文密码传送过来后，对明文密码加盐并循环进行hash后，得到myHash，然后拼接BCrypt版本号+ salt + myHash得到最后的BCrypt密码；如下图：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/lX1GmE.png" alt="lX1GmE" style="zoom: 40%;">## BCrypt密码验证使用BCrypt进行密码验证时，是通过用户名从数据库中取出对应密文密码，从中提取salt，然后与传入的明文密码进行BCrypt加密，得到结果后与数据库中密文进行比对，结果一致则说明密码正确，否则密码错误；]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT简介</title>
      <link href="/2022/10/17/02-program/javascript/jwt-jian-jie/"/>
      <url>/2022/10/17/02-program/javascript/jwt-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Token"><a href="#什么是Token" class="headerlink" title="什么是Token"></a>什么是Token</h1><p>Token中文一般翻译为”令牌”，在计算机领域，一般指安全令牌，可分为以下几种类型：</p><ul><li>硬件令牌（Hardware Token）：比如日常生活中常见的银行发放的U盾即为硬件安全令牌；</li><li>虚拟令牌（Virtual Token）：与硬件令牌概念相对应，泛指通过软件实现的令牌，如常见的认证码、将军令等；</li><li>授权令牌（Authentication Token）：授权令牌用于限定你可以访问那些资源，如微信认证登陆第三方网站即为授权令牌，常见的授权机制为Oath2；</li><li>加密令牌（Cryptographic Token）：令牌的所有权通过某些加密机制来证明自己的某种数字资产，比特币即为一种加密令牌；</li></ul><p>Token的主要作用是验证身份的合法性，以允许用户可以操作资源；</p><h1 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h1><p>JWT是jsonwebtoken的缩写，是一个开放标准(<code>RFC 7519</code>)，它定义了一种<strong>紧凑的</strong>、<strong>自包含的</strong>方式，用于作为 JSON 对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是<strong>数字签名</strong>的。<br>通俗来说，就是说 <code>JWT</code> 是一个加密标准，当用户拿到这个加密 Token 的话，相当于拿到了一份证明自己身份的数字证书，就可以出入加密系统。我们把计算机系统想成公司，<code>JWT</code> 就是公司发给你的工牌，你拿着公司工牌，就可以刷卡进入园区、食堂吃饭结算、进入会议室等等公司需要认证授权的地方。<br>RFC 7519 规定了 JWT 的格式，我们看一下 JWT 长啥样。总体上来看，JWT 以 <code>.</code> 分隔成 <strong>3</strong> 段，示例一下：</p><pre class="line-numbers language-none"><code class="language-none">AAAAAA.BBBBBB.CCCCCC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li>header：翻译为头部，对应上面的AAAAAA部分；</li><li>payload：翻译为载荷，对应上面的BBBBBB部分；</li><li>signature：翻译为签名，对应上面的CCCCCC部分；<br>以开车来类比：</li><li>header：相当于车牌</li><li>payload：相当于乘客</li><li>signature：相当于行驶证</li></ul><h2 id="Header–车牌"><a href="#Header–车牌" class="headerlink" title="Header–车牌"></a>Header–车牌</h2><p>  Header是一个json对象，描述JWT的元数据，包含两部分：</p><ul><li><p>typ：表示该令牌的类型，在JWT中该值恒定为<code>JWT</code>；</p></li><li><p>alg：表示签名锁使用的加密算法<br>例如：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "typ":"JWT",  "alg":"HS256"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>常用的算法有 <code>HMAC SHA256</code> 或 <code>RSA</code></p></blockquote></li></ul><p>将这个 JSON 对象使用 <code>Base64URL</code> 算法转成字符串，即为AAAAAA</p><h2 id="Payload–乘客"><a href="#Payload–乘客" class="headerlink" title="Payload–乘客"></a>Payload–乘客</h2><p>Payload部分也是一个json对象，用来存放实际需要传输的数据；<br><code>JWT</code> 规定了 <code>7</code> 个官方字段（<strong>Registered claims</strong>）供选用：</p><ul><li><p>**<code>iss</code> (issuer)**：签发人</p></li><li><p>**<code>exp</code> (expiration time)**：过期时间</p></li><li><p>**<code>sub</code> (subject)**：主题</p></li><li><p>**<code>aud</code> (audience)**：受众</p></li><li><p>**<code>nbf</code> (Not Before)**：生效时间</p></li><li><p>**<code>iat</code> (Issued At)**：签发时间</p></li><li><p><strong><code>jti</code> (JWT ID)<strong>：编号<br>除了官方字段，你还可以在这个部分定义</strong>私有字段（Private claims）</strong>：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{ "sub": "1234567890","name": "John Doe", "admin": true }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这部分默认<strong>是不加密的</strong>、<strong>是不加密的</strong>、<strong>是不加密的</strong>（重要的话多说几遍），任何人都可以读到，所以不要把你敏感信息<strong>明文</strong>放在这个部分（除非你把内容先自行加密过）。<br>这个 JSON 对象也要使用 Base64URL 算法转成字符串，即为BBBBBB</p></li></ul><h2 id="Signature–驾驶证"><a href="#Signature–驾驶证" class="headerlink" title="Signature–驾驶证"></a>Signature–驾驶证</h2><p>  Signature是对前面两部分的签名，防止前面两部分数据被篡改；</p><ol><li><p>首先，需要指定一个<strong>密钥</strong>（<code>secret</code>）。<strong>这个密钥只有服务器才知道，不能泄露给用户</strong>。</p></li><li><p>然后，使用 <code>Header</code> 里面指定的<strong>签名算法</strong>（默认是 <code>HMAC SHA256</code>），按照下面的公式产生签名。</p><pre class="line-numbers language-none"><code class="language-none">HMACSHA256( base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面公式计算出来的结果即为CCCCCC<br>算出签名以后，我们把 <code>Header</code>、<code>Payload</code>、<code>Signature</code> 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔。</p></li></ol><p>至此你就获得了一个 <code>JWT</code></p><h2 id="Base64URL"><a href="#Base64URL" class="headerlink" title="Base64URL"></a>Base64URL</h2><p><code>Header</code> 和 <code>Payload</code> 串型化的算法是 <strong>Base64URL</strong>。<strong>这个算法跟 Base64 算法基本类似，但有一些小的不同</strong>。<br>JWT 作为一个令牌（token），有些场合可能会放到 <code>URL</code>（比如 <code>api.example.com/?token=xxx</code>）。Base64 有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：**<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code>**。</p><p>这就是 Base64URL 算法。</p><blockquote><p>JWT 使用 Base64 编码，<strong>注意这不是加密，只是把 JWT 的 json 格式去除，变成更加紧凑的形式</strong></p></blockquote><h1 id="JWT的实现"><a href="#JWT的实现" class="headerlink" title="JWT的实现"></a>JWT的实现</h1><h2 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h2><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">npm install jsonwebtoken -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="JWT生成"><a href="#JWT生成" class="headerlink" title="JWT生成"></a>JWT生成</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">/** 引入依赖包 **/ const jwt = require('jsonwebtoken');/** 用户登录信息 **/ let payload = {    id:"100",    name:"jack"}/** 加密秘钥，存储在服务器端 **/ let seccret = "1024";/** 调用工具生成 jwt **/ let token = jwt.sign(payload, seccret, {    /** 到期时间设置为 1 个小时 **/    /** 格式诸如 "7d"、"12h"，默认单位是 ms，因此 “120” = 120ms **/    expiresIn: "1h" ,    /** 签发人 **/     issuer: "Semon"});/** 输出 token **/ console.log('token:', token);// token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTUsInVzZXJuYW1lIjoiYWRtaW4iLCJpYXQiOjE2NDIzMzU0MTgsImV4cCI6MTY0Mjk0MDIxOCwiaXNzIjoiRFNDU1VQUE9SVCJ9.c5Z_O_XnDmlpa1f1boCtFp3XVHn3uFUKXzjsxxhUZRA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Token校验"><a href="#Token校验" class="headerlink" title="Token校验"></a>Token校验</h2><p>```JS<br>/** 校验是否合法 **/<br>jwt.verify(token, seccret, (error, decoded)=&gt;{<br>    if(error){<br>        console.log(error)<br>        return error<br>    }</p><pre><code>/** 输出校验结果 **/ console.log("校验结果：", JSON.stringify(decoded, null ,4))</code></pre><p>});```</p><h1 id="为什么需要JWT"><a href="#为什么需要JWT" class="headerlink" title="为什么需要JWT"></a>为什么需要JWT</h1><p>要想了解为什么，就需要先了解 <code>JWT</code> 的应用场景 —— 用于 Web 开发领域的身份验证。</p><h2 id="HTTP-是无状态协议"><a href="#HTTP-是无状态协议" class="headerlink" title="HTTP 是无状态协议"></a>HTTP 是无状态协议</h2><p>我们知道 HTTP 是 <strong>无状态协议</strong>，所以我们如果想让服务器知道我们是谁，并且根据之前我的信息简化我本次的操作的话，<strong>那么就需要服务器和客户端进行配合来实现 “有状态”</strong>。</p><p>如果不太理解，我们做一个类比。<br>我们去餐厅吃饭，哪怕我们每天都去，那边的服务员都无法记住我们昨天吃了什么，如果你跟他说 <strong>“服务员上菜，和昨天的一样，记到我帐上”</strong>，他做不到。<strong>他对任何人的服务态度、服务方式都是一样的，他既不会记得你曾经吃过什么，也不会知道你的账单是哪个，更不会去找你要账</strong>。</p><p>这个场景用到我们 Web 开发领域就是 HTTP 协议<strong>他只负责传输，既没有历史记录（你昨天吃了什么）也没有账户密码（你的账单）</strong>，只要你访问它就根据你的 URL 进行处理，处理完返回结果。你再次访问，他就再次返回。这就是无状态。</p><h2 id="基于-Session-的身份验证方式"><a href="#基于-Session-的身份验证方式" class="headerlink" title="基于 Session 的身份验证方式"></a>基于 Session 的身份验证方式</h2><p>如果我们想让它更智能就需要做一些额外的事情。</p><p>由于 HTTP 无法记录我们的任何状态，那就必须由服务器来记录了。</p><p>还是刚刚那个例子，如果服务员记性不好，我们就要在餐厅 <strong>建立会员机制</strong>，餐厅给我们一个 <strong>会员编号</strong> 来区分不同的会员，餐厅根据这个编号记录每个会员卡的消费情况、账单情况。每次我们只需要给服务员会员编号他就可以获取到我们的消费信息了。</p><p>在 Web 开发领域，就是 <code>Cookie</code> 和 <code>Session</code> 的关系，在我首次访问站点的时候，我们的服务器发送给浏览器一个 <code>Cookie</code>，浏览器记录了一个 <code>Cookie</code> 存储我们的 <code>sessionID</code>，通过这个 <code>sessionID</code> 可以在服务器找到一个 <code>Session</code>，里面可以记录各种自定义信息。</p><p><code>Cookie</code> 存储在浏览器，根据站点域名进行划分，不同域名的 <code>Cookie</code> 一般情况下是不会互相混用的。</p><p>这种传统的 <code>Session</code> 方式就是用户保留会员编号，然后由餐厅记录个人信息的方式。</p><p>这里所言过程的就是经典的 <code>Session</code> 机制的身份验证。</p><h2 id="基于-JWT-的身份验证方式"><a href="#基于-JWT-的身份验证方式" class="headerlink" title="基于 JWT 的身份验证方式"></a>基于 JWT 的身份验证方式</h2><p>了解了上面的 <code>Session</code> 机制，我们再理解 <code>JWT</code> 就变的特别简单。</p><p>我们需要在服务端存储为登录的用户生成的 <code>Session</code> ，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们还需要在服务端定期的去清理过期的 <code>Session</code>。</p><p><strong>用户有很多，服务器对每个用户都记录的话，对服务器的压力会比较大</strong>。</p><p>而 <code>JWT</code> 机制的出现恰好就弥补了这个不足。</p><p>还是以刚才餐厅会员为例，这次餐厅不给我们会员编号，而是直接给了我们一张 <strong>会员卡</strong> —— 卡中可以记录用户的一些信息，当我们拿卡去餐厅的时候，服务员一刷卡就可以获取我们的信息。</p><p>回到 Web开发领域，就是 <code>Cookie</code> 里面记录的内容的变化，<code>Cookie</code> 里面直接记录我们的具体消费信息，服务器拿到 <code>Cookie</code> 直接可以获得我们的相应信息，<strong>不再需要自行记录，也不需要查询</strong>，只需要“解码”和“验证”。</p><p>我们对比 <code>Session</code> 机制和 <code>JWT</code> 机制中 Cookie 存储内容的不同：</p><ul><li><code>Session</code> 机制： <strong>Cookie 只记录了 session 的 id</strong>，服务器获取到 cookie 之后需要根据这个 cookie 获取到对应的 session，然后在 session 里面获取用户信息。</li><li><code>JWT</code> 机制：<strong>在 cookie 里面存储更多信息，直接记录我们的具体的消息</strong>，服务器获取到 Cookie 之后只要解码也就获取这些信息，而不需要去查询数据库。<br>回到 <code>JWT</code> 机制，服务器为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。服务器就不保存任何 <code>Session</code> 数据了。这样就简化了服务器端架构的设计：</li></ul><ol><li>此时<strong>服务器变成无状态了</strong>，从而比较容易实现扩展</li><li>将原本服务器的存储成本转移到客户端存储，<strong>从而缓解了数据存储、管理的压力</strong></li></ol><p>从整体来看，JWT 机制的引入，其实是 <strong>去中心化</strong> 的一种具体实现，将原本服务器的存储成本转移到客户端存储，从而简介了服务器的 <code>Session</code> 管理设计，也让处理效率变得高效。</p><h2 id="常用的-JWT-的身份验证架构"><a href="#常用的-JWT-的身份验证架构" class="headerlink" title="常用的 JWT 的身份验证架构"></a>常用的 JWT 的身份验证架构</h2><p>通常基于 Token 的身份验证方法，存在3个角色：<code>authentication server</code> <strong>（登录／授权服务器）</strong>，<code>user</code><strong>（用户）</strong>，<code>app server</code> <strong>（应用服务器）</strong></p><ol><li>用户通过授权服务器的登录系统去登录，授权服务器把 <code>JWT</code> 传给用户。</li><li>用户客户端收到 <code>Token</code> 以后可以把它存储起来，<strong>比如放在 Cookie 里或者 Local Storage 里</strong></li><li>用户访问应用服务器的 <code>API</code> 时，带上 JWT</li><li>服务端收到请求，然后去验证客户端请求里面带着的 <code>Token</code>，如果验证成功，就向客户端返回请求的数据</li></ol><p>在这个过程中，<strong>只有身份验证服务器和应用服务器知道秘钥是什么</strong>。如果身份验证服务器和应用服务器完全独立，则应用服务器的 JWT 校验工作也可以交由认证服务器完成。（因此 JWT 也适合做单点登录功能）</p><p>可以看到，<strong>这是一套无状态的验证机制</strong>，不必在内存中保存用户状态。用户访问时自带 <code>JWT</code>，无需像传统应用使用 <code>Session</code>，应用可以做到更多的解耦和扩展。同时，JWT 还可以保存用户的数据，减少数据库访问。</p><h1 id="JWT-的优势和劣势"><a href="#JWT-的优势和劣势" class="headerlink" title="JWT 的优势和劣势"></a>JWT 的优势和劣势</h1><p>通过上面的介绍，相信你已经掌握了 <code>JWT</code> 实现原理和相关知识点。不过当你开心地将某项技术应用到你的应用中，你必须充分地知道这项技术的优势，以及<strong>它所带来的局限性和风险</strong>。</p><h2 id="使用-JWT-的优势"><a href="#使用-JWT-的优势" class="headerlink" title="使用 JWT 的优势"></a>使用 JWT 的优势</h2><p>使用JWT保护应用安全，至少可以获得以下优势：</p><ol><li><strong>更少的数据库连接</strong>：因其基于算法来实现身份认证，在使用JWT时查询数据的次数更少(更少的数据连接不等于不连接数据库)，降低服务器查询数据库的次数，可以获得更快的系统响应时间。</li><li><strong>构建更简单</strong>：如果应用程序本身是无状态的，那么选择 <code>JWT</code> 可以加快系统构建过程。</li><li><strong>跨服务调用</strong>：可以构建一个认证中心来处理用户身份认证和发放签名的工作，其他应用服务在后续的用户请求中不需要(理论上)在询问认证中心，可使用自有的公钥对用户签名进行验证。</li><li><strong>无状态</strong>：不需要向传统的Web应用那样将用户状态保存于Session中。</li></ol><h2 id="使用-JWT-的劣势"><a href="#使用-JWT-的劣势" class="headerlink" title="使用 JWT 的劣势"></a>使用 JWT 的劣势</h2><p>任何技术框架都有 <strong>自身的局限性</strong>，不可能一劳永逸，<code>JWT</code> 也不例外。它存在以下劣势：</p><ol><li><p><strong>严重依赖于秘钥</strong>：<code>JWT</code> 的生成与解析过程都需要依赖于秘钥(<code>Secret</code>)，且都以硬编码的方式存在于系统中(也有放在外部配置文件中的)。如果秘钥不小心泄露，系统的安全性将受到威胁。</p></li><li><p><strong>JWT 的最大缺点是无法作废已颁布的令牌</strong>：由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p></li><li><p><strong>服务端无法主动推送消息</strong>：服务端由于是无状态的，将无法使用像Session那样的方式推送消息到客户端，例如过期时间将至，服务端无法主动为用户续约，需要客户端向服务端发起续约请求。</p></li><li><p><strong>冗余的数据开销</strong>：一个 <code>JWT</code> 签名的大小要远比一个 <code>Session</code> ID 长很多，如果对有效载荷(<code>payload</code>)中的数据不做有效控制，其长度会成几何倍数增长，且在每一次请求时都需要负担额外的网络开销。如果放在 Local Storage，<strong>则可能受到 <code>XSS</code> 攻击</strong>。</p><h1 id="安全风险控制"><a href="#安全风险控制" class="headerlink" title="安全风险控制"></a>安全风险控制</h1><h2 id="使用-JWT-带来的风险"><a href="#使用-JWT-带来的风险" class="headerlink" title="使用 JWT 带来的风险"></a>使用 JWT 带来的风险</h2></li></ol><ul><li><strong>如果单纯依靠 JWT 解决用户认证的所有问题，那么系统的安全性将是脆弱的。</strong></li><li>由于 <code>JWT</code> 令牌存储于客户端中，一旦客户端存储的令牌发生泄露事件或者被攻击，攻击者就可以轻而易举的伪造用户身份去 <strong>修改/删除</strong> 系统资源。</li><li>虽然 <code>JWT</code> 自带过期时间，但在过期之前，攻击者可以肆无忌惮的操作系统数据。通过算法来校验用户身份合法性是 <code>JWT</code> 的优势，也是最大的弊端 —— <strong>太过于依赖算法</strong>。反观传统的用户认证措施，<strong>通常会包含多种组合，如手机验证码，人脸识别，语音识别，指纹锁等</strong>。</li><li>用户名和密码只做用户身份识别使用，当用户名和密码泄露后，在遇到敏感操作时(如新增，修改，删除，下载，上传)，都会采用其他方式对用户的合法性进行验证(发送验证码，邮箱验证码，指纹信息等)以确保数据安全。</li></ul><p>总而言之，与传统的身份验证方式相比，**<code>JWT</code> 过多的依赖于算法，缺乏灵活性，而且服务端往往是被动执行用户身份验证操作，无法及时对异常用户进行隔离**。（这是最为根本的特征，这是考试重点，可以做笔记了）</p><p>其实不管是基于 <code>Sessions</code> 还是基于 <code>JWT</code>，一旦密令被盗取，都是一件棘手的事情。下面介绍 <code>JWT</code> 发生令牌泄露是该采取什么样的措施(包含但不局限于此)。</p><h2 id="风险控制手段建议"><a href="#风险控制手段建议" class="headerlink" title="风险控制手段建议"></a>风险控制手段建议</h2><p>为了防止用户 <code>JWT</code> 令牌泄露而威胁系统安全，可以在以下方面完善系统功能：</p><ul><li><strong>清除已泄露的令牌</strong>：最直接也容易实现。将 <code>JWT</code> 令牌在服务端也存储一份，若发现有异常的令牌存在，则从服务端将此异常令牌清除。当用户发起请求时，强制用户重新进行身份验证，直至验证成功。服务端令牌的存储，可以借助 <code>Redis</code> 等缓存服务器进行管理，也可使用 Ehcache 将令牌信息存储在内存中。</li><li><strong>敏感操作保护</strong>：在涉及到诸如新增，修改，删除，上传，下载等敏感性操作时，定期(<code>30</code>分钟，<code>15</code>分钟甚至更短)检查用户身份，如手机验证码，扫描二维码等手段，确认操作者是用户本人。如果身份验证不通过，则终止请求，并要求重新验证用户身份信息。</li><li><strong>地域检查</strong>：通常用户会在一个相对固定的地理范围内访问应用程序，可以将地理位置信息作为辅助来甄别。如果发现用户A由经常所在的地区1变到了相对较远的地区2，或者频繁在多个地区间切换，不管用户有没有可能在短时间内在多个地域活动(一般不可能)，都应当终止当前请求<strong>，强制用户重新进行验证身份，颁发新的 JWT 令牌，并提醒(或要求)用户重置密码</strong>。</li><li><strong>监控请求频率</strong>：如果 <code>JWT</code> 密令被盗取，攻击者或通过某些工具伪造用户身份，高频次的对系统发送请求，以套取用户数据。针对这种情况，可以监控用户在单位时间内的请求次数，当单位时间内的请求次数超出预定阈值值，则判定该用户密令是有问题的。例如 1 秒内连续超过 5 次请求，则视为用户身份非法，服务端终止请求并强制将该用户的JWT 密令清除，然后回跳到认证中心对用户身份进行验证。</li><li><strong>客户端环境检查</strong>：对于一些移动端应用来说，可以将用户信息与设备(手机,平板)的机器码进行绑定，并存储于服务端中，当客户端发起请求时，可以先校验客户端的机器码与服务端的是否匹配，如果不匹配，则视为非法请求，并终止用户的后续请求。</li></ul><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><p>当你充分了解了 JWT 的技术细节、处理的场景，那么获得一套关于 JWT 使用的最佳实践，也就水到渠成：</p><ol><li>在使用 JWT 的时候一定要注意别携带敏感信息，令牌别暴露了</li><li>在 Web 应用中，别把 <code>JWT</code> 当做 <code>Session</code> 使用。如果想要 Session，绝大多数情况下，传统的 <code>Cookie-Session</code> 机制工作得更好</li><li><code>JWT</code> 适合一次性的命令认证，<strong>颁发一个有效期极短的 JWT，即使暴露了危险也很小</strong>，由于每次操作都会生成新的 JWT，因此也没必要保存 <code>JWT</code>，真正实现无状态。</li><li>为了减少盗用，<code>JWT</code> 不应该使用 <code>HTTP</code> 协议明码传输，要使用 <strong>HTTPS</strong> 协议传输。</li><li>当你建立一套基于 <code>JWT</code> 的用户验证的时候，一定要同时建立一套相对应的风控机制，确保风险发生时风险可控 &amp; 及时止损。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nest项目后端开发</title>
      <link href="/2022/10/17/02-program/javascript/nestjs-xiang-mu-hou-duan-kai-fa/"/>
      <url>/2022/10/17/02-program/javascript/nestjs-xiang-mu-hou-duan-kai-fa/</url>
      
        <content type="html"><![CDATA[<p>模块  module<br>控制器 controller<br>服务 service<br>中间件  middleware<br>守卫 guard</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ul><li>执行代码</li><li>更改请求/响应对象</li><li>结束请求-响应周期</li><li>调用堆栈下一个中间件</li><li>当前中间件未结束请求-响应周期，需调用next()将控制权传递给下一个中间件，否则请求会一直挂起；</li></ul><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><ul><li>转换：将输入的数据转换为需要的格式</li><li>验证：验证输入的数据，如果正确就返回，错误则抛出异常</li></ul><h2 id="守卫"><a href="#守卫" class="headerlink" title="守卫"></a>守卫</h2><p>守卫是单一职责的；它们根据运行出现的条件（如权限、角色、ACL等）来确定给定的请求是否由路由处理，简称授权；</p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul><li>在方法执行前/后加入自定义逻辑</li><li>转换/包装一个方法返回的结果</li><li>转换/包装一个方法抛出的异常</li><li>扩展基础方法的内容</li><li>根据情况覆盖/重写一个方法</li></ul><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建项目</span>nest new project-name<span class="token comment"># 创建子项目</span>nest g app sub-project-name<span class="token comment"># 创建公共库</span>nest g lib lib-name<span class="token comment"># 创建控制器</span>nest g co controller-name<span class="token comment"># 创建模块</span>nest g mo module-name<span class="token comment"># 创建服务</span>nest g s service-name<span class="token comment"># 创建中间件</span>nest g mid mid-name<span class="token comment"># 创建过滤器</span>nest g f common/filters/http-exception<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p>Nest内置状态码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">enum</span> HttpStatus <span class="token punctuation">{</span><span class="token constant">OK</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token comment">//成功响应</span><span class="token constant">CREATED</span> <span class="token operator">=</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token comment">// 该请求已成功，并因此创建了一个新的资源。这通常是在POST请求，或是某些PUT请求之后返回的响应。</span><span class="token constant">ACCEPTED</span> <span class="token operator">=</span> <span class="token number">202</span><span class="token punctuation">,</span><span class="token comment">// 请求已经接收到，但还未响应，没有结果</span><span class="token constant">PARTIAL_CONTENT</span> <span class="token operator">=</span> <span class="token number">206</span><span class="token punctuation">,</span> <span class="token comment">// 服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。</span><span class="token constant">AMBIGUOUS</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token comment">// 被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</span><span class="token constant">MOVED_PERMANENTLY</span> <span class="token operator">=</span> <span class="token number">301</span><span class="token punctuation">,</span> <span class="token comment">//被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一</span><span class="token constant">FOUND</span> <span class="token operator">=</span> <span class="token number">302</span><span class="token punctuation">,</span><span class="token comment">// 请求的资源现在临时从不同的 URI 响应请求。</span><span class="token constant">SEE_OTHER</span> <span class="token operator">=</span> <span class="token number">303</span><span class="token punctuation">,</span><span class="token comment">// 对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。</span><span class="token constant">NOT_MODIFIED</span> <span class="token operator">=</span> <span class="token number">304</span><span class="token punctuation">,</span> <span class="token comment">// 如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。</span><span class="token constant">BAD_REQUEST</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token comment">// 语义有误，当前请求无法被服务器理解；请求参数有误。</span><span class="token constant">UNAUTHORIZED</span> <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span><span class="token comment">// 当前请求需要用户验证。</span><span class="token constant">FORBIDDEN</span> <span class="token operator">=</span> <span class="token number">403</span><span class="token punctuation">,</span><span class="token comment">// 服务器已经理解请求，但是拒绝执行它。</span><span class="token constant">NOT_FOUND</span> <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">,</span><span class="token comment">// 请求失败，请求所希望得到的资源未被在服务器上发现。</span><span class="token constant">METHOD_NOT_ALLOWED</span> <span class="token operator">=</span> <span class="token number">405</span><span class="token punctuation">,</span><span class="token comment">// 请求行中指定的请求方法不能被用于请求相应的资源</span><span class="token constant">PROXY_AUTHENTICATION_REQUIRED</span> <span class="token operator">=</span> <span class="token number">407</span><span class="token punctuation">,</span> <span class="token comment">//与401响应类似，只不过客户端必须在代理服务器上进行身份验证。</span><span class="token constant">REQUEST_TIMEOUT</span> <span class="token operator">=</span> <span class="token number">408</span><span class="token punctuation">,</span><span class="token comment">// 请求超时</span><span class="token constant">CONFLICT</span> <span class="token operator">=</span> <span class="token number">409</span><span class="token punctuation">,</span><span class="token comment">// 由于和被请求的资源的当前状态之间存在冲突，请求无法完成。</span><span class="token constant">INTERNAL_SERVER_ERROR</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token comment">// 服务器遇到了不知道如何处理的情况。</span><span class="token constant">NOT_IMPLEMENTED</span> <span class="token operator">=</span> <span class="token number">501</span><span class="token punctuation">,</span><span class="token comment">// 此请求方法不被服务器支持且无法被处理。</span><span class="token constant">BAD_GATEWAY</span> <span class="token operator">=</span> <span class="token number">502</span><span class="token punctuation">,</span><span class="token comment">// 此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</span><span class="token constant">SERVICE_UNAVAILABLE</span> <span class="token operator">=</span> <span class="token number">503</span><span class="token punctuation">,</span><span class="token comment">// 服务器没有准备好处理请求。</span><span class="token constant">GATEWAY_TIMEOUT</span> <span class="token operator">=</span> <span class="token number">504</span><span class="token punctuation">,</span><span class="token comment">// 当服务器作为网关，不能及时得到响应时返回此错误代码。</span><span class="token constant">HTTP_VERSION_NOT_SUPPORTED</span> <span class="token operator">=</span> <span class="token number">505</span> <span class="token comment">// 服务器不支持请求中所使用的HTTP协议版本。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTTP响应状态码：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// CatsModule</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CatsController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./cats.controller'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CatsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./cats.service'</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>    imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    controllers<span class="token operator">:</span> <span class="token punctuation">[</span>CatsController<span class="token punctuation">]</span><span class="token punctuation">,</span>    providers<span class="token operator">:</span> <span class="token punctuation">[</span>CatsService<span class="token punctuation">]</span><span class="token punctuation">,</span>    exports<span class="token operator">:</span> <span class="token punctuation">[</span>CatsService<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CatsModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报错提示：</p><pre class="line-numbers language-none"><code class="language-none">[ExceptionHandler] Nest can't resolve dependencies of the CatsController (?). Please verify whether [0] argument is available in the current context.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误的意思是说，Nest不能处理<code>CatsController</code>中的依赖关系，即他无法自动的将<code>CatsController</code>构造器中的第一个依赖注入到IOC容器中；<br>这里的当前上下文指的就是 <code>CatsModule</code>，因为 <code>CatsController</code> 要依赖 <code>CatsService</code> 来完成其功能，但是在当前上下文又找不到 <code>CatsService</code> 这个实例(对象)，所以 Nest 在启动的时候才会出现这种错误。</p><p>通俗的讲，如果要在 <code>controllers</code> 中的类使用当前模块的其他提供者(<code>Provider</code>)，那么就必须将其增加到当前模块的 <code>providers</code> 中去。</p><p>上述只是说明了在一个模块中，如何让 <code>Module</code> 去管理 <code>controllers</code> 和 <code>providers</code> 的依赖关系。但是，如果当前模块的 <code>Controller</code> 和 <code>Provider</code> 需要注入其他模块中的 <code>Provider</code> 呢？如果当前模块又需要给其他模块提供他的 <code>Provider</code> 呢？</p><p>这里就要用到 <code>@Module()</code> 注解中的 <code>imports</code> 和 <code>exports</code> 了，<code>imports</code> 告诉当前模块的 <code>Controller</code> 和 <code>Provider</code> 注入的非当前模块的 <code>Provider</code> 来自于哪个模块，而 <code>exports</code> 告诉当前模块要将他的哪些 <code>Provider</code> 提供给其他模块。</p><p>注意：如果要在当前模块使用其他模块的提供者，那么就必须在被导入的其他模块中，将该提供者放入 <code>exports</code> 数组中去。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nestjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PM2服务部署</title>
      <link href="/2022/10/17/02-program/javascript/pm2-fu-wu-bu-shu/"/>
      <url>/2022/10/17/02-program/javascript/pm2-fu-wu-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="PM2常用命令"><a href="#PM2常用命令" class="headerlink" title="PM2常用命令"></a>PM2常用命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> pm2 <span class="token parameter variable">-g</span> <span class="token comment"># 命令行安装 pm2</span>$ pm2 start app.js <span class="token parameter variable">-i</span> <span class="token number">4</span> <span class="token comment">#后台运行pm2，启动4个app.js</span>                                <span class="token comment"># 也可以把'max' 参数传递给 start</span>                                <span class="token comment"># 正确的进程数目依赖于Cpu的核心数目</span>$ pm2 start app.js <span class="token parameter variable">--name</span> my-api <span class="token comment"># 命名进程</span>$ pm2 list <span class="token comment"># 显示所有进程状态</span>$ pm2 monit <span class="token comment"># 监视所有进程</span>$ pm2 logs <span class="token comment"># 显示所有进程日志</span>$ pm2 stop all <span class="token comment"># 停止所有进程</span>$ pm2 restart all <span class="token comment"># 重启所有进程</span>$ pm2 reload all <span class="token comment"># 0秒停机重载进程 (用于 NETWORKED 进程)</span>$ pm2 stop <span class="token number">0</span> <span class="token comment"># 停止指定的进程</span>$ pm2 restart <span class="token number">0</span> <span class="token comment"># 重启指定的进程</span>$ pm2 startup <span class="token comment"># 产生 init 脚本 保持进程活着</span>$ pm2 web <span class="token comment"># 运行健壮的 computer API endpoint ([http://localhost:9615](http://localhost:9615/))</span>$ pm2 delete <span class="token number">0</span> <span class="token comment"># 杀死指定的进程</span>$ pm2 delete all <span class="token comment"># 杀死全部进程</span>运行进程的不同方式：$ pm2 start app.js <span class="token parameter variable">-i</span> max <span class="token comment"># 根据有效CPU数目启动最大进程数目</span>$ pm2 start app.js <span class="token parameter variable">-i</span> <span class="token number">3</span> <span class="token comment"># 启动3个进程</span>$ pm2 start app.js <span class="token parameter variable">-x</span> <span class="token comment">#用fork模式启动 app.js 而不是使用 cluster</span>$ pm2 start app.js <span class="token parameter variable">-x</span> -- <span class="token parameter variable">-a</span> <span class="token number">23</span> <span class="token comment"># 用fork模式启动 app.js 并且传递参数 (-a 23)</span>$ pm2 start app.js <span class="token parameter variable">--name</span> serverone <span class="token comment"># 启动一个进程并把它命名为 serverone</span>$ pm2 stop serverone <span class="token comment"># 停止 serverone 进程</span>$ pm2 start app.json <span class="token comment"># 启动进程, 在 app.json里设置选项</span>$ pm2 start app.js <span class="token parameter variable">-i</span> max -- <span class="token parameter variable">-a</span> <span class="token number">23</span> <span class="token comment">#在--之后给 app.js 传递参数</span>$ pm2 start app.js <span class="token parameter variable">-i</span> max <span class="token parameter variable">-e</span> err.log <span class="token parameter variable">-o</span> out.log <span class="token comment"># 启动 并 生成一个配置文件</span>你也可以执行用其他语言编写的app <span class="token punctuation">(</span> fork 模式<span class="token punctuation">)</span>:$ pm2 start my-bash-script.sh <span class="token parameter variable">-x</span> <span class="token parameter variable">--interpreter</span> <span class="token function">bash</span>$ pm2 start my-python-script.py <span class="token parameter variable">-x</span> <span class="token parameter variable">--interpreter</span> python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="PM2配置"><a href="#PM2配置" class="headerlink" title="PM2配置"></a>PM2配置</h1><p>安装<code>pm2</code>后，可通过<code>pm2 init</code>或<code>pm2 ecosystem</code>来生成<code>pm2</code>初始化配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">"apps"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token comment">// 指定项目名称</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"be_frontend"</span><span class="token punctuation">,</span><span class="token comment">// 指定服务启动执行文件 </span><span class="token string-property property">"script"</span><span class="token operator">:</span> <span class="token string">'index.js'</span><span class="token punctuation">,</span><span class="token comment">// 指定服务根目录</span><span class="token string-property property">"cwd"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">.</span><span class="token comment">// 指定传递给脚本参数</span><span class="token string-property property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"--enable-logs"</span><span class="token punctuation">,</span> <span class="token string">"-n"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 指定脚本解释器</span><span class="token string-property property">"interpreter"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span> <span class="token comment">// 指定是否监听文件变化重启</span><span class="token string-property property">"watch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// 忽略监听文件列表</span><span class="token string-property property">"ignore_watch"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 指定服务启动模式，分为cluster和fork</span><span class="token string-property property">"exec_mode"</span><span class="token operator">:</span> <span class="token string">"fork"</span><span class="token punctuation">,</span><span class="token comment">// 集群模式启动实例个数，仅集群模式有效</span><span class="token string-property property">"instances"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token comment">// 应用可用最大内存，超出后自动重启</span><span class="token string-property property">"max_memory_restart"</span><span class="token operator">:</span> <span class="token string">"500M"</span><span class="token punctuation">,</span><span class="token comment">// 指定日志路径</span><span class="token string-property property">"out_file"</span><span class="token operator">:</span> <span class="token string">"/opt/wks/logs/app-out.log"</span><span class="token punctuation">,</span><span class="token string-property property">"error_file"</span><span class="token operator">:</span> <span class="token string">"/opt/wks/logs/app-error.log"</span><span class="token punctuation">,</span><span class="token comment">// 指定日志为追加模式，不创建新日志文件</span><span class="token string-property property">"merge_logs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// 指定日志时间格式</span><span class="token string-property property">"log_date_format"</span><span class="token operator">:</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">,</span><span class="token comment">// 最小运行时长，小于该时间则认为异常，自动进行重启</span><span class="token string-property property">"min_uptime"</span><span class="token operator">:</span> <span class="token string">"60s"</span><span class="token punctuation">,</span><span class="token comment">// 最大异常重启次数</span><span class="token string-property property">"max_restarts"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token string-property property">"autorestart"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// 仅支持集群模式，按crontab模式定期重启服务</span><span class="token string-property property">"cron_restart"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token comment">// 异常重启延迟时间</span><span class="token string-property property">"restart_delay"</span><span class="token operator">:</span> <span class="token string">"60s"</span><span class="token punctuation">,</span><span class="token comment">// 指定process.env环境变量参数</span><span class="token string-property property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"NODE_ENV"</span><span class="token operator">:</span> <span class="token string">"production"</span><span class="token punctuation">,</span><span class="token string-property property">"DATABASE_URL"</span><span class="token operator">:</span> <span class="token string">"DBHOST"</span><span class="token punctuation">}</span><span class="token comment">// 启动服务指定环境变量  等价于  pm2 start app.js -- env_production</span><span class="token string-property property">"env_production"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"NODE_ENV"</span><span class="token operator">:</span> <span class="token string">"prodiction"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string-property property">"env_development"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"NODE_ENV"</span><span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">deploy</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">production</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 远端用户</span><span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span><span class="token comment">// 远端主机地址</span><span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">"59.111.211.37"</span><span class="token punctuation">,</span><span class="token comment">// git分支</span><span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token string">"dsc_as/master"</span><span class="token punctuation">,</span><span class="token comment">// git地址</span><span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">"git@github.com:destinys/dsc_as.git"</span><span class="token punctuation">,</span><span class="token comment">// 远端文件路径</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/opt/wks/app"</span><span class="token punctuation">,</span><span class="token comment">// 部署后动作</span>  post<span class="token operator">-</span>deploy<span class="token operator">:</span><span class="token string">"npm install &amp;&amp; pm2 reload ecosystem.config.js --env production"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过配置文件启动服务： <code>pm2 start filename.json</code></p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p>pm2 进程本身日志默认存储路径为<code>$HOME/.pm2/pm2.log</code><br>pm2默认为启动的每个服务生成两个日志文件：普通日志和错误日志，存储路径为<code>$HOME/.pm2/logs/服务名-out.log</code>以及<code>$HOME/.pm2/logs/服务名-error.log</code></p><p>可通过配置文件变更默认存储路径：</p><pre class="line-numbers language-none"><code class="language-none">output: '/opt/wks/logs/xxx-out.log'error: '/opt/wks/logs/xxx-error.log'merge_logs: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="合并日志并滚动"><a href="#合并日志并滚动" class="headerlink" title="合并日志并滚动"></a>合并日志并滚动</h3><p>通过pm2-logrotate模块实现；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pm2 <span class="token function">install</span> pm2-logrotatepm2 <span class="token builtin class-name">set</span> pm2-logrotate: rotateInterval  <span class="token string">'*  */1 *  *  *'</span>  -- 配置日志备份间隔，类似crontab配置pm2 <span class="token builtin class-name">set</span> pm2-logrotate:compress <span class="token boolean">true</span>  --是否启动压缩pm2 <span class="token builtin class-name">set</span> pm2-logrotate: retain <span class="token number">3</span>  --保存备份数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://pm2.keymetrics.io/docs/usage/quick-start/">https://pm2.keymetrics.io/docs/usage/quick-start/</a></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rollup打包工具</title>
      <link href="/2022/10/17/02-program/javascript/rollup-da-bao-gong-ju/"/>
      <url>/2022/10/17/02-program/javascript/rollup-da-bao-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><p>Q： <code> Using removed Babel 5 option: .modules</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Using removed Babel <span class="token number">5</span> <span class="token literal-property property">option</span><span class="token operator">:</span> <span class="token punctuation">.</span>modules <span class="token operator">-</span> Use the corresponding module transform plugin <span class="token keyword">in</span> the <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">plugins</span><span class="token template-punctuation string">`</span></span> option<span class="token punctuation">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>A：添加<code>.babelrc</code>配置文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string-property property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span>            <span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string-property property">"loose"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"stage-2"</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">"transform-runtime"</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"comments"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rollup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger生成API文档</title>
      <link href="/2022/10/17/02-program/javascript/swagger-sheng-cheng-api-wen-dang/"/>
      <url>/2022/10/17/02-program/javascript/swagger-sheng-cheng-api-wen-dang/</url>
      
        <content type="html"><![CDATA[<p>swagger通过装饰器生成标准openApi文档；</p><h2 id="装饰方法"><a href="#装饰方法" class="headerlink" title="装饰方法"></a>装饰方法</h2><p>@ApiTag：定义分组信息</p><ul><li><code>@ApiTag('分组名')</code><br>@ApiOperation：生成接口概述</li><li><code>@ApiOperation({ summary: '用户登陆' })</code><br>@ApiResponse：定义返回值格式</li><li><code>@ApiResponse({  status: 200, type: String})</code><br>@ApiQuery：定义get请求传入参数</li><li><code>@ApiQuery({ name: 'pageNum', description: '页码', type: Number })</code></li></ul><h2 id="装饰参数"><a href="#装饰参数" class="headerlink" title="装饰参数"></a>装饰参数</h2><p>@Param：获取get请求地址中对应字段作为参数</p><ul><li><code>(@Param('id') task_id: string)</code> </li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite项目搭建</title>
      <link href="/2022/10/17/02-program/javascript/vite-xiang-mu-da-jian/"/>
      <url>/2022/10/17/02-program/javascript/vite-xiang-mu-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过vite创建项目</span><span class="token function">yarn</span> create vite<span class="token comment"># 设置js与ts兼容，避免ts引入js模块告警</span><span class="token comment">## vi tsconfig.json</span><span class="token string">"compilerOptions"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">"strict"</span><span class="token builtin class-name">:</span> false,    <span class="token string">"sourceMap"</span><span class="token builtin class-name">:</span> true,    <span class="token string">"resolveJsonModule"</span><span class="token builtin class-name">:</span> true,    //配置项目打包默认根路径    <span class="token string">"baseUrl"</span><span class="token builtin class-name">:</span> <span class="token string">"/"</span>,    // 配置路径别名    <span class="token string">"paths"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>      <span class="token string">"@/*"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"./src/*"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,<span class="token comment"># 设置路径别名</span><span class="token comment">## vi tsconfig.json</span>resolve: <span class="token punctuation">{</span>    alias: <span class="token punctuation">{</span>      <span class="token string">"@"</span><span class="token builtin class-name">:</span> path.resolve<span class="token punctuation">(</span>__dirname, <span class="token string">"./src"</span><span class="token punctuation">)</span>,    <span class="token punctuation">}</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h2><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 自动导入element-plus组件及样式</span><span class="token function">yarn</span> <span class="token function">add</span> unplugin-vue-components  unplugin-auto-import unplugin-icons @iconify/json <span class="token parameter variable">-D</span><span class="token comment"># icon模块站点</span>https://icones.netlify.app/https://icon-sets.iconify.design/<span class="token comment"># 复制icon代码时下拉选择i-xxx-xxx格式代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ts-config-json"><a href="#ts-config-json" class="headerlink" title="ts.config.json"></a>ts.config.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>      <span class="token property">"useDefineForClassFields"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>      <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>     <span class="token comment">//允许js与ts混用  </span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>      <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"resolveJsonModule"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"esnext"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//配置项目打包默认根路径</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>      <span class="token comment">// 配置路径别名，需配合vite.config.ts配置使用</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@/**"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.ts"</span><span class="token punctuation">,</span> <span class="token string">"src/**/*.d.ts"</span><span class="token punctuation">,</span> <span class="token string">"src/**/*.tsx"</span><span class="token punctuation">,</span> <span class="token string">"src/**/*.vue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"references"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"./tsconfig.node.json"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vite-config-ts"><a href="#vite-config-ts" class="headerlink" title="vite.config.ts"></a>vite.config.ts</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token punctuation">;</span>  <span class="token comment">// 自动按需导入  </span><span class="token keyword">import</span> AutoImport <span class="token keyword">from</span> <span class="token string">"unplugin-auto-import/vite"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> Components <span class="token keyword">from</span> <span class="token string">"unplugin-vue-components/vite"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> ElementPlusResolver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"unplugin-vue-components/resolvers"</span><span class="token punctuation">;</span>    <span class="token comment">// https://vitejs.dev/config/  </span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    server<span class="token operator">:</span> <span class="token punctuation">{</span>      port<span class="token operator">:</span> <span class="token number">9090</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    resolve<span class="token operator">:</span> <span class="token punctuation">{</span>      alias<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          find<span class="token operator">:</span> <span class="token string">"@"</span><span class="token punctuation">,</span>          replacement<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        resolvers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">{</span> resolvers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-router导航守卫</title>
      <link href="/2022/10/17/02-program/javascript/vue-router-dao-hang-shou-wei/"/>
      <url>/2022/10/17/02-program/javascript/vue-router-dao-hang-shou-wei/</url>
      
        <content type="html"><![CDATA[<p>导航守卫主要是用来通过跳转或取消的方式守卫导航；本质上就是通过对导航跳转前中后各阶段添加一些钩子函数；</p><p>导航守卫分为全局、路由及组件三种级别；</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Webpack项目打包配置案例</title>
      <link href="/2022/10/17/02-program/javascript/webpack-xiang-mu-da-bao-pei-zhi-an-li/"/>
      <url>/2022/10/17/02-program/javascript/webpack-xiang-mu-da-bao-pei-zhi-an-li/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack依赖安装"><a href="#webpack依赖安装" class="headerlink" title="webpack依赖安装"></a>webpack依赖安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">-D</span> webpack@4 webpack-cli@3  <span class="token comment"># 安装webpack4版本  </span><span class="token comment"># 安装webpack-cli3版本 此工具用于在命令行中运行 webpack  </span>  <span class="token function">npm</span> i <span class="token parameter variable">-D</span> clean-webpack-plugin  <span class="token comment"># 常用插件，打包前自动清理之前打包的文件  </span>  <span class="token function">npm</span> i <span class="token parameter variable">-D</span> webpack-node-externals  <span class="token comment"># 打包时排除node_modules，里面的所有依赖都不打包  </span>  <span class="token function">npm</span> i <span class="token parameter variable">-D</span> @babel/core @babel/node @babel/preset-env babel-loader  <span class="token comment"># 使用es6语法所需的babel相关依赖  </span><span class="token comment"># @babel/node在babel7中被移了出来，如果在node环境中使用，要单独安装，有在运行Babel预设和插件之前进行编译的好处，调试用  </span>  <span class="token function">npm</span> i <span class="token parameter variable">-D</span> terser-webpack-plugin@4  <span class="token comment"># 生产环境需要打包压缩代码  </span>  <span class="token function">npm</span> i <span class="token parameter variable">-D</span> webpack-merge  <span class="token comment"># 分开发配置和生产配置，它们有共同配置，抽离出来，通过webpack-merge合并  </span>  <span class="token function">npm</span> i <span class="token parameter variable">-D</span> nodemon  <span class="token comment"># 监控node.js 源代码的变化和自动重启服务  </span>  <span class="token function">npm</span> i <span class="token parameter variable">-D</span> cross-env  <span class="token comment"># 运行跨平台设置和使用环境变量的脚本  </span>  <span class="token function">npm</span> i <span class="token parameter variable">-D</span> npm-run-all  <span class="token comment"># 实现同时执行多个命令  </span>  <span class="token function">npm</span> i <span class="token parameter variable">-D</span> rimraf  <span class="token comment"># 以包的形式包装rm -rf命令，用来删除文件和文件夹的。用来清理dist目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>webpack可指定多个配置文件，用于区分开发与生产环境打包配置</p><ul><li>webpack.config.base：存放通用配置</li><li>webpack.config.dev：存放开发环境专项配置</li><li>webpack.config.prod：存放生产环境专项配置</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> nodeExternals <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-node-externals'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'node'</span><span class="token punctuation">,</span> <span class="token comment">// koa项目仅在node环境下运行，因此设置称'node'  </span> <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token comment">// 设置入口文件  </span> <span class="token literal-property property">server</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/index.js'</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token comment">// 设置打包后的文件和位置  </span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span>   <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token punctuation">{</span>   <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js|jsx$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>   <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// 尽量将 loader 应用于最少数量的必要模块，因此设置include  </span> <span class="token comment">// 只针对该目录下的js文件进行babel处理  </span> <span class="token literal-property property">include</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src'</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token comment">// modules: 告诉webpack哪些目录需要搜索去匹配解析  </span> <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'node_modules'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// extensions: 告诉webpack这些后缀文件需要去搜索匹配  </span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token comment">// 设置别名指向对应目录  </span> <span class="token string-property property">'@'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src'</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">nodeExternals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 排除对node_modules里的依赖进行打包  </span> <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 打包前清除输出目录  </span> <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token comment">// 定义环境变量，区分开发和生产环境  </span> <span class="token comment">// 具体详情可查看DefinePlugin文档  </span> <span class="token string-property property">'process.env.NODE_ENV'</span><span class="token operator">:</span>   process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span>   <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'production'</span><span class="token punctuation">)</span>   <span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'development'</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackConfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开发环境配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config.base'</span><span class="token punctuation">)</span>    <span class="token comment">// 通过webpack-merge合并基础配置，添加开发时配置  </span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>   <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token comment">// 开发模式  </span> <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">'eval-source-map'</span><span class="token punctuation">,</span> <span class="token comment">// 开发时出错能知道在源代码中哪一行  </span> <span class="token literal-property property">stats</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// webpack打包时子模块信息设置不显示  </span> <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 不显示模块信息  </span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackConfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产环境配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config.base'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'terser-webpack-plugin'</span><span class="token punctuation">)</span>    <span class="token comment">// 通过webpack-merge合并基础配置，添加生产时配置  </span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>   <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span> <span class="token comment">// 生产模式  </span> <span class="token literal-property property">stats</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// webpack打包时子模块信息设置不显示  </span> <span class="token literal-property property">warnings</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 警告不显示  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token comment">// terser-webpack-plugin插件可以压缩代码  </span> <span class="token comment">// 在webpack4版本中需要安装terser-webpack-plugin4版本  </span> <span class="token comment">// 里面是官方推荐的具体的参数，详情可查看文档  </span> <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token literal-property property">terserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">warning</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">warnings</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token literal-property property">drop_console</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 取消注释console 方便有时候进行调试  </span> <span class="token literal-property property">dead_code</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token literal-property property">drop_debugger</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 不要注释  </span> <span class="token literal-property property">beautify</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 不要格式，一行显示所有代码  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">mangle</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">parallel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 使用多进程并行运行可提高构建速度，默认的并发运行数量 os.cpus().length - 1  </span> <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token boolean">false</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// splitChunks 用来避免模块之间重复的依赖关系  </span> <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">commons</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'commons'</span><span class="token punctuation">,</span>   <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'initial'</span><span class="token punctuation">,</span>   <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>   <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackConfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="es6语法支持"><a href="#es6语法支持" class="headerlink" title="es6语法支持"></a>es6语法支持</h3><p>在项目根目录创建配置文件<code>.babelrc</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>   <span class="token string-property property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token punctuation">[</span>   <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>   <span class="token string-property property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token string-property property">"node"</span><span class="token operator">:</span> <span class="token string">"current"</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token punctuation">]</span>   <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们用<code>node src/index.js</code>去运行，报错：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Koa <span class="token keyword">from</span> <span class="token string">'koa'</span>  <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span>    <span class="token literal-property property">SyntaxError</span><span class="token operator">:</span> Cannot use <span class="token keyword">import</span> statement outside a module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在在安装babel之后，node_modules中提供了一个<code>babel-node</code>命令，我们可以通过该命令来运行我们的入口文件。<br><code>npx babel-node src/index.js</code></p><p>配合之前安装的<code>nodemon</code>可以实现热更新<br><code>npx nodemon --exec babel-node src/index.js</code></p><p>可将该命令添加至webpack快捷命令中：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"script"</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"nodemon --exec babel-node src/index.js"</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样通过在终端里运行<code>npm run start</code>即可启动项目了。</p><p>当然这个只是简单的实现去支持es6语法和开发时热更新功能，并没有通过用webpack去构建，在项目简单的情况下尚可</p><h2 id="webpack构建开发环境"><a href="#webpack构建开发环境" class="headerlink" title="webpack构建开发环境"></a>webpack构建开发环境</h2><p><strong>通过<code>webpack --watch</code>命令来监听项目中文件的变化，如果其中一个文件被更新，代码将被重新编译</strong>，而不必再去手动运行整个构建。</p><p>同时我们通过<code>cross-env</code>来设置环境变量，来指定当当前开发环境还是生产环境。</p><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">npx cross-env NODE_ENV=development webpack --watch --config config/webpack.config.dev.js --progress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行该命令的意思就是，设置一个环境变量NODE_ENV，值为development，因为我们之前在配置文件中通过DefinePlugin做了配置，所以当这个值不是production时就是开发环境，定义了对应的变量，在项目文件中就可以拿到这个变量，来针对开发和生产时做不同的逻辑处理。</p><p>设置了开发时的环境变量后，通过<code>webpack --watch</code>启动监听模式，指定开发时的配置文件<code>config/webpack.config.dev.js</code>文件，当项目中文件发生变化，代码将被重新编译打包输出到<code>dist/server.bundle.js</code>。</p><p>此时可更新配置文件：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{   "script": {   "start": "nodemon --exec babel-node src/index.js",   "webpack:debug": "node --inspect-brk ./node_modules/.bin/webpack --config config/webpack.config.prod.js --progress",   "watch": "cross-env NODE_ENV=development webpack --watch --config config/webpack.config.dev.js --progress",   "debug": "nodemon --inspect dist/server.bundle.js"   }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个终端控制台只能监听一个命令，如果每次启动项目都开两个终端比较麻烦，所以我们安装一个工具<code>npm-run-all</code>，来实现一个脚本同时执行多个命令。继续在<code>package.json</code>中添加脚本：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{   "script": {   "start": "nodemon --exec babel-node src/index.js",   "webpack:debug": "node --inspect-brk ./node_modules/.bin/webpack --config config/webpack.config.prod.js --progress",   "watch": "cross-env NODE_ENV=development webpack --watch --config config/webpack.config.dev.js --progress",   "debug": "nodemon --inspect dist/server.bundle.js",   "start:dist": "npm-run-all -p watch debug"   "build": "cross-env NODE_ENV=production webpack --config config/webpack.config.prod.js" }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>npm-run-all -p watch debug</code>命令的含义是并行执行watch和debug两个脚本命令<code>-p</code>是并行执行的意思。</p><h2 id="配置eslint-prettier风格"><a href="#配置eslint-prettier风格" class="headerlink" title="配置eslint + prettier风格"></a>配置eslint + prettier风格</h2><h3 id="安装eslint"><a href="#安装eslint" class="headerlink" title="安装eslint"></a>安装eslint</h3><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 安装eslint  npm i eslint -D    # eslint初始化  npx eslint --init    # 进入自定义选择项  # 1. 你想要怎么使用eslint？ To check syntax and find problems  # 2. 哪一种模块是你的项目使用的？ JavaScript modules  # 3. 选择哪一个框架？ None of these  # 4. 你想要使用TypeScript吗？ N  # 5. 你要运行在哪个环境？ Browser, Node  # 6. 你想要配置文件格式是哪个？ JavaScript    # 全部选择完成后，会在本地生成.eslintrc.js文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装prettier"><a href="#安装prettier" class="headerlink" title="安装prettier"></a>安装prettier</h3><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 安装相关配置依赖  npm install --save-dev eslint-config-prettier  npm install --save-dev eslint-plugin-prettier  npm install --save-dev --save-exact prettier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>.eslintrc.js</code>文件中添加配置：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">module.exports = {   ...   plugins: ['prettier'],   extends: ['eslint:recommended', 'prettier', 'prettier/prettier'],   rules: {   'prettier/prettier': 'error'   }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的prettier规则可以新建一个<code>.prettierrc</code>文件设置。</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{    "singleQuote": true,   "trailingComma": "es5",   "printWidth": 100,   "semi": false,   "jsxSingleQuote": true,   "prettier.eslintIntegration": true  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外为了增加验证效率，排除那些不需要验证规则的文件，比如<code>mode_modules</code>，可以新建<code>.eslintignore</code>和<code>.prettierignore</code>文件。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack工具介绍</title>
      <link href="/2022/10/17/02-program/javascript/webpack-gong-ju-jie-shao/"/>
      <url>/2022/10/17/02-program/javascript/webpack-gong-ju-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack核心概念"><a href="#webpack核心概念" class="headerlink" title="webpack核心概念"></a>webpack核心概念</h1><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>入口，指定webpack入口文件，从该文件开始打包；</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出，打包文件输出名称及路径</p><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>支持webpack处理非js文件</p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>插件，支持webpack执行范围更广的任务，包括打包优化、压缩、定义变量等；</p><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>配置webpack打包模式</p><p>webpack安装模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> webpack webpack-cli html-webpack-plugin  webpack-dev-server css-loader style-loader less-loader mini-css-extract-plugin  css-minimizer-webpack-plugin csv-loader xml-loader  yaml toml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>工具安装后需手工在项目根目录下创建配置文件：<code>webpack.config.js</code></p><p>可根据生产及开发环境生成对应配置文件：</p><ul><li>开发环境： <code>webpack.config.dev.js</code>，保留entry、output、module、mode、plugins、devtool、devServer</li><li>生产环境：<code>webpack.config.prod.js</code>，保留entry、output， module ，mode，plugins，optimization</li></ul><p>可通过提取公共配置降低重复工作：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通用配置提取到webpack.config.common.js，格式与webpack.config.js保持一致</span><span class="token comment">// 全局安装webpack-merge插件进行合并</span><span class="token keyword">const</span> <span class="token punctuation">{</span>merge<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config.common.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> devConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config.dev.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> prodConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config.prod.js'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> env<span class="token punctuation">.</span>development <span class="token operator">===</span> <span class="token string">"development"</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> devConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> env<span class="token punctuation">.</span>production <span class="token operator">===</span> <span class="token string">"production"</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> prodConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No matching configuration was found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>npx webpack -c webpack.config.dev.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> MiniCssextractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'css-minimizer-webpack-plugin'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'terser-webpack-plugin'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> yaml <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'yaml'</span><span class="token punctuation">)</span>    module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 方案一，单入口模式  </span> <span class="token comment">// index: './src/main.js', // 指定源码入口文件名 // 多入口模式 /* index: { import: './src/index.js', dependOn: 'shared', }, another: { import: './src/other.js', dependOn: 'shared', }, // 其他入口文件名 shared: 'lodash', // 指定多入口共享模块打包至shared.js文件中 */  </span> <span class="token comment">// 方案三， 使用webpack插件 抽离公共模块 配置在optimize中  </span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>   <span class="token literal-property property">another</span><span class="token operator">:</span> <span class="token string">'./src/other.js'</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].[contenthash].js'</span><span class="token punctuation">,</span> <span class="token comment">// 指定打包文件名,浏览器缓存时会根据文件名判断是否变更，建议使用名称加contenthash方式生成文件名  </span> <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 指定打包路径  </span> <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 自动清空打包目录  </span> <span class="token literal-property property">assetModuleFilename</span><span class="token operator">:</span> <span class="token string">'images/[contenthash][ext]'</span><span class="token punctuation">,</span>   <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">'http://localhsot:8080/'</span><span class="token punctuation">,</span> <span class="token comment">// 指定打包后引用资源路径前缀  </span> <span class="token literal-property property">pathinfo</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 编译代码中不包含路径信息  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">// 可选为 none， development及 production  </span> <span class="token literal-property property">mode</span><span class="token operator">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token string">'production'</span> <span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>     <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 配置路径别名  </span> <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string-property property">'@'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">// 按顺序默认识别扩展名  </span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token literal-property property">externalsType</span><span class="token operator">:</span> <span class="token string">'script'</span><span class="token punctuation">,</span> <span class="token comment">// 指定cdn模块以什么方式暴露  </span> <span class="token comment">// 指定CDN模块，不会进行打包 </span><span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js'</span><span class="token punctuation">,</span> <span class="token string">'jQuery'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token comment">// 指定使用插件打包文件  </span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'./index.html'</span><span class="token punctuation">,</span> <span class="token comment">// 使用源文件作为模板  </span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'app.html'</span><span class="token punctuation">,</span> <span class="token comment">// 打包后文件名  </span> <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token comment">// js插入标签路径  </span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">new</span> <span class="token class-name">MiniCssextractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'style/[contenthash][.ext]'</span><span class="token punctuation">,</span> <span class="token comment">// 配置css抽离生成的文件路径及文件名  </span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">// 配置全局变量  </span> <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">_</span><span class="token operator">:</span> <span class="token string">'axios'</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token comment">// 全局导出  </span> <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'exports-loader?type=commonjs&amp;exports=file,multiple|helpers.parse|parse'</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.png$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 打包png后缀文件  </span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'asset/resource'</span><span class="token punctuation">,</span> <span class="token comment">// 作为资源打包至assets目录  </span> <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'./dist/images/[contenthash][ext]'</span><span class="token punctuation">,</span> <span class="token comment">// 优先 指定打包文件路径、文件名及后缀名  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 打包svg扩展名文件  </span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'asset/inline'</span><span class="token punctuation">,</span> <span class="token comment">// 将资源文件打包成base64信息至代码文件中  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.txt$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 打包txt扩展名文件  </span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'asset/source'</span><span class="token punctuation">,</span> <span class="token comment">// 将资源文件直接打包至代码文件中  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.jpg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 打包jpgt扩展名文件  </span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'asset'</span><span class="token punctuation">,</span> <span class="token comment">// 通用资源类型，自动选择创建为resource或inline，根据资源大小自动选择，默认为8k以下inline  </span> <span class="token comment">// 自定义临界值 parser: {  </span>            <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 临界值修改为4Mb  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(css|less)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>   <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 使用指定loader对对应资源进行解析并打包  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(css|less)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>   <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssextractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 将所有样式文件抽离合并为一个样式文件，并超链接至代码文件中  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(woff|woff2|eot|ttf|otf)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>   <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'asset/resource'</span><span class="token punctuation">,</span> <span class="token comment">// resource支持加载任意类型资源  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(tsv|csv)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>   <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'csv-loader'</span><span class="token punctuation">,</span> <span class="token comment">// 使用loader加载csv/tsv数据，转换为数组  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.xml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>   <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'xml-loader'</span><span class="token punctuation">,</span> <span class="token comment">// 使用loader加载xml数据  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.yaml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 自定义json模块的parser  </span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>   <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token literal-property property">parse</span><span class="token operator">:</span> yaml<span class="token punctuation">.</span>parse<span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>   <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 排除node_modules文件下下js文件加载  </span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span> <span class="token comment">// 指定loader加载js  </span> <span class="token literal-property property">option</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 使用指定插件集合加载js  </span> <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'@babel/plugin-transform-runtime'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 兼容 async/await语法  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// 配置webpack集成eslint语法规范  </span> <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(js|vue)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>   <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span> <span class="token string">'eslint-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 需配合mode：production  压缩加载的CSS文件  </span> <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 启用打包代码压缩  </span> <span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">// 配合entry 方案三使用  </span> <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token comment">// chunks: 'all',  </span> <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 以固定名称缓存第三方模块  </span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'vendors'</span><span class="token punctuation">,</span>   <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用treeshaking  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">// 启用source-map，可直接查看源文件报错位置  </span> <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">'inline-source-map'</span><span class="token punctuation">,</span>     <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span><span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>   <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启动压缩  </span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">// 指定服务启动端口  </span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string-property property">'X-Access-Token'</span><span class="token operator">:</span> <span class="token string">'abc123'</span><span class="token punctuation">,</span> <span class="token comment">// 添加token到响应头  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token string">'http://localhost:9000'</span><span class="token punctuation">,</span> <span class="token comment">// 解决跨域访问问题  </span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">http2</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用https 或者直接使用https:true  需自行配置证书  </span>   <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 解决spa路由刷新可能报错  </span> <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token comment">// 允许局域网访问  </span> <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启模块热替换 HMR  </span> <span class="token literal-property property">liveReload</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启模块热加载  </span>   <span class="token comment">// 禁止devServer页面eslint错误提示覆盖层 client: {  </span>        <span class="token literal-property property">overlay</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>npx webpack   自动寻找项目内webpack命令路径并执行</p><p>npx webpack –watch  自动检测文件变化并重新打包</p><p>npx webpack-dev-server –open  启动dev-server</p><h2 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h2><p>babel-loader用于将js代码加载为向下兼容模式<br>安装插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> babel-loader  @babel/core  @babel/preset-env  @babel/runtime  @babel/plugin-transform-runtime terser-webpack-plugin <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>babel-loader： 在webpack中应用babel解析ES6的桥梁</li><li>@babel/core：babel核心代码</li><li>@babel/preset-env：babel预设，一组babel插件的集合 </li><li>@babel/runtime：兼容async/await语法</li><li>@babel/plugin-transform-runtime：按需调用runtime</li></ul><p>regeneratorRuntime： 是webpack打包生成的全局辅助函数，由babel生成，用于兼容async/await语法</p><h2 id="webpack好处"><a href="#webpack好处" class="headerlink" title="webpack好处"></a>webpack好处</h2><p>代码分离，提升加载速度<br>分离方法：</p><ul><li>入口手动分离</li><li>动态加载<ul><li>懒加载</li><li>预获取/预加载<ul><li>prefetch: 预获取，在页面加载完成后，利用空闲资源进行文件加载</li><li>preload：预加载，</li></ul></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//在需要代码分离引入的模块前添加注解，可指定代码分离后文件名</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/*webpackChunkName: 'math', webpackPrefetch: true*/</span> <span class="token string">'./utils/abc.js'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>该配置文件可通过<code>npm init</code>自动生成，该文件结构为：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"frontend"</span><span class="token punctuation">,</span>   <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>   <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 定义npm run xxx脚本命令</span> <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service serve"</span><span class="token punctuation">,</span>   <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service build"</span><span class="token punctuation">,</span>   <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service lint"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 业务依赖模块</span> <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"axios"</span><span class="token operator">:</span> <span class="token string">"^0.24.0"</span><span class="token punctuation">,</span>  <span class="token property">"bcryptjs"</span><span class="token operator">:</span> <span class="token string">"^2.4.3"</span><span class="token punctuation">,</span>  <span class="token property">"core-js"</span><span class="token operator">:</span> <span class="token string">"^3.6.5"</span><span class="token punctuation">,</span>  <span class="token property">"dateformat"</span><span class="token operator">:</span> <span class="token string">"^5.0.2"</span><span class="token punctuation">,</span>  <span class="token property">"element-ui"</span><span class="token operator">:</span> <span class="token string">"^2.15.6"</span><span class="token punctuation">,</span>  <span class="token property">"jsonwebtoken"</span><span class="token operator">:</span> <span class="token string">"^8.5.1"</span><span class="token punctuation">,</span>    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^2.6.11"</span><span class="token punctuation">,</span>    <span class="token property">"vue-clipboard2"</span><span class="token operator">:</span> <span class="token string">"^0.3.3"</span><span class="token punctuation">,</span>    <span class="token property">"vue-router"</span><span class="token operator">:</span> <span class="token string">"^3.5.3"</span><span class="token punctuation">,</span>    <span class="token property">"xlsx"</span><span class="token operator">:</span> <span class="token string">"^0.17.4"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//  开发依赖模块</span> <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.16.7"</span><span class="token punctuation">,</span>   <span class="token property">"@babel/plugin-transform-runtime"</span><span class="token operator">:</span> <span class="token string">"^7.16.7"</span><span class="token punctuation">,</span>   <span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.16.7"</span><span class="token punctuation">,</span>   <span class="token property">"@babel/runtime"</span><span class="token operator">:</span> <span class="token string">"^7.16.7"</span><span class="token punctuation">,</span>   <span class="token property">"@vue/cli-plugin-babel"</span><span class="token operator">:</span> <span class="token string">"~4.5.0"</span><span class="token punctuation">,</span>   <span class="token property">"@vue/cli-plugin-eslint"</span><span class="token operator">:</span> <span class="token string">"~4.5.0"</span><span class="token punctuation">,</span>   <span class="token property">"@vue/cli-service"</span><span class="token operator">:</span> <span class="token string">"~4.5.0"</span><span class="token punctuation">,</span>   <span class="token property">"babel-eslint"</span><span class="token operator">:</span> <span class="token string">"^10.1.0"</span><span class="token punctuation">,</span>   <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^8.2.3"</span><span class="token punctuation">,</span>   <span class="token property">"babel-plugin-component"</span><span class="token operator">:</span> <span class="token string">"^1.1.1"</span><span class="token punctuation">,</span>   <span class="token property">"compression-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"5.0.1"</span><span class="token punctuation">,</span>   <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^6.5.1"</span><span class="token punctuation">,</span>   <span class="token property">"css-minimizer-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^3.3.1"</span><span class="token punctuation">,</span>   <span class="token property">"csv-loader"</span><span class="token operator">:</span> <span class="token string">"^3.0.3"</span><span class="token punctuation">,</span>   <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"7.30.0"</span><span class="token punctuation">,</span>   <span class="token property">"eslint-config-prettier"</span><span class="token operator">:</span> <span class="token string">"^8.3.0"</span><span class="token punctuation">,</span>   <span class="token property">"eslint-config-standard"</span><span class="token operator">:</span> <span class="token string">"^16.0.3"</span><span class="token punctuation">,</span>   <span class="token property">"eslint-plugin-import"</span><span class="token operator">:</span> <span class="token string">"^2.25.4"</span><span class="token punctuation">,</span>   <span class="token property">"eslint-plugin-node"</span><span class="token operator">:</span> <span class="token string">"^11.1.0"</span><span class="token punctuation">,</span>   <span class="token property">"eslint-plugin-prettier"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>   <span class="token property">"eslint-plugin-promise"</span><span class="token operator">:</span> <span class="token string">"^6.0.0"</span><span class="token punctuation">,</span>   <span class="token property">"eslint-plugin-standard"</span><span class="token operator">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>   <span class="token property">"eslint-plugin-vue"</span><span class="token operator">:</span> <span class="token string">"^6.2.2"</span><span class="token punctuation">,</span>   <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.5.0"</span><span class="token punctuation">,</span>   <span class="token property">"less"</span><span class="token operator">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>   <span class="token property">"less-loader"</span><span class="token operator">:</span> <span class="token string">"7.3.0"</span><span class="token punctuation">,</span>   <span class="token property">"mini-css-extract-plugin"</span><span class="token operator">:</span> <span class="token string">"^2.4.6"</span><span class="token punctuation">,</span>   <span class="token property">"prettier"</span><span class="token operator">:</span> <span class="token string">"^2.5.1"</span><span class="token punctuation">,</span>   <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^3.3.1"</span><span class="token punctuation">,</span>   <span class="token property">"terser-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.3.0"</span><span class="token punctuation">,</span>   <span class="token property">"toml"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>   <span class="token property">"vue-style-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.3"</span><span class="token punctuation">,</span>   <span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.6.11"</span><span class="token punctuation">,</span>   <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.65.0"</span><span class="token punctuation">,</span>   <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.9.1"</span><span class="token punctuation">,</span>   <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^4.7.2"</span><span class="token punctuation">,</span>   <span class="token property">"xml-loader"</span><span class="token operator">:</span> <span class="token string">"^1.2.1"</span><span class="token punctuation">,</span>   <span class="token property">"yaml"</span><span class="token operator">:</span> <span class="token string">"^1.10.2"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"eslintConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"root"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span>   <span class="token string">"eslint:recommended"</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"babel-eslint"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"&gt; 1%"</span><span class="token punctuation">,</span>   <span class="token string">"last 2 versions"</span><span class="token punctuation">,</span>   <span class="token string">"not dead"</span>   <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p>语法规范工具</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token comment">// 配置支持运行环境</span><span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 支持浏览器  </span><span class="token property">"es2021"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token comment">// 支持es2021</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"airbnb-base"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 使用规则标准</span><span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"ecmaVersion"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>   <span class="token comment">//ecma版本</span><span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>  <span class="token comment">//检查类型</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 配置自定义校验规则</span><span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 配置全局变量</span><span class="token property">"globals"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="eslint集成webpack"><a href="#eslint集成webpack" class="headerlink" title="eslint集成webpack"></a>eslint集成webpack</h3><p>插件依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> webpack webpack-cli webpack-dev-server html-webpack-plugin babel-loader eslint-loader @babel/core <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>webpack.config.js配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span> <span class="token string">'eslint-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="githooks-amp-husky"><a href="#githooks-amp-husky" class="headerlink" title="githooks &amp; husky"></a>githooks &amp; husky</h2><p>git在仓库根目录下存在一个.git 隐藏文件，其子目录hooks内提供了一系列样例文件，以.sample结尾，对其重命名，去掉.sample后缀名则生效，文件名不能修改；<br>例如： pre-commit.sample为提交前运行钩子，去除后缀名后生效，作为用执行git commit前自动执行其内命令；</p><p>自定义githooks路径 ： git config core.hooksPath xxx</p><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h3><p>模块安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span>  <span class="token function">add</span> huskey <span class="token parameter variable">-D</span>npx husky <span class="token function">install</span>  <span class="token comment"># 在项目下创建一个隐藏文件夹 .husky</span><span class="token comment"># 创建钩子</span>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">'XXX'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span>  a <span class="token keyword">from</span> <span class="token string">'./a'</span>   <span class="token comment">// ES6语法</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span>  <span class="token comment">// commonJs语法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="模块解析"><a href="#模块解析" class="headerlink" title="模块解析"></a>模块解析</h3><h2 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h2><p>在webback.config.js中优化配置项中启用</p><h3 id="sideEffects"><a href="#sideEffects" class="headerlink" title="sideEffects"></a>sideEffects</h3><p>sideEffects在package.json文件中<br>指定哪些文件是具有副作用的，tree shaking不应该删除</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">sideEffects<span class="token operator">:</span> <span class="token punctuation">[</span>'.global.css'<span class="token punctuation">]</span>   <span class="token comment">//指定不删除global.css结尾的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[[Webpack项目打包配置案例]]<br>[[Rollup打包工具]]<br>[[ESLINT与PRETTIER]]</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex数据共享</title>
      <link href="/2022/01/10/02-program/javascript/vuex-shu-ju-gong-xiang/"/>
      <url>/2022/01/10/02-program/javascript/vuex-shu-ju-gong-xiang/</url>
      
        <content type="html"><![CDATA[<p>Vuex是一个转为Vue项目开发的状态管理模式。包括四个核心概念：state、mutation，action及getter</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>    Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">addToken</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> token</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span>token <span class="token operator">=</span> token      <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">addTokenAsync</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> token</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addToken'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span>token   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>State提供唯一的公共数据源，所有共享数据统一存放到store的state中；<br>State中数据访问方式有两种：</p><ul><li>直接引用：<code>this.$sotre.state.token</code>，可在插值语法中直接使用；</li><li>映射为计算属性<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">//  相当于定义了一个名为token的计算属性</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//映射同时指定别名</span>  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">stateToken</span><span class="token operator">:</span> <span class="token string">'token'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>Vuex仅运行使用Mutation进行state中数据操作；通过这种方式可以集中监控state数据变化；<br>Mutation定义方法使用有两种方式：</p><ul><li>直接引用： <code>this.$store.commit('addToken',token)</code>，进行方法调用</li><li>映射为方法：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>mapMutations<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 映射后方法名为addToken，可直接当做普通方法调用</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'addToken'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 映射时指定别名</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mutationAddToken</span><span class="token operator">:</span> <span class="token string">'addToken'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Vuex用于定义异步方法调用模块<br>Action定义的异步方法同样支持两种调用方式：</p><ul><li>直接引用： ‘this.$store.dispatch(‘addTokenAsync’, token)’进行调用</li><li>映射为方法：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 映射后方法名为addToken，可直接当做普通方法调用</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'addTokenAsync'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 映射时指定别名</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">actionAddTokenAsync</span><span class="token operator">:</span> <span class="token string">'addTokenAsync'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>Getter用于对Store中数据进行加工处理形成新的数据，或者说为包装数据，类似于computed<br>Getter同样支持两种调用方式：</p><ul><li>直接引用：<code>this.$store.getters.getToken</code>进行调用</li><li>映射为计算属性：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 映射后方法名为addToken，可直接当做普通方法调用</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'getToken'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 映射时指定别名</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">getterGetToken</span><span class="token operator">:</span> <span class="token string">'getToken'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3项目开发</title>
      <link href="/2021/12/31/02-program/javascript/vue3-xiang-mu-kai-fa/"/>
      <url>/2021/12/31/02-program/javascript/vue3-xiang-mu-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue项目创建"><a href="#Vue项目创建" class="headerlink" title="Vue项目创建"></a>Vue项目创建</h1><ul><li><code>vue-cli</code>创建：<code>vue create 项目名称</code></li><li><code>vite</code>创建：<code>npm init vite-app 项目名称 &amp;&amp; npm install</code></li></ul><h1 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>setup是所有的组合式API的”表演舞台“<br>组件中用到的所有数据、方法等均需在setup中配置，且其存在两种返回值：</p><ul><li>返回对象：对象可直接在模板中使用</li><li>返回渲染函数：可自定义渲染内容</li></ul><p>setup在<code>beforeCreate</code>前执行，且只执行一次，此时<code>this</code>为<code>undefined</code><br>setup可接收两个参数，props和context：</p><ul><li>props：值为对象，包含组件外传递过来且组件内明确接收的属性；</li><li>context：上下文对象，包含以下元素：<ul><li>attr：包含组件外传递归来，但未明确接收的属性；</li><li>emit：包含组件外传递过来分发自定义事件的函数；</li><li>slots：包含组件外传递过来的插槽内容；</li></ul></li></ul><blockquote><p>vue2可识别vue3中定义的元素<br>setup无法识别vue2中定义的元素<br>vue2与vue3不建议混用</p></blockquote><h3 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h3><p>通过ref函数实现基础数据类型响应式</p><h3 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h3><p>通过reactive函数实现对象及数组类型响应式</p><h3 id="computed函数"><a href="#computed函数" class="headerlink" title="computed函数"></a>computed函数</h3><h3 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h3><p>对于reactive修饰对象，无法获取到正确的oldvalue，且deep选项无效<br>单独修改reactive修饰对象的某个属性对象时，需开启deep选项；</p><h3 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h3><p>hookb本质上是一个函数，用来将setup中使用到的组合api进行封装，实现代码的复用；</p><h3 id="toRef-amp-toRefs"><a href="#toRef-amp-toRefs" class="headerlink" title="toRef &amp; toRefs"></a>toRef &amp; toRefs</h3><p>将对象属性转换为响应式属性</p><h3 id="shallowReactive与shallowRef"><a href="#shallowReactive与shallowRef" class="headerlink" title="shallowReactive与shallowRef"></a>shallowReactive与shallowRef</h3><p>shallowReactive仅支持对象第一层属性转换为响应式属性<br>shallowRef仅支持基础类型转换为响应式</p><h3 id="toRaw与markRaw"><a href="#toRaw与markRaw" class="headerlink" title="toRaw与markRaw"></a>toRaw与markRaw</h3><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h3><h3 id="provide与inject"><a href="#provide与inject" class="headerlink" title="provide与inject"></a>provide与inject</h3><p>在父组件中使用provide提供数据，后代组件中使用inject来获取其提供的数据；</p><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><p>可以省略根组件，Vue3会自动生成一个虚拟的Fragment元素；可减少便签层级及内存使用；</p><h2 id="teleport"><a href="#teleport" class="headerlink" title="teleport"></a>teleport</h2><h2 id="suspense"><a href="#suspense" class="headerlink" title="suspense"></a>suspense</h2><h2 id="Options-API-vs-Composition-API"><a href="#Options-API-vs-Composition-API" class="headerlink" title="Options API vs Composition API"></a>Options API vs Composition API</h2><p> Option API：功能代码分散，修改相关功能需要分别调整data、methods等各块代码；<br> Composition API：优雅组织功能代码，让相关功能代码有序组织在一起；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>h<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 非响应式数据</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'semon'</span><span class="token comment">// 响应式数据</span><span class="token keyword">let</span> sex <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token comment">// 响应式对象</span><span class="token keyword">let</span> hobby <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sing'</span><span class="token punctuation">,</span><span class="token string">'football'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sex<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token comment">// 返回对象</span><span class="token keyword">return</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>change<span class="token punctuation">}</span><span class="token comment">// 返回渲染函数</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token string">'returnFunc'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><h3 id="vue2响应式原理"><a href="#vue2响应式原理" class="headerlink" title="vue2响应式原理"></a>vue2响应式原理</h3><ul><li>对象类型：通过<code>Object.defineProperty()</code>对属性读取、修改进行拦截；</li><li>数组类型：通过重写更新数组的方法来实现拦截；<blockquote><p>新增、删除属性，页面不会更新；<br>通过下标修改数组，页面不会更新；</p></blockquote></li></ul><h3 id="vue3响应式原理"><a href="#vue3响应式原理" class="headerlink" title="vue3响应式原理"></a>vue3响应式原理</h3><ul><li>通过<code>Proxy</code>：拦截对象中任意属性的变化；</li><li>通过<code>Reflect</code>：对源对象属性进行操作；</li></ul><h2 id="Vue3变化"><a href="#Vue3变化" class="headerlink" title="Vue3变化"></a>Vue3变化</h2><p>Vue全局属性配置变更<br>Vue过渡类名变更<br>移除keycode作为v-on修饰符<br>移除v-on.native修饰符<br>移除过滤器</p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><ul><li>Q：无法解析常用模块<ul><li>错误代码：`’vue-router’ or its corresponding type declarations</li><li>解决方案：调整ts.config.json配置项<code>"resolveJsonModule": true</code>,支持<code>ts</code>与<code>js</code>混用；</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios防抖与节流</title>
      <link href="/2021/12/29/02-program/javascript/axios-fang-dou-yu-jie-liu/"/>
      <url>/2021/12/29/02-program/javascript/axios-fang-dou-yu-jie-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在实际项目中，经常需要对API请求进行“防抖”和“节流”处理，实现项目性能优化；</p><ul><li>防抖（debounce）：防抖意为防止抖动，是为了防止同一事件重复触发，影响性能；防抖重在清零；<ul><li> 应用场景：用户注册、登陆、短信发送、自动保存等；</li></ul></li><li>节流（throttle）：节流是指控制事件触发的频率；节流重在设置窗口开关；<ul><li>应用场景：窗口滚动、实时搜索等；</li></ul></li></ul><p><code>axios</code>是一个基于<code>promise</code>的HTTP库，可以用在浏览器和<code>node.js</code>中，随着<code>Vue</code>的流程，目前已成为很多项目首选的HTTP库；<br><code>axios</code>主要有以下功能：</p><ul><li>从浏览器创建XMLHttpRequests</li><li>从<code>node.js</code>创建HTTP请求</li><li>支持<code>Promise</code> API</li><li>拦截请求与响应</li><li>取消请求</li><li>自动转换json数据</li><li>客户端支持防御XSRF</li></ul><h1 id="CancelToken"><a href="#CancelToken" class="headerlink" title="CancelToken"></a>CancelToken</h1><p><code>axios</code>官方提供了两种取消请求的方法。</p><ul><li><p>通过<code>CancelToken</code>的工厂方法创建<code>cancel token</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token keyword">var</span> source <span class="token operator">=</span> CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/v1/getuser'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">cancelToken</span><span class="token operator">:</span>source<span class="token punctuation">.</span>token<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thrown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>thrown<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request Canceled'</span><span class="token punctuation">,</span> thrown<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span># 取消请求source<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'User canceled'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过<code>CancelToken</code>的构造函数接收一个<code>executor</code>函数来创建<code>cancel token</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token keyword">var</span> cancelaxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/v1/getuser'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">cancelToken</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// executor函数接收一个cancel函数作为参数</span> cancel <span class="token operator">=</span> c<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span># 取消请求<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>方式一全局使用同一个token进行请求的撤掉，当进行遍历撤销时，会撤掉所有请求，例如在进行路由切换时，撤销所有请求会导致切换后请求因使用相同token而无法执行；<br>方式二为每个请求都使用自己独立token，请求较多将会导致频繁创建对象；<br>两种方式各有优劣，可根据项目实际情况进行选择；</p></blockquote><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>用于在发起或者接收响应时对操作进行处理；</p><p>发起请求：添加过程动画等、强制登陆等<br>接收响应：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">axios.interceptors.request.use( config=&gt; {// 处理请求前操作console.log(config)  // 返回config，继续后续操作return config;},err=&gt; {console.log(err)})axios.interceptors.response.use( response=&gt; {console.log(response)return response}),err=&gt; {console.log(err)return err})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sequelize使用</title>
      <link href="/2021/12/21/02-program/javascript/sequelize-shi-yong/"/>
      <url>/2021/12/21/02-program/javascript/sequelize-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Sequelize是什么"><a href="#Sequelize是什么" class="headerlink" title="Sequelize是什么"></a>Sequelize是什么</h1><p><code>Sequelize</code>是一个基于<code>Promise</code>的<code>Node.js</code>平台的<code>ORM</code>模块；</p><p><code>ORM（Object-Relational-Mapping）</code>即对象关系映射：</p><ul><li>对象关系映射可以把<code>js</code>中的类和对象与数据库中的表与数据进行关系映射；</li><li><code>js</code>可通过类和对象操作数据库表与数据；</li><li><code>ORM</code>可有效解决<code>js</code>中嵌套<code>sql</code>不够直观、容易出错问题；</li></ul><p><strong>映射关系</strong></p><ul><li>一个<code>js</code>类对应一个数据库表；</li><li>一个<code>js</code>对象对应数据库表中一条记录；</li><li>一个<code>js</code>对象属性对应数据库表中一个字段；</li></ul><h1 id="Sequelize使用"><a href="#Sequelize使用" class="headerlink" title="Sequelize使用"></a>Sequelize使用</h1><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ol><li>创建数据库链接对象</li><li>定义数据库表模型</li><li>将模型与数据库进行同步（即创建表）</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. 创建链接</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Sequelize <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sequelize'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">MYSQL_USER</span><span class="token punctuation">,</span> <span class="token constant">MYSQL_PASSWD</span><span class="token punctuation">,</span> <span class="token constant">MYSQL_PORT</span><span class="token punctuation">,</span> <span class="token constant">MYSQL_HOST</span><span class="token punctuation">,</span> <span class="token constant">MYSQL_DB</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../conf/config'</span><span class="token punctuation">)</span><span class="token keyword">const</span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span><span class="token constant">MYSQL_DB</span><span class="token punctuation">,</span><span class="token constant">MYSQL_USER</span><span class="token punctuation">,</span><span class="token constant">MYSQL_PASSWD</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">dialect</span><span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token constant">MYSQL_HOST</span><span class="token punctuation">,</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token constant">MYSQL_PORT</span><span class="token punctuation">,</span>    <span class="token comment">//定义连接池</span>    <span class="token literal-property property">pool</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token literal-property property">idle</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>        <span class="token literal-property property">acquire</span><span class="token operator">:</span> <span class="token number">60000</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//定义数据库字符集</span>    <span class="token literal-property property">charset</span><span class="token operator">:</span> <span class="token string">'utf8'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">connect to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">MYSQL_HOST</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'s DB success</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token operator">+</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">connect to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">MYSQL_HOST</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'s DB failed</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> conn<span class="token comment">//2. 定义模型</span><span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sequelize'</span><span class="token punctuation">)</span><span class="token keyword">const</span> conn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../dao/conn.mysql'</span><span class="token punctuation">)</span><span class="token keyword">const</span>  UserModel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'user_info'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>        <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>        <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">is_admin</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> sequelize<span class="token punctuation">.</span><span class="token constant">BOOLEAN</span><span class="token punctuation">,</span>        <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token literal-property property">defaultValue</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>  <span class="token literal-property property">freezeTableName</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">timestamps</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserModel<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> UserModel<span class="token comment">//3. 同步数据库</span><span class="token keyword">const</span> res <span class="token operator">=</span> UserModel<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">force</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">match</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">_info$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'UserModel sync success'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'UserModel sync failed:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><p>通过<code>Sequelize</code>定义数据模型，默认会对用户传入的表名添加后缀<code>s</code>,如上面代码中定义表名为<code>user_info</code>，实际同步至数据库中表名为<code>user_infos</code>，可通过参数<code>freezeTableName=true</code>定义创建表名与代码定义保持一致;</p></li><li><p>通过Sequelize定义数据模型，会自动添加三个字段：<code>id，createdAt、updatedAt</code>，其中<code>id</code>为默认自增主键，可在模型定义外通过代码显示移除，时间相关两个字段可通过参数<code>timestamps=false</code>禁止自动添加；</p></li><li><p>模型同步数据库支持参数选项：</p><ul><li><p><code>force</code>：删除同名表并重建</p></li><li><p><code>alter</code>：修改同名表结构</p></li><li><p><code>match</code>：同步前进行正则匹配</p></li></ul></li><li><p><code>Sequelize</code>支持用户通过数据库创建表，使用<code>js</code>定义模型完成数据库表与模型关联；（即不执行第三步）</p></li></ol></blockquote><h2 id="模型关联"><a href="#模型关联" class="headerlink" title="模型关联"></a>模型关联</h2><p><code>Sequelize</code>模型关联存在两个概念：</p><ul><li>源模型：关系词前方为源模型</li><li>目标模型：关系词后方为目标模型</li></ul><p>模型关联主要存在四种关系：<code>hasOne、belongsTo、hasMany、belongsToMany</code></p><ul><li><code>hasOne</code>：一对一关系，默认会向目标模型创建一个外键，也可自行指定一个目标模型中已存在外键字段，默认使用源模型主键与目标模型外键字段关联，如关联字段非源模型主键，则需同时声明源模型中用于关联的字段名：<code>{foreignKey:'xxx',sourceKey:'xxx'}</code></li><li><code>belongsTo</code>：一对一关系，默认会向源模型创建一个外键，也可自行指定一个源模型中已存在外键字段，，默认使用源模型外键与目标模型主键字段关联，如关联字段非目标模型主键，但需同时声明目标模型中用于关联的字段名：<code>{foreignKey:'xxx',targetKey:'xxx'}</code></li><li><code>hasMany</code>：一对多关系，默认会向目标模型添加一个字段，一般为源模型名+<code>id</code></li><li><code>belongsToMany</code>：多对多关系，多对多关系需使用<code>through</code>模型来实现关联；</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> StuModel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>  <span class="token string">"student"</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">class_id</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">stu_name</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">freezeTableName</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">timestamps</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ClsModel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>  <span class="token string">"class"</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">class_id</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>      <span class="token literal-property property">primaryKey</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">class_name</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">freezeTableName</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">timestamps</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StuModel<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>ClsModel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认会为StuModel创建一个外键clsmodelId，用来与ClsModel的主键进行关联</span>StuModel<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>ClsModel<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">foreignKey</span><span class="token operator">:</span> <span class="token string">'class_id'</span><span class="token punctuation">,</span> <span class="token literal-property property">targetKey</span><span class="token operator">:</span> <span class="token string">'class_id'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//如ClsModel未指定主键，则需添加targetKey字段指定目标模型中用来关联的字段名</span>ClsModel<span class="token punctuation">.</span><span class="token function">hasOne</span><span class="token punctuation">(</span>StuModel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认会为StuModel创建一个外键clsmodelId，用来与ClsModel的主键进行关联</span>ClsModel<span class="token punctuation">.</span><span class="token function">hasOne</span><span class="token punctuation">(</span>StuModel<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">foreignKey</span><span class="token operator">:</span> <span class="token string">'class_id'</span><span class="token punctuation">,</span> <span class="token literal-property property">sourceKey</span><span class="token operator">:</span> <span class="token string">'class_id'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//如ClsModel未指定主键，则需添加sourceKey字段指定目标模型中用来关联的字段名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sequelize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css布局</title>
      <link href="/2021/12/17/02-program/javascript/css-bu-ju/"/>
      <url>/2021/12/17/02-program/javascript/css-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="Css样式布局"><a href="#Css样式布局" class="headerlink" title="Css样式布局"></a>Css样式布局</h1><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>div height 100%无法显示背景色<br>添加position: fixed;</p><p>iimportant   设置优先级为最高</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js代码规范</title>
      <link href="/2021/12/16/02-program/javascript/eslint-yu-prettier/"/>
      <url>/2021/12/16/02-program/javascript/eslint-yu-prettier/</url>
      
        <content type="html"><![CDATA[<h1 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h1><p>npm i eslint-plugin-promise eslint-plugin-node eslint-plugin-import eslint-plugin-standard eslint-config-standard prettier  eslint-plugin-prettier  eslint-config-prettier babel-eslint -D</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//.prettierrc 配置文件</span><span class="token punctuation">{</span>  <span class="token string-property property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string-property property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>  <span class="token string-property property">"printWidth"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>  <span class="token string-property property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string-property property">"jsxSingleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// .eslintrc.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//由于项目中使用来jquery。。。其实不用引入jquery的，以后有机会去掉jquery后，请移除该配置。</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">'babel-eslint'</span><span class="token punctuation">,</span> <span class="token comment">//词法解析器使用babel-eslint，以更好的适配es6的新api</span>    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">//启用 ES6 语法支持;默认设置为3，5（默认）， 你可以使用 6、7、8 或 9 来指定你想要使用的 ECMAScript 版本。你也可以用使用年份命名的版本号指定为 2015（同 6），2016（同 7），或 2017（同 8）或 2018（同 9）</span>    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'module'</span><span class="token punctuation">,</span> <span class="token comment">//设置为 "script" (默认) 或 "module"（如果你的代码是 ECMAScript 模块)。</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">'standard'</span><span class="token punctuation">,</span>    <span class="token string">'eslint:recommended'</span><span class="token punctuation">,</span>    <span class="token string">'plugin:vue/essential'</span><span class="token punctuation">,</span>    <span class="token string">'plugin:prettier/recommended'</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">,</span><span class="token string">'prettier'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">'prettier/prettier'</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>    <span class="token string-property property">'generator-star-spacing'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'import/no-named-as-default'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'import/no-named-as-default-member'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'no-unused-vars'</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">'error'</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> <span class="token literal-property property">vars</span><span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span> <span class="token literal-property property">ignoreRestSiblings</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//没有使用的参数，不会报错。因为个人觉的把可用的参数写上去 有利于以后的维护。</span>    <span class="token string-property property">'vue/multi-word-component-names'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>  <span class="token comment">//关闭组件名单个单词告警</span>    <span class="token literal-property property">camelcase</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>  <span class="token comment">//关闭变量名驼峰规则告警</span>    <span class="token string-property property">'@typescript-eslist/camelcase'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过IDEA进行代码开发时，需要指定Tools–Actions on save选中 <code>run eslint --fix</code></p><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p><code>Error while loading rule 'prettier/prettier': context.getPhysicalFilename is not a function</code></p><p><code>eslint-plugin-prettie 4.x</code>与要求<code>eslint:7.28</code>以上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">load plugin <span class="token string">'vue'</span> declared <span class="token keyword">in</span> <span class="token string">'.eslintrc.js'</span><span class="token operator">:</span> Package subpath <span class="token string">'./lib/rules/array-bracket-spacing'</span>yarn add eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>vue <span class="token operator">-</span>uParsing error<span class="token operator">:</span> Must use <span class="token keyword">import</span> to load <span class="token constant">ES</span> <span class="token literal-property property">Module</span><span class="token operator">:</span>yarn add @babel<span class="token operator">/</span>eslint<span class="token operator">-</span>parser <span class="token operator">-</span>u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>idea手动指定webpack.config.js为配置文件即可识别@   路径为：nodemodule/@vue/cli.service/webpack.config.js</p><p><code>Environment key "es2021" is unknown</code></p><p>升级eslint至7.8.0版本以上即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> upgrade eslint@7.32.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js简介</title>
      <link href="/2021/12/12/02-program/javascript/node.js-jian-jie/"/>
      <url>/2021/12/12/02-program/javascript/node.js-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Nodejs是什么"><a href="#Nodejs是什么" class="headerlink" title="Nodejs是什么"></a>Nodejs是什么</h1><p><code>Node.js</code>是一个基于<code>Chrome V8</code>引擎的<code>JavaScript</code>运行时环境。</p><p><code>Node.js</code>使用事件驱动、非阻塞式I/O模型，轻量高效。</p><p><code>Node.js</code>具备世界上最大开源库生态系统：<code>npm</code></p><p>缺点：单进程，单线程，只支持单核CPU，不能充分利用多核服务器CPU性能；</p><blockquote><p>浏览器端的JS，受制于浏览器提供的接口。比如浏览器提供一个弹对话框的Api，那么JS就能弹出对话框。浏览器为了安全考虑，对文件操作，网络操作，操作系统交互等功能有严格的限制，所以在浏览器端的JS功能是受限于浏览器功能的；</p><p>NodeJs完全没有了浏览器端的限制，让Js拥有了文件操作，网络操作，进程操作等功能，和Java，Python，Php等语言已经没有什么区别了。而且由于底层使用性能超高的V8引擎来解析执行，和天然的异步IO机制，让我们编写高性能的Web服务器变得轻而易举。</p></blockquote><h1 id="Node-js能做什么"><a href="#Node-js能做什么" class="headerlink" title="Node.js能做什么"></a>Node.js能做什么</h1><ul><li>Web服务器后台</li><li>命令行工具<ul><li>npm</li><li>hexo</li></ul></li></ul><h1 id="Node-js环境安装"><a href="#Node-js环境安装" class="headerlink" title="Node.js环境安装"></a>Node.js环境安装</h1><p>登陆官网下载对应平台安装包，解压并将安装目录添加至环境变量；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://https://nodejs.org/dist/v16.13.1/node-v16.13.1-linux-x64.tar.xzxz <span class="token parameter variable">-d</span> node-v16.13.1-linux-x64.tar.xz<span class="token function">tar</span> xvf node-v16.13.1-linux-x64.tar<span class="token builtin class-name">export</span> <span class="token assign-left variable">NODE_HOME</span><span class="token operator">=</span>./node-v16.13.1-linux-x64<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$NODE_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token comment"># 验证</span><span class="token function">node</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Node-js核心模块"><a href="#Node-js核心模块" class="headerlink" title="Node.js核心模块"></a>Node.js核心模块</h1><p>核心模块即为封装在<code>node.js</code>中的相关模块</p><h2 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h2><p>fs是文件操作相关的模块</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">/*第一个参数为读取文件路径第二个参数为回调函数，回调函数接收两个形参：    err：错误对象，读取成功是为null，失败则为失败信息对象    data：数据对象，读取成功则为数据内容对象，失败则为null          读取内容为十六进制内容，可通过toString方法转换为人类可正常识别内容*/</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'../package.json'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/*第一个参数：数据写出路径第二个参数：写出内容第三个参数：回调函数（仅接受一个错误对象形参） */</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./fswrite.txt'</span><span class="token punctuation">,</span><span class="token string">'hello,node.js!'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>封装了http server和http client功能；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> http<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//注册request请求事件</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    resquset<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'text/plain;charset=utf-8'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'receive a request from: '</span><span class="token operator">+</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'response from '</span><span class="token operator">+</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is up,visit by http://localhost:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><p>封装了路径相关api接口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">'/home/bdms'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="os"><a href="#os" class="headerlink" title="os"></a>os</h2><p>封装了操作系统相关api接口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="模块规范"><a href="#模块规范" class="headerlink" title="模块规范"></a>模块规范</h1><h2 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h2><ul><li>语法：<code>const 变量名 = require('模块名称或文件名')</code><ul><li>执行加载模块中的代码</li><li>得到被加载模块中指定导出的对象</li></ul></li></ul><blockquote><ol><li><code>node</code>中没有全局作用域，仅有模块作用域；</li><li><code>require</code>优先从缓存加载，提升性能；</li><li>引用核心模块仅需提供模块名即可；</li><li>引用第三方模块类似核心模块，但第三方模块需提前安装；</li><li>引用自定义模块，需提供路径及模块文件名，文件名后缀可省略；</li><li>加载规则为：<ol><li>同级目录node_modules/模块名文件夹/package.json中main属性指定文件</li><li>同级目录node_modules/模块名文件夹下index.js</li><li>上级目录node_modules/模块名文件夹/package.json中main属性指定文件</li><li>上级目录node_modules/模块名文件夹下index.js</li><li>直至根目录仍未完成加载则报错</li></ol></li></ol></blockquote><h2 id="模块导出"><a href="#模块导出" class="headerlink" title="模块导出"></a>模块导出</h2><ul><li>语法一（导出对象，可包含多个成员）：<code>exports.foo = ‘hello’</code></li><li>语法二（导出单个成员）：<code>module.exports = ‘hello’</code><ul><li>模块中对象需通过挂载至<code>exports</code>对象上，方可支持跨模块访问；</li><li><code>exports</code>实际上是<code>module.exports</code>的一个引用；</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./exports'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// exports.js</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'hello'</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'node.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Node-js包管理器"><a href="#Node-js包管理器" class="headerlink" title="Node.js包管理器"></a>Node.js包管理器</h1><p><code>npm</code>是<code>node package manager</code>的缩写，用来管理<code>node</code>第三方包；通过<code>npm</code>安装第三方包后，会自动生成以下对象：</p><ul><li><code>node_modules</code>：存放第三方包</li><li><code>package.json</code>：<ul><li>记录项目初始化相关信息，如项目名称、版本号、描述等；</li><li>记录第三方包相关内容，如包名、版本号、依赖项等；</li><li>作为<code>npm i</code>批量安装列表</li></ul></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><code>npm init</code>：生成<code>package.json</code>并完成项目初始化；</li><li><code>npm install</code>：安装<code>package.json</code>中依赖第三方包；</li><li><code>npm install 包名</code>：仅下载第三方包；</li><li><code>npm install 包名 --save</code>：下载第三方包并添加至<code>package.json</code>中；</li><li><code>npm uninstall 包名</code>：删除指定第三方包，但保留依赖项；</li><li><code>npm uninstall 包名 --save</code>：删除指定第三方包并删除依赖项；</li></ul><blockquote><p><code>npm install</code>可简写为<code>npm i</code></p><p><code>npm install 包名 --save</code>可简写为 <code>npm install 包名 -S</code></p><p><code>npm uninstall 包名</code>可简写为<code>npm un 包名</code></p></blockquote><h2 id="npm国内源配置"><a href="#npm国内源配置" class="headerlink" title="npm国内源配置"></a>npm国内源配置</h2><p>方案一：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--global</span> cnpmcnpm <span class="token function">install</span> 包名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方案二：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改默认源地址</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span class="token comment"># 验证</span><span class="token function">npm</span> config list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h1><p>jwt，即JsonWebToken</p><h1 id="方法调用类型"><a href="#方法调用类型" class="headerlink" title="方法调用类型"></a>方法调用类型</h1><p>get</p><p>post</p><p>put</p><p>patch</p><p>delete</p><h1 id="服务自动加载"><a href="#服务自动加载" class="headerlink" title="服务自动加载"></a>服务自动加载</h1><p>nodemon：</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目开发</title>
      <link href="/2021/11/25/02-program/javascript/vue-xiang-mu-kai-fa/"/>
      <url>/2021/11/25/02-program/javascript/vue-xiang-mu-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="单页面应用程序"><a href="#单页面应用程序" class="headerlink" title="单页面应用程序"></a>单页面应用程序</h1><p>单页面应用程序简称SPA（Single Page Application），是指一个Web网站仅有唯一的一个html页面，所有功能与交互都在这个唯一的页面中完成；</p><h1 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h1><p>vue-cli是Vue.js开发的标准工具，简化开发者基于webpack创建工程化Vue项目的过程，让程序员可以专注于编写应用代码；</p><p>vue-cli是npm上的一个全局包，通过<code>npm install -g @vue/cli</code>命令进行安装；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看vue版本</span>vue <span class="token parameter variable">-V</span><span class="token comment"># 创建vue项目</span><span class="token comment">## projectname为项目名称，项目创建完成后，会自动在basepath目录下创建一个projectname子目录</span><span class="token builtin class-name">cd</span> basepathvue create projecname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue项目结构"><a href="#Vue项目结构" class="headerlink" title="Vue项目结构"></a>Vue项目结构</h1><ul><li><code>node_modules</code>：依赖包目录</li><li><code>src</code>：源码目录<ul><li><code>assets</code>：存放项目中用到的静态资源，如css、图片等；</li><li><code>components</code>：存放项目中自定义的组件；</li><li><code>main.js</code>：项目入口，项目运行时先执行该文件；</li><li><code>app.vue</code>：项目根组件；</li></ul></li><li><code>index.html</code>：应用首页</li><li><code>package.json</code>：项目依赖包信息</li></ul><h1 id="Vue项目运行流程"><a href="#Vue项目运行流程" class="headerlink" title="Vue项目运行流程"></a>Vue项目运行流程</h1><p>在工程化的Vue项目中，Vue通过<code>main.js</code>将<code>App.vue</code>渲染到<code>index.html</code>的指定区域中；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导入Vue组件</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//导入App组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token comment">//导入router组件</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'&lt;App/&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><p>组件化开发指的是根据封装的思想，将页面上可重用的UI结构封装为组件，提升项目的健壮性与可维护性；</p><p>vue项目中以<code>.vue</code>为后缀名的文件即为一个组件；</p><h2 id="组件结构"><a href="#组件结构" class="headerlink" title="组件结构"></a>组件结构</h2><p>每个vue组件都由三部分组成：<code>template</code>、<code>script</code>和<code>style</code>：</p><ul><li><code>template</code>：组件的模板结构；</li><li><code>script</code>：组件的JS行为；</li><li><code>style</code>：组件的样式；</li></ul><blockquote><p>组件<code>data</code>无法指向对象，可通过函数返回值的方式来定义数据，其他类型与js中定义一致；</p><p>组件<code>template</code>中只能有一个根节点，需要定义多个<code>div</code>时，可在外层再进行包裹；</p></blockquote><h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2><ul><li><p>组件的使用分为三个步骤：</p><ol><li><p>通过<code>import</code>导入组件；</p></li><li><p>在<code>components</code>节点中注册；</p></li><li><p>以标签方式进行引用；</p></li></ol></li><li><p>功能性组件可配置为全局组件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// vi main.js</span><span class="token keyword">import</span> Count <span class="token keyword">from</span> <span class="token string">'./components/Count.vue'</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'UdfCount'</span><span class="token punctuation">,</span> Count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>props</code>：自定义属性，支持不同组件内引用时赋予个性化的初始值；且其定义的初始值建议为只读属性，应避免修改其值,如需修改则将其值转存至<code>data</code>中；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>      init <span class="token punctuation">{</span>        <span class="token comment">//指定默认值</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token comment">//指定传入值类型</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> Number        <span class="token comment">//指定该值为比选项</span>        <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>init      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>样式（style）</p><p>样式默认为全局样式，多个组件可能会出现样式冲突，可通过<code>scoped</code>和<code>deep</code>来规避冲突</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// scoped表示当前组件生效</span><span class="token comment">// deep表示穿透覆盖子组件</span><span class="token operator">&lt;</span>style  lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">&gt;</span><span class="token operator">/</span>deep<span class="token operator">/</span> h5 <span class="token punctuation">{</span>  <span class="token literal-property property">color</span><span class="token operator">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><p>组件生命周期分为：</p><ul><li>创建阶段：<code>beforeCreate</code>（创建前）–&gt; <code>created</code>(创建) –&gt; <code>beforeMount</code>(渲染前) –&gt;<code>mounted</code> (渲染后)</li><li>运行阶段：<code>beforeUpdate</code>(更新前) –&gt; <code>updated</code> (跟新后)</li><li>销毁阶段：<code>beforeDestroy</code>(销毁前)–&gt; <code>destroyed</code>(销毁后)</li></ul><p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/489lI1.png" alt="组件生命周期"></p><ul><li><code>init(Events &amp; LifeCycle)</code>：初始化时间和生命周期函数，此时<code>props、data、methods</code>均为创建，处于不可用状态；</li><li><code>beforeCreate</code>：此时基本无法进行有效操作；</li><li><code>init(injections &amp; reactivity)</code>：初始化<code>props、data、methods</code></li><li>**<code>created</code>**：常用于调用ajax请求，并将请求到的数据转存至data中；但此时组件的UI模板尚未生成；</li><li><code>beforeMount</code>：此阶段几乎不会用到；</li><li><code>Create vm.$el</code>：用内存中html结构替换<code>el</code>属性指定的DOM元素； </li><li>**<code>mounted</code>**：完成HTML渲染，浏览器完成获取DOM结构；</li><li><code>beforeUpdate</code>：此时数据已更新，但DOM尚未更新；[^1]</li><li><code>Virtual DOM re-render</code>：更新DOM；</li><li>**<code>updated</code>**：根据数据完成了DOM更新；</li><li><code>beforeDestroy</code>：此时组件尚未销毁，组件仍在正常工作；</li><li><code>Teardown</code>：销毁<code>data、props、methods</code>等；</li><li><code>destroyed</code>：完成组件销毁；</li></ul><h2 id="组件数据共享"><a href="#组件数据共享" class="headerlink" title="组件数据共享"></a>组件数据共享</h2><ul><li><p>父组件通过自定义属性向子组件共享数据；</p></li><li><p>子组件通过自定义事件向父组件共享数据；</p></li><li><p>兄弟组件通过<code>EventBus</code>（vue 2.x）实现数据共享；</p><ul><li>创建<code>eventBus.js</code>模块，并向外共享一个Vue实例；</li><li>数据发送方：调用<code>bus.$emit('事件名',发送数据)</code>方法触发自定义事件；</li><li>数据接收方：调用<code>bus.$on('事件名',事件处理函数)</code>方法注册一个自定义时间；</li></ul><blockquote><p>基础类型为传递值，复杂对象传递对象引用；</p></blockquote></li></ul><h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><p>通过<code>&lt;component&gt;</code>标签可以用于在HTML中进行占位，通过<code>:is='xxx'</code>来绑定要渲染的组件名称即可实现动态渲染组件</p><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>通过<code>&lt;slot&gt;</code>可用于组件中预留不确定区域，在实际使用时根据传入元素进行渲染；</p><ul><li>默认插槽名称为<code>default</code>，在实际渲染时，可直接在组件内容区域填写元素即可；</li><li>使用组件时，可通过<code>v-slot:xxx</code>来指定元素将要渲染的插槽位置，但<code>v-sloth</code>不能直接作用与元素，需通过<code>template</code>来进行包裹，其中<code>v-slot:</code>可简写为<code>#</code>；</li><li>插槽定义时，可以指定默认值，当渲染组件未传入元素时，将使用默认内容填充插槽区域；</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Left</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>demo</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>this is Left content area<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Left</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left-con<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Left Component {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>this is default content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>声明插槽时指定插槽名称，即为具名插槽，未指定名称即为默认插槽；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="作用于插槽"><a href="#作用于插槽" class="headerlink" title="作用于插槽"></a>作用于插槽</h3><p>声明插槽的同时为插槽定义数据，则为作用于插槽；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>通过<code>directives</code>节点来进行自定义指令声明；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//私有自定义指令</span><span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'trigger bind func'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">update</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'trigger update func'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment">//简写（bind与update逻辑一致方可简写）</span>    <span class="token function">color1</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment">//全局自定义指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>默认子路由与重定向</p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>路径参数与查询参数</p><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>声明式导航：点击链接跳转方式实现；</p><p>编程式导航：调用api方式实现；</p><ul><li><code>push</code>：跳转至指定hash地址，并增加一条历史记录；</li><li><code>replace</code>：跳转至指定hash地址，并替换当前历史记录；</li><li><code>go</code>：按照访问立即记录进行指定步长跳转；<ul><li><code>back</code>：后退一层，相当于<code>go(-1)</code></li><li><code>forward</code>：前进一层，相当于<code>go(1)</code></li></ul></li></ul><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><ul><li>全局前置守卫</li></ul><p>用于控制路由的访问权限；</p><p>回调函数的三种调用方式：</p><ul><li><code>next()</code>：具备权限，直接跳转过去；</li><li><code>next('/login')</code>：不具备权限，跳转至登陆页面；</li><li><code>next(false)</code>：不具备权限，停留在当前页面；</li></ul><h1 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h1><p><code>ESLint</code>是一种可组装的<code>JavaScript</code>及<code>JSX</code>代码检查工具；</p><p><code>.eslintrc.js</code>为其配置文件:</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">// https://eslint.org/docs/user-guide/configuringmodule.exports = {  root: true,  parserOptions: {    parser: 'babel-eslint'  },  env: {    browser: true,  },  extends: [    'plugin:vue/essential',     // https://github.com/standard/standard/blob/master/docs/RULES-en.md    'standard'  ],  // required to lint *.vue files  plugins: [    'vue'  ],  // add your custom rules here  rules: {    // allow async-await    'generator-star-spacing': 'off',    // allow debugger during development    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off'  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>定义全局相关功能放到<code>main.js</code>文件中；</li><li>在导入组件时，如果指定导入的为一个文件夹，则默认导入该文件夹下<code>index.js</code>文件；</li><li></li></ol></blockquote><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol><li><p><strong>Q：</strong><code>TypeError: this.getOptions is not a function</code></p><p><strong>A:</strong> 该报错一般为<code>less-loader</code>版本过高导致；</p></li><li><p><strong>Q：</strong><code>  TypeError: loaderContext.getResolve is not a function</code></p><p><strong>A：</strong> 该报错一般为<code>less</code>与<code>less-loader</code>版本不匹配导致；vue2.x推荐<code>less@2.9.0</code>+<code>less-loader@5.0.0</code></p></li></ol><pre><code> `ReferenceError: BASE_URL is not defined` 修改`public/index.html`文件中`&lt;link rel="icon" href="&lt;%= BASE_URL %&gt;favicon.ico"&gt;`代码为 `&lt;link rel="icon" href="&lt;%= htmlWebpackPlugin.options.url %&gt;favicon.ico"&gt;`</code></pre><p>减少打包文件大小：<br>取消部分模块打包，在public/index.html中使用cdn资源<br>     configureWebpack: config =&gt; {<br>  if (process.env.NODE_ENV === “production”) {<br>   config.externals = { // 不会被打包的库<br>    ‘vue’: ‘Vue’,<br>    ‘vue-router’: ‘VueRouter’,<br>    ‘moment’: ‘moment’<br>   }<br>  }<br> }</p><script src="https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.runtime.min.js"></script><script src="https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HiveSQL功能代码</title>
      <link href="/2021/11/24/98-snippet/hivesql-gong-neng-dai-ma/"/>
      <url>/2021/11/24/98-snippet/hivesql-gong-neng-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="HiveSQL功能代码"><a href="#HiveSQL功能代码" class="headerlink" title="HiveSQL功能代码"></a>HiveSQL功能代码</h1><h2 id="动态生成日期序列"><a href="#动态生成日期序列" class="headerlink" title="动态生成日期序列"></a>动态生成日期序列</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> date_add<span class="token punctuation">(</span><span class="token string">'2021-01-01'</span><span class="token punctuation">,</span>lvp<span class="token punctuation">.</span>i<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">date</span> <span class="token keyword">from</span> poc<span class="token punctuation">.</span>demo t lateral <span class="token keyword">view</span> posexplode<span class="token punctuation">(</span>split<span class="token punctuation">(</span>space<span class="token punctuation">(</span>datediff<span class="token punctuation">(</span><span class="token string">'2021-12-31'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'2021-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> lvp <span class="token keyword">as</span> i<span class="token punctuation">,</span>pos <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="判断指定日期为周几"><a href="#判断指定日期为周几" class="headerlink" title="判断指定日期为周几"></a>判断指定日期为周几</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> pmod<span class="token punctuation">(</span>datediff<span class="token punctuation">(</span><span class="token string">'2021-11-24'</span><span class="token punctuation">,</span><span class="token string">'2012-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数：第一个日期为待判断日期，第二个日期为任选的一个周日的日期，第三个参数为一周的天数</p><p>返回值：0-6，表示周日-周六</p><p>说明：通过两个日期相减后，对7取余，余数即为当前的周几</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue框架介绍</title>
      <link href="/2021/11/23/02-program/javascript/vue-kuang-jia-jie-shao/"/>
      <url>/2021/11/23/02-program/javascript/vue-kuang-jia-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Vue"><a href="#什么是Vue" class="headerlink" title="什么是Vue"></a>什么是Vue</h1><ul><li><p>构建用户界面</p><p>通过vue向html页面中填充数据，开发便捷；</p></li><li><p>框架</p><p>将前端开发沉淀为一套解决方案，程序员根据框架规范，可以直接复用框架去完成业务功能开发；</p></li></ul><h1 id="Vue特性"><a href="#Vue特性" class="headerlink" title="Vue特性"></a>Vue特性</h1><h2 id="数据驱动视图"><a href="#数据驱动视图" class="headerlink" title="数据驱动视图"></a>数据驱动视图</h2><ul><li><p>数据变化会驱动视图自动更新；</p><blockquote><p>程序员是需要维护数据，vue会自动根据数据进行渲染；</p></blockquote></li></ul><h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><ul><li>js数据变化，自动渲染至页面；</li><li>页面表单采集数据，vue自动获取并更新至js中；</li></ul><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>MVVM指的是Model、View、ViewModel，它将每个HTML页面拆分为三部分，如图所示：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/vFYdsH.png" style="zoom:30%; "><p>其中：</p><p><code>Model</code>表示当前页面渲染时所依赖的数据源；</p><p><code>View</code>表示当前页面所渲染的DOM结构；</p><p><code>ViewModel</code>表示vue的实例，也是MVVM的核心；</p><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><p>指令（<code>Direcctives</code>）是vue为开发者提供的模板语法，用于辅助开发者渲染页面数据；</p><p>vue中指令按照用途不同可以分为6大类：</p><ul><li><p>内容渲染指令</p><ul><li><p><code>v-text</code>:将数据内容渲染至标签中，但会覆盖标签内原有内容，实际开发中使用较少；</p></li><li><p><code>{{}}</code>:<code>Mustache</code>,也叫插值表达式，将表达式中变量内容渲染至页面对应位置；</p><blockquote><p>插值表达式只能用在内容节点，不可用在属性节点</p></blockquote></li><li><p><code>v-html</code>:将带标签的数据渲染成真正的html内容；</p></li></ul></li><li><p>属性绑定指令</p><ul><li><p><code>v-bind</code>：为元素的属性实现动态绑定；可简写为冒号<code>:</code>;</p><blockquote><p>绑定属性如果为为一个表达式，包含字符串时，字符串需使用单引号包围，否则会当做变量去data中查找；</p></blockquote></li></ul></li><li><p>事件绑定指令</p><ul><li><code>v-on</code>:为事件绑定处理方法，可简写为<code>@</code>;<ul><li>事件修饰符：针对事件触发时配置默认行为<ul><li><code>prevent</code>：阻止默认行为，如阻止链接跳转、阻止表单提交等；</li><li><code>stop</code>:阻止冒泡事件；</li><li><code>capture</code>:已捕获模式触发当前事件处理函数；</li><li><code>once</code>：绑定事件仅触发一次；</li><li><code>self</code>:只有在<code>event.target</code>是当前元素自身时触发处理函数；</li></ul></li><li>按键修饰符:根据键盘事件触发响应操作；<ul><li><code>esc</code>：键盘按键esc触发对应函数操作；</li><li><code>enter</code>：键盘按键enter触发对应函数操作；</li></ul></li></ul></li></ul></li><li><p>双向绑定指令</p><ul><li><p><code>v-model</code>：辅助程序员在不操作DOM情况下，快速获取表单数据;</p><ul><li><code>number</code>：将表单输入字符串转换为数字；</li><li><code>trim</code>：将表单输入内容去除前后空格；</li><li><code>lazy</code>：懒加载模式，当表单失去焦点时进行双向同步；</li></ul><blockquote><p>常用表单元素有<code>input</code>、<code>textarea</code>、<code>select</code>等</p></blockquote></li></ul></li><li><p>条件渲染指令</p><ul><li><p><code>v-if</code>：根据条件选择是否显示元素，实现原理为动态添加或移除元素来实现；</p></li><li><p><code>v-show</code>：根据条件选择是否显示元素，实现原理为对元素动态添加或移除<code>display:none</code>样式来实现；</p><blockquote><p>频繁切换元素显示状态，v-show性能较好；</p><p>部分元素默认不需要展示，使用v-if加载速度较快；</p><p>实际开发一般使用<code>.vue</code>单文件模式，直接使用v-if即可；</p></blockquote></li></ul></li><li><p>列表渲染指令</p><ul><li><p><code>v-for</code>：循环遍历数据中列表渲染生成列表元素；</p><blockquote><p>官方建议在使用v-for时，最好绑定遍历元素的id值至key；key值绑定必须为数字或字符串，且内容需唯一(索引不具备唯一性);</p></blockquote></li></ul></li></ul><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器（Filter）仅可用于vue2.x，常用于进行文本格式化，可用于插值表达式及<code>v-bind</code>中，过滤器应该添加在js表达式尾部，由管道符进行调用；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script <span class="token operator">&gt;</span>  <span class="token comment">//全局过滤器</span>  Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'Cap'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'...'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">//创建vue实例</span>  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>      <span class="token comment">//指定vm需要控制的页面区域</span>      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      <span class="token comment">//定义需要渲染的数据</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'semon'</span><span class="token punctuation">,</span>        <span class="token literal-property property">brand</span> <span class="token operator">:</span> <span class="token string">'Bmw'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//私有过滤器</span>      <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">cap</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">const</span> letter <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">const</span> res <span class="token operator">=</span> letter <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> res        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>过滤器本质是一个有返回值的函数，需在Vue中filters节点中；</p><p>过滤器的第一个参数为管道符传递过来的内容，过滤器允许传入多个参数；</p><p>过滤器分为全局过滤器与私有过滤器，如果过滤器名字相同，则优先使用私有过滤器；</p><p>全局过滤器需在script最上方定义；</p><p>过滤器支持串联调用；</p></blockquote><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>侦听器(Watch)用于侦测数据变化，从而针对数据变化触发特定操作；侦听器支持函数式与对象式；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script <span class="token operator">&gt;</span>  <span class="token comment">//创建vue实例</span>  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>      <span class="token comment">//指定vm需要控制的页面区域</span>      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      <span class="token comment">//定义需要渲染的数据</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'semon'</span>        <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'admin'</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">username</span><span class="token punctuation">(</span><span class="token parameter">newVaule<span class="token punctuation">,</span>oldVaule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watch username : "</span> <span class="token operator">+</span> newVaule <span class="token operator">+</span> <span class="token string">" and oldValue is "</span> <span class="token operator">+</span> oldVaule<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">//对象式</span>        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVaule<span class="token punctuation">,</span>oldVaule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"obj watch: username : "</span> <span class="token operator">+</span> newVaule <span class="token operator">+</span> <span class="token string">" and oldValue is "</span> <span class="token operator">+</span> oldVaule<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">//深度侦听</span>        <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"deep watch :"</span> <span class="token operator">+</span> newValue<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">//深度侦听变形</span>        <span class="token string">'info.username'</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"deep watch transform: username : "</span> <span class="token operator">+</span> newValue <span class="token operator">+</span> <span class="token string">" and oldValue is "</span> <span class="token operator">+</span> oldValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>侦听器本质上也是一个函数，函数名与侦听数据名保持一致；</p><p>函数式侦听器无法进入页面立刻触发;</p><p>对象式侦听器可以进入页面立刻触发,对象式侦听器支持多层嵌套数据变化侦听；</p><p>典型应用场景：注册用户名占用判断</p></blockquote><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性是指通过一系列运算后最终得到一个属性值，得到的属性值可用于模板、方法及指令中使用；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script <span class="token operator">&gt;</span>  <span class="token comment">//创建vue实例</span>  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>      <span class="token comment">//指定vm需要控制的页面区域</span>      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      <span class="token comment">//定义需要渲染的数据</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>g<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>计算属性按照函数形式定义，使用时直接当做普通属性使用；</p><p>能够实现实现代码复用，计算属性来源发生变更，会自动触发重新求值；</p></blockquote><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>axios是一个专注于网络请求的基础库；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../lib/axios.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script <span class="token operator">&gt;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'https://petstore.swagger.io/v2/store/inventory'</span><span class="token punctuation">,</span>        <span class="token comment">//get请求传参</span>    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//post请求传参</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">inventory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inventory<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用async修饰，且方法返回值为promise对象，则方法前可用await</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境配置</title>
      <link href="/2021/11/17/02-program/python/python-huan-jing-pei-zhi/"/>
      <url>/2021/11/17/02-program/python/python-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>Q: <code>sys.stderr.write(f"ERROR: {exc}")</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"/usr/bin/pip"</span><span class="token punctuation">,</span> line <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    load_entry_point<span class="token punctuation">(</span><span class="token string">'pip==21.0.1'</span><span class="token punctuation">,</span> <span class="token string">'console_scripts'</span><span class="token punctuation">,</span> <span class="token string">'pip'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python2.7/site-packages/pkg_resources.py"</span><span class="token punctuation">,</span> line <span class="token number">378</span><span class="token punctuation">,</span> <span class="token keyword">in</span> load_entry_point    <span class="token keyword">return</span> get_distribution<span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">.</span>load_entry_point<span class="token punctuation">(</span>group<span class="token punctuation">,</span> name<span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python2.7/site-packages/pkg_resources.py"</span><span class="token punctuation">,</span> line <span class="token number">2566</span><span class="token punctuation">,</span> <span class="token keyword">in</span> load_entry_point    <span class="token keyword">return</span> ep<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python2.7/site-packages/pkg_resources.py"</span><span class="token punctuation">,</span> line <span class="token number">2260</span><span class="token punctuation">,</span> <span class="token keyword">in</span> load    entry <span class="token operator">=</span> <span class="token builtin">__import__</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>module_name<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'__name__'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python2.7/site-packages/pip/_internal/cli/main.py"</span><span class="token punctuation">,</span> line <span class="token number">60</span>    sys<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"ERROR: </span><span class="token interpolation"><span class="token punctuation">{</span>exc<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>A: 因python停止对2.7版本支持，需对pip进行降级</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://bootstrap.pypa.io/pip/2.7/get-pip.pypython get-pip.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json技术比较</title>
      <link href="/2021/10/08/02-program/json-ji-zhu-bi-jiao/"/>
      <url>/2021/10/08/02-program/json-ji-zhu-bi-jiao/</url>
      
        <content type="html"><![CDATA[<p>目前主流的Json技术主要有四类：<code>json-lib</code>、<code>jackson</code>、<code>gson</code>以及<code>fast-json</code>；</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="json-lib"><a href="#json-lib" class="headerlink" title="json-lib"></a>json-lib</h2><p>项目地址：<a href="http://json-lib.sourceforge.net/index.html">http://json-lib.sourceforge.net/index.html</a></p><p><code>json-lib</code>是最早也是应用最广泛是json解析工具，但其需要较多第三方包，如<code>commons-beanutils.jar</code>、<code>commons-collections.jar</code>、<code>commons-lang.jar</code>、<code>commons-logging.jar</code>、<code>ezmorph.jar</code>等；</p><ul><li>缺点：<ul><li>对于复杂类型的转换，<code>json-lib</code>对于json转换成bean还存在缺陷，比如一个类中存在另一个类的List或者Map引用就会出现问题，且<code>json-lib</code>在功能和性能上均已不能满足需求；</li></ul></li></ul><h2 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h2><p>项目地址：<a href="https://github.com/FasterXML/jackson">https://github.com/FasterXML/jackson</a></p><p><code>jackson</code>是当前使用比较广泛的序列化和反序列化json的Java开源框架；<code>Jackson</code>社区相对比较活跃，更新速度也比较快，从Github中的统计来看，<code>jackson</code>也是当前最流行的json解析器之一，Spring MVC默认的json解析器就是<code>jackson</code>。</p><ul><li>优点：<ul><li><code>ackson</code>依赖的jar包较少，简单易用；</li><li>解析大文件速度快；</li><li>运行时占用内存较低，性能较好；</li><li>具备灵活的api，方便扩展和定制；</li></ul></li><li>缺点：<ul><li>转换复杂类型的bean为json时，转换的json格式不是标准json格式；</li><li>复杂类型的json转换为bean或者Map/List转换可能存在问题；</li></ul></li></ul><h2 id="gson"><a href="#gson" class="headerlink" title="gson"></a>gson</h2><p>项目地址：<a href="https://github.com/google/gson">https://github.com/google/gson</a></p><p><code>gson</code>是目前功能最全的json解析神器，<code>gson</code>最初为Google公司内部需求研发而来，自2008年5月公开发布后被许多公司及用户应用；<code>gson</code>的应用主要为<code>toJson</code>与<code>fromJson</code>两个转换函数，无需依赖额外的Jar包，能够直接运行在JDK上；</p><ul><li>优点：<ul><li>功能全面，支持各种复杂类型转换；</li></ul></li><li>缺点：<ul><li>性能稍弱；</li></ul></li></ul><h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><p>项目地址：<a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p><p><code>fastjson</code>是一个java语言编写的高性能的json处理器，由阿里巴巴开发；不需要依赖额外的Jar包，能够直接运行在JDK上；</p><ul><li>缺点：<ul><li>转换复杂类型的bean为json，可能会出现引用类型导致json转换出错；</li></ul></li><li>优点：<ul><li>采用独创算法，将<code>parse</code>的速度提升到极致，超过所有json库；</li></ul></li></ul><blockquote><p>综上技术对比，在项目选型的时候可选择<code>gson</code>+<code>fastjson</code>并行使用；</p><p>若只有功能需求，无性能要求，可选择使用<code>gson</code>；若存在性能要求，则建议使用<code>gson</code>将bean转换为json确保数据正确，使用<code>fastjson</code>将json转换为bean；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hbase常见问题</title>
      <link href="/2021/08/30/03-hadoop/hbase/hbase-chang-jian-wen-ti/"/>
      <url>/2021/08/30/03-hadoop/hbase/hbase-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>如何查看Hbase超级管理员账号？</p><p>通过<code>hbase-site.xml</code>配置文件中<code>hbase.superuser</code>配置项定义，如未定义，一般默认为进程启动用户为超级管理员用户；</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hbase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA+Gradle项目配置</title>
      <link href="/2021/08/26/05-dev/idea-xiang-mu-pei-zhi/"/>
      <url>/2021/08/26/05-dev/idea-xiang-mu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA项目配置"><a href="#IDEA项目配置" class="headerlink" title="IDEA项目配置"></a>IDEA项目配置</h1><p>IDEA默认集成了Gradle插件，项目创建后会自动创建<code>$USER_HOME/.gradle</code>目录，用于存放gradle配置及依赖包文件；</p><h2 id="Gradle源地址配置"><a href="#Gradle源地址配置" class="headerlink" title="Gradle源地址配置"></a>Gradle源地址配置</h2><p>Gradle根据依赖信息从源地址下载依赖包，默认镜像源为国外源地址，下载速度较慢；实际开发时可修改全局配置，将镜像源指向国内源地址，对所有gradle项目均生效；</p><h2 id="Gradle全局源配置"><a href="#Gradle全局源配置" class="headerlink" title="Gradle全局源配置"></a>Gradle全局源配置</h2><p>在<code>${USER_HOME}/.gradle/</code>目录下新建<code>init.gradle</code>文件，添加以下内容：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> repoConfig <span class="token operator">=</span> <span class="token punctuation">{</span>    all <span class="token punctuation">{</span> ArtifactRepository repo <span class="token operator">-&gt;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>repo <span class="token keyword">instanceof</span> <span class="token class-name">MavenArtifactRepository</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">def</span> url <span class="token operator">=</span> repo<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'maven.apache'</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'maven.org'</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'jcenter.bintray'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                remove repo            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    maven <span class="token punctuation">{</span> url <span class="token string">'https://maven.aliyun.com/repository/central'</span> <span class="token punctuation">}</span>    maven <span class="token punctuation">{</span> url <span class="token string">'https://maven.aliyun.com/repository/jcenter'</span> <span class="token punctuation">}</span>    maven <span class="token punctuation">{</span> url <span class="token string">'https://maven.aliyun.com/repository/google'</span> <span class="token punctuation">}</span>    maven <span class="token punctuation">{</span> url <span class="token string">'https://maven.aliyun.com/repository/gradle-plugin'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//项目依赖包源配置</span>allprojects <span class="token punctuation">{</span>    <span class="token comment">//gradle脚本依赖源信息</span>    buildscript <span class="token punctuation">{</span>        repositories repoConfig    <span class="token punctuation">}</span>    repositories repoConfig<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Gradle项目配置"><a href="#Gradle项目配置" class="headerlink" title="Gradle项目配置"></a>Gradle项目配置</h2><p>Gradle项目创建时，会自动生成配置信息：</p><ul><li><code>build.gradle</code>，主要用于配置插件、源地址、依赖包以及自定义任务；<ul><li><code>plugins</code>：新版DSL配置插件信息；</li><li><code>apply plugin</code>：老版配置插件信息；</li><li><code>repositories</code>：配置依赖源地址；</li><li><code>dependencies</code>：配置依赖包信息；</li></ul></li><li><code>settings.gradle</code>，主要定义项目和模块依赖信息；<ul><li><code>rootProject.name</code>：配置项目名称；</li><li><code>include</code>：配置子模块名称</li></ul></li><li><code>xxx.gradle</code>：自定义配置文件，主要用于定义自定义<code>task</code>或变量；</li><li><code>gradle.properties</code>：用于定义属性信息；主要用于配置项目或模块属性，格式为KV；</li></ul><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">// build.gradle配置文件</span>plugins <span class="token punctuation">{</span>    id <span class="token interpolation-string"><span class="token string">"com.github.johnrengelman.shadow"</span></span> version <span class="token interpolation-string"><span class="token string">"7.0.0"</span></span><span class="token punctuation">}</span>allprojects <span class="token punctuation">{</span>    apply from<span class="token punctuation">:</span> rootProject<span class="token punctuation">.</span><span class="token function">getRootDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token interpolation-string"><span class="token string">"/func.gradle"</span></span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'java-library'</span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'eclipse'</span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'com.github.johnrengelman.shadow'</span>    <span class="token comment">//download dependcies jar source code</span>    eclipse <span class="token punctuation">{</span>        classpath <span class="token punctuation">{</span>            downloadSources<span class="token operator">=</span><span class="token boolean">true</span>            downloadJavadoc <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    group <span class="token string">'org.semon'</span>    version <span class="token string">'v1.0'</span>    repositories <span class="token punctuation">{</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>      <span class="token comment">//slf4j核心依赖</span>        implementation <span class="token string">'org.slf4j:slf4j-api:1.7.32'</span>      <span class="token comment">//slf4j实现类，声明slf4j使用log4j2日志</span>        implementation <span class="token string">'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'</span>      <span class="token comment">//log4j2核心包</span>        implementation <span class="token string">'org.apache.logging.log4j:log4j-core:2.14.1'</span>        implementation <span class="token string">'org.apache.logging.log4j:log4j-api:2.14.1'</span>           <span class="token comment">//lombok效率包</span>        compileOnly <span class="token string">'org.projectlombok:lombok:1.18.20'</span>      <span class="token comment">//junit测试包</span>        compileOnly <span class="token string">'junit:junit:4.13.2'</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> projectName <span class="token operator">=</span> <span class="token string">'CodeSediment'</span>    <span class="token keyword">def</span> v_baseName <span class="token operator">=</span> <span class="token string">'demo'</span>    <span class="token keyword">def</span> v_classifier <span class="token operator">=</span> <span class="token string">'dev'</span>    <span class="token keyword">def</span> v_version <span class="token operator">=</span> <span class="token string">'v1.0'</span>    <span class="token keyword">def</span> v_className <span class="token operator">=</span> <span class="token string">'org.semon.Main'</span><span class="token comment">//parse project properties</span>    task parseProp <span class="token punctuation">{</span>        projectName <span class="token operator">=</span> project<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        v_baseName <span class="token operator">=</span> project<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>projectName<span class="token operator">+</span><span class="token string">'.v_baseName'</span><span class="token punctuation">]</span>        v_classifier <span class="token operator">=</span> project<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>projectName<span class="token operator">+</span><span class="token string">'.v_classifier'</span><span class="token punctuation">]</span>        v_version <span class="token operator">=</span> project<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>projectName <span class="token operator">+</span> <span class="token string">'.v_version'</span><span class="token punctuation">]</span>        v_className <span class="token operator">=</span> project<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>projectName <span class="token operator">+</span> <span class="token string">'.v_className'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    shadowJar <span class="token punctuation">{</span>        archiveBaseName <span class="token operator">=</span> v_baseName        archiveClassifier <span class="token operator">=</span> v_classifier        archiveVersion <span class="token operator">=</span> v_version        manifest <span class="token punctuation">{</span>            <span class="token function">attributes</span><span class="token punctuation">(</span><span class="token string">'Main-Class'</span><span class="token punctuation">:</span> v_className<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">//exclude properties file</span>        <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token string">'system.properties'</span><span class="token punctuation">)</span>        <span class="token comment">//exclude specified jar</span>        dependencies <span class="token punctuation">{</span>            <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token function">dependency</span><span class="token punctuation">(</span><span class="token string">'org.mongodb:mongo-java-driver:3.3.0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">//include build.gradle</span>        <span class="token function">from</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"./"</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            include <span class="token string">'build.gradle'</span>        <span class="token punctuation">}</span>        <span class="token comment">// fix pack file more than 65535 files</span>        zip64 <span class="token boolean">true</span>    <span class="token punctuation">}</span>    shadowJar<span class="token punctuation">.</span><span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"parseProp"</span></span><span class="token punctuation">)</span>    task packJar <span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'clean'</span><span class="token punctuation">,</span><span class="token string">'shadowJar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    jar <span class="token punctuation">{</span>        manifest <span class="token punctuation">{</span>            attributes <span class="token interpolation-string"><span class="token string">"Main-Class"</span></span><span class="token punctuation">:</span> v_className        <span class="token punctuation">}</span>        from <span class="token punctuation">{</span>            configurations<span class="token punctuation">.</span>compileClasspath<span class="token punctuation">.</span>collect<span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> it <span class="token punctuation">:</span> <span class="token function">zipTree</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// settings.gradle  </span>rootProject<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'CodeSediment'</span>include <span class="token string">'01-utils'</span><span class="token comment">// gradle.properties</span>archBaseName <span class="token operator">=</span> utils<span class="token number">01</span><span class="token operator">-</span>utils<span class="token punctuation">.</span>v_baseName <span class="token operator">=</span> utils<span class="token number">01</span><span class="token operator">-</span>utils<span class="token punctuation">.</span>v_classifier <span class="token operator">=</span> release<span class="token number">01</span><span class="token operator">-</span>utils<span class="token punctuation">.</span>v_version <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token number">0</span><span class="token number">01</span><span class="token operator">-</span>utils<span class="token punctuation">.</span>v_className<span class="token operator">=</span> org<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>FileUtils<span class="token comment">//func.gradle</span><span class="token keyword">def</span> projectName <span class="token operator">=</span> <span class="token string">'CodeSediment'</span><span class="token keyword">def</span> v_baseName <span class="token operator">=</span> <span class="token string">'demo'</span><span class="token keyword">def</span> v_classifier <span class="token operator">=</span> <span class="token string">'dev'</span><span class="token keyword">def</span> v_version <span class="token operator">=</span> <span class="token string">'v1.0'</span><span class="token keyword">def</span> v_className <span class="token operator">=</span> <span class="token string">'org.semon.Main'</span><span class="token comment">//parse project properties</span>task parseProp <span class="token punctuation">{</span>  projectName <span class="token operator">=</span> project<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  v_baseName <span class="token operator">=</span> project<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>projectName<span class="token operator">+</span><span class="token string">'.v_baseName'</span><span class="token punctuation">]</span>  v_classifier <span class="token operator">=</span> project<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>projectName<span class="token operator">+</span><span class="token string">'.v_classifier'</span><span class="token punctuation">]</span>  v_version <span class="token operator">=</span> project<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>projectName <span class="token operator">+</span> <span class="token string">'.v_version'</span><span class="token punctuation">]</span>  v_className <span class="token operator">=</span> project<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>projectName <span class="token operator">+</span> <span class="token string">'.v_className'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>shadowJar <span class="token punctuation">{</span>  archiveBaseName <span class="token operator">=</span> v_baseName  archiveClassifier <span class="token operator">=</span> v_classifier  archiveVersion <span class="token operator">=</span> v_version  manifest <span class="token punctuation">{</span>    <span class="token function">attributes</span><span class="token punctuation">(</span><span class="token string">'Main-Class'</span><span class="token punctuation">:</span> v_className<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">//exclude properties file</span>  <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token string">'system.properties'</span><span class="token punctuation">)</span>  <span class="token comment">//exclude specified jar</span>  dependencies <span class="token punctuation">{</span>    <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token function">dependency</span><span class="token punctuation">(</span><span class="token string">'org.mongodb:mongo-java-driver:3.3.0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">//include build.gradle</span>  <span class="token function">from</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"./"</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    include <span class="token string">'build.gradle'</span>  <span class="token punctuation">}</span>  <span class="token comment">// fix pack file more than 65535 files</span>  zip64 <span class="token boolean">true</span><span class="token punctuation">}</span>shadowJar<span class="token punctuation">.</span><span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"parseProp"</span></span><span class="token punctuation">)</span>task packJar <span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'clean'</span><span class="token punctuation">,</span><span class="token string">'shadowJar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>jar <span class="token punctuation">{</span>        manifest <span class="token punctuation">{</span>            attributes <span class="token interpolation-string"><span class="token string">"Main-Class"</span></span><span class="token punctuation">:</span> v_className        <span class="token punctuation">}</span>        from <span class="token punctuation">{</span>            configurations<span class="token punctuation">.</span>compileClasspath<span class="token punctuation">.</span>collect<span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> it <span class="token punctuation">:</span> <span class="token function">zipTree</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>task showProp <span class="token punctuation">{</span>    println  project<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span>archBaseName<span class="token punctuation">)</span><span class="token punctuation">}</span>task showProps <span class="token punctuation">{</span>    println project<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>each <span class="token punctuation">{</span>        println <span class="token interpolation-string"><span class="token string">"properties: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">it<span class="token punctuation">.</span>key</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">it<span class="token punctuation">.</span>value</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>task showRepos <span class="token punctuation">{</span>    repositories<span class="token punctuation">.</span>each <span class="token punctuation">{</span>        println <span class="token interpolation-string"><span class="token string">"repository: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">it<span class="token punctuation">.</span>url</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 示例任务</span>task <span class="token function">copyDemo</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Copy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'sourceSets/'</span><span class="token punctuation">)</span>    <span class="token function">into</span><span class="token punctuation">(</span><span class="token string">'/build'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>task <span class="token function">zipDemo</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Zip<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'/build'</span><span class="token punctuation">)</span>    destinationDirectory <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'target/libs'</span><span class="token punctuation">)</span>    archiveBaseName <span class="token operator">=</span> <span class="token string">'org.demo'</span>    archiveAppendix <span class="token operator">=</span> <span class="token string">'root'</span>    archiveVersion <span class="token operator">=</span> <span class="token string">'v1.0'</span><span class="token punctuation">}</span>task <span class="token function">tarDemo</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Tar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'build'</span><span class="token punctuation">)</span>    archiveBaseName <span class="token operator">=</span> <span class="token string">'org.semon'</span>    destinationDirectory <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'target/libs'</span><span class="token punctuation">)</span>    archiveClassifier <span class="token operator">=</span> <span class="token string">'release'</span>    archiveVersion <span class="token operator">=</span> <span class="token string">'v1.0'</span>    compression <span class="token operator">=</span> <span class="token string">'GZIP'</span><span class="token punctuation">}</span>task <span class="token function">execDemo</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Exec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    executable <span class="token string">'ls'</span>    <span class="token function">args</span><span class="token punctuation">(</span><span class="token string">'-l'</span><span class="token punctuation">,</span> workingDir<span class="token punctuation">)</span><span class="token punctuation">}</span>task <span class="token function">syncDemo</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'target/libs'</span><span class="token punctuation">)</span>    <span class="token function">into</span><span class="token punctuation">(</span><span class="token string">'build'</span><span class="token punctuation">)</span>    preserve <span class="token punctuation">{</span>        <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">'extraDir/*'</span><span class="token punctuation">)</span>        <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">'dir1/*'</span><span class="token punctuation">)</span>        <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token string">'dir2/a.txt'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Gradle构建生命周期"><a href="#Gradle构建生命周期" class="headerlink" title="Gradle构建生命周期"></a>Gradle构建生命周期</h2><p>Gradle的构建过程有着固定的生命周期，分别为：</p><ol><li>初始化阶段</li><li>配置阶段</li><li>执行阶段</li></ol><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><p>初始化阶段主要任务是：创建项目的层次结构，并为每个项目创建一个Project实例对象；</p><p>在初始化阶段，会执行<code>settings.gradle</code>脚本，并读取其中的<code>include</code>信息，进而为每一个模块(<code>build.gradle</code>文件）创建一个与之对应的Project对象，最终形成一个项目的层次结构；</p><h3 id="配置阶段"><a href="#配置阶段" class="headerlink" title="配置阶段"></a>配置阶段</h3><p>配置阶段的任务是：执行各项目下的<code>build.gradle</code>脚本，完成Project配置，并构造Task任务依赖关系图以便在执行阶段按照依赖关系执行Task；</p><h4 id="配置阶段代码执行"><a href="#配置阶段代码执行" class="headerlink" title="配置阶段代码执行"></a>配置阶段代码执行</h4><p>配置阶段是我们最长接触到的构建阶段，比如应用外部构建插件<code>apply plugin: java</code>等；</p><p>每个<code>build.gradle</code>脚本文件对应一个Project对象，在初始化阶段创建；配置阶段执行的代码包括：</p><ul><li><code>build.gradle</code>中的各种语句</li><li>闭包</li><li>Task中的配置段语句</li></ul><p>执行任何Gradle命令，在初始化阶段和配置阶段的代码都会被执行；</p><blockquote><p>Task中除了Action外的代码段都在配置阶段执行；（属性配置，语句打印等都会在配置阶段执行）</p></blockquote><h4 id="Task依赖关系配置"><a href="#Task依赖关系配置" class="headerlink" title="Task依赖关系配置"></a>Task依赖关系配置</h4><p>配置阶段另外一个重要的任务就是构建Task依赖关系的有向无环图，简单的说，就是给所有的Task安排一个执行顺序，在执行阶段，就按照这个顺序执行所有的Task任务；</p><h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><p>执行阶段就是根据配置阶段构建的Task依赖关系去执行相关的Task；</p><p>当我们运行项目的时候，Gradle就会根据Task的依赖关系依次去执行相关的Task，还可以通过Gradle命令去执行指定的Task，例如：<code>./gradlew shadowJar</code></p><h2 id="Gradle-Task执行顺序配置"><a href="#Gradle-Task执行顺序配置" class="headerlink" title="Gradle-Task执行顺序配置"></a>Gradle-Task执行顺序配置</h2><p>在Gradle中，有三种方式指定Task的执行顺序：</p><ol><li>dependsOn强依赖方式</li><li>通过Task输入输出</li><li>通过API指定执行顺序</li></ol><h3 id="通过dependsOn强依赖方式指定"><a href="#通过dependsOn强依赖方式指定" class="headerlink" title="通过dependsOn强依赖方式指定"></a>通过<code>dependsOn</code>强依赖方式指定</h3><p><code>dependsOn</code>强依赖的方式可以分为<strong>静态依赖</strong>和<strong>动态依赖</strong>：</p><ul><li><p>静态依赖：在创建Task时，就明确知道定义的Task需要依赖的Task是什么，直接通过<code>dependsOn</code>参数或者<code>dependsOn</code>方法指定所依赖的Task；</p><p>Task提供了<code>dependsOn</code>、<code>finalizedBy</code>方法来管理Task之间的依赖关系，依赖关系表达的是执行这个Task时所需要依赖的其他Task，也就是说这个Task不能被单独执行，执行这个Task之前或之后执行另外的Task；</p></li><li><p>动态依赖：在创建Task时，不知道需要依赖哪些Task，通过<code>dependsOn</code>方法动态依赖符合条件的Task；</p></li></ul><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">task taskX <span class="token punctuation">{</span>  doLast<span class="token punctuation">{</span>    println <span class="token string">'taskX'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>task taskY <span class="token punctuation">{</span>  doLast <span class="token punctuation">{</span>    println <span class="token string">'taskY'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 静态依赖1</span>task taskZ <span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> taskX<span class="token punctuation">)</span> <span class="token punctuation">{</span>  doLast <span class="token punctuation">{</span>    println <span class="token string">'taskZ'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 静态依赖2</span>taskZ<span class="token punctuation">.</span><span class="token function">dependsOn</span><span class="token punctuation">(</span>taskY<span class="token punctuation">)</span><span class="token comment">//动态依赖</span>task taskA <span class="token punctuation">{</span>  dependsOn <span class="token keyword">this</span><span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>findAll <span class="token punctuation">{</span>    task <span class="token operator">-&gt;</span> <span class="token keyword">return</span> task<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">startsWidth</span><span class="token punctuation">(</span><span class="token string">'lib'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  doLast<span class="token punctuation">{</span>    println <span class="token string">'taskA'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过Task输入输出制定"><a href="#通过Task输入输出制定" class="headerlink" title="通过Task输入输出制定"></a>通过Task输入输出制定</h3><p>当一个参数作为TaskA的输出参数，同时又作为TaskB的输入参数，那么当执行当执行TaskB的时候要先执行TaskA，即输出的Task要先于输入的Task执行；</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">ext <span class="token punctuation">{</span>  demoFile <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression"><span class="token keyword">this</span><span class="token punctuation">.</span>buildDir</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/demo.txt"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span> task producer <span class="token punctuation">{</span>  outputs<span class="token punctuation">.</span>file demoFile  doLast <span class="token punctuation">{</span>    outputs<span class="token punctuation">.</span><span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>singleFile<span class="token punctuation">.</span>withWriter <span class="token punctuation">{</span>      writer <span class="token operator">-&gt;</span> writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"hello world"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        println <span class="token string">'producer Task end.'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>task consumer <span class="token punctuation">{</span>  inputs<span class="token punctuation">.</span>file demoFile  doLast <span class="token punctuation">{</span>    println <span class="token interpolation-string"><span class="token string">"read file: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">inputs<span class="token punctuation">.</span>file<span class="token punctuation">.</span>singleFile<span class="token punctuation">.</span>text</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span>    println <span class="token interpolation-string"><span class="token string">"consumer Task end."</span></span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>task <span class="token function">demo</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> <span class="token punctuation">[</span>producer<span class="token punctuation">,</span>consumer<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  doLast <span class="token punctuation">{</span>    println <span class="token interpolation-string"><span class="token string">"demo end;"</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demoFile是procuder的输出参数，是consumer的输入参数，所以producer咸鱼consumer执行；</p><h3 id="通过API制定执行顺序"><a href="#通过API制定执行顺序" class="headerlink" title="通过API制定执行顺序"></a>通过API制定执行顺序</h3><ul><li>mustRunAfter：指定必须在哪个Task执行完成之后在执行，如<code>taskA.mustRunAfter(taskB)</code>，即taskA必须在taskB之后执行；</li><li>finalizedBy：在任务结束之后执行指定的Task；如<code>taskA.finalizedBy(taskB)</code>，即taskA执行结束之后再执行taskB；</li></ul><h2 id="Gradle打印Task依赖关系"><a href="#Gradle打印Task依赖关系" class="headerlink" title="Gradle打印Task依赖关系"></a>Gradle打印Task依赖关系</h2><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//应用插件</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'com.dorongold.gradle.tasktree.TaskTreePlugin'</span><span class="token comment">//查看依赖关系</span><span class="token punctuation">.</span>/gradlew taskName taskTree <span class="token operator">--</span>no<span class="token operator">-</span>repeat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Gradle插件"><a href="#Gradle插件" class="headerlink" title="Gradle插件"></a>Gradle插件</h2><p>Gradle添加支持两种语法方式：</p><ul><li><code>apply plugin: java</code>：老版本添加插件方式，</li><li><code>plugins { id 'java' }</code>：新版本添加插件方式，支持DSL领域语法；</li></ul><h3 id="java插件"><a href="#java插件" class="headerlink" title="java插件"></a>java插件</h3><p>一般Java项目，默认会添加<code>java</code>插件，但建议使用<code>java-library</code>,添加<code>java</code>插件后，默认支持<code>Jar</code>任务，可对用户代码及依赖架包进行打包；但无法实现对依赖包源码进行打包；</p><ul><li><code>java-library</code>：支持<code>api</code>、<code>implementation</code>依赖方式及<code>Jar</code>任务;</li></ul><h3 id="shadowJar插件"><a href="#shadowJar插件" class="headerlink" title="shadowJar插件"></a>shadowJar插件</h3><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">{</span> id <span class="token interpolation-string"><span class="token string">"com.github.johnrengelman.shadow"</span></span> version <span class="token interpolation-string"><span class="token string">"6.1.0"</span></span><span class="token punctuation">}</span>shadowJar <span class="token punctuation">{</span>        archiveBaseName <span class="token operator">=</span> baseName        archiveClassifier <span class="token operator">=</span> archClassfier        archiveVersion <span class="token operator">=</span> version        manifest <span class="token punctuation">{</span>            <span class="token function">attributes</span><span class="token punctuation">(</span><span class="token string">'Main-Class'</span><span class="token punctuation">:</span> className<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">//exclude properties file</span>        <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token string">'system.properties'</span><span class="token punctuation">)</span>        <span class="token comment">//exclude specified jar</span>        dependencies <span class="token punctuation">{</span>            <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token function">dependency</span><span class="token punctuation">(</span><span class="token string">'org.mongodb:mongo-java-driver:3.3.0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">//include build.gradle</span>        <span class="token function">from</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"./"</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            include <span class="token string">'build.gradle'</span>        <span class="token punctuation">}</span>        <span class="token comment">//rename package name</span>        relocate <span class="token string">'com.semon.demo'</span> <span class="token punctuation">,</span><span class="token string">'org.semon.demo'</span>        <span class="token comment">//merge conf file</span>        <span class="token function">transform</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>jengelman<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>transformers<span class="token punctuation">.</span>AppendingTransformer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resource <span class="token operator">=</span> <span class="token string">'reference.conf'</span>        <span class="token punctuation">}</span>        <span class="token comment">// fix pack file more than 65535 files</span>        zip64 <span class="token boolean">true</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>shadowJar</code>主要用于实现以下功能：</p><ol><li>将项目打包成一个<code>fatJar</code>，即将项目指定依赖打入最终生成的目标JAR文件中；</li><li>替换目标JAR文件中的包名称；</li><li>将资源文件合并到一个文件中；</li></ol><h1 id="IDEA软件配置"><a href="#IDEA软件配置" class="headerlink" title="IDEA软件配置"></a>IDEA软件配置</h1><h2 id="IDEA代码模板配置"><a href="#IDEA代码模板配置" class="headerlink" title="IDEA代码模板配置"></a>IDEA代码模板配置</h2><ul><li><p>创建类模板：编辑<code>IDEA--&gt; Perferences --&gt; Editor --&gt; Code Style --&gt; File and Code Templates --&gt; Includes --&gt; File Header</code>，并勾选<code>Enable Live Templates</code>，内容如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @Description：* @Author： Semon* @Version： v1.0* @Date： ${DATE} ${TIME}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建方法注释模板：通过<code>IDEA--&gt; Perferences --&gt; Editor --&gt; Code Style --&gt; Live Templates</code>，点击右上角<code>+</code>，添加<code>Template Group</code>后，并在组下添加<code>Live Template</code>，内容如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @description：TODO* @params: $param$* @return: $return$*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>点击<code>Edit variables</code>将变量进行映射：</li></ol><ul><li><code>$enclosing_method$</code>：映射<code>methodName()</code></li><li><code>$param$</code>：映射<code>methodParameters()</code></li><li><code>$return$</code>：映射<code>methodReturnType()</code></li></ul><ol start="2"><li><p>点击下方<code>Define</code>或<code>Change</code>关键字，在弹出框中勾选需要生效的语法类型；</p></li><li><p>通过右下角<code>Expand with</code>指定调用生成注释快捷键，默认为<code>tab</code>键；使用时，在已生成方法内部输入快捷键即可；</p></li></ol></li><li><p>取消IDE开发窗口白线：<code>IDEA --&gt; Perferences --&gt; Editor --&gt; General --&gt; Appearance --&gt; Show hard wrap and visual guides</code>，取消勾选项并应用即可；</p></li><li><p>取消IDEA黄色警告：</p><ul><li><code>IDEA --&gt; Editor --&gt; Code Style --&gt; Inspections --&gt; Declaration redundancy --&gt; Unused declaration</code>取消勾选</li><li><code>IDEA --&gt; Editor --&gt; Code Style --&gt; Inspections --&gt; Javadoc --&gt; Dangling Javadoc comment</code>取消勾选</li><li><code>IDEA --&gt; Editor --&gt; Code Style --&gt; Inspections --&gt; Javadoc --&gt; Declaration has Javadoc problems</code>取消勾选</li></ul></li><li><p>取消IDEA绿色波浪线：</p><ul><li><code>IDEA --&gt; Editor --&gt; Code Style --&gt; Inspections --&gt; Prooffreading --&gt; Typo</code>取消勾选</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL架构原理</title>
      <link href="/2021/08/24/04-database/mysql5-mysql-jia-gou-yuan-li/"/>
      <url>/2021/08/24/04-database/mysql5-mysql-jia-gou-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL体系架构"><a href="#MySQL体系架构" class="headerlink" title="MySQL体系架构"></a>MySQL体系架构</h1><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210824220653235.png" alt="image-20210824220653235"><p>MySQL Server架构自顶向下大致可以分为网络连接层、服务层、存储引擎层和系统文件层；</p><h2 id="网络连接层"><a href="#网络连接层" class="headerlink" title="网络连接层"></a>网络连接层</h2><p>客户端连接器（Client Connectors）：提供与MySQL服务器建立的支持；目前几乎支持所有主流的服务端编程技术，例如常见的Java、C、Python、.NET等，它们通过各自API技术与MySQL建立连接；</p><h2 id="服务层（MySQL-Server）"><a href="#服务层（MySQL-Server）" class="headerlink" title="服务层（MySQL Server）"></a>服务层（MySQL Server）</h2><p>服务层是MySQL Server的核心，主要包含系统管理和控制工具、连接池、SQL接口、解析器、查询优化器和缓存六部分；</p><ul><li>系统控制与管理工具（Management Services &amp; Utilities）：用于备份恢复、安全管理、集群管理等；</li><li>连接池（Connection Pool）：负责存储和管理客户端与数据库的连接，一个线程负责管理一个链接；</li><li>SQL接口（SQL Interface）：用于接收客户端发送的各种SQL命令，并且返回用户需要查询的结果；如DML、DDL、存储过程、视图、触发器等；</li><li>解析器（Parser）：负责将请求的SQL解析生成一个“解析树”；然后根据一些MySQL规则进一步检查解析树是否合法；</li><li>查询优化器（Optimizer）：当“解析树”通过解析器语法检查后，将交由优化器将其转化成执行计划，然后与存储引擎交互；</li><li>缓存（Cache &amp; Buffer）：缓存机制是由一系列小缓存组成的；比如表缓存、记录缓存、权限缓存、引擎缓存等；如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据；</li></ul><h2 id="存储引擎层（Pluggable-Storage-Engines）"><a href="#存储引擎层（Pluggable-Storage-Engines）" class="headerlink" title="存储引擎层（Pluggable Storage Engines）"></a>存储引擎层（Pluggable Storage Engines）</h2><p>存储引擎负责MySQL中数据的存储与提取，与底层文件系统进行交互；MySQL存储引擎是插件式的，服务器中的查询执行引擎通过接口与存储引擎进行通信，接口屏蔽了不同存储引擎之间的差异；MySQL现在支持多种存储引擎，各有各的特点，最常见的是MyISAM和InnoDB；</p><h2 id="系统文件层（File-System）"><a href="#系统文件层（File-System）" class="headerlink" title="系统文件层（File System）"></a>系统文件层（File System）</h2><p>该层负责将数据库的数据和日志存储在文件系统之上，并完成与存储引擎的交互，是文件的物理存储层。主要包含日志文件、数据文件、配置文件、pid文件、socket文件；</p><ul><li><p>日志文件</p></li><li><p>错误日志：默认开启，通过<code>show variable like'%log_error%'</code>查询配置；</p></li><li><p>通用查询日志：记录一般查询语句，通过<code>show variable like '%general%'</code>查询配置；</p></li><li><p>二进制日志：记录了对MySQL数据库执行的更改操作，并记录语句的发生时间、执行时长；但不记录<code>select</code>、<code>show</code>等不修改数据库的SQL；主要用于数据库恢复和主从复制；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查看是否开启binlog参数</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%log_bin%'</span> <span class="token comment">--查看binlog参数</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog%'</span><span class="token comment">--查看日志文件</span><span class="token keyword">show</span> <span class="token keyword">binary</span> logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>慢查询日志：记录所有执行时间超时的查询SQL，默认是10秒；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--是否开启慢查询</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%slow_query%'</span><span class="token comment">--慢查询记录日志阈值</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%long_query_time%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件：用于存放MySQL所有的配置信息文件，比如<code>my.cnf</code>、<code>my.ini</code>等；</p></li><li><p>数据文件</p><ul><li><p><code>db.opt</code>：记录这个库的默认使用的字符集和校验规则；</p></li><li><p><code>frm</code>文件：存储与表相关的元数据(meta)信息，包括表结构的定义信息等，每一张表都有一个<code>frm</code>文件；</p></li><li><p><code>MYD</code>文件：MyISAM存储引擎专用，存放MyISAM表的数据（data），每一张表都会有一个<code>.MYD</code>文件；</p></li><li><p><code>MYI</code>文件：MyISAM存储引擎专用，存放MyISAM表的索引相关信息，每一张MyISAM表对应一个<code>.MYI</code>文件；</p></li><li><p><code>ibd</code>文件及<code>ibdata</code>文件：存放InnoDB的数据文件（包括索引）。InnoDB存储引擎有两种表空间方式：独享表空间和共享表空间；</p><ul><li>独享表空间：使用<code>.ibd</code>文件来存放数据，且每一张InnoDB表对应一个<code>.ibd</code>文件；</li><li>共享表空间：使用<code>.ibdata</code>文件存放数据，所有表共同使用一个（或多个，自行配置）<code>.ibdata</code>文件；</li></ul></li><li><p><code>ibdata1</code>文件：系统表空间数据文件，存储表元数据、Undo日志等；</p></li><li><p><code>ib_logfile0</code>文件：Redo Log日志文件；</p></li></ul></li><li><p><code>pid</code>文件：<code>pid</code>文件是<code>mysqld</code>应用程序在Unix/Linux环境下的一个进程文件，存放自己的进程ID；</p></li><li><p><code>socket</code>文件：<code>socket</code>文件也是在Unix/Linux环境下才有的，用户在Unix/Linux环境下客户端链接可以不通过TCP/IP网络而直接使用Unix Socket来链接MySQL；</p></li></ul><h1 id="MySQL运行机制"><a href="#MySQL运行机制" class="headerlink" title="MySQL运行机制"></a>MySQL运行机制</h1><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210824224000764.png" alt="image-20210824224000764"><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>通过客户端/服务器通信协议与MySQL建立链接。MySQL客户端与服务端的通信方式是“半双工”；对于每一个MySQL的连接，时刻都有一个线程状态来标识这个连接正在做什么；</p><p><strong>通信机制</strong></p><ul><li>全双工：能同时发送和接收数据，例如打电话；</li><li>半双工：指的是某一时刻，要么发送数据，要么接收数据，但不能同时触发；例如对讲机；</li><li>单工：只能发送或只能接受数据；例如单行车道；</li></ul><p><strong>线程状态</strong></p><p>通过<code>show processlist</code>查看正在运行的线程信息，root用户可查看所有线程，其他用户仅可查看自己名下线程；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id：线程ID<span class="token keyword">user</span>：线程启动用户host：发送请求的客户端的ip和端口号db：当前执行命令的数据库command：进程正在执行的命令<span class="token keyword">create</span> db：正在创建库操作<span class="token keyword">drop</span> db：正在删除库操作<span class="token keyword">execute</span>：正在执行的一个PreparedStatement<span class="token keyword">close</span> stmt：正在关闭一个preparedStatementquery：正在执行一个语句sleep：正在等待客户端发送语句quit：正在退出<span class="token keyword">shutdown</span>：正在关闭服务器<span class="token keyword">time</span>：表示该线程正处于当前状态的时间，单位为秒state：线程状态updating：正在搜索匹配记录，进行修改sleeping：正在等待客户端发送新请求<span class="token keyword">starting</span>：正在执行请求处理checking <span class="token keyword">table</span>：正在检查数据表closing <span class="token keyword">table</span>：正在将表中数据刷新到磁盘locked：被其他查询锁住记录sending <span class="token keyword">data</span>：正在处理<span class="token keyword">select</span>查询，同时将结果发送给客户端info：一般记录线程执行的语句，默认显示前<span class="token number">100</span>个字符；想看完整信息，使用<span class="token keyword">show</span> <span class="token keyword">full</span> processlist命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>这是MySQL的一个优化查询方案，如果开启查询缓存且在查询缓存过程中查询到完全相同的SQL语句，则将查询结果直接返回给客户端；如果没有开启查询缓存或者没有查询到完全相同的SQL语句则会由解析器进行语法语义解析，并生成“解析树”；</p><h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><p>将客户端发送的SQL进行语法解析，生成“解析树”；预处理器根据一些MySQL规则进一步检查“解析树”是否合法，最后生成“解析树”；</p><h2 id="查询优化器"><a href="#查询优化器" class="headerlink" title="查询优化器"></a>查询优化器</h2><p>根据“解析树”生成最优的执行计划；MySQL使用喝多优化策略生成最优的执行计划；优化可分为两类：静态优化（编译时优化）、动态优化（运行时优化）；</p><ul><li>等价变换策略；</li><li>基于联合索引，调整条件位置；</li><li>优化<code>count</code>、<code>max</code>、<code>min</code>等函数；<ul><li>InnoDB引擎<code>min</code>只需要查找索引最左边，<code>max</code>只需要查找最右边；</li><li>MyISAM引擎<code>count</code>不需要计算，直接返回；</li></ul></li><li>提前终止查询</li><li>使用<code>limit</code>查询，仅返回<code>limit</code>所需，不继续遍历后续数据；</li><li><code>in</code>优化；<code>in</code>查询会先进行排序，在采用二分法查找数据；</li></ul><h2 id="查询执行引擎"><a href="#查询执行引擎" class="headerlink" title="查询执行引擎"></a>查询执行引擎</h2><p>查询执行引擎会根据SQL语句中表的存储引擎类型，以及对应的API接口与底层存储引擎缓存或者物理文件的交互，得到查询结果并返回给客户端；若开启查询缓存，会将SQL语句和结果完整地保存到查询缓存中，以后有相同SQL语句执行，则直接返回结果；</p><ul><li>如果开启了查询缓存，先将查询结果缓存；</li><li>返回结果过多，则采用增量模式返回；</li></ul><h1 id="MySQL存储引擎"><a href="#MySQL存储引擎" class="headerlink" title="MySQL存储引擎"></a>MySQL存储引擎</h1><p>存储引擎在MySQL的体系架构中位于第三层，负责MySQL中的数据存储和提取，是与文件打交道的子系统，它是根据MySQL提供的文件访问层抽象接口定制的一种文件访问机制，这种机制就叫做存储引擎；</p><p>使用<code>show engines</code>命令，可查看当前数据库支持的引擎信息；在5.5版本之前默认采用MyISAM存储引擎，从5.5开始采用InnoDB存储引擎；</p><ul><li>InnoDB：支持事务，具有提交、回滚和崩溃恢复能力，事务安全；</li><li>MyISAM：不支持事务和外键，访问速度快；</li><li>Memory：利用内存创建表，访问速度非常快，因为数据在内存，而且默认使用Hash索引，但一旦关闭，数据就会丢失；</li><li>Archive：归档类型引擎，仅能支持<code>insert</code>和<code>select</code>语句；</li><li><code>CSV</code>：以CSV文件进行数据存储，由于文件限制，所有列必须强制指定<code>not null</code>另外CSV引擎也不支持索引和分区，适合做数据交换的中间表；</li><li>BlackHole：黑洞，只进不出，进来就会消失，所有插入数据都不会保存；</li><li>Federated：可以访问远端MySQL数据库中的表，一个本地表，不保存数据，访问远程表内容；</li><li>MRG_MyISAM：一组MyISAM表的组合，这些MyISAM表必须结构相同，Merge表本身没有数据，对Merge操作可以对一组MyISAM表进行操作；</li></ul><h2 id="InnoDB与MyISAM对比"><a href="#InnoDB与MyISAM对比" class="headerlink" title="InnoDB与MyISAM对比"></a>InnoDB与MyISAM对比</h2><p>InnoDB与MyISAM是MySQL最常用的两种引擎类型；两者主要区别如下：</p><ul><li><p>事务和外键</p><p>InnoDB支持事务和外键，具有安全性和完整性，适合大量<code>insert</code>或<code>update</code>操作；</p><p>MyISAM不支持事务和外键，提供高速存储和检索，适合大量的<code>select</code>查询操作；</p></li><li><p>锁机制</p><p>InnoDB支持行级锁，锁定指定记录；基于索引来加锁实现；</p><p>MyISAM支持表级锁，锁定整张表；</p></li><li><p>索引结构</p><p>InnoDB使用聚集索引，索引和记录在一起存储，既缓存索引也缓存记录；</p><p>MyISAM使用非聚集索引，索引与记录分开；</p></li><li><p>并发处理能力</p><p>MyISAM使用表锁，会导致写操作并发率低，读之间并不阻塞，读写阻塞；</p><p>InnoDB读写阻塞可以与隔离级别有关，可以采用多版本并发控制(MVCC)来支持高并发；</p></li><li><p>存储文件</p><p>InnoDB表对应两个文件，一个<code>.frm</code>表结构文件，一个<code>.ibd</code>数据文件；InnoDB表最大支持64TB；</p><p>MyISAM表对应三个文件，一个<code>.frm</code>表结构文件，一个<code>MYD</code>表数据文件，一个<code>MYI</code>索引文件；从MySQL 5.0开始默认限制为256TB；</p></li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210824231945397.png" alt="image-20210824231945397"><ul><li><p>适用场景</p><p>MyISAM特点</p><ul><li>不需要事务支持</li><li>并发相对较低</li><li>数据修改相对较少，以读为主</li><li>数据一致性要求不高</li></ul><p>InnoDB</p><ul><li>需要事务支持</li><li>行级锁实现高并发能力</li><li>数据更新较为频繁</li><li>数据一致性要求高</li><li>硬件设备内存大</li></ul><p>总结</p><ul><li>是否需要事务？是，选择InnoDB；</li><li>是否存在并发修改？是，选择InnoDB；</li><li>是否最求快速查询，且修改少？是，选择MyISAM；</li><li>其他情况，推荐使用InnoDB；</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac初始化</title>
      <link href="/2021/08/20/06-skill/mac-quan-xin-pei-zhi/"/>
      <url>/2021/08/20/06-skill/mac-quan-xin-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h1><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td>command + R</td><td>安装Mac上当前安装的macOS</td></tr><tr><td>option + command + R</td><td>安装与当前Mac兼容的最新版本macOS</td></tr><tr><td>shift + option + command + R</td><td>安装Mac出厂时的macOS或与出厂最接近且官方仍提供验证的macOS版本</td></tr></tbody></table><p>如果不需要保留已有数据，可以进入磁盘工具，选择抹掉所有数据；</p><p>磁盘格式化一般选择APFS格式，方案选择GUID分区图</p><h1 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h1><h2 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h2><p>HomeBrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p><h3 id="HomeBrew安装"><a href="#HomeBrew安装" class="headerlink" title="HomeBrew安装"></a>HomeBrew安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装CLT for Xcode</span>xcode-select <span class="token parameter variable">--install</span><span class="token comment"># 设置环境变量</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>"</span> <span class="token operator">==</span> <span class="token string">"Linux"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token assign-left variable">BREW_TYPE</span><span class="token operator">=</span><span class="token string">"linuxbrew"</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token assign-left variable">BREW_TYPE</span><span class="token operator">=</span><span class="token string">"homebrew"</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HOMEBREW_BREW_GIT_REMOTE</span><span class="token operator">=</span><span class="token string">"https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HOMEBREW_CORE_GIT_REMOTE</span><span class="token operator">=</span><span class="token string">"https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/<span class="token variable">${BREW_TYPE}</span>-core.git"</span><span class="token comment"># 从清华镜像源下载安装脚本并安装 Homebrew / Linuxbrew</span><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git brew-install<span class="token comment"># 安装brew</span>/bin/bash brew-install/install.sh<span class="token comment"># 删除安装脚本</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> brew-install<span class="token comment"># 替换brew程序本身的源</span><span class="token function">git</span> <span class="token parameter variable">-C</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span> remote set-url origin  https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<span class="token comment"># 替换仓库上游源</span><span class="token comment"># 使用下面的几行命令自动设置</span><span class="token assign-left variable">BREW_TAPS</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew tap<span class="token variable">)</span></span>"</span><span class="token keyword">for</span> <span class="token for-or-select variable">tap</span> <span class="token keyword">in</span> core cask<span class="token punctuation">{</span>,-fonts,-drivers,-versions<span class="token punctuation">}</span> command-not-found<span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$BREW_TAPS</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-qE</span> <span class="token string">"^homebrew/<span class="token variable">${tap}</span>\$"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token comment"># 将已有 tap 的上游设置为本镜像并设置 auto update</span>        <span class="token comment"># 注：原 auto update 只针对托管在 GitHub 上的上游有效</span>        <span class="token function">git</span> <span class="token parameter variable">-C</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span> homebrew/$<span class="token punctuation">{</span>tap<span class="token punctuation">}</span><span class="token variable">)</span></span>"</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-<span class="token variable">${tap}</span>.git        <span class="token function">git</span> <span class="token parameter variable">-C</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span> homebrew/$<span class="token punctuation">{</span>tap<span class="token punctuation">}</span><span class="token variable">)</span></span>"</span> config homebrew.forceautoupdate <span class="token boolean">true</span>    <span class="token keyword">else</span>   <span class="token comment"># 在 tap 缺失时自动安装（如不需要请删除此行和下面一行）</span>        brew tap --force-auto-update homebrew/<span class="token variable">${tap}</span> https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-<span class="token variable">${tap}</span>.git    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token comment"># 重新设置 git 仓库 HEAD</span>brew update-reset<span class="token comment"># 还原仓库上游</span><span class="token comment"># brew 程序本身，Homebrew / Linuxbrew 相同</span><span class="token function">git</span> <span class="token parameter variable">-C</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span> remote set-url origin https://github.com/Homebrew/brew.git<span class="token comment"># 以下针对 macOS 系统上的 Homebrew</span><span class="token assign-left variable">BREW_TAPS</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew tap<span class="token variable">)</span></span>"</span><span class="token keyword">for</span> <span class="token for-or-select variable">tap</span> <span class="token keyword">in</span> core cask<span class="token punctuation">{</span>,-fonts,-drivers,-versions<span class="token punctuation">}</span> command-not-found<span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$BREW_TAPS</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-qE</span> <span class="token string">"^homebrew/<span class="token variable">${tap}</span>\$"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token function">git</span> <span class="token parameter variable">-C</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span> homebrew/$<span class="token punctuation">{</span>tap<span class="token punctuation">}</span><span class="token variable">)</span></span>"</span> remote set-url origin https://github.com/Homebrew/homebrew-<span class="token variable">${tap}</span>.git    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token comment"># 重新设置 git 仓库 HEAD</span>brew update-reset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HomeBrew基本用法"><a href="#HomeBrew基本用法" class="headerlink" title="HomeBrew基本用法"></a>HomeBrew基本用法</h3><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>更新HomeBrew</td><td>brew update</td></tr><tr><td>更新所有已安装软件包</td><td>brew upgrade</td></tr><tr><td>更新指定软件包</td><td>brew upgrade 软件名</td></tr><tr><td>查找软件包</td><td>brew search 软件名</td></tr><tr><td>安装软件包</td><td>brew install 软件名</td></tr><tr><td>卸载软件包</td><td>brew remove 软件名</td></tr><tr><td>列出已安装软件包</td><td>brew list</td></tr><tr><td>查看安装软件包信息</td><td>brew info 软件名</td></tr><tr><td>列出软件包依赖关系</td><td>brew deps 软件名</td></tr><tr><td>列出可更新软件包列表</td><td>brew outdated</td></tr></tbody></table><h2 id="终端软件"><a href="#终端软件" class="headerlink" title="终端软件"></a>终端软件</h2><p>推荐<code>iTerm2 + Oh-My-ZSH</code></p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>iTerm2：登陆官网下载dmg安装包安装即可；</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 插件安装</span>$ <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span class="token comment"># 主题安装 可使用自带ys和 agnoster</span><span class="token comment"># 添加插件</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="token variable">$ZSH_HOME</span>/plugins/zsh-syntax-highlighting<span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span class="token variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>git zsh-autosuggestions zsh-syntax-highlighting<span class="token punctuation">)</span><span class="token comment"># 安装指定字体</span>brew tap homebrew/cask-fontsbrew <span class="token function">install</span> <span class="token parameter variable">--cask</span> font-hack-nerd-font<span class="token comment">#配置zsh主题  ~/.zshrc</span><span class="token assign-left variable">POWERLEVEL9K_MODE</span><span class="token operator">=</span><span class="token string">'nerdfont-complete'</span><span class="token assign-left variable">ZSH_THEME</span><span class="token operator">=</span><span class="token string">"powerlevel10k/powerlevel10k"</span><span class="token comment"># LEFT_PROMP</span><span class="token assign-left variable">POWERLEVEL9K_CONTEXT_DEFAULT_BACKGROUND</span><span class="token operator">=</span><span class="token string">'none'</span><span class="token assign-left variable">POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR</span><span class="token operator">=</span><span class="token string">''</span><span class="token assign-left variable">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS</span><span class="token operator">=</span><span class="token punctuation">(</span>context root_indicator <span class="token function">dir</span><span class="token punctuation">)</span><span class="token comment"># dir</span><span class="token assign-left variable">POWERLEVEL9K_SHORTEN_DELIMITER</span><span class="token operator">=</span><span class="token string">''</span><span class="token assign-left variable">POWERLEVEL9K_SHORTEN_DIR_LENGTH</span><span class="token operator">=</span><span class="token number">7</span><span class="token assign-left variable">POWERLEVEL9K_SHORTEN_STRATEGY</span><span class="token operator">=</span><span class="token string">'truncate_to_first_and_last'</span><span class="token comment"># Home Root</span><span class="token assign-left variable">POWERLEVEL9K_DIR_HOME_BACKGROUND</span><span class="token operator">=</span><span class="token string">'none'</span><span class="token assign-left variable">POWERLEVEL9K_DIR_HOME_FOREGROUND</span><span class="token operator">=</span><span class="token string">'045'</span><span class="token comment"># Root sub dir</span><span class="token assign-left variable">POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND</span><span class="token operator">=</span><span class="token string">'none'</span><span class="token assign-left variable">POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND</span><span class="token operator">=</span><span class="token string">'045'</span><span class="token comment"># user dir</span><span class="token assign-left variable">POWERLEVEL9K_DIR_DEFAULT_BACKGROUND</span><span class="token operator">=</span><span class="token string">'none'</span><span class="token assign-left variable">POWERLEVEL9K_DIR_DEFAULT_FOREGROUND</span><span class="token operator">=</span><span class="token string">'005'</span><span class="token comment"># ect dir</span><span class="token assign-left variable">POWERLEVEL9K_DIR_ETC_BACKGROUND</span><span class="token operator">=</span><span class="token string">'none'</span><span class="token assign-left variable">POWERLEVEL9K_DIR_ETC_FOREGROUND</span><span class="token operator">=</span><span class="token string">'005'</span><span class="token comment"># 禁止编辑</span><span class="token assign-left variable">POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_BACKGROUND</span><span class="token operator">=</span><span class="token string">"none"</span><span class="token assign-left variable">POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token comment"># RIGHT_PROMP</span><span class="token comment"># ===========================================================</span><span class="token assign-left variable">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS</span><span class="token operator">=</span><span class="token punctuation">(</span>status vcs<span class="token punctuation">)</span><span class="token assign-left variable">POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR</span><span class="token operator">=</span><span class="token string">''</span><span class="token assign-left variable">POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR</span><span class="token operator">=</span><span class="token string">''</span><span class="token comment"># change</span><span class="token assign-left variable">POWERLEVEL9K_VCS_MODIFIED_BACKGROUND</span><span class="token operator">=</span><span class="token string">'none'</span><span class="token assign-left variable">POWERLEVEL9K_VCS_MODIFIED_FOREGROUND</span><span class="token operator">=</span><span class="token string">'003'</span><span class="token assign-left variable">POWERLEVEL9K_VCS_CLEAN_BACKGROUND</span><span class="token operator">=</span><span class="token string">'none'</span><span class="token assign-left variable">POWERLEVEL9K_VCS_CLEAN_FOREGROUND</span><span class="token operator">=</span><span class="token string">'045'</span><span class="token assign-left variable">POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND</span><span class="token operator">=</span><span class="token string">'none'</span><span class="token assign-left variable">POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND</span><span class="token operator">=</span><span class="token string">'005'</span><span class="token comment"># INDICATOR</span><span class="token assign-left variable">POWERLEVEL9K_ROOT_INDICATOR_BACKGROUND</span><span class="token operator">=</span><span class="token string">"none"</span><span class="token assign-left variable">POWERLEVEL9K_ROOT_INDICATOR_FOREGROUND</span><span class="token operator">=</span><span class="token string">"white"</span><span class="token assign-left variable">POWERLEVEL9K_STATUS_OK_BACKGROUND</span><span class="token operator">=</span><span class="token string">"none"</span><span class="token assign-left variable">POWERLEVEL9K_STATUS_OK_FOREGROUND</span><span class="token operator">=</span><span class="token string">"green"</span><span class="token assign-left variable">POWERLEVEL9K_STATUS_ERROR_BACKGROUND</span><span class="token operator">=</span><span class="token string">"none"</span><span class="token assign-left variable">POWERLEVEL9K_STATUS_ERROR_FOREGROUND</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token comment"># 自定义PROMPTING</span><span class="token assign-left variable">PROMPT</span><span class="token operator">=</span><span class="token string">"%(?:%{<span class="token variable">$fg_bold</span>[green]%}➜ :%{<span class="token variable">$fg_bold</span>[red]%}➜ )"</span><span class="token assign-left variable">PROMPT</span><span class="token operator">+=</span><span class="token string">' %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">PROMPT</span><span class="token operator">=</span><span class="token string">"%{<span class="token variable">$fg</span>[blue]%}%n@%m%{<span class="token variable">$reset_color</span>%} %{<span class="token variable">$fg</span>[green]%}%c %{<span class="token variable">$reset_color</span>%}$ "</span><span class="token comment"># 字体安装（Powerline Fonts）</span><span class="token function">git</span> clone https://github.com/powerline/fonts.git<span class="token builtin class-name">cd</span> fonts./install.sh<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> fonts<span class="token comment"># vim 主题</span><span class="token function">git</span> clone  https://github.com/gosukiwi/vim-atom-dark.git<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.vim/colors<span class="token function">cp</span> vim-atom-dark-256.vim ~/.vim/colors/<span class="token comment">## 启用主题</span><span class="token function">vi</span> ~/.vimrcsyntax <span class="token builtin class-name">enable</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">background</span><span class="token operator">=</span>darkcolorscheme vim-atom-dark-256<span class="token comment">## 可用提示符</span>添加左侧提示符<span class="token assign-left variable">PROMPT</span><span class="token operator">=</span><span class="token string">''</span>添加右侧提示符<span class="token assign-left variable">RPROMPT</span><span class="token operator">=</span><span class="token string">''</span>%n - username%m - short name of the current <span class="token function">host</span>%M - name of curent <span class="token function">host</span>%<span class="token comment"># - a `%` or a `#`, depending on whether the shell is running as root or not</span>%~ - relative path%/ or %d - absolute path%c or %C - Trailing component of the current working directory.%t - <span class="token function">time</span> 12hr am/pm <span class="token function">format</span>%T - <span class="token function">time</span> 24hr <span class="token function">format</span>%w - day and <span class="token function">date</span> <span class="token punctuation">(</span>day-dd<span class="token punctuation">)</span>%D - Date <span class="token punctuation">(</span>default: yy-mm-dd<span class="token punctuation">)</span>%D<span class="token punctuation">{</span>%f<span class="token punctuation">}</span> - day of the month%l or %y - The line  <span class="token punctuation">(</span>tty<span class="token punctuation">)</span>  the user is logged <span class="token keyword">in</span> on, without <span class="token variable"><span class="token variable">`</span>/dev/' prefix.<span class="token variable">`</span></span>%F<span class="token punctuation">{</span><span class="token number">237</span><span class="token punctuation">}</span><span class="token variable"><span class="token variable">`</span> <span class="token number">256</span> color number<span class="token variable">`</span></span>%F<span class="token punctuation">{</span>red<span class="token punctuation">}</span><span class="token variable"><span class="token variable">`</span> <span class="token number">8</span> color name <span class="token punctuation">(</span>black, red, green, yellow, blue, magenta, cyan, white<span class="token punctuation">)</span><span class="token variable">`</span></span><span class="token variable">$FG</span><span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token variable"><span class="token variable">`</span> <span class="token punctuation">(</span>notice the <span class="token variable">`</span></span>$<span class="token variable"><span class="token variable">`</span> sign instead of <span class="token variable">`</span></span>%<span class="token variable"><span class="token variable">`</span><span class="token punctuation">)</span> <span class="token number">256</span> color number<span class="token variable">`</span></span><span class="token variable">$fg</span><span class="token punctuation">[</span>red<span class="token punctuation">]</span><span class="token variable"><span class="token variable">`</span> <span class="token punctuation">(</span>notice the <span class="token variable">`</span></span>$<span class="token variable"><span class="token variable">`</span> and lower <span class="token keyword">case</span> <span class="token variable">`</span></span><span class="token function">fg</span><span class="token variable"><span class="token variable">`</span><span class="token punctuation">)</span> <span class="token number">8</span> color name <span class="token punctuation">(</span>black, red, green, yellow, blue, magenta, cyan, white<span class="token punctuation">)</span><span class="token variable">`</span></span>%<span class="token punctuation">{</span><span class="token variable">$fg_bold</span><span class="token punctuation">[</span>blue<span class="token punctuation">]</span>%<span class="token punctuation">}</span><span class="token variable"><span class="token variable">`</span> bold variants<span class="token variable">`</span></span>%F<span class="token variable"><span class="token variable">`</span> is Foreground color, <span class="token variable">`</span></span><span class="token variable">$f</span><span class="token variable"><span class="token variable">`</span> <span class="token keyword">for</span> resetting foreground color <span class="token variable">`</span></span>%K<span class="token variable"><span class="token variable">`</span> is bacKground color, <span class="token variable">`</span></span>%k<span class="token variable"><span class="token variable">`</span> <span class="token keyword">for</span> resetting background-color <span class="token variable">`</span></span><span class="token variable">$reset_color</span><span class="token variable"><span class="token variable">`</span> is a Zsh variable that resets the color of the output You can use Unicode <span class="token keyword">for</span> symbols <span class="token variable">`</span></span>%E<span class="token variable"><span class="token variable">`</span> Clear to end of the line. <span class="token variable">`</span></span>%U<span class="token variable"><span class="token variable">`</span> <span class="token variable">`</span></span><span class="token punctuation">(</span>%u<span class="token punctuation">)</span>` to Start <span class="token punctuation">(</span>stop<span class="token punctuation">)</span> underline mode.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><h3 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h3><ul><li><p>登陆Oracle官网对应版本安装包；</p></li><li><p>安装并配置环境变量（添加至）</p><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">export  JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_xxx.jdk/Contents/Homeexport  PATH=$JAVA_HOME/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>node.js</p></li></ul><h2 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h2><ul><li><p>AIfred：全局搜索工具</p></li><li><p>TinyCal：小历，农历日历</p></li><li><p>文件对比：Meld</p></li><li><p>文本编辑：Typora、Vs Code、</p></li><li><p>解压软件：The UnArchiver</p></li><li><p>系统助手：macOS Assistant</p></li><li><p>日程：滴答清单</p></li><li><p>网盘：OneDrive，Adrive</p></li><li><p>远程桌面：Jump Desktop</p></li><li><p>播放器：INNA</p></li><li><p>下载工具：</p></li><li><p>输入法：搜狗</p></li></ul><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li>虚拟机：Parallels Desktop</li><li>IDE：idea</li><li>数据库：Dbeaver</li><li>FTP工具：Forklift</li><li>反编译：JD GUI</li></ul>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之索引</title>
      <link href="/2021/08/12/04-database/mysql2-suo-yin/"/>
      <url>/2021/08/12/04-database/mysql2-suo-yin/</url>
      
        <content type="html"><![CDATA[<h1 id="存储引擎与数据结构"><a href="#存储引擎与数据结构" class="headerlink" title="存储引擎与数据结构"></a>存储引擎与数据结构</h1><p>索引的数据结构主要有散列表、红黑树、跳表、B+树以及有序数组；</p><p>MySQL的索引与存储引擎相关，常用的存储引擎有InnoDB、MyiSAM、Memory，在MySQL5.5版本后，InnoDB已经作为默认的存储引擎，并且很多互联网公司要求只允许使用InnoDB存储引擎；Memory作为临时表的默认存储引擎，支持的数据结构为：</p><table><thead><tr><th align="center"></th><th align="center">MyISAM</th><th align="center">InnoDB</th><th align="center">Memory</th></tr></thead><tbody><tr><td align="center">B+ Tree索引</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">Hash索引</td><td align="center"></td><td align="center"></td><td align="center">支持</td></tr><tr><td align="center">R-Tree索引</td><td align="center">支持</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Full-Text索引</td><td align="center">支持</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>InnoDB存储引擎只支持B+树；B+树比较适合磁盘存储，是多路平衡搜索树，最佳时间N值为1200左右，树高为4时就可存储1200的3次方，即17亿左右数据；由于第一层数据总是存储在内存中，相当于17亿数据，最多查询磁盘3次，如果第二层数据正好在内存中，那么最多查询2次磁盘；也就是说InnoDB的最底层数据是B+树，B+树可能存储在内存中也可能存储在磁盘中，存储的单元是数据页（即操作系统数据缓存页：内存与磁盘的链接点）；</p><p>由于缓存池大小容量有限，只能将数据命中率最高的数据放入缓存中，MySQL使用LRU缓存淘汰算法；LRU可以理解成一个链表，链表的节点就是数据缓存页，刚被访问过的放到链表的已投，最早被访问过的放到另一头，当有新的数据缓存页被访问加入时，从最早的一头淘汰；LRU由散列表+双向链表组成，类似于Java中的LinkedHashMap的数据结构；</p><p>由于磁盘局部性原理，访问数据页时有预读功能，即我们从磁盘中获取到了多余的数据页，加入LRU的话就是浪费存储空间；用户全表扫描可能会对LRU造成冲击，可能需要很长的时间才能让缓存命中率恢复；针对预读数据页和冷数据扫描的情况，MySQL对LRU进行了优化，将LRU链拆分为<code>young</code>区（5/8）和<code>old</code>区（3/8）；当数据需要淘汰时，直接从<code>old</code>区的末尾开始，而当新访问数据页时先判断在缓存中是否存在，如果不存在则直接将数据添加到<code>old</code>区，否则当满足<code>innodb_old_blocks_time</code>（默认值为1000，单位为毫秒）的数据移动到<code>young</code>区域；</p><p>对于数据库而言，数据页或者数据本身的存储结构为：表空间 –&gt; 段（叶子点段、非叶子点段、回滚段） –&gt; 区 –&gt; 页 –&gt; 行；</p><ul><li>表空间：数据库有一个或多个表空间组成；表是一个逻辑容器，表空间存储的多项是段，在一个表空间中有一个或多个段，但一个段只能属于一个表空间；</li><li>段：段由一个或者多个区组成，段不要求区之间是否相邻，当创建数据库或者索引时，就会创建相应的段；</li><li>区：在InnoDB中，一个区会分配64个连续的页；</li><li>页：默认大小为16KB；</li></ul><h1 id="主键索引与二级索引"><a href="#主键索引与二级索引" class="headerlink" title="主键索引与二级索引"></a>主键索引与二级索引</h1><p>InnoDB索引由B+树构成，B+树由非叶子节点和叶子节点组成；非叶子节点不存储数据，而叶子节点存储数据；InnoDB中主键索引叶子节点存储的是整个表 的行数据信息，称为聚簇索引，而非主键索引（二级索引）的叶子节点存储的是对应主键的值（内存地址、指针）；</p><p>对表创建非主键索引时，相当于是维护了一颗二级索引的B+树，经过优化器判断后知道要查找该二级索引B+树；该B+数的非叶子节点存储的是索引字段的值，叶子节点存储的是索引字段行对应主键索引B+树的值，查询过程就是两个B+树；二级索引查找到主键ID后到主键索引上的查询过程叫做回表；</p><h2 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h2><p>复合索引就是将一个表的多个字段创建为同一个索引，即在B+树上非叶子节点上存储的是多个有序字段的值；有序就是最左原则；（最左原则要求必须以简历索引的第一个字段作为第一个查询限制条件；）</p><blockquote><p>复合索引如果在查询时，查询条件包含所有索引字段，MySQL会进行自动优化顺序；</p><p>索引中包含非等限制影响索引效率；</p></blockquote><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p><strong>作用：规避回表</strong></p><p>如果查询的字段包含在二级索引中，那么就没有必要进行回表，称为覆盖索引；所以一般要求我们在写<code>select</code>语句时不要使用<code>select *</code>；</p><h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2><p><strong>作用：减少回表</strong></p><p>MySQL 5.6之后，当查询限制条件中，同时包含多个复合索引限制条件，会在满足了第一个索引限制条件后，继续在复合索引上根据第二个索引进行过滤，满足条件后再进行回表，减少回表次数，该功能称为索引下推（<code>Index Condition PushDown</code>）；</p><h2 id="索引前缀"><a href="#索引前缀" class="headerlink" title="索引前缀"></a>索引前缀</h2><p><strong>作用：长字符串索引优化</strong></p><p>添加索引时使用<code>alter table tablename add index indexName( colName)</code>默认为全字段索引；如果索引字段为字符串，且字符串非常大，全字段索引僵尸一颗非常庞大的B+树；此时，如果字符串的区分度非常大，比如字符串前N位可排除大部分数据，那么我们可以为该字段创建一个前缀索引，语法为<code>alter table tablename add index indexName( colName(8))</code>；</p><p>前缀索引优化方案：</p><ul><li><p>倒序：</p><p>如果索引字段前面部分区分度不够大，而后面部分区分度比较大，则可以对字段进行逆序后再创建前缀索引；</p></li><li><p>增加Hash字段</p><p>利用散列函数，增加一个hash值字段；使用时需要均衡增加字段与长字符串索引的代价；</p></li></ul><blockquote><p>索引前缀与覆盖索引互斥，即索引前缀肯定会回表；</p></blockquote><h1 id="索引选择"><a href="#索引选择" class="headerlink" title="索引选择"></a>索引选择</h1><p>当一个MySQL表创建了索引，但是执行查询语句时可能并不会走索引，即索引失效；表上创建了多个索引，在执行查询时却选择错了索引，导致执行SQL并没有按照预期执行；这是谁的锅呢？MySQL中执行SQL时由优化器自行选择索引，我们可以根据执行计划查看选择的索引和执行路径；优化器选择索引的目的，是为了找到一个最优执行方案，并用最小的代价去执行语句；</p><p>影响优化器选择索引的因素有：</p><ul><li>扫描数据行数（基于采样）；</li><li>是否回表操作；</li><li>是否使用临时表；</li><li>是否使用排序；</li></ul><p>如果执行计划不是按照我们预期执行，那么我们可以通过以下措施引导或强制：</p><ul><li>强制指定索引，语法为<code>select * from tablename force index(indexName) where xxx</code>；</li><li>优化SQL，匹配最左原则；</li><li>新建合适索引或删除误导索引；</li></ul><h2 id="索引采样统计信息"><a href="#索引采样统计信息" class="headerlink" title="索引采样统计信息"></a>索引采样统计信息</h2><p><strong>区别度：</strong>一个索引的不同值的个数，我们建立索引的时候有一个原则就是区别度越大性能优化约好，索引一般避免使用枚举字段；</p><p><strong>基数：</strong>统计样本的记录数；</p><p><strong>采样率：</strong>InnoDB一般不会使用所有表的行数作为基数进行分析，否则会对性能影响很大；一般通过配置项N个数据页上统计区别度的平均值，再乘以所有数据页数，得到基数（即基数是一个近似值）；数据不断更新，那么统计信息也会不断更新，触发统计信息更新的条件为：当数据行数超过1/M；其中M和N是根据<code>innerdb_stats_persisten</code>参数决定，当该参数配置为<code>ON</code>时，表示统计信息持久化，M=20，N=10；当该参数配置为<code>OFF</code>时，M=8，N=16；</p><blockquote><p>统计信息也可显式通过<code>analyze table tablename</code>来触发更新；</p></blockquote><h1 id="普通索引与唯一索引"><a href="#普通索引与唯一索引" class="headerlink" title="普通索引与唯一索引"></a>普通索引与唯一索引</h1><h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><ul><li>普通索引：查找到第一个满足条件的记录后，继续向后遍历，直到第一个不满足条件的记录；</li><li>唯一索引：由于索引定义了唯一性，查找到第一个满足条件的记录后，直接停止检索；</li></ul><p>普通索引相比唯一索引会多检索一次，相对于CPU性能来说，几乎没有影响；因为InnoDB的数据是按照数据页为单位进行读写的，需要读取数据时，并不是直接从磁盘读取记录，而是先将数据页读取到内存中，再去内存中进行检索；</p><p>一个数据页默认为<code>16KB</code>，对于整形字段，一个数据页可以存放近千个<code>key</code>，除非要读取的数据正好在数据页的最后一条记录，需要额外读取一个数据页，这种情况很少，性能消耗基本可以忽略不计；</p><p>因此，在查询操作上，普通索引与唯一索引基本没差别；</p><h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><p>更新操作并不是直接对磁盘中的数据进行更新，而是先将数据页读取进内存，然后在对内存中的数据页进行更新；</p><ul><li>普通索引：将数据页从磁盘读入内存，再将内存中数据页更新；</li><li>唯一索引：将数据页从磁盘读入内存，判断是否唯一，然后在更新数据页；</li></ul><p>由于MySQL的<code>change buffer</code>机制，导致普通索引与唯一索引在更新上有所区别；</p><p><code>change buffer</code>的目的是为了降低IO操作，避免系统负载过高；<code>change buffer</code>将数据写入数据页的过程，叫做<code>merge</code>；</p><p>如果待更新的数据页已加载进内存，会直接更新数据页；如果数据页不在内存中，会先将更新操作记入<code>change buffer</code>，当后续查询需要访问该数据页时，在将数据页读入内存时，执行<code>change buffer</code>中与这个数据页相关的更新操作（即<code>merge</code>）；<code>change buffer</code>也有定期<code>merge</code>策略，数据库正常关闭也会出发<code>merge</code>；</p><p>对于唯一索引，更新前需要判断数据是否唯一，如果数据页在内存中，则直接判断并更新；如果不存在，则需要从磁盘中读取数据页，判断是否唯一并完成更新；</p><p><code>change buffer</code>使用的是BP的内存，因此无法无限增大；<code>change buffer</code>的大小，可通过<code>innodb_change_buffer_max_size</code>参数来动态设置，表示可使用BP内存的百分比；</p><p><strong>结论：</strong></p><ul><li><p>BP数据命中时，唯一索引与普通索引性能基本一致；</p></li><li><p>BP数据未命中时，唯一索引性能低于普通索引；唯一索引更新不能使用<code>change buffer</code>，每次更新都需要将数据从磁盘读取到内存中；而普通索引会将更新操作存入<code>change buffer</code>，直到触发<code>merge</code>；</p><blockquote><p><code>change buffer</code>中累计的变更越多，收益越大；</p><p><code>change buffer</code>降低IO操作的代价是更新不及时；</p></blockquote></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于唯一索引无法使用<code>change buffer</code>优化机制，因此如果业务可以接受，从性能角度，推荐优先考虑普通索引；</p><ul><li><p>通过数据库实现约束：因业务要求，必须创建唯一索引；碰上大量插入数据慢、内存命中率低时，可能是因为唯一索引导致；</p></li><li><p>大量更新场景：当使用机械硬盘时，普通索引+<code>change buffer</code>机制的收效非常显著；</p></li><li><p>读操作频繁场景：使用唯一索引；</p></li></ul><blockquote><p>如果服务器使用的是SSD，那么<code>change buffer</code>的优化性能就不是特别大了；</p></blockquote><h1 id="索引分析与优化"><a href="#索引分析与优化" class="headerlink" title="索引分析与优化"></a>索引分析与优化</h1><h2 id="EXPLAIN"><a href="#EXPLAIN" class="headerlink" title="EXPLAIN"></a>EXPLAIN</h2><p>MySQL提供了一个EXPLAIN命令，它可以对SELECT语句进行分析，并输出SELECT执行的详细信息，供开发人员有针对性的优化；EXPLAIN命令的输入结果大致如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> a<span class="token punctuation">.</span>category_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>book_name <span class="token keyword">from</span> md_book_category a  <span class="token keyword">join</span> md_books b <span class="token keyword">on</span> a<span class="token punctuation">.</span>book_id<span class="token operator">=</span>b<span class="token punctuation">.</span>book_id \G<span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>           id: <span class="token number">1</span>  select_type: <span class="token keyword">SIMPLE</span>        <span class="token keyword">table</span>: b   partitions: <span class="token boolean">NULL</span>         <span class="token keyword">type</span>: <span class="token keyword">ALL</span>possible_keys: <span class="token keyword">PRIMARY</span>          <span class="token keyword">key</span>: <span class="token boolean">NULL</span>      key_len: <span class="token boolean">NULL</span>          ref: <span class="token boolean">NULL</span>         <span class="token keyword">rows</span>: <span class="token number">34</span>     filtered: <span class="token number">100.00</span>        Extra: <span class="token boolean">NULL</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">2.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>           id: <span class="token number">1</span>  select_type: <span class="token keyword">SIMPLE</span>        <span class="token keyword">table</span>: a   partitions: <span class="token boolean">NULL</span>         <span class="token keyword">type</span>: refpossible_keys: book_id          <span class="token keyword">key</span>: book_id      key_len: <span class="token number">4</span>          ref: bookstack<span class="token punctuation">.</span>b<span class="token punctuation">.</span>book_id         <span class="token keyword">rows</span>: <span class="token number">2</span>     filtered: <span class="token number">100.00</span>        Extra: <span class="token keyword">Using</span> <span class="token keyword">index</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>select_type</p><p>表示查询的类型，常用属性值如下：</p><ul><li>SIMPLE：表示查询语句不包含子查询或<code>union</code></li><li>PRIMARY：表示查询是最外层的查询</li><li>UNION：表示查询是UNION的第二个或后续的查询</li><li>DEPENDENT UNION：UNION中的第二个或后续的查询语句，使用了外面的查询结果</li><li>UNION RESULT：UNION的结果</li><li>SUBQUERY：SELECT子查询语句</li><li>DEPENDENT SUBQUERY：SELECT子查询语句依赖外层查询结果</li></ul></li><li><p>type</p><p>表示存储引擎查询数据时采用的方式；是比较重要的一个属性，通过它可以判断出查询是全表扫描还是基于索引的部分扫描；常用属性值如下，从上至下效率一次增强：</p><ul><li>ALL：表示全表扫描，性能最差</li><li>index：表示基于索引的全表扫描，先扫描索引再扫描全表数据</li><li>range：表示使用索引范围查询，使用&gt;、&gt;=、&lt;、&lt;=、in等；</li><li>ref：表示使用非唯一索引进行单值查询</li><li>eq_ref：一般出现在多表join查询，表示前面表的一个记录，都只能匹配后面表的一行结果</li><li>const：表示使用主键或唯一索引做等值查询，常量查询</li><li>NULL：表示不用访问表，速度最快</li></ul></li><li><p>possible_keys</p><p>表示查询时能够使用到的索引；但实际执行时不一定会真的使用，显示的是索引名称</p></li><li><p>key</p><p>表示查询时真正使用到的索引，显示的是索引名称</p></li><li><p>rows</p><p>MySQL查询优化器会根据统计信息，估算SQL要查询到结果需要扫描多少行记录；原则上rows越少效率越高，可以直观的了解到SQL效率高低</p></li><li><p>key_len</p><p>表示查询使用了索引的字节数量；可以判断是否全部使用了组合索引</p><p>key_len的计算规则如下：</p><ul><li><p>字符串类</p><p>字符串长度与字符集有关：latin1=1，gbk=2，utf8=3，utf8mb4=4</p><p>char(n)=n*字符长度</p><p>varchar(n)=n*字符长度+2字节</p></li><li><p>数值类型</p><p>tinyint：1字节</p><p>smallint：2字节</p><p>mediumint：3字节</p><p>int、float：4字节</p><p>bigint、double：8字节</p></li><li><p>时间类型</p><p>date：3字节</p><p>timestamp：4字节</p><p>datetime：8字节</p></li><li><p>字段属性</p><p>NULL占用1个字节</p></li></ul></li><li><p>Extra</p><p>extra表示额外信息，各种操作会在Extra提示相关信息：</p><ul><li><p>Using where</p><p>表示查询需要通过索引会标查询数据</p></li><li><p>Using index</p><p>表示查询需要通过索引，索引即可满足所需数据</p></li><li><p>Using filesort</p><p>表示查询出来的结果需要额外排序，数据量小在内存，大则在磁盘</p></li><li><p>Using temporary</p><p>查询使用到临时表，一般用于去重、分组等；</p></li></ul></li></ul><h2 id="回表查询"><a href="#回表查询" class="headerlink" title="回表查询"></a>回表查询</h2><p>上文有介绍过，InnoDB索引分为聚簇索引和辅助索引；聚簇索引的叶子节点存储行记录，InnoDB有且只有一个；辅助索引的叶子节点存储的是主键值和索引字段，通过索引无法直接定位行记录，通常情况下，需要扫描两边索引树，先通过辅助索引定位主键值，再通过聚簇索引定位行记录，此过程即为<strong>回表查询</strong>；</p><p>回表查询需要扫描两颗索引树，性能相对较低；</p><h2 id="覆盖索引-1"><a href="#覆盖索引-1" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>EXPLAIN输出结果Extra字段为Using index时，即触发覆盖索引；即查询语句只需要在一颗索引树上就能够获取SQL所需的所有列数据，则无需回表，速度更快，这就叫做覆盖索引；</p><p>实现覆盖索引的方法为：将被查询的字段创建为组合索引；</p><h2 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h2><p>符合索引使用时遵循最左前缀原则，最左前缀顾名思义，就是最左优先，即查询中使用到最左边的列，那么查询就会用到索引，如果从索引第二列开始查找，则索引失效；</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210825135830035.png" alt="image-20210825135830035"><h2 id="LIKE查询"><a href="#LIKE查询" class="headerlink" title="LIKE查询"></a>LIKE查询</h2><p>使用like进行模糊查询时，也可使用索引，但只支持%在后；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'abc%'</span><span class="token punctuation">;</span> <span class="token comment">//起作用</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%abc%'</span><span class="token punctuation">;</span> <span class="token comment">//不起作用</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%abc'</span><span class="token punctuation">;</span> <span class="token comment">//不起作用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="NULL查询"><a href="#NULL查询" class="headerlink" title="NULL查询"></a>NULL查询</h2><p>索引列技术上能够支持NULL，但一般不建议这样使用，推荐配置默认值；</p><h2 id="索引与排序"><a href="#索引与排序" class="headerlink" title="索引与排序"></a>索引与排序</h2><p>MySQL查询支持filesort和index两种方式排序；</p><ul><li>filesort：先计算出结果，然后在缓存或磁盘上进行排序，效率较低；<ul><li>双路排序：两次磁盘扫描读取，最终得到用户数据；第一次扫描读取排序字段，并进行排序；第二次读取其他字段数据；</li><li>单路排序：直接从磁盘读取所有列数据，然后在内存中进行排序；如果查询数据超出sort_buffer缓存，则会导致多次磁盘读取操作并创建临时表；解决方案为：少使用select *；增加sort_buffer_size容量和max_length_for_sort_data容量。</li></ul></li><li>index：利用索引自动实现排序，不需要额外进行排序操作，效率较高；</li></ul><p>index排序优先触发：</p><ol><li><code>order by</code>子句排序列组合满足索引最左前缀原则；</li></ol><p>filesort排序优先触发：</p><ol><li><code>order by</code>子句同时存在<code>asc</code>和<code>desc</code>；</li><li><code>where</code>子句包含范围限制条件；</li><li><code>order by</code>子句排序列不满足最左前缀原则；</li><li><code>where</code> 子句或<code>order by</code>子句排序列涉及到多个索引；（MySQL每次只能使用一个索引）</li><li><code>where</code>子句或<code>order by</code>子句中对索引列使用函数表达式；</li></ol><h1 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h1><h2 id="慢查询定位"><a href="#慢查询定位" class="headerlink" title="慢查询定位"></a>慢查询定位</h2><h3 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志"></a>开启慢查询日志</h3><p>通过命令行查看数据库是否开启了慢查询日志和慢查询日志文件的存储路径：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'slow_query_log%'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如查询结果为未开启慢查询日志，则可通过以下命令开启慢查询日志：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">global</span> slow_query_log <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token keyword">global</span> slow_query_log_file <span class="token operator">=</span> <span class="token string">'OAK-slow.log'</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token keyword">global</span> log_queries_not_using_indexes <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span><span class="token keyword">SET</span> long_query_time <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>long_query_time：指定慢查询的阀值，单位秒。如果SQL执行时间超过阀值，就属于慢查询<br>记录到日志文件中。</li><li>log_queries_not_using_indexes：表示会记录没有使用索引的查询SQL。前提是slow_query_log<br>的值为ON，否则不会奏效。</li></ul><h3 id="查看慢查询日志"><a href="#查看慢查询日志" class="headerlink" title="查看慢查询日志"></a>查看慢查询日志</h3><p><strong>文本方式查看</strong></p><p>直接使用文本编辑器或<code>vi</code>查看日志文件：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">time：日志记录的时间User@Host：执行的用户及主机Query_time：执行的时间Lock_time：锁表时间Rows_sent：发送给请求方的记录数，结果数量Rows_examined：语句扫描的记录条数SET timestamp：语句执行的时间点select…：执行的具体的SQL语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mysqldumpslow查看</strong></p><p>MySQL 提供了一个慢查询日志分析工具mysqldumpslow，可以通过该工具分析慢查询日志<br>内容。<br>在 MySQL bin目录下执行下面命令可以查看该使用格式。<br><code>perl mysqldumpslow.pl --help</code><br>运行如下命令查看慢查询日志信息：<br><code>perl mysqldumpslow.pl -t 5 -s at C:\ProgramData\MySQL\Data\OAK-slow.log</code><br>除了使用mysqldumpslow工具，也可以使用第三方分析工具，比如pt-query-digest、mysqlsla等。</p><h2 id="慢查询优化"><a href="#慢查询优化" class="headerlink" title="慢查询优化"></a>慢查询优化</h2><h3 id="索引与慢查询"><a href="#索引与慢查询" class="headerlink" title="索引与慢查询"></a>索引与慢查询</h3><ul><li><p>如何判断是否为慢查询</p><p>SQL运行时间超过<code>long_query_time</code>即为慢查询，默认值为10s；该参数允许用户自定义；</p></li><li><p>如何判断是否使用索引</p><p>可通过 explain命令分析查看，检查结果中的 key 值，是否为NULL。</p></li></ul><p>查询是否使用索引，只是表示一个SQL语句的执行过程；而是否为慢查询，是由它执行的时间决定<br>的，也就是说是否使用了索引和是否是慢查询两者之间没有必然的联系。</p><h3 id="提高索引过滤性"><a href="#提高索引过滤性" class="headerlink" title="提高索引过滤性"></a>提高索引过滤性</h3><p>索引的过滤性与索引字段、表数据量、表设计结构都有关系，合理设计索引能有效提升查询性能；</p><h3 id="慢查询原因总结"><a href="#慢查询原因总结" class="headerlink" title="慢查询原因总结"></a>慢查询原因总结</h3><ul><li>全表扫描：explain分析type属性为all</li><li>全索引扫描：explain分析type属性为index</li><li>索引过滤性差</li><li>频繁回表</li></ul><h2 id="分页查询优化"><a href="#分页查询优化" class="headerlink" title="分页查询优化"></a>分页查询优化</h2><h3 id="一般性分页"><a href="#一般性分页" class="headerlink" title="一般性分页"></a>一般性分页</h3><p>一般的分页查询使用简单的limit子句即可实现，语法格式为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tablename <span class="token keyword">limit</span> <span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token keyword">rows</span><span class="token punctuation">;</span><span class="token comment">--offset：指定第一个返回记录行的偏移量，可省略，默认为0</span><span class="token comment">--rows：指定返回最大记录数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>偏移量及返回最大记录数100以内性能基本无差别，超出100则随数值增大耗时增加；</p></blockquote><h3 id="分页优化方案"><a href="#分页优化方案" class="headerlink" title="分页优化方案"></a>分页优化方案</h3><ul><li>尽量使用覆盖索引</li><li>利用子查询</li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之锁介绍</title>
      <link href="/2021/08/12/04-database/mysql3-suo-jie-shao/"/>
      <url>/2021/08/12/04-database/mysql3-suo-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是锁"><a href="#什么是锁" class="headerlink" title="什么是锁"></a>什么是锁</h1><p>锁是计算机协调多个进程或线程并发访问某一资源的机制；</p><h2 id="MySQL锁类型"><a href="#MySQL锁类型" class="headerlink" title="MySQL锁类型"></a>MySQL锁类型</h2><p>MySQL不同的存储引擎支持不同的锁机制，所有的存储引擎都以自己的方式实现了锁机制，服务器层完全不了解存储引擎的锁实现：</p><ul><li>MyISAM和MEMORY存储引擎采用表级锁（<code>table-level locking</code>）；</li><li>BDB存储引擎采用页面锁（<code>page-level locking</code>），但也支持表级锁；</li><li>InnoDB存储引擎采用行级锁（<code>row-level locking</code>），但也支持表级锁；</li></ul><p>默认情况下，表锁和行锁都是自动获得的，不需要用户使用额外的命令；但也支持用户显式进行锁表或事务控制；</p><p><strong>不同锁粒度比较：</strong></p><ul><li>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突概率最高，并发度最低；<ul><li>一次性同时获取所有需要的锁并按相同顺序获取表锁来避免死锁；</li><li>适合已查询为主，并发用户少，只有少量按索引条件更新数据的应用，如WEB应用；</li></ul></li><li>行级锁：开销大，加锁慢；容易出现死锁；锁定粒度小，发生锁冲突概率低，并发度高；<ul><li>最大程度支持并发，同时带来了最大的锁性能开销；</li><li>InnoDB中，除单个SQL事务外，锁是逐步获得的，这也导致容易出现死锁；</li><li>适合有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线式服务处理系统(OLTP)；</li></ul></li><li>页面锁：开销和加锁时间介于表级锁与行级锁之间；会出现死锁；锁粒度介于表级锁与行级锁之间，并发度一般；</li></ul><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><p>全局锁又叫FTWRL（<code>Flush tables with read lock</code>），全局锁的使用场景一般为全库逻辑备份，让数据库可以恢复到最近一段时间之类的某个时刻，这对数据安全，对系统本身非常重要；通过FTWRL，让整个库处于只读状态，其实是基于最近的全量数据备份+备份开始的Binlog操作；使用全局锁时，所有写相关的操作都会处于阻塞等待状态，阻塞的操作包括：</p><ul><li>数据修改语句DML：<code>insert</code>、<code>delete</code>、<code>update</code>语句；</li><li>数据定义语句DDL：<code>alter table</code>、<code>create table</code>、<code>drop table</code>等；</li><li>事务相关操作：开启 事务、提交事务、回滚事务等；</li><li>主从同步：从无无法拉取主库Binlog，增加主从同步延迟；</li></ul><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><p>表级锁包含表锁、元数据锁（<code>Meta Data Lock</code>，简称MDL）</p><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p>基于历史原因，在没有InnoDB引擎前表锁就是最小粒度的锁，索引相关引擎都会直接使用表锁；表锁本身是互斥锁，加锁语法为<code>lock tables ... read/write</code>，需加锁线程为其解锁或客户端异常自动解锁，解锁语法为<code>unlock tables</code>；</p><blockquote><p>MyISAM引擎在执行<code>update</code>等语句时会自动添加表锁；</p><p>InnoDB在开启事务并且隔离级别为串行化时也会加表锁；</p><p>个别情况下InnoDB的行级锁会退化为表锁；</p></blockquote><h3 id="元数据锁"><a href="#元数据锁" class="headerlink" title="元数据锁"></a>元数据锁</h3><p>MySQL5.5引入了元数据锁，元数据锁分为读锁和写锁，可以理解成类似Java中的<code>ReentrantReadWriteLock</code>中的<code>ReadLock</code>和<code>WriteLock</code>；读锁与读锁之间可共享，但读锁与写锁、写锁与写锁之间互斥；DML语句都会先获取MDL读锁，DDL语句都会先获取MDL写锁；MDL读锁与写锁都是自动获取与释放的；</p><p>高并发场景下，对表元数据进行修改或添加索引等操作可能会导致整个数据库实例宕机；优化方案为：</p><ol><li>对元数据操作设置超时参数；</li><li>手动kill长事务线程；</li></ol><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><p>行级锁包括行锁、临键锁和间隙锁；</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>行锁就是所在主键索引的B+树上，也就是一行记录，行锁本身是互斥锁；在InnoDB引擎是服务中，行锁是在需要的时候才加上，但并不是不需要马上就会释放，而是等到事务结束时才能释放，即两阶段锁协议；基于两阶段锁协议，如果事务中需要锁多行，需要把最可能造成锁冲突、最可能影响并发度的锁尽量后释放；</p><h3 id="临键锁"><a href="#临键锁" class="headerlink" title="临键锁"></a>临键锁</h3><p>临键锁（<code>Next-key Lock</code>）是一个前开后闭的区间；</p><h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>间隙锁（<code>Gap Lock</code>）是一个前开后开的区间；</p><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>当前数据库主键索引中有：1，3，5，8四条数据，分别拥有的锁为：</p><p>行锁：1，3，5，8</p><p>临键锁：(-∞，1]，(1,3]，(3,5]，(5,8]，(8,+∞]</p><p>间隙锁：(-∞，1)，(1,3)，(3,5)，(5,8)，(8,+∞)</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行；</p><h2 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h2><ul><li><strong>原子性</strong>：事务操作不可分割；</li><li><strong>一致性</strong>：事务执行前后数据完整性保持一致；</li><li><strong>隔离性</strong>：一个事务执行过程中，不应该收到其它事务干扰；</li><li><strong>持久性</strong>：事务一旦结束，数据就持久化到数据库或其他存储介质中；</li></ul><p>默认情况下，MySQL每条SQL都是一个单独的事务；</p><h2 id="事务并发问题"><a href="#事务并发问题" class="headerlink" title="事务并发问题"></a>事务并发问题</h2><ul><li><strong>脏读</strong>（<code>Dirty Reads</code>）：一个事务正在进行操作时，在这个事务完成并提交前，其操作数据处于不一致状态；这时，其它事务读取对应数据时，如果不加控制，就会读取了这些“脏”了的数据，并据此做进一步处理，这种现场被称为脏读；</li><li><strong>不可重复读（<code>Non-Repeatable Reads</code>）</strong>：一个事务读取某些数据，在它结束读之前，另一个事务可能完成了对数据行的更改；当第一个事务试图再次读取这些数据时，服务回返回被其他事务修改后的结果；</li><li><strong>幻读（<code>Phantom Reads</code>）</strong>：一个事务按相同条件重新读取以前检索过的数据，却发现其它事务插入了满足条件的新数据，这种现象称为幻读；</li></ul><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交(<code>read-uncommitted</code>)</td><td>是</td><td>是</td><td>是</td></tr><tr><td>不可重复读(<code>read-committed</code>)</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读(<code>repeatable-read</code>)</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化(<code>serializable</code>)</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p>MySQL默认的事务隔离级别为<code>repeatable-read</code></p><ul><li><strong>读未提交</strong>：事务可以读到其他事务未提交的数据，此时若A事务读取到B事务未提交的修改，然后B事务回滚就会产生脏读；</li><li><strong>不可重复读</strong>：事务只能读到其他事务已提交的数据，不会产生脏读，但若事务B提交在A的两次查询间就会产生不可重复读；</li><li><strong>可重复读</strong>：可重复读的隔离级别使用了MVCC机制，A事务中读取的是快照版本，而非最新版本；B事务的更新是创建了一个新版本来更新，不同事务的读和写是分离的；</li><li><strong>串行化</strong>：MySQL中事务隔离级别为<code>Serializable</code>时会锁表，因此不会出现幻读的情况，但这种隔离级别并发性降低；</li></ul><h2 id="事务加锁方式"><a href="#事务加锁方式" class="headerlink" title="事务加锁方式"></a>事务加锁方式</h2><ul><li><strong>一次性锁协议</strong>：事物开始时，就一次性申请所有的锁，之后不在申请任何锁，如果其中某个锁不可用，则整个申请就会失败，事务不会执行，在事务尾端，一次性释放所有的锁；一次性锁协议不会产生死锁问题，但事务的并发度不高；</li><li><strong>两阶段锁协议</strong>：整个事务分为两个阶段，前一个阶段为加锁，后一个阶段为解锁；在加锁阶段，事务只能加锁，也可以操作数据，但不能解锁，知道事务释放第一个锁，就进入解锁阶段，此过程中事务只能解锁，也可以操作数据，不能再加锁；两阶段锁协议是的事务具有较高的并发度，因为解锁不必发生在事务结尾，它的不足是没有解决死锁问题，因为在加锁阶段没有顺序要求；例如两个事务分别申请了A，B锁，接着又申请了对方的锁，此时将进入死锁状态；</li></ul><h1 id="MyISAM表锁"><a href="#MyISAM表锁" class="headerlink" title="MyISAM表锁"></a>MyISAM表锁</h1><p>MyISAM表的读操作与写操作之间，以及写操作之间是串行的；当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其它线程的读写操作都会等待，直到锁被释放为止；</p><p>默认情况下，写锁比读锁具有更高的优先级：当一个锁释放时，这个锁会优先给写锁队列中等待的获取锁请求，然后再给读取锁队列中等待的获取锁请求；</p><p>这正是MyISAM表不太适合有大量更新操作和查询操作应用的原因，因为大量的更新操作会造成查询操作很难获取读锁，从而一直阻塞；同时，一些需要长时间运行的查询操作，也会使写线程“饿死”，应用中应尽量避免出现长时间运行的查询操作；</p><p>可以通过参数调整读锁与写锁优先级：</p><ul><li>指定启动参数<code>low-priority-updates</code>使MyISAM引擎默认给予读请求以更高优先级；</li><li>通过执行命令<code>set low_priority_updates=1</code>，使该session发出的更新请求优先级降低；</li><li>通过指定<code>insert</code>、<code>update</code>、<code>delete</code>语句的<code>low_priority</code>属性，降低对应语句的优先级；</li><li>通过系统参数<code>max_write_lock_count</code>设置一个恰当的值，当一个表的读锁达到这个值后，MySQL就暂时将写锁请求优先级降低，给读锁一定获取锁的机会；</li></ul><h2 id="MyISAM加锁方法"><a href="#MyISAM加锁方法" class="headerlink" title="MyISAM加锁方法"></a>MyISAM加锁方法</h2><p>MyISAM在执行查询语句前，会自动给涉及的表加读锁，在执行更新操作前，会自动给涉及的表加写锁，这个过程不需要用于干预；因此，用户一般不用直接使用<code>lock table</code>命令给MyISAM表显式加锁；</p><p>在自动加锁的情况下，MyISAM总是一次获取SQL语句所需要的所有锁，这也正是MyISAM表不会出现死锁的原因；</p><p>MyISAM存储引擎支持并发插入，以减少给定表的读和写操作之间的争用：</p><p>如果MyISAM表在数据文件中间没有空闲块，则行始终插入数据文件的末尾；这种情况下，可以自由混合并发使用MyISAM表的<code>insert</code>和<code>select</code>语句而不需要加锁 — 可以在其他线程进行读操作的时候，同时将行插入到MyISAM表中；文件中间的空闲块可能是从表格中间删除或更新的行而产生的；如果文件中间有空闲块，则并发插入会被禁用，当所有空闲块都填充有新数据时，又会自动重新启用；该功能受MySQL的<code>concurrent_insert</code>系统变量控制；</p><p>使用<code>lock tables</code>可显式获取表锁，则可以请求<code>read local</code>锁而不是<code>read</code>锁，以便在锁定表时，其它会话可以使用并发插入；</p><ul><li><code>concurrent_insert</code>设置为0时，不允许并发插入；</li><li><code>concurrent_insert</code>设置为1时，如果MyISAM表中没有空洞（即表对应数据文件不存在空闲块），MyISAM允许一个线程读表时，另一个线程从表尾插入记录；MySQL默认配置；</li><li><code>concurrent_insert</code>设置为2时，无论MyISAM表中有没有空洞，都允许在表尾插入记录；</li></ul><h1 id="InnoDB事务"><a href="#InnoDB事务" class="headerlink" title="InnoDB事务"></a>InnoDB事务</h1><h2 id="InnoDB事务隔离"><a href="#InnoDB事务隔离" class="headerlink" title="InnoDB事务隔离"></a>InnoDB事务隔离</h2><p>在MVCC并发控制中，读操作可分为两类：快照读（<code>snapshot read</code>）与当前读（<code>current read</code>）。</p><ul><li>快照读，读取的是记录的可见版本，不用加锁；</li><li>当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录；</li></ul><p>MySQL/InnoDB定义了4种隔离级别：</p><ul><li><p>Read Uncommitted</p><p>可以读取未提交记录；</p></li><li><p>Read Committed（RC）</p><p>当前读操作RC格力级别保证对读取到的记录加锁，存在幻读现象；使用MVCC，读取数据时会读取自身版本和最新版本，以最新版本为主，可以读已提交记录，存在不可重复读现象；</p></li><li><p>Repeatable Read（RR）</p><p>当前读操作PR隔离级别保证对读取到的记录加锁，同时保证对读取的范围加锁，新的满足条件的记录不能插入间隙锁，不存在幻读现象；使用MVCC保存两个事务操作的数据互相隔离，不存在不可重复读现象；</p></li><li><p>Serializable</p><p>从MVCC并发控制退化为基于锁的并发控制；不区别快照读与当前读，所有读操作均为当前读，读加读锁，写加写锁；</p></li></ul><p>Serializable隔离级别下，读写冲突，因此并发度急剧下降，在MySQL.InnoDB下不建议使用；</p><h2 id="InnoDB下MVCC控制"><a href="#InnoDB下MVCC控制" class="headerlink" title="InnoDB下MVCC控制"></a>InnoDB下MVCC控制</h2><p>MVCC是一种多版本并发控制机制；锁机制可以控制并发操作，但是其系统开销较大，而MVCC可以在大多数情况下代替行级锁，使用MVCC，能降低其系统开销；</p><p>MVCC是通过保存数据在某个时间点的快照来实现的；不同存储引擎的MVCC、不同存储引擎的MVCC实现是不同的，典型的有乐观并发控制和悲观并发控制；</p><p>InnoDB的MVCC，是通过在每行记录后面保存两个隐藏的列来实现的，这两个列，分别保存了该行的创建时间，一个保存该行的删除时间；这里存储的并不是实际的时间，而是系统版本号，每开始一个新的事务，系统版本号都会自动递增，事务开始时可的系统版本号会作为事务的ID；</p><ul><li><p>INSERT</p><p>InnoDB为新插入的每一行保存当前系统版本号作为版本号；</p></li><li><p>UPDATE</p><p>InnoDB执行Update，实际上是新插入了一行记录，并保存其创建时间为当前事务的ID，同时保存当前事物ID到要Update行的删除时间；</p></li><li><p>DELETE</p><p>InnoDB会为删除的每一行保存当前系统的版本号作为删除标识；</p></li><li><p>SELECT</p><p>InnoDB会检索每行记录，需要同时满足以下条件：</p><ul><li>InnoDB只会查找版本早于当前事务版本的数据行，确保事务读取的行，要么在事务开始前已经存在，要么是事务自身插入或修改过的；</li><li>行的删除版本要么未定义要么大于当前事务版本号，这可以确保事务读取到的行，在事务开始之前未被删除；</li></ul></li></ul><h2 id="InnoDB事务锁"><a href="#InnoDB事务锁" class="headerlink" title="InnoDB事务锁"></a>InnoDB事务锁</h2><h3 id="锁模式"><a href="#锁模式" class="headerlink" title="锁模式"></a>锁模式</h3><ul><li>共享锁(S)：又称读锁，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其它事务只能再对A添加S锁，而不能加X锁，直到事务T释放A上的S锁；这保证了其它事务可以读A，但在T释放A上的S锁之前不能对A做任何修改；</li><li>排它锁(X)：又称写锁，若事务T读数据对象A加上X锁，则事务T既可以读A又可以写A，其它事务不能再对A添加任何锁，直到事务T释放A上的锁；这保证了其它事务在T释放A上的锁之前不能再读取和修改A；</li></ul><p>另外，为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB还有两种内部使用的意向锁（<code>Intention Locks</code>），这两种意向锁都是表锁：</p><ul><li>意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁；</li><li>意向排它锁（IX）：事务打算给数据行加行排它锁，事务在给一个数据行加排它锁前必须先取得该表的IX锁；</li></ul><p>意向锁仅仅用于表锁和行锁的共存使用；如果我们的操作仅仅涉及行锁，那么意向锁不会对我们的操作产生任何影响；在任一操作给表A的一行记录加锁前，首先要给该表加意向锁，如果获得了意向锁，然后才会加行锁，并在加行锁时判断是否冲突；如果现在有一个操作要获得表A的表锁，由于意向锁的存在，表锁获取会失败（如果没有意向锁的存在，加表锁之前可能要遍历整个聚簇索引，判断是否有行锁存在，如果没有行锁才能加表锁）；</p><p>同理，如果某一操作已经获得了表A的表锁，那么另一操作获得行锁之前，首先会检查是否可以获得意向锁，并在获得意向锁失败后，等待表锁操作的完成；</p><ol><li>意向锁是表级锁，但是却表示事务正在读或写某一行记录；</li><li>意向锁之间不会冲突，因为意向锁仅仅代表要对某行记录进行操作，在家行锁时，会判断是否冲突；</li><li>意向锁是InnoDB自动加的，不需要用户干预；</li></ol><h3 id="锁类型"><a href="#锁类型" class="headerlink" title="锁类型"></a>锁类型</h3><ul><li><p>间隙锁（<code>Gap Lock</code>）：只锁间隙，表现为锁住一个区间（区间为开区间，也就是不包括边界值）；</p></li><li><p>记录锁（<code>Record Lock</code>）：只锁记录，表现为仅锁单独的一行记录；</p></li><li><p>Next-key锁，同时锁住记录与间隙，从实现的角度为Record Lock + Gap Lock，而且两种锁有可能只成功一个，所以Next-key是半开半闭区间，且是下界开，上界闭；一张表中的Next-key锁包括：（负无穷大,最小的第一条记录]，(记录行间区间]，(最大的最后一条记录,正无穷大)；</p></li><li><p>插入意图锁（<code>Insert Intention Lock</code>）：插入操作时使用的锁；在代码中，插入意图锁实际上是Gap锁上加了一个<code>LOCK_INSERT_INTENTION</code>标记；也就是说<code>insert</code>语句会对插入的行加一个X记录锁，但是在插入这个行的过程之前，会设置一个<code>Insert Intention</code>的Gap锁，叫做<code>Insert Intention</code>锁；</p></li><li><p>乐观锁：总是认为不会产生并发问题，每次读取数据的时候总认为不会有其它线程对数据进行修改，因此不会上锁；但是在更新时会判断其它线程在这之前是否有对数据进行修改，一般会使用版本号机制或CAS操作实现；</p><ul><li><p>版本号方式：</p><p>一般在数据表中加上数据版本号<code>version</code>字段，表示数据被修改的次数，当数据被修改时，<code>version</code>值自增1；当线程A要更新数据值时，在读取数据的同时也会读取<code>version</code>值，在提交更新时，若刚才读取到的<code>version</code>值为当前数据库中的<code>version</code>值相等时才更新，否则重试更新操作，直到更新成功；</p></li></ul></li><li><p>悲观锁：总是假设最坏情况，每次读取数据时总认为有其它线程会修改数据，所以总是会加锁（读锁、写锁、行锁等），当其它线程想要访问数据时，都需要阻塞挂起；可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁；</p></li></ul><h2 id="一致性非锁定读"><a href="#一致性非锁定读" class="headerlink" title="一致性非锁定读"></a>一致性非锁定读</h2><p>InnoDB使用MVCC来实现一致性非锁定读，在<code>read-committed</code>和<code>repeatable-read</code>两种事务隔离级别下使用，且效果不同，具体如下：</p><ul><li><p>read-committed</p><p>在读已提交的隔离级别下，事务在一致性非锁定读始终读取当前最新的数据快照，即当其它事务提交更新后快照更新也会读取最新的版本，也就是出现不可重复读；</p></li><li><p>repeatable-read</p><p>在可重复读的隔离级别下，事务始终读取事物开始时的快照版本；</p></li></ul><h2 id="一致性锁定读"><a href="#一致性锁定读" class="headerlink" title="一致性锁定读"></a>一致性锁定读</h2><p>一致性锁定读有两种实现方式，一种是加X锁，一种是加S锁：</p><ul><li>X锁：通过<code>select ... for update</code>方式显式添加X锁读取数据；</li><li>S锁：通过<code>select ... lock in share mode</code>方式显式添加S锁读取数据；</li></ul><h2 id="自增长与锁"><a href="#自增长与锁" class="headerlink" title="自增长与锁"></a>自增长与锁</h2><p><code>innodb_autoinc_lock_mode</code>有3种模式：0，1，2</p><ul><li>0：涉及<code>auto-increment</code>列的插入语句加的表级AUTO-INC锁，只有插入执行结束后才会释放锁，即事务在进行插入时获取自增长值时先加锁，后插入，插入完释放；</li><li>1：对于可以事先确定插入行数的语句（包括单行和多行插入），使用互斥量操作自增值，分配连续的确定的<code>auto-increment</code>值，对于插入行数不确定的插入语句仍使用表级AUTO-INC锁；这种模式下，事务回滚，<code>auto-increment</code>值不会回滚，即自增列内容会不连续；</li><li>2：对于所有的插入操作使用互斥量操作自增值，来一个插入分配一个<code>auto-increment</code>值，此时一个批量插入的自增长值就可能不连续，且在SQL语句级的主从同步可能会出现问题；</li></ul><h2 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h2><p>InnoDB行锁是通过给索引上的索引项加锁来实现，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现；InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才会使用行级锁，否则，InnoDB将使用表锁；</p><p>InnoDB目前处理死锁的方法是：将持有最少行级排它锁的事务回滚；如果是因为死锁引起的回滚，可以考虑在应用中重新执行；</p><h1 id="显式锁与隐式锁"><a href="#显式锁与隐式锁" class="headerlink" title="显式锁与隐式锁"></a>显式锁与隐式锁</h1><ul><li>显式锁：某些特殊情况需要开发人员手动进行加锁、解锁，这种使用方式被称为显示锁；</li><li>隐式锁：当多个线程并发访问同一个数据的时候，为了保证数据一致性，数据库管理系统会自动为该数据加锁、解锁，这种机制称为隐式锁；</li></ul><h1 id="悲观锁与乐观锁"><a href="#悲观锁与乐观锁" class="headerlink" title="悲观锁与乐观锁"></a>悲观锁与乐观锁</h1><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁（<code>Optimistic Lock</code>）：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性；乐观锁不能解决脏读问题；</p><p>乐观锁，顾名思义，就是乐观的认为每次取数据的时候不会被其它进程修改，所以不用上锁，但在更新的时候会判断在此期间是否有其它进程更新这个数据，可以使用版本号等机制实现；乐观锁适用于多读的应用类型，可以提高吞吐量，像数据库提供类似于<code>write_condition</code>机制的其实都是提供的乐观锁；</p><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>悲观锁（<code>Pessimistic Lock</code>）：假定肯定会发生冲突，屏蔽一些可能违反数据完整性的操作；</p><p>悲观锁，顾名思义，就是悲观的认为每次获取数据的时候都会被其他进程修改，所以每次获取数据的时候都会上锁，其它进程获取数据会一直阻塞到当前进程释放锁；传统的关系型数据库里边用到了很多这种锁机制，比如行锁、表锁、读锁、写锁等，都是在操作之前上锁；</p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>通常来说，死锁都是应用设计的问题，通过调整业务流程，数据库对象设计、事务大小以及访问数据库SQL等，绝大部分死锁都可以避免；避免死锁的方法有：</p><ul><li>在应用中，不同程序并发存取多个表时，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会；</li><li>在程序以批量方式处理数据的时候，如果事先对数据排序，保证每个线程按固定的顺序来处理记录，可以大大降低死锁出现的可能；</li><li>在事务中，如果要更新记录，应该直接申请足够级别的锁，即排它锁，而非先申请共享锁，更新时再申请排它锁；因为在申请排它锁时，可能已经有其它线程申请了相同记录的共享锁，从而造成锁冲突甚至死锁；</li><li>选择合理的事务大小，小事务发生锁冲突的几率也更小；</li></ul><p>如果出现死锁，可以用<code>show innodb status</code>命令来确定最后一个死锁产生的原因；返回结果中包括死锁相关事务的详细信息，如引发死锁的SQL语句，事务已经获得的锁，正在等待的锁以及被回滚的事务等；</p><p>死锁的发生与否，并不在于事务中有多少条SQL，死锁的关键在于：两个（或以上）<code>Session</code>加锁的顺序不一致；</p><p>自增锁是语句级的锁，如果当前事务先获取锁，却后执行结束，在从库按语句复制的话，会出现ID不一致；</p><h1 id="锁性能优化"><a href="#锁性能优化" class="headerlink" title="锁性能优化"></a>锁性能优化</h1><ul><li>尽量使用较低的隔离级别；</li><li>精心设计索引，并尽量使用索引访问数据，使加锁更精确，从而减少锁冲突的机会；</li><li>选择合理的事务大小，小失误发生锁冲突的几率也更小；</li><li>给记录集显示加锁时，做好一次性请求足够级别的锁；比如要修改数据的话，最好直接申请排它锁，而不是先申请共享锁，修改时在申请排它锁，这容易导致死锁；</li><li>不同的程序访问一组表时，应尽量约定以相同顺序访问各表，对一个表而言，尽可能以固定的顺序存取表中的行，从而减少死锁的机会；</li><li>尽量用相等条件访问数据，避免间隙锁对并发插入的影响；</li><li>不要申请超过实际需要的锁级别；</li><li>除非必须，查询时不要显式加锁；MySQL的MVCC可以实现事务中的查询不加锁，优化事务性能；MVCC只在<code>committed read</code>和<code>repeatable read</code>两种级别下工作；</li><li>对于一些特定事务，可以使用表锁来提高处理速度，减少死锁可能；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之InnoDB架构</title>
      <link href="/2021/08/12/04-database/mysql4-innodb-jia-gou/"/>
      <url>/2021/08/12/04-database/mysql4-innodb-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="InnoDB架构"><a href="#InnoDB架构" class="headerlink" title="InnoDB架构"></a>InnoDB架构</h1><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210817105408063.png" alt="image-20210817105408063"><p>InnoDB架构分为两部分：内存中的结构和磁盘上的结构；InnoDB使用日志先行策略，将数据修改先在内存中完成，并将事务记录成重做日志(Redo Log)，转换为顺序IO高效的提交事务；</p><p>这里日志先行，说的是日志记录到数据库以后，对应的事务就可以返回给用户，表示事务完成；但实际上，这个数据可能还只在内存中修改完，并没有刷到磁盘中；内存数据是非持久化的，一旦断电或机器故障，数据将会丢失；</p><p>InnoDB通过Redo Log来保证数据的一致性，如果保存所有的Redo Log，便于在系统崩溃时根据日志重建数据；每次系统崩溃使用所有的Redo Log重建数据太过笨拙，索引InnoDB引入了检查点机制，即定期检查，保证检查点之前的日志都已经刷写到磁盘，则碰到系统崩溃只需从最近的检查点开始重建即可；</p><h1 id="InnoDB内存结构"><a href="#InnoDB内存结构" class="headerlink" title="InnoDB内存结构"></a>InnoDB内存结构</h1><p>InnoDB内存结构主要包括<code>Buffer Pool</code>、<code>Change Buffer</code>、<code>Adaptive Hash Index</code>以及<code>Log Buffer</code>四部分；</p><p>单纯从内存角度来看，<code>Change Buffer</code>和<code>Adaptive Hash Index</code>占用的内存都属于<code>Buffer Pool</code>，<code>Log Buffer</code>占用独立内存；</p><h2 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h2><p>Buffer Pool简称BP，也叫缓冲池，其中存储的数据包括<code>Page Cache</code>、<code>Change Buffer</code>、<code>Data dictionary Cache</code>等，通常MySQL服务器80%的内存会分配给<code>Buffer Pool</code>；</p><p>基于效率考虑，InnoDB中数据管理的最小单位为页，默认每页大小为16KB，每页包含若干行数据；</p><p>为了提高缓存管理效率，InnoDB的缓冲池通过一个页链表实现，很少访问的页会通过缓冲池的LRU算法淘汰出去；</p><p>InnoDB的缓冲池页链表分为两部分：Young区（默认占用缓冲池的5/8）和Old 区（默认占用缓冲池3/8），其中新读入的页会加入到Old区的头部，而Old区中的页被命中，则移动到Young区头部；</p><blockquote><p><code>innodb_old_blocks_pct</code>参数可修改Young区与Old区比例，默认值为37；</p></blockquote><h2 id="Adaptive-Hash-Index"><a href="#Adaptive-Hash-Index" class="headerlink" title="Adaptive Hash Index"></a>Adaptive Hash Index</h2><h3 id="什么是Hash索引"><a href="#什么是Hash索引" class="headerlink" title="什么是Hash索引"></a>什么是Hash索引</h3><p>哈希索引基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎都会对所有的索引列的值计算一个哈希值，哈希索引将所有的哈希值存储在索引中，同时在哈希表中保存指向每个数据行的指针；</p><ul><li>哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用哈希索引来做覆盖索引扫描；</li><li>哈希索引数据并不是按照索引列的值顺序存储，所以无法应用于排序；</li><li>哈希索引不支持部分索引列匹配查找，因为哈希索引始终是使用索引的全部列值内容来计算哈希值的；哈希索引只支持等值比较查询；</li><li>访问哈希索引的数据效率很高，除非出现哈希冲突，当出现哈希冲突时，存储引擎必须遍历链表中所有的行指针，逐行进行比较，直到找到所有符合条件的行；如果哈希冲突很多，索引维护操作的代价也会很高；</li></ul><h3 id="什么是自适应Hash索引"><a href="#什么是自适应Hash索引" class="headerlink" title="什么是自适应Hash索引"></a>什么是自适应Hash索引</h3><p>在MySQL中，哈希索引只有Memory、NDB两种引擎支持，Memory引擎默认支持哈希索引，如果多个哈希值相同，出现哈希碰撞，那么索引以链表方式存储；对于常用的InnoDB引擎，是不支持哈希索引的；要使InnoDB支持哈希索引，可以通过伪哈希索引来实现，即自适应哈希索引；</p><p>自适应哈希索引就是当InnoDB注意到某些索引值被使用的非常频繁时，MySQL会在内存中基于BTree索引之上再创建一个哈希索引，这样就可以进行哈希查找了；</p><h3 id="自适应哈希索引"><a href="#自适应哈希索引" class="headerlink" title="自适应哈希索引"></a>自适应哈希索引</h3><p>InnoDB存储引擎会监控对表上索引的查找，如果观察到建立哈希索引可以带来速度的提升，则建立自适应哈希索引（<code>Adaptive Hash Index</code>，简称AHI），其本质上就是一个哈希表：从某个检索条件到某个数据页的哈希表；</p><h4 id="索引使用大于17次"><a href="#索引使用大于17次" class="headerlink" title="索引使用大于17次"></a>索引使用大于17次</h4><p>AHI是为某个索引树建立的（当索引树层数过多时，AHI才能发挥效用）；如果索引只被使用一两次，就为其简历AHI，会导致AHI过大,维护成本高于收益;默认当索引使用次数大于17次时，即通过筛选；</p><h4 id="Hash-info使用次数大于100"><a href="#Hash-info使用次数大于100" class="headerlink" title="Hash info使用次数大于100"></a>Hash info使用次数大于100</h4><p>对使用次数大于17次的索引建立Hash info，Hash info是用来描述一次检索的条件与索引匹配程度；建立AHI时，就可以根据匹配程度，抽取数据中匹配的部分，作为AHI的键；当Hash info使用次数大于100则代表该Hash info为经常使用的Hash info；</p><ul><li>Hash info结构：匹配索引列数，下一列匹配字节数，是否从左匹配；</li></ul><h4 id="Hash-info命中页数据大于1-16"><a href="#Hash-info命中页数据大于1-16" class="headerlink" title="Hash info命中页数据大于1/16"></a>Hash info命中页数据大于1/16</h4><p>如果我们为表中所有数据建立AHI，那么AHI就失去了缓存的意义，所以需要找出该索引树上经常使用的数据页，通过该步骤筛选后就可以开始建立哈希索引；</p><h4 id="Hash热点分散"><a href="#Hash热点分散" class="headerlink" title="Hash热点分散"></a>Hash热点分散</h4><p>MySQL在Hash索引的设计上还采用了热点分散技术，Hash索引在MySQL上默认是启动8个，可以将热点数据分散到不同的Hash索引上，提升并发访性能；</p><p>InnoDB默认开启自适应Hash索引，可通过参数<code>Innodb_adaptive_hash_index=off</code>关闭；自适应Hash索引使用分片实现，分片数可以通过参数<code>innodb_adaptive_hash_index_parts=512</code>来配置，默认值为8，最大支持512；</p><blockquote><p>自适应哈希索引适用于使用<code>=</code>或<code>in</code>操作符的等值查询；同时应尽量避免使用<code>like</code>和<code>%</code>的范围查询和高并发关联操作；</p><p>MySQL5.7之前Hash索引所有分片公用一把锁，Hash索引反而称为了并发性能瓶颈；</p></blockquote><h2 id="Change-Buffer"><a href="#Change-Buffer" class="headerlink" title="Change Buffer"></a>Change Buffer</h2><p>通常来说，InnoDB辅助索引不同于聚餐索引的顺序插入，如果每次修改二级索引都直接写入磁盘，则会有大量频繁的随机IO。<code>Change Buffer</code>的主要目的是将对非唯一索引页的操作缓存下来，以此减少辅助索引的随机IO，并达到操作合并的效果，其实际使用的是BP的内存空间；</p><p>在MySQL5.5以前，<code>Change Buffer</code>叫做<code>Insert Buffer</code>，最初仅支持<code>insert</code>操作的缓存，随着支持操作类型的增加，更名为<code>Change Buffer</code>；</p><p>如果辅助索引页命中缓冲区，则直接修改即可；如果未命中，则先修改操作保存到<code>Change Buffer</code>；<code>Change Buffer</code>的数据在对应索引页读取到缓冲区时将进行合并；<code>Change Buffer</code>内部实现也是使用B+树；</p><blockquote><p><code>innodb_change_buffering</code>参数可配置是否启用<code>Change Buffer</code>，默认为启用，对应参数为<code>all</code>；即缓存所有<code>insert、delete-mark及purge</code>操作；</p><p>MySQL删除数据分为两步：<code>delete-mark</code>（标记）和<code>purge</code>（删除）</p></blockquote><h2 id="Log-Buffer"><a href="#Log-Buffer" class="headerlink" title="Log Buffer"></a>Log Buffer</h2><p>Log Buffer是重做日志在内存中的缓冲区，大小由<code>innodb_log_buffer_size</code>定义，默认为16MB；一个达大的Log Buffer可以让大事务在提交前不必将日志中途刷写到磁盘中，可以提高效率；如果系统有很多修改行记录的大事务，可以增大该值；</p><p>参数<code>innodb_flush_log_at_trx_commit</code>用于控制Log Buffer如何写入及输入磁盘：</p><ul><li>默认为1，表示每次事务提交都会将Log Buffer写入操作系统缓冲，并调用配置的<code>flush</code>方法将数据写到磁盘；该策略会频繁刷写磁盘，效率较低但安全性高，最多丢失1个事务数据；</li><li>配置为0，表示每秒将Log Buffer写入内核缓冲区并调用<code>flush</code>方法将数据写到磁盘；此策略可能丢失1秒以上事务数据；</li><li>配置为2，表示每次事务提交都将Log Buffer写入内核缓冲区，但是每秒才调用<code>flush</code>将内核缓冲区的数据刷写到磁盘；此策略可能丢失1秒以上事务数据；</li></ul><p>参数<code>innodb_flush_log_at_timeout</code>用于配置刷新日志缓存到磁盘的频率，默认为1秒；</p><p>参数<code>Innodb_flush_method</code>用于配置日志写入磁盘的方法，默认为<code>fsync</code>，即日志和数据都通过<code>fsync</code>系统调用刷到磁盘；</p><p>InnoDB中使用的redo log和undo log是分开存储的；</p><ul><li><p>redo log在内存中有Log Buffer，在磁盘对应ib_logfile文件；</p></li><li><p>undo log在内存中会生成undo页，在磁盘对应ibd文件；</p></li></ul><p>redo log必须在数据落盘前线落盘（Write Ahead Log），从而保证数据持久性和一致性；而数据本身的修改可以先主流在内存缓冲池中，再根据特定的策略定期刷写磁盘；</p><h2 id="Double-Write-Buffer"><a href="#Double-Write-Buffer" class="headerlink" title="Double Write Buffer"></a>Double Write Buffer</h2><p>Double Write Buffer即双写缓冲区，是InnoDB引擎为了保证数据安全性、完整性而开发的；</p><p>双写缓冲区位于系统表空间中；InnoDB会在磁盘上划分出连续的两个区的范围：1个区包含64个页，一个页16K，因此一个双写缓冲区大小为16K * 64  * 2 = 2MB；</p><p>MySQL在进行数据写入时，InnoDB会先把数据从缓冲池分写入到双写缓冲区中，之后通过双写缓冲区分两次，每次写入1MB到系统表空间，然后立即调用<code>fsync</code>函数，同步至磁盘，避免缓冲带来问题；在这个过程中，双写缓冲区是循序写；在完成双写缓冲区写入后，再将双写缓冲区写入各个表空间文件中，此时为离线写入；</p><h3 id="双写缓冲区对性能影响"><a href="#双写缓冲区对性能影响" class="headerlink" title="双写缓冲区对性能影响"></a>双写缓冲区对性能影响</h3><p>在系统表空间上的双写缓冲区实际上也是一个文件，写DWB会导致系统有更多的<code>fsync</code>操作，而<code>fsync</code>的性能较差，所以才操作会导致MySQL的整体性能下降，性能损失通常约为5%~25%，这主要是因为：</p><ol><li>双写缓冲区是一个连续的存储空间，硬盘写数据时为顺序写，而非随机写，性能较高；</li><li>将数据从双写缓冲区写入到表空间文件中，系统会自动合并连接空间刷新的方式，每次可以刷新多个页；</li></ol><h3 id="双写缓冲区恢复数据"><a href="#双写缓冲区恢复数据" class="headerlink" title="双写缓冲区恢复数据"></a>双写缓冲区恢复数据</h3><p><strong>双写缓冲区写入失败</strong></p><p>如果数据库在写入双写缓冲区本身就失败了，那么这些数据并不会被写入磁盘，InnoDB直接从磁盘加载原始数据，结合Redo Log计算出正确的数据，重新想双写缓冲区写入即可；</p><p><strong>双写缓冲区写入成功</strong></p><p>如果数据库写入双写缓冲区成功，但是写入表空间文件失败，此时InnoDB将不需要通过Redo Log日志来进行计算，直接对双写缓冲区中的页数据进行校验，业数据与校验和匹配则直接将双写缓冲区页数据写入表空间文件即可；如果页数据与校验和不匹配，则使用Redo Log + 原始叶数据重新计算；</p><blockquote><ol><li><p>校验和<code>checksum</code>其实就是数据页的最后事务号，如果页已经损坏，找不到页中的事务号，就无法进行恢复；</p></li><li><p>通过双写缓冲区恢复数据效率比使用Redo Log要高，而且部分情况原始页损坏或被修改，无法通过Redo Log恢复完整页数据（Redo Log仅记录要修改的字段值，而非完整数据页）</p></li><li><p>Fursion-io原子写，如果每次写16k就是16k或特定文件系统（如b-tree文件系统）支持原子写，就可以禁用双写缓冲区；</p></li></ol></blockquote><p><strong>相关参数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">innodb_page_size</span><span class="token operator">=</span>16KB<span class="token punctuation">;</span>   <span class="token comment"># 默认为16KB，可设置为32KB或64KB；</span><span class="token assign-left variable">innodb_doublewrite</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">#默认为1，启用双写缓冲区，0为禁用双写缓冲区；</span><span class="token assign-left variable">innodb_flush_method</span><span class="token operator">=</span>O_DIRECT<span class="token punctuation">;</span>  <span class="token comment"># 数据写入方式，该参数有三个值：fdatasync(默认)，O_DSYNC，O_DIRECT;</span><span class="token assign-left variable">binlog_group_commit_sync_delay</span><span class="token operator">=</span>xx<span class="token punctuation">;</span>  <span class="token comment"># 组提交执行fsync延迟毫秒数，延迟越大，IO次数越少，性能越高；</span><span class="token assign-left variable">binlog_group_commit_sync_no_delay_count</span><span class="token operator">=</span>xxx<span class="token punctuation">;</span> <span class="token comment"># 组提交执行fsync的批个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>fdatasync：写入日志或数据文件时，仅需写入到操作系统Buffer中立即返回，fsync系统调用完成数据落盘；</p><p>O_DSYNC：日志文件由写操作直接写入磁盘，数据文件写入到操作系统Buffer后，fsync系统调用完成数据落盘；</p><p>O_DIRECT：数据文件由sync直接从BP写入磁盘，日志文件写入操作系统Buffer中立即返回，fsync系统调用完成数据落盘；</p></blockquote><h1 id="InnoDB磁盘结构"><a href="#InnoDB磁盘结构" class="headerlink" title="InnoDB磁盘结构"></a>InnoDB磁盘结构</h1><p>InnoDB磁盘主要包含Tablespaces、InnoDB Data Dictionary、Doublewrite  Buffer、Redo Log和Undo Logs；</p><h2 id="表空间（Tablespaces）："><a href="#表空间（Tablespaces）：" class="headerlink" title="表空间（Tablespaces）："></a>表空间（Tablespaces）：</h2><p>用于存储表结构和数据；表空间又分为系统表空间、独立表空间、通用表空间、临时表空间、Undo表空间等类型；</p><ul><li><p>系统表空间（System Tablespace）</p><p>包含InnoDB数据字典、Doublewrite Buffer、Change Buffer、Undo Logs的存储区域；系统表空间也默认包含任何用户在系统表空间创建的表数据和索引数据；系统表空间是一个共享的表空间；该空间的数据文件通过参数<code>innodb_data_file_path</code>控制，默认值为<code>ibdata1:12M:autoextend</code>，参数含义为文件名ibdata1，初始大小为12M，自动扩展；</p></li><li><p>独立表空间（File-Per-Table Tablespace）</p><p>默认开启，独立表空间是一个单表表空间，该表创建于自己的数据文件中，而非创建于系统表空间中；当<code>innodb_file_per_table</code>选项开启时，表奖被创建于表文件表空间中，每个表文件表空间由一个<code>.ibd</code>数据文件代表，该文件默认被创建于数据库目录中，独立表空间的表文件支持动态和压缩行格式；否则，InnoDB将被创建于系统表空间中；</p></li><li><p>通用表空间（General Tablespace）</p><p>通用表空间为通过<code>create Tablespace</code>语法创建的共享表空间；通用表空间可以创建于mysql数据目录外的其他表空间，其可以容纳多张表，且支持所有的行格式；</p></li><li><p>撤销表空间（Undo Tablespace）</p><p>撤销表空间由一个或多个包含Undo日志文件组成；在MySQL 5.7版本之前Undo占用的是System Tablespace共享区，从5.7开始将Undo从System Tablespace分离了出来；InnoDB使用的Undo表空间由<code>innodb_undo_tablespaces</code>配置选项控制，默认为0；参数为0表示使用系统表空间的<code>ibdata1</code>；大于0表示使用undo_001、undo_002等；</p></li><li><p>临时表空间（Temporary Tablespace）</p><p>分为<code>session temporary tablespaces</code>和<code>global temporary tablespace</code>两种；mysql服务器正常关闭或异常终止时，临时表空间将被移除，每次启动时会被重新创建；</p><ul><li><code>session temporary tablespaces</code>存储的是用户创建的临时表和磁盘内部的临时表；</li><li><code>global temporary tablespaces</code>存储的是用户临时表的回滚段；</li></ul></li><li><p>数据字典（InnoDB Data Dictionary）</p><p>InnoDB数据字典由内部系统表组成，这些表包含用于查找表、索引和表字段等对象的元数据；元数据物理上位于InnoDB系统表空间中；由于历史原因，数据资源元数据在一定程度上与InnoDB表元数据文件（<code>.frm</code>文件）中存储的信息重叠；</p></li><li><p>双写缓冲区（Doublewrite Buffer）</p><p>位于系统表空间，是一个存储区域；在BufferPage的page页刷新到磁盘真正的位置前，会先将数据存在Doublewrite Buffer中；如果在page页写入过程中出现操作系统、存储子系统或mysqld进程崩溃，InnoDB可以在崩溃恢复期间从Doublewrite Buffer中找到页的一个完好的备份；在大多数情况下，默认情况下启用双写缓冲区；如果要禁用双写缓冲区，可通过配置参数<code>innodb_doublewrite=0</code>；使用Doublewrite Buffer时，建议将<code>innodb_flush_method</code>设置为<code>O_DIRECT</code>；</p><ul><li>MySQL的<code>innodb_flush_method</code>这个参数控制着InnoDB数据文件及redo log的打开、刷写模式；该参数有三个值：</li><li>fsync：默认值，表示文件先写入操作系统缓存，然后再调用fsync去异步刷数据文件与redo log的缓存信息；</li><li>O_DIRECT：表示文件写入操作会通知操作系统不要缓存数据，也不用预读，直接从InnoDB Buffer写入磁盘文件；</li><li>O_DSYNC：表示使用O_SYNC写日志，fsync写数据；InnoDB不会直接使用O_DSYNC（仅刷写数据不刷元数据），因为在很多系统中存在问题，一般不使用；</li></ul></li><li><p>重做日志（Redo Log）</p><p>重做日志是一种基于磁盘的数据结构，用于在崩溃恢复期间更正不完整事务写入的数据；MySQL以循环方式写入重做日志文件，记录InnoDB中所有对Buffer Pool修改的日志；当出现故障，导致数据未能更新到数据文件，则数据库重启时必须redo，重新把数据更新到数据文件；读写事务在执行的过程中，都会不断产生Redo Log；默认情况下，Redo Log在磁盘上由两个名为ib_logfile0和ib_logfile1的文件物理表示；</p></li><li><p>撤销日志（Undo Log）</p><p>撤销日志是在事务开始之前保存的被修改数据的备份，用于例外情况时回滚事务；撤销日志属于逻辑日志，根据每行记录进行记录；撤销日志存在于系统表空间、撤销表空间和临时表空间中；</p></li></ul><blockquote><p>MySQL 5.7版本</p><ul><li>将 Undo日志表空间从共享表空间 ibdata 文件中分离出来，可以在安装 MySQL 时由用<br>户自行指定文件大小和数量。</li><li>增加了 temporary 临时表空间，里面存储着临时表或临时查询结果集的数据。</li><li>Buffer Pool 大小可以动态修改，无需重启数据库实例。</li></ul><p>MySQL 8.0 版本</p><ul><li>将InnoDB表的数据字典和Undo都从共享表空间ibdata中彻底分离出来了，以前需要<br>ibdata中数据字典与独立表空间ibd文件中数据字典一致才行，8.0版本就不需要了。</li><li>temporary 临时表空间也可以配置多个物理文件，而且均为 InnoDB 存储引擎并能创建<br>索引，这样加快了处理的速度。</li><li>用户可以像 Oracle 数据库那样设置一些表空间，每个表空间对应多个物理文件，每个<br>表空间可以给多个表使用，但一个表只能存储在一个表空间中。</li><li>将Doublewrite Buffer从共享表空间ibdata中也分离出来了。</li></ul></blockquote><h1 id="InnoDB数据文件"><a href="#InnoDB数据文件" class="headerlink" title="InnoDB数据文件"></a>InnoDB数据文件</h1><h2 id="InnoDB文件存储结构"><a href="#InnoDB文件存储结构" class="headerlink" title="InnoDB文件存储结构"></a>InnoDB文件存储结构</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210824202855307.png" alt="image-20210824202855307"><p>InnoDB数据文件存储结构：</p><p>Tablespace（表空间）–&gt;<code>ibd数据文件</code>–&gt; Segment（段） –&gt; Extent（区）–&gt; Page（页） –&gt; Row（行）</p><ul><li><p>Tablespace</p><p>表空间，用于存储多个<code>ibd</code>数据文件；</p></li><li><p><code>ibd</code>数据文件</p><p><code>ibd</code>数据文件用于存储表的记录和索引；一个文件包含多个段；</p></li><li><p>Segment</p><p>段，用于管理多个Extent，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollback segment）；一个表至少会有两个segment，一个管理数据，一个管理索引；每多创建一个索引，会多两个segment；</p></li><li><p>Extent</p><p>区，一个区固定包含64个连续的页，大小为1M；当表空间不足，需要分配新的页资源，不会一页一页分配，而是直接分配一个区；</p></li><li><p>Page</p><p>页，用于存储多个Row行记录，大小为16KB；包含很多种页类型，比如数据页、Undo页、系统页、事务数据页、大BLOB对象页；</p></li><li><p>Row</p><p>行，包含了记录的字段值，事务ID（Trx id）、滚动指针（Roll pointer）、字段指针（Field pointers）等信息；</p></li></ul><h2 id="InnoDB文件存储格式"><a href="#InnoDB文件存储格式" class="headerlink" title="InnoDB文件存储格式"></a>InnoDB文件存储格式</h2><p>可通过<code>show table status</code>查看文件存储格式；</p><p>一般情况下，如果<code>row_format</code>为REDUNDANT、COMPACT，文件格式为Antelope；如果<code>row_format</code>为DYNAMIC和COMPRESSED，文件格式为Barracuda；</p><p>通过<code>select * from information_schema.innodb_sys_tables</code>可查看指定表的文件格式；</p><h2 id="File文件格式"><a href="#File文件格式" class="headerlink" title="File文件格式"></a>File文件格式</h2><p>在早期的InnoDB版本中，文件格式只有一种，随着InnoDB引擎的发展，出现了新文件格式，用于支持新的功能；目前InnoDB只支持两种文件格式：Antelope和Barracuda；</p><ul><li>Antelope：原始的InnoDB文件格式，支持两种行格式：COMPACT和 REDUNDANT，MySQL5.6以前的默认格式；</li><li>Barracuda：新的文件格式，支持InnoDB所有行格式，包括新的行格式：COMPRESSED和DYNAMIC；</li></ul><blockquote><p>文件格式可通过<code>innodb_file_format</code>参数配置；</p></blockquote><h2 id="Row行格式"><a href="#Row行格式" class="headerlink" title="Row行格式"></a>Row行格式</h2><p>表的行格式决定了它的行是如何物理存储的，这反过来优惠影响查询和DML操作的性能；如果在单个page页中容纳更多行，查询和索引查找可以更快地工作，缓冲池中所需的内存更少，写入更新时所需的IO更少；</p><p>每个表的数据分成若干页来存储，每个页中采用B树结构存储；</p><p>如果字段信息过长，无法存储在B树节点中，这时候会被单独分配空间，此时被称为溢出页，该字段称为页外列；</p><p>InnoDB存储引擎支持四种行格式：REDUNDANT、COMPACT、DYNAMIC和COMPRESSED；DYNAMIC和COMPRESSED新格式引入的功能有：数据压缩、增强型长列数据的野外存储和大索引前缀；</p><ul><li><p>REDUNDANT行格式</p><p>使用REDUNDANT行格式，表会将变长列值的前768字节存储在B树节点的索引记录中，其余的存储在溢出页上；对于大于等于768字节的固定长度字段InnoDB会转换为变长字段，以便能够在页外存储；</p></li><li><p>COMPACT行格式</p><p>与REDUNDANT行格式相比，COMPACT行格式减少了约20%的行存储空间，但代价是增加了某些操作的CPU使用量；如果系统负载是受缓存命中率和磁盘速度限制，那么COMPACT格式可能更快；如果系统负载收到CPU速度的限制，那么COMPACT格式可能会慢一些；</p></li><li><p>DYNAMIC行格式</p><p>使用DYNAMIC行格式，InnoDB会将表中长可变长度的列值完全存储在页外，而索引记录只包含指向溢出页的20字节指针；大于或等于768字节的固定长度字段编码为可变长度字段；DYNAMIC行格式支持大索引前缀，最多可以为3072字节，可通过<code>innodb_large_prefix</code>参数控制；</p></li><li><p>COMPRESSED行格式</p><p>COMPRESSED行格式提供与DYNAMIC行格式相同的存储特性和功能，但增加了对表和索引数据压缩的支持；</p></li></ul><p>在创建表和索引时，文件格式都被用于每个InnoDB表数据文件；修改文件格式的方法是重新创建表及其索引，最简单方法是对要修改的每个表应用以下命令<code>alter table  tablename ROW_FORMAT=格式类型</code></p><h1 id="Undo-Log"><a href="#Undo-Log" class="headerlink" title="Undo Log"></a>Undo Log</h1><h2 id="Undo-Log介绍"><a href="#Undo-Log介绍" class="headerlink" title="Undo Log介绍"></a>Undo Log介绍</h2><p>Undo：以为撤销或取消，以撤销操作为目的，返回指定某个状态的操作；</p><p>Undo Log：数据库事务开始之前，会将要修改的记录存放到Undo日志里，当事务回滚或数据库崩溃时，可以利用Undo日志，撤销未提交事务对数据库产生的影响；</p><p>Undo Log产生和销毁：undo Log在事务开始前产生；事务在提交时，并不会立刻删除undo log，InnoDB会将该事务对应的undo log放入到删除列表中，后面会通过后台线程<code>purge thread</code>进行回收处理；Undo Log属于逻辑日志，记录一个变化过程；</p><p>Undo Log存储：undo log采用段的方式管理和记录；在InnoDB数据文件中包含一种rollback segment回滚段，内部包含1024个undo log segment；可通过命令<code>show variables like '%innodb_undo%'</code>控制undo log存储；</p><h2 id="Undo-Log作用"><a href="#Undo-Log作用" class="headerlink" title="Undo Log作用"></a>Undo Log作用</h2><h3 id="实现事务的原子性"><a href="#实现事务的原子性" class="headerlink" title="实现事务的原子性"></a>实现事务的原子性</h3><p>Undo Log是为了实现事务的原子性而出现的产物；事务处理过程中，如果出现了错误或者用户执行了ROLLBACK语句，MySQL利用Undo Log中的备份数据将数据恢复到事务开始之前的状态；</p><h3 id="实现多版本并发控制-MVCC"><a href="#实现多版本并发控制-MVCC" class="headerlink" title="实现多版本并发控制(MVCC)"></a>实现多版本并发控制(MVCC)</h3><p>Undo Log在MySQL InnoDB存储引擎中用来实现多版本并发控制；事务未提交前，Undo Log保存了未提交之前的版本数据，Undo Log中的数据可作为数据旧版本快照供其他并发事务进行快照读；</p><h2 id="Redo-Log和Binlog"><a href="#Redo-Log和Binlog" class="headerlink" title="Redo Log和Binlog"></a>Redo Log和Binlog</h2><h3 id="Redo-Log日志"><a href="#Redo-Log日志" class="headerlink" title="Redo Log日志"></a>Redo Log日志</h3><h4 id="Redo-Log介绍"><a href="#Redo-Log介绍" class="headerlink" title="Redo Log介绍"></a>Redo Log介绍</h4><p>Redo：顾名思义就是重做；以恢复操作为目的，在数据库发生意外时重现操作；</p><p>Redo Log：指事务中修改的任何数据，将最新的数据备份存储的位置，被称为重做日志；</p><p>Redo Log的生成与释放：随着事务操作的执行，就会生成redo log，在事务提交时会将产生redo log写入Log Buffer，并不是随着事务的提交就立刻写入磁盘文件；等事务操作的脏页写入到磁盘之后，redo log的使命就完成了，redo log占用的空间就可以重用；</p><h4 id="Redo-Log工作原理"><a href="#Redo-Log工作原理" class="headerlink" title="Redo Log工作原理"></a>Redo Log工作原理</h4><p>redo log是为了实现事务的持久性而出现的产物；防止在发生故障的时间点，尚有脏页未写入表的<code>ibd</code>文件中，在重启MySQL服务时，根据redo log进行重做，从而达到事务的未入磁盘数据进行持久化这一特性；</p><h4 id="Redo-Log写入机制"><a href="#Redo-Log写入机制" class="headerlink" title="Redo Log写入机制"></a>Redo Log写入机制</h4><p>Redo Log问价你内容是以顺序循环写入文件，写满时则回溯到第一个文件，进行覆写；</p><h4 id="Redo-Log配置参数"><a href="#Redo-Log配置参数" class="headerlink" title="Redo Log配置参数"></a>Redo Log配置参数</h4><p>每个InnoDB存储越年轻至少有一个重做日志文件组，每个文件组至少有2个重做日志文件，默认为<code>ib_logfile0</code>和<code>ib_logfile1</code>；</p><p>Redo Buffer持久化到Redo Log的策略，可通过<code>innodb_flush_log_at_trx_commit</code>配置：</p><ul><li>0：每秒提交Redo Buffer –&gt; OS Cache —&gt; flush cache to disk，可能丢失一秒内的事务数据；由后台Master线程每隔1秒执行一次操作；</li><li>1：默认值，每次事务提交执行Redo Buffer –&gt; OS Cache –&gt; flush cache to disk，最安全但性能最差的方式；</li><li>2：每次事务提交执行 Redo Buffer –&gt; OS Cache，然后由后台Master线程再每隔1秒执行 OS Cache –&gt; flush cache to disk操作；</li></ul><p>一般建议选择策略2，因为MySQL挂了数据没有损失，服务器怪了只会损失1秒的事务提交数据；</p><h3 id="Binlog日志"><a href="#Binlog日志" class="headerlink" title="Binlog日志"></a>Binlog日志</h3><h4 id="Binlog记录模式"><a href="#Binlog记录模式" class="headerlink" title="Binlog记录模式"></a>Binlog记录模式</h4><p>Redo Log是属于InnoDB引擎所特有的日志，而MySQL Server也有自己的日志，即Binary Log（二进制日志），简称Binlog；</p><p>Binlog是记录所有数据库表结构变更以及表数据修改的二进制日志，不会记录<code>select</code>和<code>show</code>这类操作；</p><p>Binlog日志是以时间形式记录，还包含语句锁执行的消耗时间，开启Binlog日志有以下两个最重要的使用场景：</p><ul><li>主从复制：在主库中开启Binlog功能，这样主库就可以把Binlog传递给从库，从库拿到Binlog后实现数据恢复达到主从数据一致性；</li><li>数据恢复：通过mysqlbinlog工具来恢复数据；</li></ul><p>Binlog文件名默认为“主机名_binlog-序列号”格式，例如<code>demo_binlog-000001</code>，也可以在配置文件中指定名称；文件记录模式有STATMENT、ROW和MIXED三种，具体含义如下：</p><ul><li>ROW（row-based replication，RBR）：日志中会记录每一行数据被修改的情况，然后在slave端对相同数据进行修改；<ul><li>优点：能清楚记录每个行数据的修改细节，能完全实现主从数据同步和数据的恢复；</li><li>缺点：批量操作，会产生大量的日志，尤其是alter table会让日志暴涨；</li></ul></li><li>STATMENT（statment-based replication，SBR）：每一条被修改数据的SQL都会记录到master的binlog中，slave在复制的时候SQL进程会解析成和原来master端执行过的相同的SQL再次执行，简称SQL语句复制；<ul><li>优点：日志量小，减少磁盘IO，提升存储和恢复速度；</li><li>缺点：在某些情况下会导致主从数据不一致，比如last_insert_id()，now()等函数；</li></ul></li><li>MIXED（mixed-based replication，MBR）：以上两种模式的混合使用，一般会使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择写入模式；</li></ul><h4 id="Binlog文件结构"><a href="#Binlog文件结构" class="headerlink" title="Binlog文件结构"></a>Binlog文件结构</h4><p>MySQL的binlog文件中记录的是对数据库的各种修改操作，用来表示修改操作的数据结构是Log event；不同的修改操作对应的不同的log event；比较常见的log event有：Query event、Row event、Xid event等；binlog文件的内容就是各种Log event的集合；</p><p>BInlog文件中Log event结构如下图所示：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210825012539972.png" alt="image-20210825012539972"><h4 id="Binlog写入机制"><a href="#Binlog写入机制" class="headerlink" title="Binlog写入机制"></a>Binlog写入机制</h4><ul><li>根据记录模式和操作触发event事件生成log event（事件触发执行机制）</li><li>将事务执行过程中产生的log event写入缓冲区，每个事务线程都有一个缓冲区；Log Event保存在一个binlog_cache_mngr数据结构中，该结构中有两个缓冲区，一个是stmt_cache，用于存放不支持事务的信息；另一个是trx_cache，用于存放支持事务的信息；</li><li>事务在提交阶段会将产生的log event写入到外部binlog文件中；不同事物以串行方式将log event写入binlog文件中，所以一个事务包含的log event信息在binlog文件中是连续的，中间不会插入其他事务的log event；</li></ul><h4 id="Binlog文件操作"><a href="#Binlog文件操作" class="headerlink" title="Binlog文件操作"></a>Binlog文件操作</h4><ul><li><p>Binlog状态查看：<code>show variables like '%log_bin%'</code></p></li><li><p>开启Binlog功能</p><ul><li><p>命令行模式：<code>set global log_bin=mysqllogbin;</code></p></li><li><p>配置文件模式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">log-bin<span class="token operator">=</span>mysqlbinlogbinlog-format<span class="token operator">=</span>ROW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>查看binlog日志</p><ul><li>查看日志：<code>show binlog events in 'mysqlbinlog.000001'</code></li><li>解析日志：<code>mysqlbinlog 'mysqlbinlog.00001' &gt;test.sql </code></li></ul></li><li><p>Binlog恢复数据</p><ul><li><p>按指定时间恢复：<code>mysqlbinlog --start-datetime="2020-01-01 11:00:00" --stop-datetime "2020-01-02 11:00:00" mysqlbinlog.00002|mysql -uroot -p1234</code></p></li><li><p>按事件位置号恢复：<code>mysqlbinlog --start-position=123 --stop-position=234 mysqlbinlog.00002 |mysql -uroot -p1234</code></p></li><li><p>mysqldump：定期全部备份数据库数据，结合mysqlbinlog可实现增量备份和数据恢复；</p></li></ul></li><li><p>Binlog删除</p><ul><li>删除指定文件：<code>purge binary logs to 'mysqlbinlog.00001'</code></li><li>删除指定时间之前的文件：<code>purge binary logs before '2020-01-01 00:00:00'</code></li><li>清除所有日志文件：<code>reset master</code></li></ul></li><li><p>Binlog自动清理</p><p>Binlog可通过设置<code>expire_logs_days</code>参数来启动日志自动清理功能；默认值为0，表示不启用自动清理；参数设置为1，表示超过1天binlog文件会自动删除；</p></li></ul><h3 id="Redo-Log与Binlog区别"><a href="#Redo-Log与Binlog区别" class="headerlink" title="Redo Log与Binlog区别"></a>Redo Log与Binlog区别</h3><ul><li>Redo Log是属于InnoDB引擎功能，Binlog是属于MySQL Server自带功能，并且是以二进制文件记录；</li><li>Redo Log是属于物理日志，记录该数据页更新状态内容，Binlog是逻辑日志，记录更新过程；</li><li>Redo Log日志是循环写，日志空间大小是固定，Binlog是追加写入，不会覆盖使用；</li><li>Redo Log作为服务器异常宕机后事务数据自动恢复使用，Binlog可以作为主从复制和数据恢复使用；Binlog没有自动crash-safe能力；</li></ul><h1 id="InnoDB事务隔离"><a href="#InnoDB事务隔离" class="headerlink" title="InnoDB事务隔离"></a>InnoDB事务隔离</h1><p>InnoDB的多版本并发控制是基于事务隔离级别实现的，而事务隔离级别则是依托前面提到的Undo Log实现的；当读取一个数据记录时，每个事务会使用一个读视图（<code>Read View</code>），读视图用于控制事务能读取到的记录的版本；</p><p>InnoDB的事务隔离级别分为：<code>Read UnCommitted</code>、<code>Read Committed</code>、<code>Repeatable Read</code>以及<code>Serializable</code>，其中<code>Serializable</code>是基于锁实现的串行化方式，严格来说不是事务可见性范畴；</p><ul><li><p><code>Read Uncommitted</code></p><p>未提交读，也称为脏读，它读取的是当前最新修改的记录，即便这个修改最后并为生效；</p></li><li><p><code>Read Committed</code></p><p>提交读，它基于的是当前事务内的语句开始执行时的最大的事务ID；如果其他事务修改同一个记录，在没有提交前，则该语句读取的记录还是不会变；但是这种情况会产生不可重复读，即一个事务内多次读取同一条记录可能得到不同的结果；</p></li><li><p><code>Repeatable Read</code></p><p>可重复读，它基于的是事物开始时的读视图，直到事务结束；不读取其他新的事务对该记录的修改，保证同一个事务内的可重复读取；InnoDB提供了<code>next-key lock</code>来解决幻读问题，在一些特殊场景下，可重复读还是可能出现幻读的情况；</p></li></ul><h1 id="InnoDB和ACID模型"><a href="#InnoDB和ACID模型" class="headerlink" title="InnoDB和ACID模型"></a>InnoDB和ACID模型</h1><p>事务有ACID四个属性，InnoDB是支持事务的，它实现ACID的机制如下：</p><ul><li><p>Atomicity</p><p>InnoDB的原子性主要是通过提供的事务机制实现；</p></li><li><p>Consistency</p><p>InnoDB的一致性主要是指保护数据不受系统崩溃影响，相关特性包括：</p><ul><li>InnoDB的双写缓冲区</li><li>InnoDB的故障恢复机制</li></ul></li><li><p>Isolation</p><p>InnoDB的隔离性也是主要通过事务机制实现，特别是为事务提供的多种隔离级别，相关特性包括：</p><ul><li>Autocommit设置</li><li>SET ISOLATION LEVEL语句</li><li>InnoDB锁机制</li></ul></li><li><p>Durability</p><p>InnoDB的持久性相关特性：</p><ul><li><p>Redo Log</p></li><li><p>双写缓冲</p><p>通过<code>innodb_doublewrite</code>开启或关闭</p></li><li><p>配置<code>innodb_flush_log_at_trx_commit</code></p><p>用于配置InnoDB如何写入和刷新redo日志缓冲到磁盘；</p><p><code>innodb_lock_wait_timeout</code>可以配置刷新日志缓存到磁盘的频率，默认为1秒；</p></li><li><p>配置<code>sync_binlog</code></p><p>用于设置同步binlog到磁盘的频率：</p><p>为0表示禁止MySQL同步binlog到磁盘，binlog刷到磁盘的频率由操作系统决定，性能最好但最不安全；</p><p>为1表示每次事务提交前同步到磁盘，性能最差但最安全；</p><p>MySQL文档推荐<code>sync_binlog</code>和<code>innodb_flush_log_at_trx_commit</code>都设置为1；</p></li><li><p>操作系统的<code>fsync</code>系统调用</p></li><li><p>UPS设备和备份策略</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据技术架构选型</title>
      <link href="/2021/08/11/03-hadoop/da-shu-ju-ji-zhu-jia-gou-xuan-xing/"/>
      <url>/2021/08/11/03-hadoop/da-shu-ju-ji-zhu-jia-gou-xuan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="常见技术栈及特点"><a href="#常见技术栈及特点" class="headerlink" title="常见技术栈及特点"></a>常见技术栈及特点</h1><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><ul><li>HDFS：</li><li>Hive：</li><li>Kudu：</li><li>Kylin：</li></ul><h2 id="计算引擎"><a href="#计算引擎" class="headerlink" title="计算引擎"></a>计算引擎</h2><ul><li>MR：</li><li>Spark：</li><li>SparkStreaming：</li><li>Impala：</li><li>Storm：</li><li>Flink：</li></ul><h2 id="存储-计算"><a href="#存储-计算" class="headerlink" title="存储+计算"></a>存储+计算</h2><ul><li>Hbase：</li><li>Hana：</li><li>Presto：</li><li>GreenPlum：</li><li>Postgresql：</li><li>ClickHouse：</li><li>TiDB：</li><li>Doris：</li><li>MongoDB：</li><li>ES：</li><li>达梦：</li><li>Oracle：</li><li>MySql：</li><li>DB2：</li></ul><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><ul><li>Kafka：</li><li>RocketMQ：</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP连接的“三次握手”与“四次挥手”</title>
      <link href="/2021/08/09/01-linux/tcp-lian-jie-san-ci-wo-shou-yu-si-ci-hui-shou/"/>
      <url>/2021/08/09/01-linux/tcp-lian-jie-san-ci-wo-shou-yu-si-ci-hui-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-connection"><a href="#TCP-connection" class="headerlink" title="TCP connection"></a>TCP connection</h1><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210809205222626.png" alt="image-20210809205222626"><p>客户端与服务器之间数据的发送和返回的过程当中需要创建一个叫做<code>TCP connection</code>的东西。</p><p>由于TCP连接上是可以发送多个<code>http</code>请求的，不同的版本模式会存在一些差异。</p><p>HTTP/1.0中，TCP连接是在<code>http</code>请求创建的时候同步创建的，<code>http</code>请求发送到服务器端，服务器端响应之后，这个TCP连接就关闭了；</p><p>HTTP/1.1中可以以某种方式声明TCP连接一直保持，一个请求传输完之后，另一个请求可以接着传输；这样的好处是：在创建一个TCP连接的过程中需要“三次握手”的消耗，“三次握手”代表有三次网络传输，在第二次传输的时候就没有“三次握手”的消耗了；</p><p>HTTP/2在HTTP/1.1的基础上，可以在同一个TCP连接中并发地传输<code>http</code>请求；</p><h1 id="TCP报文"><a href="#TCP报文" class="headerlink" title="TCP报文"></a>TCP报文</h1><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210809205921169.png" alt="image-20210809205921169">报文说明：<ol><li>序号（sequence number）：<code>Seq</code>序号，占用32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记；</li><li>确认号（acknowledge number）：<code>Ack</code>序号，占用32位，只有ACK标志位序号为1时，确认序号字段才有效，<code>Ack=Seq+1</code>；</li><li>标志位（flags）：供6个，即URG、ACK、PSH、RST、SYN、FIN等；<ol><li>URG：紧急指针有效；</li><li>ACK：确认序号有效；</li><li>PSH：接收方应该尽快将报文交给应用层；</li><li>RST：重置链接；</li><li>SYN：发起一个新的连接；</li><li>FIN：释放一个链接；</li></ol></li></ol><h1 id="TCP连接状态"><a href="#TCP连接状态" class="headerlink" title="TCP连接状态"></a>TCP连接状态</h1><ul><li><p>LISTENING</p><p>提供某种服务，侦听远方TCP端口的连接请求，当提供的服务没有被连接时，处于LISTENING状态，端口是开放的，等待被链接；</p></li><li><p>SYN_SENT（客户端状态）</p><p>客户端调用<code>connect()</code>，发送一个SYN请求建立一个连接，在发送连接请求后等待匹配的连接请求，此时状态为SYN_SENT;</p></li><li><p>SYN_RECEIVED(服务端状态)</p><p>当收到客户端SYN请求后，服务端会发送一个SYN连接请求及ACK确认到客户端，在等待对方连接请求确认，这时状态为SYN_RCVD，如果有很多SYN_RCVD状态，则可能受到了SYN Flood的Dos攻击；该状态非常短暂；</p></li><li><p>ESTABLISHED</p><p>当客户端回复正确的<code>Ack</code>值后，就建立一个打开的连接，客户端和服务器端就都进入ESTABLISHED状态，此时变可以PUSH数据；</p></li><li><p>FIN-WAIT-1</p><p>客户端调用<code>close()</code>关闭连接后，TCP发出FIN请求主动关闭连接，然后进入FIN-WAIT-1状态等待远程TCP连接中断请求或者确认；</p></li><li><p>FIN-WAIT-2</p><p>半关闭状态；主动关闭端（也就是客户端调用<code>close()</code>后）接收到ACK确认后，此时进入FIN-WAIT-2状态，该状态下，客户端应用程序依然能接收数据；</p></li><li><p>CLOSE-WAIT</p><p>被动关闭状态，TCP接收到FIN后，就发送ACK回应客户端的FIN标识封包；然后进入CLOSE-WAIT状态；</p></li><li><p>CLOSING</p><p>一般为客户端与服务器端同时发起了FIN主动关闭，客户端发送FIN主动关闭，但没有收到服务器端发来的ACK确认，而是先收到了服务端发来的FIN关闭连接，所以必须是同时进入CLOSING状态后，只要收到了对方对自己发送的FIN的ACK，收到FIN的ACK后确认就进入TIME-WAIT状态；因此，如果RTT处在一个可接受的范围内，发出的FIN会很快进入TIME-WAIT状态；所以CLOSING状态持续的时间特别短；</p></li><li><p>LAST-ACK</p><p>服务器端发送确认中断后，也发送FIN关闭，然后进入LAST-ACK最后确认关闭状态；</p></li><li><p>TIME-WAIT</p><p>在主动关闭端接收到FIN后，TCP就发送ACK，并进入TIME-WAIT状态，该状态保持由内核参数默认等待2MSL，之后主动关闭方也进入CLOSED状态关闭连接；</p></li><li><p>CLOSED</p><p>TCP连接关闭，被动关闭端在接收到ACK包后，进入CLOSED状态关闭TCP连接；</p></li></ul><h1 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h1><h2 id="三次握手详解"><a href="#三次握手详解" class="headerlink" title="三次握手详解"></a>三次握手详解</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210809213449864.png" alt="image-20210809213449864"><p>所谓的三次握手即TCP连接的建立过程；这个连接必须是乙方主动打开，另一方被动打开的；</p><p>握手之前主动打开连接的客户端结束CLOSED阶段，被动打开的服务器端也结束CLOSED阶段；随后开始“三次握手”：</p><ol><li>首先客户端向服务器端发送一段TCP报文，其中：<ol><li>标记为为SYN，表示“请求建立新连接”；</li><li>序号为<code>Seq=X</code>（X一般为1，对应上图中1000）；</li><li>随后客户端进入SYN-SENT阶段；</li></ol></li><li>服务器端接收到来自客户端的TCP报文之后，结束LISTEN阶段，并返回响应报文，其中：<ol><li>标志位为SYN和ACK，表示“确认客户端的报文Seq序号有效，服务器可正常接收客户端发送的数据，并同意创建新连接”；</li><li>序号为<code>Seq=Y</code>（对应上图中2000）；</li><li>确认序号为<code>Ack=X+1</code>（对应上图中1001），表示收到客户端的序号<code>Seq</code>并将其值加1作为自己的确认号<code>Ack</code>的值；随后服务器进入SYN-RCVD阶段；</li></ol></li><li>客户端接收到来自服务器端的确认收到数据的TCP报文后，明确了从客户端到服务器端的数据传输是正常的，结束SYN-SENT阶段。并返回最后一段TCP报文，其中：<ol><li>标志位为ACK，表示“确认收到服务器端同意链接的信号”；（即告知服务器我知道你收到我发送的数据了）</li><li>序号为<code>Seq=X+1</code>（上图未标记，对应值为1001），表示收到服务器端的确认号<code>Ack</code>，并将其值作为自己的确认号<code>Ack</code>的值；</li><li>确认号为<code>Ack=Y+1</code>（对应上图中2001）,表示收到服务器端序号<code>Seq</code>，并将其值加1作为自己的确认号<code>Ack</code>的值；</li><li>客户端进入ESTABLISHED阶段；</li></ol></li></ol><p>服务器端收到来自客户端的“确认收到服务器端数据” 的TCP报文之后，明确了从服务器到客户端的数据传输是正常的；</p><p>在客户端与服务器端传输的TCP报文中，双方的确认好<code>Ack</code>和序号<code>Seq</code>的值，都是在彼此<code>Ack</code>和<code>Seq</code>值的基础上进行计算的，这样做保证了TCP报文传输的连贯性。一旦出现某一方发出的TCP报文丢失，便无法继续“握手”，以此确保“三次握手”的顺利完成；</p><p>此后客户端与服务器端进行正常的数据传输，这就是“三次握手”的过程；</p><h2 id="为什么要进行“三次握手”？"><a href="#为什么要进行“三次握手”？" class="headerlink" title="为什么要进行“三次握手”？"></a>为什么要进行“三次握手”？</h2><p>为了防止服务器端开启一些无用的连接增加服务器开销以及防止已失效的连接请求报文段突然又传送到了服务器端，因而产生错误；</p><p>由于网络传输是有延时的，在传输的过程中，比如客户端发起了SYN=1的创建连接的请求（第一次握手）；</p><p>如果服务器端就直接创建了这个链接并返回包含SYN、ACK和<code>Seq</code>等内容的数据包给客户端，这个数据包因为网络传输丢失了，丢失之后客户端一直未再收到服务器端新的数据包；客户端可能设置了一个超时时间，时间到了就关闭了链接创建的请求。再重新发出创建连接的请求，而服务器端是不知道的，如果没有第三次握手告诉服务器端客户端收到了服务器端传输的数据的话，服务器端是不知道客户端是否接收到服务器端返回的信息的；</p><p>这样没有给服务器端一个创建还是关闭链接端口的请求，服务器端的端口就一直开放，等到客户端因超时重新发出请求时，服务器端就会重新开启一个端口链接；那么服务器端上没有接收到请求数据的上一个端口就一直开着，长此以往，这样的端口多了，会造成服务器端开销的严重浪费；</p><p>还有一种情况是已经失效的客户端发出的请求信息，由于某种原因传输到了服务器端，服务器端认为是有效客户端发出的请求，接收后产生错误；</p><p>所以我们需要“三次握手”来确认这个过程，让客户端和服务器端能够及时地察觉到因为网络等问题导致的连接创建失败，这样服务器端的端口就可以关闭而非一直等待；</p><p>也可以理解为，“第三次握手”是客户端想服务器端发送数据，这个数据就是要告诉服务器端，客户端有没有收到服务器“第二次握手”时传过去的数据；若发送的数据是“收到”信息，接收后服务器就正常建立TCP连接；否则连接建立失败，服务器关闭链接端口，减少服务器开销和收到失效请求发生的错误；</p><h1 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h1><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210809221401054.png" alt="image-20210809221401054"><p>所谓的TCP四次挥手即TCP连接的释放；链接的释放必须必须一方主动释放，另一方被动释放；</p><p>以客户端主动发起释放链接为例：</p><ol><li>首先客户端想要释放链接，向服务器端发送一段TCP报文，其中：<ol><li>标志位为FIN，表示“请求释放连接”；</li><li>序号为<code>Seq=U</code>（对应上图中5000）；</li><li>随后客户端进入FIN-WAIT-1阶段，即半关闭阶段；并且停止在客户端到服务器端方向上发送数据，但是客户端仍然等待从服务器端传输过来的数据；（不发送数据是指不发送正常数据，但是仍然可以发送ACK报文数据）；</li></ol></li><li>服务器端接收到从客户端发出的TCP报文之后，确认了客户端想要释放链接，随后服务器端结束ESTABLISHED阶段，进入CLOSE-WAIT阶段（半关闭阶段）并返回一段TCP报文，其中：<ol><li>其中标志位为ACK，表示“接收到客户端发送的释放链接的请求”；</li><li>序号为<code>Seq=V</code>（对应上图中7000）；</li><li>确认号为<code>Ack=U+1</code>（对应上图中5001），表示是在收到客户端报文的基础上，将其序号<code>Seq</code>值加1作为本段报文确认号<code>Ack</code>的值；</li><li>随后服务器端开始准备释放服务器端到客户端方向上的连接；客户端收到从服务器端发出的TCP报文之后，确认了服务器收到了客户端发出的释放连接请求，随后客户端结束FIN-WAIT-1阶段，进入FIN-WAIT-2阶段；（前两次挥手让服务器端与客户端都知道了对方释放连接的请求；）</li></ol></li><li>服务器端自从发出ACK确认报文之后，经过CLOSED-WAIT阶段，做好了释放服务器端到客户端方向上的连接准备，再次向客户端发出一段TCP报文，其中：<ol><li>标志位为FIN、ACK，表示“已准备好释放链接”；</li><li>序号为<code>Seq=W</code>（对应上图中7001）；</li><li>确认号为<code>Ack=U+1</code>（对应上图中5001）；表示在收到客户端报文的基础上，将其序号<code>Seq</code>值加1作为本段报文确认好<code>Ack</code>的值；随后服务器端结束CLOSE-WAIT阶段，进入LAST-ACK阶段；并且停止在服务器端到客户端的方向上发送数据，但服务器端仍然能够接受从客户端发送过来的数据；</li></ol></li><li>客户端收到从服务器端发出的TCP报文，确认了服务器端已做好释放链接的准备，结束FIN-WAIT-2阶段，进入TIME-WAIT阶段，冰箱服务器端发送一段报文，其中：<ol><li>标记为为ACK，表示“接收到服务器准备好释放连接的信号”；</li><li>序号为<code>Seq=U+1</code>（对应上图中5001），表示是在收到了服务器端报文的基础上，将其确认号<code>Ack</code>值作为本段报文序号的值；</li><li>确认好为<code>Ack=W+1</code>（对应上图中7002），表示是在收到了服务器端报文的基础上，将其序号<code>Seq</code>值作为本段报文确认号的值；</li></ol></li></ol><p>服务器端收到从客户端发出的TCP报文之后结束LAST-ACK阶段，进入CLOSED阶段；由此正式确认关闭服务器端到客户端方向上的连接；</p><p>客户端等待完成2MSL之后，结束TIME-WAIT阶段，进入CLOSED阶段，由此完成“四次挥手”；与“三次握手”一样，在客户端与服务器端传输的TCP报文中，双方的确认号<code>Ack</code>和序号<code>Seq</code>的值，都是在彼此的<code>Ack</code>和<code>Seq</code>值的基础上进行计算的，这样做保证了TCP报文传输的连贯性，一旦出现某一方发出的TCP报文丢失，便无法继续“挥手”，以此确保“四次挥手”的顺利完成；</p><h2 id="为什么“握手”三次，“挥手”需要四次"><a href="#为什么“握手”三次，“挥手”需要四次" class="headerlink" title="为什么“握手”三次，“挥手”需要四次"></a>为什么“握手”三次，“挥手”需要四次</h2><p>TCP建立连接时之所以只需要“三次握手”，是因为在第二次“握手”过程中，服务器端发送给客户端的TCP报文是以SYN和ACK作为标志位，SYN是请求连接，表示服务器同意建立连接；ACK是确认报文，表示告诉客户端，服务器端收到了它的请求报文；</p><p>即SYN和ACK确认接收报文是在同一次“握手”当中传输的，所以“三次握手”正好让双方明确彼此信息互通；</p><p>TCP释放连接时之所以需要“四次挥手”，是因为FIN释放链接报文与ACK确认接收报文是分别由第二次和第三次“挥手”传输的；为何建立连接可以一起传输，释放连接却要分开传输？</p><blockquote><ul><li>建立连接时，被动方服务器端结束CLOSED阶段进入“握手”阶段并不需要任何准备，可以直接返回SYN和ACK，开始建立连接；</li><li>释放连接时，被动方服务器，收到主动方客户端释放连接的请求时并不能立即释放连接，因为还有必要的数据需要处理，所以服务器先返回ACK确认收到报文，经过CLOSE-WAIT阶段准备好释放链接之后，通过第三次“挥手”，返回FIN释放连接报文；</li></ul></blockquote><h2 id="为什么客户端在TIME-WAIT阶段要等2MSL"><a href="#为什么客户端在TIME-WAIT阶段要等2MSL" class="headerlink" title="为什么客户端在TIME-WAIT阶段要等2MSL"></a>为什么客户端在TIME-WAIT阶段要等2MSL</h2><p>为的是确认服务器端是否接收到客户端发出的ACK确认报文；</p><p>当客户端发出最后的ACK确认报文时，并不能确定服务器端能够收到该段报文；所以客户端在发送完ACK确认报文之后，会设置一个时长为2MSL的计时器；MSL指的是Maximum  Segment lifetime，即一段TCP报文在传输过程中的最大生命周期；2MSL即服务器端发出为FIN报文和客户端发出的ACK确认报文所能保持有效的最大时长；</p><p>服务器端在1MSL内没有收到客户端发出的ACK确认报文，就会再次向客户端发出FIN报文；</p><blockquote><ul><li><p>如果客户端在2MSL内，<strong>再次</strong>收到了来自服务器端的FIN报文，说明服务器端由于各种原因没有收到客户端发出的ACK确认报文；客户端再次向服务器端发出ACK确认报文，计时器重置，重新开始2MSL的计时；</p></li><li><p>客户端在2MSL内没有再次收到来自服务器端的FIN报文，说明服务器端正常接收了ACK确认报文，客户端可以进入CLOSED阶段，完成“四次挥手”；</p></li></ul></blockquote><p>所以客户端要经历时长2MSL的TIME-WAIT阶段；这也是为什么客户端比服务器端晚进入CLOSED阶段的原因；</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统文件读取</title>
      <link href="/2021/08/09/01-linux/cao-zuo-xi-tong-wen-jian-du-qu/"/>
      <url>/2021/08/09/01-linux/cao-zuo-xi-tong-wen-jian-du-qu/</url>
      
        <content type="html"><![CDATA[<h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><p>操作系统的主要工作是为管理硬件资源和为应用程序开发人员提供友好的环境；处理器有两种模式：”用户模式“与”内核模式“；一些容易发生安全问题的操作都被限制在只有内核模式下才可以执行，例如IO操作，修改基址寄存器内容等，而链接用户模式与内核模式的接口称之为系统调用；</p><p>应用程序代码运行在用户模式下，当应用程序需要实现内核模式下的指令时，需要先向操作系统发送调用请求，操作系统收到请求后，执行系统调用接口，使处理器进入内核模式，当处理器处理完系统调用操作后，操作系统会让处理器返回用户模式，继续执行用户代码；</p><p>进程的虚拟地址空间可分为内核空间和用户空间：内核空间中存放的是内核代码和数据，用户空间存放的是用户程序的代码和数据；不管是内核空间还是用户空间，他们都处于虚拟空间中，都是对物理地址的映射；</p><blockquote><p>用用程序中实现对文件的操作过程就是典型的系统调用过程；</p></blockquote><h1 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h1><p>一个应用操作系统（如windows、Linux）可以支持多种不同的底层文件系统（如FAT、NTFS、ext3、ext4、xfs等），为了给内核和用户进程提供统一的文件系统视图，下文以Linux系统为例；</p><p>Linux在用户进程和底层文件系统之间加入了一个抽象层，即虚拟文件系统（Virtual File System，简称VFS），进程所有的文件操作都通过VFS，由VFS来适配各种底层不同的文件系统，完成实际的文件操作；</p><p>通俗来说，VFS就是定义了一个通用文件系统的接口层和适配层，一方面为用户进程提供了一组统一的访问文件、目录和其他对象的统一方法，另一方面又要和不同的底层文件系统进行适配；</p><h2 id="虚拟文件系统主要模块"><a href="#虚拟文件系统主要模块" class="headerlink" title="虚拟文件系统主要模块"></a>虚拟文件系统主要模块</h2><ol><li>超级块（super_block）：用于保存一个文件系统的所有元数据，相当于这个文件系统的信息库，为其它模块提供信息；因此一个超级块可以代表一个文件系统；文件系统的任意元数据修改都要修改超级块；超级块对象是常驻内存并被缓存的；</li><li>目录项模块：用于管理路径的目录项，比如一个路径<code>/home/semon/hello.txt</code>，那么目录项中包含<code>home</code>、<code>semon</code>、<code>hello.txt</code>；目录项的块，存储的是这个目录下的所有文件的<code>inode</code>号和文件名等信息，其内部是树形结构，操作系统检索一个文件，都是从根目录开始，按层次解析路径中的所有目录，直到定位到文件；</li><li><code>inode</code>模块：管理一个具体的文件，是文件的唯一标识，一个文件对应一个<code>inode</code>；通过<code>inode</code>可以方便的找到文件在磁盘扇区的位置；同时<code>inode</code>模块可以链接到<code>address_space</code>模块，方便查找自身数据是否已经缓存；</li><li>打开文件列表模块：该模块包含所有内核已经打开的文件；已经打开的文件对象由<code>open</code>系统调用在内核中创建，也叫文件句柄；打开文件列表模块中包含一个列表，每个列表表项是一个结构体<code>struct file</code>，结构体中的信息用来标示打开一个文件的各种状态参数；</li><li><code>file_operations</code>模块：该模块维护一个数据结构，是一系列函数指针的集合，其中包含所有可以使用的系统调用函数，如<code>open</code>、<code>read</code>、<code>write</code>、<code>nmap</code>等；每个打开文件都可以链接到<code>file_operations</code>模块，从而对任何已打开文件，通过系统调用函数，实现各种操作；</li><li><code>address_space</code>模块：它表示一个文件在页缓存中已经缓存了的物理页，它是页缓存和外部设备中文件系统的桥梁；如果将文件系统理解为数据源，那么<code>address_space</code>可以说关联了内存系统和文件系统；</li></ol><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210811114344512.png" alt="image-20210811114344512"><p>由上图可以看出：</p><ol><li>每个模块都维护了一个<code>X_op</code>指针指向它所对应的操作对象<code>X_operations</code>；</li><li>超级块维护了一个<code>s_files</code>指针指向已打开文件列表模块，即内核所有的打开文件的链表，这个链表信息是所有进程共享的；</li><li>目录操作模块和<code>inode</code>模块多维护了一个<code>X_sb</code>指针指向超级块，从而可以获取整个文件系统的元数据信息；</li><li>目录项对象和<code>inode</code>对象各自维护了指向对方的指针，可以找到对方的数据；</li><li>已打开文件列表上每一个<code>file</code>结构体实例维护了一个<code>f_entry</code>指针，指向了它对应的目录项，从而可以根据目录项找到它对应的<code>indoe</code>信息；</li><li>已打开文件列表上每一个<code>file</code>结构体实例还维护了一个<code>f_op</code>指针，指向可以对这个文件进行操作的所有函数集合<code>file_operations</code>；</li><li><code>inode</code>中不仅有和其它模块关联的指针，更重要的是它可以指向``address_space`模块，从而获取自身文件在内存中的缓存信息；</li><li><code>address_space</code>内部维护了一个树结构来指向所有的物理页结构<code>page</code>，同时维护了一个<code>host</code>指针指向<code>inode</code>来获取文件的元数据；</li></ol><h2 id="进程与VFS交互"><a href="#进程与VFS交互" class="headerlink" title="进程与VFS交互"></a>进程与VFS交互</h2><ol><li>内核使用<code>task_struct</code>来表示单个进程的描述符，其中包含维护一个进程的所有信息；<code>task_struct</code>结构体中维护了一个<code>files</code>指针来指向结构体<code>files_struct</code>，<code>files_struct</code>中包含文件描述符表和打开的文件对象信息；</li><li><code>file_struct</code>中的文件描述符表实际是一个<code>file</code>类型的指针列表，可以支持动态扩展，每一个指针指向虚拟文件系统中文件列表模块的某一个打开的文件；</li><li><code>file</code>结构一方面可以从<code>f_dentry</code>连接到目录项模块以及<code>inode</code>模块获取所有和文件相关的信息，另一方面链接<code>file_operations</code>子模块，其中包含所有可以使用的系统调用函数，从而最终完成对文件的操作；这样，从进程到进程的文件描述符表，再关联到已打开文件列表上对应的文件结构，从而调用其可执行的系统调用函数，实现对文件的各种操作；</li></ol><h2 id="进程-文件列表-Inode"><a href="#进程-文件列表-Inode" class="headerlink" title="进程/文件列表/Inode"></a>进程/文件列表/Inode</h2><ul><li>多个进程可以同时指向一个打开文件对象（文件列表表项），如父进程与子进程间共享文件对象；</li><li>一个进程多次打开同一个文件，生成不同的文件描述符，每个文件描述符指向不同的文件列表表项，但这些文件列表表项指向同一个<code>inode</code>；但是由于是同一个文件，<code>inode</code>唯一</li></ul><h1 id="IO缓冲区"><a href="#IO缓冲区" class="headerlink" title="IO缓冲区"></a>IO缓冲区</h1><p><strong>概念</strong></p><p>IO缓冲区与高速缓存（<code>cache</code>）产生的原理类似，在IO过程中，磁盘读取速度相对内存读取速度要慢得多，为了能够加快数据处理速度，需要将已读取的数据缓存在内存中，这些缓存在内存中的数据就是高速缓冲区（<code>buffer cache</code>），简称<code>buffer</code>；具体来说，<code>buffer</code>是一个用于存储速度不同的设别或优先级不同的设备之间传输数据的区域；一方面，通过缓冲区，可以使进程间的相互等待变少，从而使从速度慢的设备读入数据时，速度快的设备操作进程不发生间断；另一方面，可以保护硬盘或减少网络IO的次数；</p><p><strong>Buffer与Cache</strong></p><p><code>buffer</code>与<code>cache</code>是两个不同的概念：</p><ul><li><code>cache</code>是高速缓存，用于CPU和内存之间的缓冲；</li><li><code>buffer</code>是IO缓冲，用于内存和硬盘的缓冲；</li></ul><p>简单来说，<code>cache</code>是为了加速“读”，而<code>buffer</code>是缓冲“写”，前者解决读的问题，保存从磁盘上读出的数据，后者解决写问题，保存即将要写入到磁盘上的数据；</p><p><strong>Buffer Cache与Page Cache</strong></p><p><code>buffer cache</code>和<code>page cache</code>都是为了处理设备与内存交互式高速访问问题；<code>buffer cache</code>称为块缓冲器，<code>page cache</code>称为页缓冲器；在Linux不支持虚拟内存机制前，没有页的概念，因此缓冲区以块为单位对设备进行；在Linux采用虚拟内存的机制来管理内存后，页是虚拟内存管理的最小单位，开始采用页缓冲机制来缓冲内存；Linux2.6之后内核将块缓冲器与页缓冲器中和，页与块可以相互映射，同时，页缓存面向的是虚拟内存，块缓存是面向块设备；需要强调的是，页缓存和块缓存对进程来说是同一个存储系统，进程不需要关注底层设备的读写；</p><p><code>buffer cache</code>和<code>page cache</code>两者最大的区别是缓存的粒度；<code>buffer cache</code>面向的是文件系统的块，<code>page cache</code>处理性能更高，内核的内存管理组件采用了比文件系统的块更高级的抽象，因此和内存管理交互的缓存组件，都使用页缓存；</p><h2 id="Page-Cache"><a href="#Page-Cache" class="headerlink" title="Page Cache"></a>Page Cache</h2><p>页缓存是面向文件、面向内存的，通俗来说，它位于内存和文件之间缓冲区，文件IO操作实际上只和<code>page cache</code>交互，不直接与内存交互；<code>page cache</code>可以用在所有以文件为单元的场景下，比如网络文件系统等等；<code>page cache</code>通过一系列数据结构，比如<code>inode</code>、<code>address_space</code>、<code>struct page</code>，实现将一个文件映射到页的级别：</p><ol><li><code>struct page</code>结构标志一个物理内存页，通过<code>page + offset</code>就可以将此页帧定位到一个文件中的具体位置；<code>struct page</code>具备以下重要参数：<ol><li>标志位<code>flags</code>记录该页是否脏页，是否正在被写回等等；</li><li><code>mapping</code>指向地址空间<code>address_space</code>，表示这个页是一个页缓冲中页，与一个文件的地址空间对应；</li><li><code>index</code>记录这个页在文件中的页偏移量；</li></ol></li><li>文件系统的<code>inode</code>实际维护了这个文件所有块（<code>block</code>）的块号，通过对文件偏移量<code>offset</code>取模可以很快定位到这个偏移量所在的文件系统的块号，磁盘的扇区号；同样，通过对文件偏移量<code>offset</code>进行取模可以计算出偏移量所在的页的偏移量；</li><li><code>page cache</code>缓存组件抽象了地址空间<code>address_space</code>这个概念来作为文件系统和页缓存的中间桥梁；地址空间<code>address_space</code>通过指针可以方便的获取文件<code>inode</code>和<code>struct page</code>的信息，可以方便地定位到一个文件的<code>offset</code>在各个组件中的位置，即通过：文件字节偏移量–&gt;页偏移量–&gt;文件系统块号–&gt;磁盘扇区号；</li><li>页缓存实际上就是采用了一个基数树结构讲一个文件的内容组织起来存放在物理内存<code>struct page</code>中；一个文件<code>inode</code>对应一个地址空间<code>address_space</code>，而一个<code>address_space</code>对应一个页缓存基数树；</li></ol><h2 id="Address-Space"><a href="#Address-Space" class="headerlink" title="Address Space"></a>Address Space</h2><p><code>Address Space</code>是Linux内核中的一个关键抽象，它被作为文件系统和页缓存的中间适配器，用来指示一个文件在页缓存中已经缓存了的物理页；</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘阵列卡</title>
      <link href="/2021/08/09/01-linux/ci-pan-zhen-lie-qia/"/>
      <url>/2021/08/09/01-linux/ci-pan-zhen-lie-qia/</url>
      
        <content type="html"><![CDATA[<h1 id="磁盘阵列"><a href="#磁盘阵列" class="headerlink" title="磁盘阵列"></a>磁盘阵列</h1><p>磁盘阵列RAID全名是<code>Redundant Array of Inexpensive Disk</code>，1987年由加州伯克利分校提出，最初的研制摸底是为了组合小的廉价磁盘来代替大的昂贵磁盘，以降低大批量数据存储的费用；RAID可以通过软件（RAID卡）或硬件（MDADM）将多个独立的磁盘驱动器组成的磁盘子系统，从而提高比单个磁盘更高的存储性能和数据冗余的技术；</p><p>RAID中主要有三个关键概念：镜像、数据条带、和数据校验；</p><ul><li><p>镜像：</p><p>镜像是一种冗余技术，为磁盘提供保护功能，防止磁盘发生故障而造成数据丢失；而且镜像技术不需要额外的计算和校验，故障修复非常快，直接复制即可；镜像技术可以从多个副本进行并发读取数据，提供更高的IO性能，但不支持并行写数据，写多个副本会导致一定的IO性能下降；</p><p>镜像技术提供了非常高的数据安全性，其代价也是非常昂贵的，需要至少双倍的存储空间；高成本限制了镜像的广泛应用，主要用于至关重要的数据保护；</p></li><li><p>数据条带：</p><p>数据条带技术将数据以块的方式分布存储在多个磁盘中，从而可以对数据进行并发处理；这样写入和读取数据就可以在多个磁盘上同时进行，并发产生非常高的聚合IO，有效提高整体IO性能，而且具有良好的线性扩展性；</p><p>数据条带是基于提高IO性能而提出的，也就是说它只关注性能，二队数据可靠性、可用性没有任何改善；实际上，其中任何一个数据条带损坏都会导致整个数据不可用，采用数据条带技术增加了数据丢失的概率；</p></li><li><p>数据校验：</p><p>数据校验是一种冗余技术，它用校验数据来提供数据的安全，可以检测数据错误，并在能力允许的前提下进行数据重构；相对镜像，数据校验大幅缩减了冗余开销，用较小的代价换取了极佳的数据完整性和可靠性；数据条带技术提供高性能，数据校验提供数据安全性，RAID不同等级往往同时结合使用这两种技术；</p><p>采用数据校验时，RAID要在写入数据同时进行校验计算，并将得到的校验数据存储在RAID成员磁盘中；校验技术相对于镜像技术的优势在于节省大量开销，但由于每次数据读写都要进行大量的校验运算，对计算机的运算速度要求很高，必须使用硬件RAID控制器；在数据重建恢复方面，检验技术比镜像技术复杂得多且慢得多；</p><p>冗余数据通常采用海明校验码、异或校验码算法；</p></li></ul><p>RAID的两个关键目标是提高数据可靠性和IO性能；主要具备以下优势：</p><ol><li>大容量：这是RAID的一个显然优势，它扩大了磁盘的容量，由多个磁盘组成的RAID系统具有海量的存储空间；RAID容量利用率一般在50%~90%；</li><li>高性能：RAID的高性能受益于数据条带华技术；单个磁盘的IO性能收到接口、带宽等计算机技术的限制，性能往往有其上限，很容易称为系统性能的瓶颈；通过数据条带华，RAID将数据IO分散到各个成员磁盘上，从而获得比单个磁盘成倍增长的聚合IO性能；</li><li>可靠性：可用性和可靠性是RAID的另一个重要特征；RAID冗余技术答复提升数据可用性和可靠性，保证了若干磁盘出错时，不会导致数据的丢失，不影响系统的连续运行；</li><li>可管理性：实际上，RAID是一种虚拟化技术，它对多个物理磁盘驱动器虚拟成一个大容量的逻辑驱动器；对于外部主机系统来说，RAID是一个单一的、快速可靠的大容量磁盘驱动器；这样，用户就可以在这个虚拟驱动器上组织和存储应用系统数据；从用户应用角度，可使存储系统简单易用，管理便利；RAID可以动态增减磁盘驱动器，可自动进行数据校验和数据重建，大大简化管理工作；</li></ol><p>常见的组合方式有：RAID0、RAID1、RAID5、RAID6、RAID01、RAID10；</p><p><strong>RAID0</strong></p><p>RAID0是一种简单的、无数据校验的数据条带华技术；实际上不是一种真正的RAID，因为它并不提供任何形式的冗余策略；RAID0将所在磁盘条带化后组成大容量的存储空间，将数据分散存储在所有磁盘中，以独立访问方式实现多块磁盘的并发读取访问；由于并发执行IO操作，总线带宽得到充分利用；RAID0不需要进行数据校验，性能是所有RAID等级中最高的；</p><p>RAID0具有低成本、高读写性能、100%高存储空间利用率等优点，但它不提供数据冗余保护，一旦数据损坏，将无法修复；因此，RAID0一般适用于对性能要求严格但对数据安全性和可靠性不高的应用，如视频、音频存储、临时数据缓存空间等；</p><p><strong>RAID1</strong></p><p>RAID1称为镜像，它将数据完全一致地分别写到工作磁盘和镜像磁盘，它的磁盘空间利用率为50%；RAID1的数据写入时，响应时间会有所影响，但是读数据的时候没有影响；RAID1提供了最佳的数据保护，一旦工作磁盘发生故障，系统自动从镜像磁盘读取数据，不会影响用户工作；</p><p>RAID1与RAID0刚好相反，是为了增强数据安全性使两块磁盘数据呈现完全镜像，从而达到安全性好、技术简单、管理方便；RAID1拥有完全容错的能力，但实现成本高；RAID1应用于对顺序读写性能要求高以及对数据保护极为重要的应用，如数据库数据文件、邮箱系统数据保护等；</p><p><strong>RAID5</strong></p><p>RAID5应该是目前最常见的RAID等级，原理与RAID4相似，区别在于校验数据分布在阵列中的所有磁盘上，而没有采用专门的校验磁盘；对于数据和校验数据，它们的写操作可以同时发生在完全不同的磁盘上；因此，RAID5不存在RAID4中的并发写操作时的校验盘性能瓶颈问题；另外，RAID5还具备很好的扩展性；当阵列磁盘数量增加时，并行操作量的能力也随之增长；RAID5等级一个数据盘损坏时，系统可以根据同一条带的其他数据块和对应的校验数据来重建损坏的数据；与其他RAID等级一样，重建数据时，RAID5的性能会收到较大的影响；</p><p>RAID5兼顾存储性能、数据安全和存储成本等各方面因素，它可以理解为RAID0和RAID1的这种方案，是目前综合性能最佳的数据保护解决方案；RAID5基本上可以满足大部分的存储应用需求，数据中心大多采用它作为应用数据的保护方案；</p><p><strong>RAID6</strong></p><p>RAID6引入双重校验，它可以保护阵列中同时出现两个磁盘失效时，阵列仍能够继续工作，不会发生数据丢失；RAID6是在RAID5的基础上进一步增强数据保护而设计的一种RAID方式，可以看做是一种扩展的RAID5等级；RAID6不仅要支持数据的恢复，还要支持校验数据的恢复，因此实现代价很高，控制器的设计也比其它等级更复杂、更昂贵；RAID6思想最常见的实现方式是采用两个独立的校验算法，分别为P和Q，校验数据可以分别存储在两个不同的校验盘上，或者分散存储在所有成员磁盘中；当两个磁盘同时失效时，即可通过求解两元方程来重建两个磁盘上的数据；</p><p>RAID6具有快速的读取性能、更高的容错能力；但是，它的成本要高于RAID5许多，写性能也较差，并有设计和实施非常复杂；因此，RAID6很少得到实际应用，主要用于对数据安全等级要求非常高的场合；它一般是RAID10的经济性替代方案；</p><p><strong>RAID10</strong></p><p>RAID10也叫RAID1+0，该模式现将数据进行镜像操作，然后在对数据进行分组，RAID1在这里就是一个冗余的备份阵列，而RAID0则负责数据的读写阵列；至少要4块盘，两块做RAID0，另两块做RAID1，RAID10对存储容量的利用率和RAID1一样低，只有50%，但提供了200%的速度和单块硬盘损坏的数据安全性，并且当同时损坏的磁盘不在同一RAID1中，就能保证数据安全性；RAID10能提供比RAID5更好的性能，但扩充性不好，且成本昂贵；</p><p><strong>RAID01</strong></p><p>RAID01兼备RAID0和RAID1的优点，它先用两块磁盘建立镜像，然后再在镜像内部做条带华；RAID01的数据将同时写入到两个磁盘阵列中，如果其中一个阵列损坏，仍可继续工作，保证数据安全性的同时又提高了性能；</p><blockquote><p>相同配置下，RAID01相比于RAID10具有更好的容错能力；</p></blockquote><p><strong>RAID50</strong></p><p>RAID5与RAID0的组合，先做RAID5，再做RAID0，也就是对多组RAID5彼此构成Stripe访问；RAID50在底层任一组或多组RAID5中出现单块盘损坏时，仍能维持运作，但出现2块或以上硬盘损坏，整组RAID50都会失效；</p><blockquote><p>RAID50提供了接近RAID10性能、可用性以及接近RAID5的成本特性，具有较好的整体性价比优势；RAID50是RAID10的最佳替代方案；</p></blockquote><h1 id="阵列卡简介"><a href="#阵列卡简介" class="headerlink" title="阵列卡简介"></a>阵列卡简介</h1><p>阵列卡的全称是磁盘阵列卡，接口类型目前主要有以下几种：</p><ul><li>IDE接口</li><li>SCSI接口</li><li>SATA接口</li><li>SAS接口</li></ul><ol><li><p>IDE接口</p><p>IDE英文全称为<code>Integrated Drive Electronics</code>，即电子集成驱动器，它的本意是指把硬盘控制器与盘体集成在一起的硬盘驱动器；价格低廉、兼容性强；</p><p>IDE代表着硬盘的一种类型，但在实际的应用中，人们也习惯用IDE来称呼最早出现IDE类型硬盘ATA-1，其发展分支出的ATA、UltraATA、DMA、UltraDMA等接口都属于IDE硬盘，IDE口属于并行接口；</p></li><li><p>SCSI接口</p><p>SCSI英文全称为<code>Small Computer System Interface</code>，即小型计算机系统接口，是同IDE完全不同的接口 ，IDE接口是普通PC的标准接口，而SCSI并不是专门为硬盘设计的接口，是一种广发应用于小型机上的高速数据传输技术；SCSI接口具备应用范围广、多任务、大带宽、CPU占用率低、支持热插拔等优点，但较高的价格使得它很难如IDE般普及，一般用于中高端工作站中；</p></li><li><p>SATA接口</p><p>使用SATA（Serial ATA）口的硬盘又叫串口硬盘，是目前PC硬盘的主流；</p><p>Serial ATA采用串行连接方式，串行ATA总线使用嵌入式使用信号，具备了更强的纠错能力，与以往相比其最大的区别在于能对传输指令进行检查，如果发现错误会自动矫正，这在很大程度上提高了数据传输的可靠性；串行接口还具有结构简单，支持热插拔的优点；</p><p>串口硬盘是一种完全不同于并行ATA的硬盘接口类型，由于采用串行方式传输数据而知名；相对于并行ATA来说，就具有非常多的优点：</p><ul><li>Serial ATA以连续串行的方式传送数据，一次只传送1位数据；这样能减少SATA接口的针脚数目，使链接线缆数目变少，效率更高；实际上SATA禁用四支针脚就能完成所有的工作，分别用于连接电缆、连接地线、发送数据与接收数据，同时这样的架构还能降低系统能耗和减小系统复杂性；</li><li>Serial ATA起点高、发展潜力大，SATA 1.0定义速率为150MB/S，SATA 2.0定义速率为300MB/S，SATA 3.0可达750MB/S；（ATA理论值为133MB/S）；</li></ul></li><li><p>SAS接口</p><p>SAS是新一代的SCSI技术，与SATA相同，也是采用串行技术以获得更高的传输速度；此接口的设计是为了改善存储系统的效能、可用性和扩充性，提供与SATA硬盘的兼容性；</p><p>SAS向下兼容SATA，是点到点的结构，可以建立磁盘到控制器的直接连接，具备以下特点：</p><ul><li><p>更好的性能</p><p>点到点的技术减少了地址冲突以及菊花链连接的减速；为每个设备提供了专用的信号通路来保证最大的带宽；全双工方式下的数据操作保证最有效的数据吞吐量；</p></li><li><p>简便的线缆连接</p><p>更细的电缆搭配更小的连接器；</p></li><li><p>更好的扩展性</p></li></ul></li></ol><h1 id="阵列卡缓存"><a href="#阵列卡缓存" class="headerlink" title="阵列卡缓存"></a>阵列卡缓存</h1><p>RAID卡缓存默认选项为：</p><ul><li><p>读取策略：自适应；</p><p>默认启用，采用预读取策略，可提高随机读取性能；第二次读取相同数据命中缓存将大幅提升性能；</p></li><li><p>写策略：回写；</p><p>默认启用回写，操作RAID卡上的缓存；写入数据时先写入到缓存就算写入成功，然后RAID卡控制器再把多个写IO合并为一个写IO一次性写入磁盘，提高随机写入性能；RAID卡带电池，机房停电时，电池可给缓存供电72小时，保证缓存中的数据不会丢失；</p></li><li><p>磁盘高速缓存策略：禁用；</p><p>RAID中的磁盘一般要禁用磁盘缓存；防止机房断电导致磁盘自带缓存数据丢失；</p><p>关闭写缓存命令为：<code>hdparm -W 0 /dev/sda</code></p><p>打开写缓存命令为：<code>hdparm -W 1 /dev/sda</code></p></li></ul><h1 id="RAID参数调优"><a href="#RAID参数调优" class="headerlink" title="RAID参数调优"></a>RAID参数调优</h1><ol><li>通常情况下，建议系统使用RAID1，数据使用RAID5、RAID10、RAID50中的一种，且系统与数据分离；</li><li>使用SSD或者PCIe SSD设备，至少获得数百倍甚至万倍的IOPS提升；</li><li>购置阵列卡同时配备CACHE以及BBU模块，可明显提升IOPS（主要指机械盘）；但需定期检查CACHE及BBU模块的健康状况、电池供电等，确保意外时不至于丢失数据；</li><li>有阵列卡时，设置阵列写策略为WB，甚至FORCE WB（具备双电保护，且对数据安全性要求不是特别高），严禁使用WT策略；关闭阵列预读策略；</li><li>尽量使用RAID10替换RAID5；</li><li>使用机械硬盘时，尽可能选择高转速的；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用运维命令</title>
      <link href="/2021/08/07/01-linux/linux-yun-wei-ming-ling/"/>
      <url>/2021/08/07/01-linux/linux-yun-wei-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用运维命令"><a href="#Linux常用运维命令" class="headerlink" title="Linux常用运维命令"></a>Linux常用运维命令</h1><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p><code>top</code>经常用来监控<code>Linux</code>系统状况，是常用的性能分析工具，能够实时显示各个进程的资源占用情况；</p><h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-d</span> num：每个num秒刷新一次统计数据，默认为5秒；-b：使用非交互模式，一般用于编写脚本；-n：设置刷新次数；-p：显示指定进程信息；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在<code>top</code>命令交互模式下，可通过以下命令进行操作：</p><ul><li>M：按使用内存从大到小排序；</li><li>P：按使用CPU从大到小排序；</li><li>N：按进程号从大到小排序；</li><li>T：按进程使用时间从大到小排序；</li><li>1：数字1，可显示多核CPU信息；</li><li>b：高亮显示当前活动进程及标题行；</li><li>x：高亮显示排序列；</li><li><code>SHIFT+ &lt;&gt;</code>：可向左或向右调整排序列</li></ul></blockquote><h3 id="返回结果说明"><a href="#返回结果说明" class="headerlink" title="返回结果说明"></a>返回结果说明</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210809143713489.png" alt="image-20210809143713489"><p>top命令返回前5行统计信息说明：</p><p><strong>第一行</strong>：<code>top - 14:36:52 up 104 days, 0 min,  5 users,  load average: 0.79, 0.70, 0.76</code></p><p>第一行是任务队列信息，代表的含义为：</p><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td>14:36:52</td><td>当前系统时间</td></tr><tr><td>up 104 days , 0 min</td><td>系统运行时间 格式为天：时：分（即系统最近一次启动到当前时间）</td></tr><tr><td>5 users</td><td>当前登录用户数</td></tr><tr><td>load average: 0.79, 0.70, 0.76</td><td>系统负载，即任务队列的平均长度；三个数值分别表示1分钟、5分钟、15分钟前到现在的平均值</td></tr></tbody></table><p><strong>第二行</strong>：<code>Tasks: 500 total,   1 running, 499 sleeping,   0 stopped,   0 zombie</code></p><p>第二行是进程信息，代表的含义为：</p><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td>500 total</td><td>系统运行的进程总数</td></tr><tr><td>1 running</td><td>正在运行的进程数</td></tr><tr><td>499 sleeping</td><td>处于睡眠的进程数</td></tr><tr><td>0 stopped</td><td>停止的进程数</td></tr><tr><td>0 zombie</td><td>僵尸进程数</td></tr></tbody></table><p><strong>第三行</strong>：<code>%Cpu(s):  0.6 us,  0.3 sy,  0.0 ni, 99.1 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</code></p><p>第三行是cpu信息，代表的含义为：</p><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td>0.6 us</td><td>用户 空间占用cpu百分比</td></tr><tr><td>0.3 sy</td><td>内核空间占用cpu百分比</td></tr><tr><td>0.0 ni</td><td>用户进程空间内改变过优先级的进程占用cpu百分比</td></tr><tr><td>99.1 id</td><td>空闲cpu百分比</td></tr><tr><td>0.0 wa</td><td>等待输入输出的cpu时间百分比</td></tr><tr><td>0.0 hi</td><td>硬中断占用cpu百分比</td></tr><tr><td>0.0 si</td><td>软中断占用cpu百分比</td></tr><tr><td>0.0 st</td><td>？</td></tr></tbody></table><p><strong>第四行</strong>：<code>KiB Mem : 98804368 total,  2543620 free, 78503992 used, 17756760 buff/cache</code></p><p>第四行为内存信息，代表含义为：</p><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td>98804368 total</td><td>物理总内存</td></tr><tr><td>2543620 free</td><td>空间总内存</td></tr><tr><td>78503992 used</td><td>使用总内存</td></tr><tr><td>17756760 buff/cache</td><td>用作内核缓存的总内存</td></tr></tbody></table><p><strong>第五行</strong>：<code>KiB Swap: 33554428 total, 33554428 free,        0 used. 15247328 avail Mem</code></p><p>第五行为交换内存信息，代表含义为：</p><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td>33554428 total</td><td>交换区大小</td></tr><tr><td>33554428 free</td><td>交换区空闲大小</td></tr><tr><td>0 used</td><td>交换区使用大小</td></tr><tr><td>15247328 avail Mem</td><td>可用于进程下一次分配的物理内存大小</td></tr></tbody></table><h3 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h3><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>进程编号</td></tr><tr><td>PPID</td><td>父进程编号</td></tr><tr><td>RUSER</td><td>真实用户名</td></tr><tr><td>UID</td><td>进程拥有者用户编号</td></tr><tr><td>USER</td><td>进程拥有者用户名</td></tr><tr><td>GROUP</td><td>进程拥有者归属组</td></tr><tr><td>TTY</td><td>启动进程的终端名，非终端启动则显示为？</td></tr><tr><td>PR</td><td>优先级</td></tr><tr><td>NI</td><td>nice值，复制表示高优先级，正值表示低优先级</td></tr><tr><td>P</td><td>最后使用的CPU，适用于多核环境；</td></tr><tr><td>%CPU</td><td>统计周期内CPU耗时占比</td></tr><tr><td>TIME</td><td>进程使用CPU统计，单位为秒</td></tr><tr><td>TIME+</td><td>进程使用CPU统计，单位为1/100秒</td></tr><tr><td>%MEM</td><td>进程使用物理内存百分比</td></tr><tr><td>VIRT</td><td>进程使用虚拟内存，单位为kb；VIRT=SWAP+ RES</td></tr><tr><td>SWAP</td><td>进程使用的虚拟内存中，被换出部分大小，单位为kb</td></tr><tr><td>RES</td><td>进程使用的，未被换出部分内存大小，单位为kb； RES=CODE+DATA</td></tr><tr><td>CODE</td><td>可执行代码占用大小，单位为kb</td></tr><tr><td>DATA</td><td>可执行diamante外的部分（数据+ 栈）占用大小，单位为kb</td></tr><tr><td>SHR</td><td>共享内存大小，单位为kb</td></tr><tr><td>nFLT</td><td>页面错误吃书</td></tr><tr><td>nDRT</td><td>最后一次写入到现在，被修改过的页面数</td></tr><tr><td>S</td><td>进程状态；D-不可中断睡眠状态  R-运行 S=睡眠 T-跟踪/停止  Z=僵尸进程</td></tr><tr><td>COMMAND</td><td>启动命令行</td></tr><tr><td>WCHAN</td><td>若进程在睡眠，则显示睡眠中的函数名</td></tr><tr><td>Flags</td><td>任务标志</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a>iotop</h2><p><code>iotop</code>是一个用来监视磁盘使用状况的<code>top</code>类工具，可监测到程序级别的磁盘IO信息；</p><h3 id="主要监控项"><a href="#主要监控项" class="headerlink" title="主要监控项"></a>主要监控项</h3><ul><li>进程/线程的IO读写带宽；</li><li>进程线程调度SWAPIN耗时占比；</li><li>进程线程的IO阻塞耗时占比</li><li>进程/线程的IO优先级；</li><li>系统IO总读写带宽；</li><li>系统IO实际读写带宽；</li></ul><h3 id="参数详解-1"><a href="#参数详解-1" class="headerlink" title="参数详解"></a>参数详解</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--version：显示版本号-h,--help：显示帮助-o,--only：显示当前有IO活动的进程或线程，可通过命令<span class="token variable"><span class="token variable">`</span>o<span class="token variable">`</span></span>进行切换-b, --batch：运行在非交互式模式，常用于编写脚本文件中；-n, NUM, <span class="token parameter variable">--iter</span> NUM：设置刷新次数；<span class="token parameter variable">-d</span> SEC, <span class="token parameter variable">--delay</span><span class="token operator">=</span>SEC：设置刷新间隔的秒数，支持非整数；<span class="token parameter variable">-p</span> PID, <span class="token parameter variable">--pid</span><span class="token operator">=</span>PID：显示指定进程信息；<span class="token parameter variable">-u</span> <span class="token environment constant">USER</span>，--user<span class="token operator">=</span><span class="token environment constant">USER</span>：显示指定用户下进程信息；-P, --processes：只显示进程信息，默认显示进程+线程信息；-a, --accumulated：显示命令启动后每个线程的IO累计值；-k, --kilobutes：以KB为单位显示；-t,--time：在每一行天添加一个当前时间-q,--quiet：仅打印一次首行标题，经常与<span class="token variable"><span class="token variable">`</span>batch<span class="token variable">`</span></span>结合使用；-qq：完全不打印标题行；-qqq：禁止打印统计信息；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="返回结果说明-1"><a href="#返回结果说明-1" class="headerlink" title="返回结果说明"></a>返回结果说明</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">TID：进程或线程编号；PRIO：进程或线程优先级；<span class="token environment constant">USER</span>：进程或线程启动用户；DISK_READ：采样周期内磁盘读取带宽；DISK_WRITE：采样周期内磁盘写入带宽；SWAPIN:磁盘换入的时间占总时间的百分比；（内存不足时会将数据换入到硬盘中）IO：普通的磁盘读写等待时间占总时间的百分比；COMMAND：启动进程或线程的命令行语句；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li> 每10秒打印一次信息，显示单位为kb，使用累加模式，且仅打印活跃的进程；</li></ol>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iotop <span class="token parameter variable">-d</span> <span class="token number">10</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-o</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>批处理模式，每10秒打印一次统计信息，显示单位为kb，使用累加模式，打印10次结束；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iotop <span class="token parameter variable">-d</span> <span class="token number">10</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-n</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>批处理模式，打印1000号进程信息，每次打印添加时间戳，并重定向至日志文件中；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iotop <span class="token parameter variable">-p</span> <span class="token number">1000</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-b</span> <span class="token operator">|</span><span class="token function">tee</span> iotop.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="sysstat"><a href="#sysstat" class="headerlink" title="sysstat"></a>sysstat</h2><p><code>sysstat</code>是一个软件包，包含检测系统性能及效率的一组工具，包括<code>iostat</code>、<code>mpstat</code>、<code>pidstat</code>、<code>sar</code>、<code>sadc</code>、<code>sa1</code>、<code>sa2</code>、<code>sadf</code>、<code>sysstat</code>、<code>nfsiostat</code>、<code>cifsiostat</code>；</p><h2 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h2><p>iostat是IO statistics的缩写，iostat工具将对系统的磁盘操作活动进行监视；iostat在汇报磁盘活动统计情况时，也会汇报出cpu使用情况，但iostat无法针对进程级别进行深入分析，仅支持对系统整体情况进行分析；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iostat <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>间隔时间<span class="token punctuation">]</span> <span class="token punctuation">[</span>次数<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数详解-2"><a href="#参数详解-2" class="headerlink" title="参数详解"></a>参数详解</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-c：显示cpu使用情况-d：显示磁盘使用情况-N：显示磁盘阵列（LVM）信息-n：显示NFS使用情况-k：以kb为单位显示-m：以mb为单位显示-t：报告每秒向终端读取和写入的字符数和CPU信息-V：显示版本信息-x：显示详细信息-p：显示指定磁盘和分区情况-y：跳过不显示第一次报告数据；第一次输出的是自系统启动以来累计数据；-z：只显示在采样周期内有活动的磁盘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="返回结果说明-2"><a href="#返回结果说明-2" class="headerlink" title="返回结果说明"></a>返回结果说明</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@bigdata-demo10:~<span class="token comment"># iostat</span>Linux <span class="token number">3.10</span>.0-693.11.6.el7.youdata.x86_64 <span class="token punctuation">(</span>bigdata-demo10.jdlt.163.org<span class="token punctuation">)</span> 08/09/2021 _x86_64_<span class="token punctuation">(</span><span class="token number">32</span> CPU<span class="token punctuation">)</span>avg-cpu:  %user   %nice %system %iowait  %steal   %idle           <span class="token number">1.18</span>    <span class="token number">0.00</span>    <span class="token number">0.34</span>    <span class="token number">0.02</span>    <span class="token number">0.00</span>   <span class="token number">98.47</span>Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtnsdb               <span class="token number">5.89</span>         <span class="token number">0.18</span>        <span class="token number">34.42</span>    <span class="token number">1650913</span>  <span class="token number">309417616</span>sdc               <span class="token number">0.27</span>         <span class="token number">0.00</span>         <span class="token number">2.50</span>      <span class="token number">35165</span>   <span class="token number">22439940</span>sdd               <span class="token number">0.02</span>         <span class="token number">0.00</span>         <span class="token number">2.78</span>      <span class="token number">36117</span>   <span class="token number">24993196</span>sde               <span class="token number">0.00</span>         <span class="token number">0.00</span>         <span class="token number">0.03</span>      <span class="token number">11017</span>     <span class="token number">239784</span>sda              <span class="token number">45.49</span>         <span class="token number">8.85</span>       <span class="token number">569.48</span>   <span class="token number">79552888</span> <span class="token number">5119477220</span>sdf               <span class="token number">0.00</span>         <span class="token number">0.00</span>         <span class="token number">0.03</span>      <span class="token number">28517</span>     <span class="token number">239812</span>sdg               <span class="token number">0.00</span>         <span class="token number">0.00</span>         <span class="token number">0.03</span>      <span class="token number">29065</span>     <span class="token number">239812</span>sdh               <span class="token number">0.00</span>         <span class="token number">0.00</span>         <span class="token number">0.03</span>      <span class="token number">28733</span>     <span class="token number">239812</span>sdi               <span class="token number">0.00</span>         <span class="token number">0.00</span>         <span class="token number">0.03</span>      <span class="token number">29805</span>     <span class="token number">239812</span>sdj               <span class="token number">0.00</span>         <span class="token number">0.00</span>         <span class="token number">0.03</span>      <span class="token number">29973</span>     <span class="token number">239812</span>sdk               <span class="token number">0.00</span>         <span class="token number">0.00</span>         <span class="token number">0.03</span>      <span class="token number">30229</span>     <span class="token number">239812</span>sdl               <span class="token number">0.00</span>         <span class="token number">0.01</span>         <span class="token number">0.03</span>      <span class="token number">91881</span>     <span class="token number">308792</span>sdm               <span class="token number">0.19</span>         <span class="token number">3.07</span>         <span class="token number">6.00</span>   <span class="token number">27623653</span>   <span class="token number">53980620</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="cpu属性"><a href="#cpu属性" class="headerlink" title="cpu属性"></a>cpu属性</h4><p>iostat结果面板的<code>avg-cpu</code>描述的是系统cpu使用情况：</p><ul><li><code>%user</code>：cpu处在用户模式下的时间百分比；</li><li><code>%nice</code>：cpu处在带nice值的用户模式下的时间百分比；</li><li><code>%system</code>：cpu处于系统模式下的时间百分比；</li><li><code>%iowait</code>：cpu等待输入输出完成时间的百分比；</li><li><code>%steal</code>：管理成语维护另一个虚拟处理器时，虚拟cpu的无疑是等待时间百分比；</li><li><code>%idle</code>：cpu空闲时间百分比；</li></ul><h4 id="磁盘属性"><a href="#磁盘属性" class="headerlink" title="磁盘属性"></a>磁盘属性</h4><p>iostat结果面板的<code>Device</code>描述的是系统磁盘使用情况：</p><ul><li><code>tps</code>：该设备每秒的传输次数；（一次传输即为一次IO请求；）</li><li><code>kB_read/s</code>：每秒从设备读取的数据量；</li><li><code>kB_wrtn/s</code>：每秒想设备写入的数据量；</li><li><code>kB_read</code>：读取的总数据量；</li><li><code>wB_wrtn</code>：写入的总数据量；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@bigdata-demo10:~<span class="token comment"># iostat -x -p sdc</span>Linux <span class="token number">3.10</span>.0-693.11.6.el7.youdata.x86_64 <span class="token punctuation">(</span>bigdata-demo10.jdlt.163.org<span class="token punctuation">)</span> 08/09/2021 _x86_64_<span class="token punctuation">(</span><span class="token number">32</span> CPU<span class="token punctuation">)</span>avg-cpu:  %user   %nice %system %iowait  %steal   %idle           <span class="token number">1.18</span>    <span class="token number">0.00</span>    <span class="token number">0.34</span>    <span class="token number">0.02</span>    <span class="token number">0.00</span>   <span class="token number">98.47</span>Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %utilsdc               <span class="token number">0.00</span>     <span class="token number">0.29</span>    <span class="token number">0.00</span>    <span class="token number">0.27</span>     <span class="token number">0.00</span>     <span class="token number">2.50</span>    <span class="token number">18.32</span>     <span class="token number">0.00</span>    <span class="token number">0.37</span>    <span class="token number">1.16</span>    <span class="token number">0.36</span>   <span class="token number">0.04</span>   <span class="token number">0.00</span>sdc1              <span class="token number">0.00</span>     <span class="token number">0.29</span>    <span class="token number">0.00</span>    <span class="token number">0.27</span>     <span class="token number">0.00</span>     <span class="token number">2.50</span>    <span class="token number">18.32</span>     <span class="token number">0.00</span>    <span class="token number">0.37</span>    <span class="token number">1.16</span>    <span class="token number">0.36</span>   <span class="token number">0.04</span>   <span class="token number">0.00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="磁盘属性-1"><a href="#磁盘属性-1" class="headerlink" title="磁盘属性"></a>磁盘属性</h4><ul><li><code>rrqm/s</code>：每秒合并读操作次数；</li><li><code>wrqm/s</code>：每秒合并写操作次数；</li><li><code>r/s</code>：每秒读操作次数；</li><li><code>w/s</code>：每秒写操作次数；</li><li><code>rKB/s</code>每秒读取字节数；</li><li><code>wKB/s</code>：每秒写入字节数；</li><li><code>avgrq-sz</code>：平均每次设备IO操作的数据大小；</li><li><code>avgqu-sz</code>：平均IO队列长度；</li><li><code>rsec/s</code>：每秒写扇区数；</li><li><code>wsec/s</code>：每秒写扇区数；</li><li><code>r_await</code>：每个读操作平均时长，包括硬盘读操作时间和kernel队列中等待时间；</li><li><code>w_await</code>：每个写操作平均时长，包括硬盘写操作时间和kernel队列中等待时间；</li><li><code>await</code>：平均每次设别IO操作等待时间（毫秒）；</li><li><code>svctm</code>：平均每次设备IO操作的服务时间（毫秒）；</li><li><code>%util</code>：每秒中用于操作的时长占用百分比，即IO消耗的CPU百分比；</li></ul><blockquote><p>如果<code>%util</code>接近100%，说明产生的IO请求过多，IO系统满负荷，此时磁盘可能存在瓶颈；如果<code>await</code>远大于<code>svctm</code>，则说明IO队列太长，IO响应慢，需进行优化；<code>avgqu-sz</code>比较大，也表示当前有大量IO在等待；</p></blockquote><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ol><li><p>查看磁盘吞吐量，以kb为单位，每2秒统计一次，共统计10次</p><pre class="line-numbers language-none"><code class="language-none">iostat -d -k 2 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示设备使用率，以kb为单位，每2秒统计一次，共统计10次</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iostat <span class="token parameter variable">-x</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-k</span> <span class="token number">2</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="sar"><a href="#sar" class="headerlink" title="sar"></a>sar</h2><p><code>sar</code>（System ActivityReporter）是目前Linux上最为全面的系统性能分析工具之一，可从多方面对系统的活动进行报告，包括：文件读写情况、系统调用情况、磁盘IO、CPU效率、内存使用情况、进程活动及IPC有关活动等；</p><h3 id="参数详解-3"><a href="#参数详解-3" class="headerlink" title="参数详解"></a>参数详解</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-A：所有报告的总和；-b：显示IO和传递速率的统计信息；-B：显示换页状态；-d：输出每一块磁盘的使用信息；-e：显示报告的结束时间；-f：从指定的文件读取报告；-i：设置状态信息刷新时间间隔；-P：报告每个CPU状态；-R：显示内存状态；-u：输出cpu使用情况和统计信息；-v：显示索引节点、文件和其他内核表的状态；-w：显示交换分区的状态；-x：显示给定进程状态；-r：报告雷村利用率统计信息；-o：指定输出文件；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><ol><li><p>每2秒采样一次，连续4次查看cpu使用情况，并将结果写入sar.out（二进制）中；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sar <span class="token parameter variable">-u</span> <span class="token parameter variable">-o</span> sar.out  <span class="token number">2</span>, <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>读取sar输出文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sar <span class="token parameter variable">-u</span> <span class="token parameter variable">-f</span> sar.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h2><p><code>ss</code>是<code>Socket Statistics</code>的缩写，用来统计<code>socket</code>链接的相关信息。与<code>netstat</code>差不多，但有着比<code>netstat</code>更强大的统计功能；</p><h3 id="参数详解-4"><a href="#参数详解-4" class="headerlink" title="参数详解"></a>参数详解</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-h, --help：显示帮助菜单；-V, --version：显示版本信息；-n, --numeric：不解析服务名；-r, --resolve：解析主机名；-a, --all：显示所有的套接字；-l, --listen：显示监听状态的套接字；-o, --options：显示计时器信息；-e, --extended：展示详细的套接字信息；-m, --memory：显示套接字的内存使用；-p, --processes：展示使用套接字的进程；-i, --info：展示tcp内部信息；-s, --summary：展示套接字汇总信息；-4, --ipv4：只显示ipv4套接字；-6, --ipv6：只显示ipv6套接字；-0, <span class="token parameter variable">--packet</span> display 显示包经过的网络接口；-t, --tcp：显示tcp套接字；-u, --udp：显示udp套接字；-d, --dccp：显示dccp套接字；-w, --raw：显示raw套接字；-x, --unix：显示unix套接字；-f,--family<span class="token operator">==</span>FAMILY：显示指定类型的套接字；-A, <span class="token parameter variable">--query</span><span class="token operator">=</span>QUERY, <span class="token parameter variable">--socket</span><span class="token operator">=</span>QUERY：查看某种类型套接字；（QUERY:<span class="token operator">=</span><span class="token punctuation">{</span>all<span class="token operator">|</span>inet<span class="token operator">|</span>tcp<span class="token operator">|</span>udp<span class="token operator">|</span>raw<span class="token operator">|</span>unix<span class="token operator">|</span>packet<span class="token operator">|</span>netlink<span class="token punctuation">}</span>）-D, <span class="token parameter variable">--diag</span><span class="token operator">=</span>FILE：将关于tcp套接字的原始信息转存到文件中；-F， <span class="token parameter variable">--filter</span><span class="token operator">=</span>FILE：指定过滤规则文件，过滤某种状态的连接；（FILTER:<span class="token operator">=</span><span class="token punctuation">[</span>state TCP-STATE<span class="token punctuation">]</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><ol><li><p>显示进程名及监听的端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ss <span class="token parameter variable">-pl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><p><code>nc</code>是<code>netcat</code>的简写，有着网络界的瑞士军刀美誉；它是一个短小精悍、功能实用，被设计为一个简单、可靠的网络工具；</p><p>作用：</p><ol><li>实现任意TCP/UDP端口的监听，<code>nc</code>可以作为<code>server</code>以TCP或UDP方式侦听指定端口；</li><li>端口扫描，<code>nc</code>可以作为<code>client</code>发起TCP或UDP链接；</li><li>机器间传输文件；</li><li>机器之间网络测速；</li></ol><h3 id="参数详解-5"><a href="#参数详解-5" class="headerlink" title="参数详解"></a>参数详解</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-l：使用监听模式；-n：直接使用ip地址，不通过域名服务器；-i：设置时间间隔，一遍传送信息及扫描通信端口；-o：指定文件名称，将往来数据以16进制字节码写入文件保存；-p：设置本地主机使用的通信端口；-r：指定源端口和目的端口都随机；-s：设置本地主机送出数据包的IP地址；-u：使用UDP传输协议；-v：显示执行过程；-w：设置等待连线的时间；-z：使用0输入/输出模式，只在扫描通信端口使用；-g：设置路由器通信网关，最多设置8个；-G：设置来源路由器，其数值为4的倍数；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><ol><li><p>tcp端口扫描:扫描192.168.0.1地址1-1000端口，超时时间为2秒；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-z</span> <span class="token parameter variable">-w2</span> <span class="token number">192.168</span>.0.1 <span class="token number">1</span>-1000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><h2 id="nethogs"><a href="#nethogs" class="headerlink" title="nethogs"></a>nethogs</h2><p><code>nethogs</code>是一款开源、免费的、中断下的网络流量监控工具，它可以监控Linux的进程或应用程序的网络流量。<code>nethogs</code>只能实时监控进程的网络带宽占用情况，<code>nethogs</code>支持IPv4和IPv6协议，也支持本地网卡以及PPP链接；</p><h3 id="参数详解-6"><a href="#参数详解-6" class="headerlink" title="参数详解"></a>参数详解</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-d：数据统计刷新时间；-h：显示帮助；-p：混合模式下嗅探（不推荐使用）-t：跟踪模式-c：限制刷新次数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>交互模式：</p><p>m：切换显示单位；切换顺序为KB/sec，KB，B，MB</p><p>r：按接收流量排序</p><p>s：按发送流量排序</p><p>q：退出</p></blockquote><h2 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h2><h2 id="blktrace"><a href="#blktrace" class="headerlink" title="blktrace"></a>blktrace</h2><h2 id="mtr"><a href="#mtr" class="headerlink" title="mtr"></a>mtr</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maintenance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux端口转发</title>
      <link href="/2021/08/06/01-linux/linux-duan-kou-zhuan-fa/"/>
      <url>/2021/08/06/01-linux/linux-duan-kou-zhuan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH端口转发"><a href="#SSH端口转发" class="headerlink" title="SSH端口转发"></a>SSH端口转发</h1><p><code>Linux</code>的<code>ssh</code>服务不仅能够远程登陆和管理,还可以在本地计算机与远程服务器之间建立<code>tcp</code>通道，实现代理、内网穿透、暴露内网服务等功能，简单可靠；</p><p><code>ssh</code>常用参数详解：</p><ul><li><code>C</code>：请求压缩所有数据；</li><li><code>T</code>：禁用终端模拟；</li><li><code>N</code>：不执行远程指令，仅用于端口转发；</li><li><code>D[local_ip:]port</code>：动态端口转发，实现代理服务器，支持<code>SOCKET4</code>和<code>SOCKET5</code>协议；</li><li><code>L[local_ip:]port:remote_ip:remote_port</code>：建立本地端口与远程服务器端口的<code>TCP</code>隧道；</li><li><code>R[ssh_server_ip:]ssh_server_port:local_ip:local_port</code>：建立远端<code>ssh</code>服务器到本地的<code>tcp</code>隧道 ；（如果失败，则需要调整<code>ssh</code>服务器上的<code>/etc/ssh/sshd_config</code>配置文件，添加或修改<code>GatewayPorts yes</code>选项，并重启<code>ssh</code>服务）；</li><li><code>f</code>：后台执行<code>ssh</code>指令；</li><li><code>g</code>：允许远程主机连接主机的转发端口；</li><li><code>i</code>：指定ssh访问秘钥；</li><li><code>P</code>：指定<code>ssh</code>访问端口；</li></ul><h2 id="动态端口转发"><a href="#动态端口转发" class="headerlink" title="动态端口转发"></a>动态端口转发</h2><p>将向本地指定端口发送的请求通过<code>ssh</code>服务器向外转发；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#~/bin/bash</span><span class="token function">ssh</span> <span class="token parameter variable">-C</span> <span class="token parameter variable">-T</span> <span class="token parameter variable">-N</span> <span class="token parameter variable">-D</span> <span class="token number">127.0</span>.0.1:8000  semon@10.0.0.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>将<code>127.0.0.1：8000</code>作为一个<code>SOCKET4/5</code>的代理，比如<code>curl --proxy socks5://127.0.0.1:8000 https://www.baidu.com</code></p><p><code>semon@10.0.0.10</code>中，<code>10.0.0.10</code>为ssh服务所在主机，如果当前用户即为互信用户，则<code>semon@</code>可省略；</p></blockquote><h2 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h2><p>将远程服务器的指定端口通过<code>ssh</code>服务器转发到本地计算机端口；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">ssh</span> <span class="token parameter variable">-C</span> <span class="token parameter variable">-T</span> <span class="token parameter variable">-N</span> <span class="token parameter variable">-L</span>  <span class="token number">127.0</span>.0.1:3390:59.111.211.50:3389  semon@10.0.0.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>将内网服务器的远程桌面(59.111.211.50:3389)经过<code>ssh</code>服务器转发到本地计算机<code>127.0.0.1:3390</code>；</p><p>即本地访问127.0.0.1:3390就相当于访问59.111.211.50:3389</p></blockquote><h2 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h2><p>将本地计算机的指定端口经过<code>ssh</code>服务器转发到远程服务器的指定端口；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash </span><span class="token function">ssh</span> <span class="token parameter variable">-T</span> <span class="token parameter variable">-C</span> <span class="token parameter variable">-N</span> <span class="token parameter variable">-R</span> <span class="token number">59.111</span>.211.50:3389:10.0.0.10:3390  semon@10.0.0.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>用于将本地局域网计算机的服务经过<code>ssh</code>服务器暴露出去，访问59.111.211.50:3389相当于访问10.0.0.10:3390</p></blockquote><h1 id="Nginx端口转发"><a href="#Nginx端口转发" class="headerlink" title="Nginx端口转发"></a>Nginx端口转发</h1><p><code>Nginx</code>除了能够支持域名转发之外，也支持<code>TCP</code>端口转发；</p><p>通过<code>Nginx</code>进行<code>tcp</code>端口转发，需使用源码编译版本添加<code>stream</code>支持；</p><h2 id="Nginx编译"><a href="#Nginx编译" class="headerlink" title="Nginx编译"></a>Nginx编译</h2><p>编译步骤为：</p><ol><li><p>通过官网下载稳定版<code>nginx</code>；</p></li><li><p>解压源码表并进入解压目录；</p></li><li><p>通过命令行进行软件编译：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/opt/nginx  -with-stream --with-stream_ssl_module --with-http_ssl_module --with-http_stub_status_module<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改<code>nginx.conf</code>配置文件，添加<code>stream</code>模块配置，实现端口转发：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">stream {server {listen 3307;proxy_pass 59.111.211.50:3306;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 启动服务</span>nginx <span class="token comment"># 测试并加载配置</span>nginx <span class="token parameter variable">-t</span>nginx <span class="token parameter variable">-s</span> reload<span class="token comment"># 停止服务</span><span class="token comment">## 快速停止</span>nginx <span class="token parameter variable">-s</span> stop<span class="token comment">## 完整有序停止</span>nginx <span class="token parameter variable">-s</span> quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>验证监听端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#！/bin/bash</span><span class="token function">netstat</span> <span class="token parameter variable">-anp</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token number">3307</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：注解</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-10-zhu-jie/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-10-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="注解简介"><a href="#注解简介" class="headerlink" title="注解简介"></a>注解简介</h1><h2 id="注解的形式"><a href="#注解的形式" class="headerlink" title="注解的形式"></a>注解的形式</h2><p>Java中，注解是以<code>@</code>字符开始的修饰符；</p><p>注解可以包含命名或未命名的属性，并且这些属性有值；如果只有一个名为<code>value</code>的值，那么名称可以省略；</p><p>如果注解没有属性，则称为<strong>标记注解</strong>；比如<code>@Override</code>；</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"semon"</span>   <span class="token comment">//带属性的注解</span>  date <span class="token operator">=</span> <span class="token string">"2020-07-13"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ClassDemo</span> <span class="token keyword">extends</span> <span class="token class-name">SuperDemo</span><span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>  <span class="token comment">//标记注解</span><span class="token keyword">void</span> <span class="token class-name">SubMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token comment">// 属性名为value  值为unchecked</span>  <span class="token keyword">void</span> <span class="token class-name">SubMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h2><p>从本质上来说，注解是一种标签，其实质上可以视为一种特殊的注释，区别在于注解通过代码进行解析实现特定功能。注解的解析一般有两种形式：</p><ul><li>编译器扫描：编译器在对javadiamante编译字节码的过程中会检测到某个类或者方法被一些注解修饰，这是会对于这些注解进行某些处理，但仅适用于JDK内置的注解类；</li><li>运行期反射：编译器利用反射技术，识别自定义注解以及它携带的信息，然后进行相应的处理；</li></ul><h2 id="解的作用"><a href="#解的作用" class="headerlink" title="解的作用"></a>解的作用</h2><ul><li>编译器信息：编译器可以使用注解来检测错误或抑制告警；</li><li>编译部署处理：程序可以在编译或部署期间处理注解信息生成代码、XML文件等；</li><li>运行处理：程序可以在运行时检查注解并处理；</li></ul><h2 id="注解的代价"><a href="#注解的代价" class="headerlink" title="注解的代价"></a>注解的代价</h2><p>凡事有得必有失，享受注解带来便利的同时，也需要付出一定的代价：</p><ul><li>注解是一种侵入式编程，增加了程序耦合度；</li><li>自定义注解通过反射技术实现，违背了面向对象的封装性；</li><li>通过注解实现功能，产生问题时更加难以进行定位；</li></ul><h2 id="注解应用访问"><a href="#注解应用访问" class="headerlink" title="注解应用访问"></a>注解应用访问</h2><p>注解可以应用于类、字段、方法和其他程序元素的声明；</p><p>JDK8开始，注解的应用范围进一步扩大：</p><ul><li>类实例初始化</li><li>类型转换</li><li>实现接口声明</li><li>抛出异常声明</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//类实例化</span><span class="token keyword">new</span> <span class="token annotation punctuation">@Interned</span> <span class="token class-name">Demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//类型转换</span>str2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span><span class="token punctuation">)</span> str1<span class="token punctuation">;</span><span class="token comment">//实现接口声明</span><span class="token keyword">class</span> <span class="token class-name">DemoList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token annotation punctuation">@Readonly</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@Readonly</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//抛出异常</span><span class="token keyword">void</span> <span class="token class-name">DemoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token annotation punctuation">@Critical</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h1><p>JDK中内置了以下注解：</p><ul><li>@Override：声明被修饰的方法覆写了父类方法；</li><li>@Deprecated：声明该类或方法已废弃、过时，不建议使用；</li><li>@SuppressWarnnings：声明对该类、方法、成员编译时产生的特定警告；常见参数值如下：<ul><li>deprecation：使用了过时方法或类时的警告；</li><li>unchecked：指定了未检查的转换时警告；</li><li>fallthrough：当Switch程序块分支没有break时的警告；</li><li>path：在类路径、源文件路径中有不存在的路径时的警告；</li><li>serial：在可序列化的类上缺少SerialVersionUID定义时的警告；</li><li>finally：任何finally子句不能正常完成的警告；</li><li>all：所有警告；</li></ul></li><li>@SafeVarargs：JDK7引入，压制变长参数中的泛型类型检查，使用范围为：<ul><li>构造方法</li><li>static或final修饰的方法</li></ul></li><li>@FunctionalInterface：JDK8移入，声明被修饰的接口是函数式接口；函数式接口就是有且仅有一个抽象方法的接口（可以有多个非抽象方法），可以被隐式转换为lambda表达式。</li></ul><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">AnnotateDemo01</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@FunctionalInterface</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Work</span><span class="token punctuation">(</span>  <span class="token keyword">void</span> <span class="token function">printWork</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token class-name">Class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">OldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"Deprecated"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SafeVarargs</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">SafeVarsDemo</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> stringLists<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"man"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"deprecation"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><p>JDK中虽然内置了部分注解，但这远远不能满足开发过程中遇到的千变万化的需求，所以我们需要用到自定义注解，这就需要用到元注解。</p><p>元注解的作用就是定义其他的注解，Java提供了以下元注解类型：</p><ul><li>@Retention</li><li>@Target</li><li>@Documented</li><li>@Inherited(JDK8)</li><li>@Repeatable(JDK8)</li></ul><h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h2><p>该注解声明注释的保留级别。通过一个<code>RetentionPolicy</code>指定注释保留级别：</p><ul><li>SOURCE：仅在源文件有效，编译器忽略；</li><li>CLASS：在class文件中有效，JVM忽略；</li><li>RUNTIME：运行时有效</li></ul><h2 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h2><p>表示任何级别的注解都应用于Javadoc中（默认情况下，注释不包含在Javadoc中）；</p><h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h2><p>指定注解可以修饰的元素类型，通过<code>ElementType</code>指定应用范围：</p><ul><li>ANNOTATION_TYPE：标记的注解可应用于注解类型；</li><li>CONSTRUCTOR：标记的注解可用于构造方法；</li><li>FIELD：标记的注解可用于字段或属性；</li><li>METHOD：标记的注解可用于方法；</li><li>PACKAGE：标记的注解可用于包声明；</li><li>PARAMETER：标记的注解可用于参数列表；</li><li>TYPE：标记的注解可用于类的任何元素；</li><li>LOCAL_VARIABLE：标记的注解可用于局部变量；</li></ul><h2 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h2><p>表示注解类型可以被继承。如果类型声明中存在<code>@Inherited</code>元注解，则注解所修饰类的子类都将会继承此注解。</p><h2 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h2><p>表示注解可以重复使用。</p><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>使用<code>@interface</code>自定义注解时，自动继承了<code>java.lang.annotation.Annotation</code>接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。<code>@interface</code>用来声明一个注解，其中的每个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String以及enum）。可以通过<code>default</code>来声明参数的默认值。</p><h2 id="注解定义"><a href="#注解定义" class="headerlink" title="注解定义"></a>注解定义</h2><p>注解语法格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> 注解名 <span class="token punctuation">{</span> 定义体 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="注解属性"><a href="#注解属性" class="headerlink" title="注解属性"></a>注解属性</h2><p>注解属性的语法格式如下：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">[访问级别修饰符]  [数据类型]  名称() default 默认值;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义注解属性有以下要点：</p><ul><li>定义属性时，属性名后面需要加<code>()</code>；</li><li>注解属性只能使用<code>public</code>或默认访问级别修饰；</li><li>注解属性数据类型有以下限制要求：<ul><li>基本数据类型（byte、char、short、int、long、float、double、boolean）</li><li>String类型</li><li>Class类型</li><li>enum类型</li><li>Annotation类型</li><li>以上类型的数组</li></ul></li><li>注解属性需要有确定的值，建议指定默认值。注解属性只能通过指定默认值或使用注解时指定属性值。注解属性如果是引用类型时不可以为null。</li><li>注解中只有一个属性值，最好将其命名为value，因为当属性名为value时，在使用注解时，可以直接指定value的值而不指定属性名称。</li></ul><h2 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h2><p>如果没有用来读取注解的方法和工作，那么注解就等同于注释。使用注解的过程中，很重要的一部分就是创建与使用注解处理器。JDK5扩展了反射机制的API,以帮助程序员快速的构造自定义注解处理器。</p><p><code>java.lang.annotation.Annotation</code>是一个接口，程序可以通过反射来获取制定程序元素的注解对象，然后通过注解对象来获取注解里面的元数据。</p><p>除此之外，Java中支持注解处理器接口，<code>java.lang.reflect.AnnotatedElement</code>，该接口代表程序中可以接受注解的程序元素，该接口主要有如下几个实现类：</p><ul><li>Class：类定义</li><li>Constructor：构造器定义</li><li>Field：类成员变量定义</li><li>Method：类方法定义</li><li>Package：类的包定义</li></ul><p><code>AnnotatedElement</code>接口是所有程序元素的父接口，所以程序通过反射获取了某个类的<code>AnnotatedElement</code>对象之后，程序就可以调用该对象的如下四个方法来访问注解信息：</p><ul><li>getAnnotation：返回该程序元素上存在的、指定的类型的注解，如果该类注解不存在，则返回null</li><li>getAnnotations：返回该程序元素上的所有注解</li><li>isAnnotationPresent：判断该程序元素上是否包含指定类型的注解，存在返回True，否则返回False</li><li>getDeclaredAnnotations：返回直接存在于此元素上的所有注释（忽略继承的注释）；</li></ul><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//声明自定义注解DEMO</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FindFiles</span> <span class="token punctuation">{</span><span class="token comment">//声明一个可作用域字段或属性的注解</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span><span class="token comment">//该注解运行时有效</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token comment">//使用Javadoc</span><span class="token annotation punctuation">@Documented</span><span class="token comment">//可以被继承</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AnnotationColumn</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"fieldName"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">setFuncName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"setField"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFuncName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"getField"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">defaultDBValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">FileTypes</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">FileType</span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">FileTypes</span> <span class="token punctuation">{</span>  <span class="token class-name">FileType</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@FileType</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@FileType</span><span class="token punctuation">(</span><span class="token string">".js"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@FileType</span><span class="token punctuation">(</span><span class="token string">".css"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@FileType</span><span class="token punctuation">(</span><span class="token string">".html"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">FileType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileTypes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotationByType</span><span class="token punctuation">(</span><span class="token class-name">FileType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Find content from these file of types:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">FileType</span> f <span class="token operator">:</span> fileTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"processing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">FindFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// demo2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RepeatableDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Documented</span>    <span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Roles</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@interface</span> <span class="token class-name">Role</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Documented</span>    <span class="token annotation punctuation">@interface</span> <span class="token class-name">Roles</span> <span class="token punctuation">{</span>        <span class="token class-name">Role</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//只有一个属性且名称为value时，可直接赋值，属性名-value省略</span>    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token string">"ops"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Roles</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Roles</span> roles <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Roles</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User role is : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Role</span> r <span class="token operator">:</span> roles<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：正则</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-11-zheng-ze/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-11-zheng-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="正则简介"><a href="#正则简介" class="headerlink" title="正则简介"></a>正则简介</h1><h3 id="正则表达式是什么"><a href="#正则表达式是什么" class="headerlink" title="正则表达式是什么"></a>正则表达式是什么</h3><p>正则表达式(Regular Expression)是一个用正则符号写出的公式，程序对这个公式进行语法分析，简历一个语法分析树，再根据这个分析树结合正则表达式的引擎生成执行程序（也叫状态机），用于字符匹配。</p><h1 id="正则工具类"><a href="#正则工具类" class="headerlink" title="正则工具类"></a>正则工具类</h1><p>JDK中的<code>java.util.regex</code>包提供了对正则表达式的支持。</p><p><code>java.util.regex</code>有三个核心类：</p><ul><li><strong>Pattern类</strong>：正则表达式的编译表示</li><li><strong>Matcher类</strong>：对输入字符串进行解释和匹配操作的引擎</li><li><strong>PatternSyntaxException</strong>：表示正则表达式模式中的语法错误，非强制异常类</li></ul><blockquote><p>Java中使用反斜杠<code>\</code>时必须写成双斜杠<code>\\</code>，用于将其转义为正常反斜杠字符。</p></blockquote><h2 id="Pattern类"><a href="#Pattern类" class="headerlink" title="Pattern类"></a>Pattern类</h2><p><code>Pattern</code>类没有公共构造方法。要创建一个<code>Pattern</code>对象，必须受限调用其静态方法<code>compile</code>，加载正则规则字符串，然后返回一个<code>Pattern</code>对象。</p><h2 id="Matcher类"><a href="#Matcher类" class="headerlink" title="Matcher类"></a>Matcher类</h2><p><code>Matcher</code>类可以说是<code>java.util.regex</code>包的核心类，它具备三类功能：校验、查找、替换。</p><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><p>为了校验文本是否与正则规则匹配，<code>Matcher</code>提供了以下方法:</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public boolean lookingAt()</td><td>从区域开头开始与输入的字符串进行匹配</td></tr><tr><td>public boolean find()</td><td>在整个区域查找与输入的字符串进行匹配</td></tr><tr><td>public boolean find(int start)</td><td>从区域的指定位置开始与输入的字符串进行匹配</td></tr><tr><td>public boolean matches()</td><td>验证区域与输入的字符串是完全匹配</td></tr></tbody></table><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>为了查找文本匹配正则规则的位置，<code>Matcher</code>提供了以下方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public int start()</td><td>返回匹配正则的字符串开始位置索引(与find()结合使用)</td></tr><tr><td>public int start(int group)</td><td>返回匹配指定group的开始位置索引</td></tr><tr><td>public int end()</td><td>返回匹配正则的字符串结束位置索引(与find()结合使用)</td></tr><tr><td>public int end(int group)</td><td>返回匹配指定group的结束位置索引</td></tr><tr><td>public String group()</td><td>返回匹配正则的子序列</td></tr><tr><td>public String group(int group)</td><td>返回匹配指定group的子序列</td></tr></tbody></table><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>替换方法是替换输入字符串里文本的方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public Matcher appendReplacement(StringBuffer sb, String replacement)</td><td>实现非终端添加与替换</td></tr><tr><td>public StringBuffer appendTail(StringBuffer sb)</td><td>实现终端添加和替换</td></tr><tr><td>public String replaceAll(String replacement)</td><td>替换与给定替换字符串相匹配的输入序列的每个子序列</td></tr><tr><td>public String replaceFirst(String replacement)</td><td>替换与给定替换字符串相匹配的输入序列的第一个子序列</td></tr><tr><td>public static String quoteReplacement(String s)</td><td>返回指定字符串的字面替换字符串</td></tr></tbody></table><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p>元字符就是正则表达式中具有特殊意义的专用字符。</p><h2 id="基本元字符"><a href="#基本元字符" class="headerlink" title="基本元字符"></a>基本元字符</h2><ul><li><p>多选</p><p><code>|</code>表示或，当不确定要匹配的字符串，希望有多个选择时使用。</p></li><li><p>分组</p><p><code>()</code>表示分组，用于表达式需要由多个子表达式组成时使用。</p></li><li><p>字符有效范围</p><p><code>[]</code>限制字符有效范围，例如<code>[a,z]</code></p></li><li><p>字符数量限制</p><p><code>{}</code> 限制字符数量</p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>{n}</td><td>n是一个非负整数，表示匹配n次</td></tr><tr><td>{n,}</td><td>n是一个非负整数，表示至少匹配n次</td></tr><tr><td>{n,m}</td><td>n&lt;m, n为非负整数，表示匹配n到m之间任意次</td></tr></tbody></table></li><li><p>转义字符</p><p><code>/</code>用于将元字符转义为普通字符</p></li></ul><blockquote><p>表达式开始:<code>^</code></p><p>表达式结束：<code>$</code></p><p>非：<code>[^]</code></p></blockquote><h2 id="等价字符"><a href="#等价字符" class="headerlink" title="等价字符"></a>等价字符</h2><p>顾名思义，就是对于基本元字符的一种简化。</p><h3 id="某一类型字符的等价字符"><a href="#某一类型字符的等价字符" class="headerlink" title="某一类型字符的等价字符"></a>某一类型字符的等价字符</h3><table><thead><tr><th>等价字符</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除<code>\n</code>外任意单个字符</td></tr><tr><td><code>\d</code></td><td>匹配一个数字字符，等价于<code>[0-9]</code></td></tr><tr><td><code>\D</code></td><td>匹配一个分数字字符，等价于<code>[^0-9]</code></td></tr><tr><td><code>\w</code></td><td>匹配任意单词字符。（Unicode字符集）</td></tr><tr><td><code>\W</code></td><td>匹配任意非单词字符</td></tr><tr><td><code>\s</code></td><td>匹配任意不可见字符，如空格、制表符、换页符等。等价于<code>[\f\n\r\t\v]</code></td></tr><tr><td><code>\S</code></td><td>匹配任意可见字符，等价于<code>[\f\n\r\t\V]</code></td></tr></tbody></table><h3 id="限制字符数量的等价字符"><a href="#限制字符数量的等价字符" class="headerlink" title="限制字符数量的等价字符"></a>限制字符数量的等价字符</h3><table><thead><tr><th>等价字符</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配前面的子表达式零次或多次，等价于<code>{0,}</code></td></tr><tr><td><code>+</code></td><td>匹配前面的子表达式一次或多次，等价于<code>{1,}</code></td></tr><tr><td><code>?</code></td><td>匹配前面的子表达式零次或一次，等价于<code>{0,1}</code></td></tr></tbody></table><h2 id="元字符优先级"><a href="#元字符优先级" class="headerlink" title="元字符优先级"></a>元字符优先级</h2><p>正则表达式从左向右进行计算，并遵循优先级顺序，与算术表达式类似。正则表达式优先级从高到低如下：</p><table><thead><tr><th>元字符</th><th>优先级</th><th>说明</th></tr></thead><tbody><tr><td><code>\</code></td><td>最高</td><td>转义符</td></tr><tr><td><code>()</code>、<code>(?:)</code>、<code>(?=)</code>、<code>[]</code></td><td>高</td><td>括号及中括号</td></tr><tr><td><code>*</code>、<code>+</code>、<code>?</code>、<code>{n,m}</code></td><td>中</td><td>限定符及大括号</td></tr><tr><td><code>^</code>、<code>$</code>、<code>*任意字符</code>、<code>任意字符*</code></td><td>低</td><td>定位点和序列</td></tr><tr><td>`</td><td>`</td><td>最低</td></tr></tbody></table><h1 id="分组构造"><a href="#分组构造" class="headerlink" title="分组构造"></a>分组构造</h1><p>所谓分组构造，是用来描述正则表达式的子表达式，用于捕获字符串中的子字符串。</p><h2 id="捕获与非捕获"><a href="#捕获与非捕获" class="headerlink" title="捕获与非捕获"></a>捕获与非捕获</h2><p>以下为分组构造中的捕获与非捕获：</p><table><thead><tr><th>表达式</th><th>描述</th><th>捕获|非捕获</th></tr></thead><tbody><tr><td><code>(exp)</code></td><td>匹配的子表达式</td><td>捕获</td></tr><tr><td><code>(?&lt;name&gt;exp)</code></td><td>命名的反向引用</td><td>捕获</td></tr><tr><td><code>(?:exp)</code></td><td>非捕获组</td><td>非捕获</td></tr><tr><td><code>(?=exp)</code></td><td>零宽度正预测先行断言</td><td>非捕获</td></tr><tr><td><code>(?!exp)</code></td><td>零宽度负预测先行断言</td><td>非捕获</td></tr><tr><td><code>(?&lt;=exp)</code></td><td>零宽度正回顾后发断言</td><td>非捕获</td></tr><tr><td><code>(?&lt;!exp)</code></td><td>零宽度负回顾后发断言</td><td>非捕获</td></tr></tbody></table><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>带编号的反向引用使用以下语法：<code>\编号</code></p><p>命名的反向引用通过以下语法：<code>\k&lt;name&gt;</code></p><h2 id="非捕获组"><a href="#非捕获组" class="headerlink" title="非捕获组"></a>非捕获组</h2><p><code>(?:exp)</code>表示当一个限定符应用到一个组，但组捕获的子字符串并非所需时，通常会使用非捕获组构造。</p><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>用于查找某些内容之前或之后的东西，用于指定一个位置，该位置需要满足一定的条件(断言)，因此称之为零宽断言。</p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td><code>(?=exp)</code></td><td>匹配exp前面的位置</td></tr><tr><td><code>(?&lt;=exp)</code></td><td>匹配exp后面的位置</td></tr><tr><td><code>(?!exp)</code></td><td>匹配后面跟的不是exp的位置</td></tr><tr><td><code>(?&lt;!exp)</code></td><td>匹配前面不是exp的位置</td></tr></tbody></table><h1 id="正则性能优化"><a href="#正则性能优化" class="headerlink" title="正则性能优化"></a>正则性能优化</h1><p>目前正则表达式引擎方式有两种：DFA自动机(Deterministic Final Automata 确定有限状态自动机)和NFA自动机(Non deterministic Finite Automaton 非确定有限状态自动机)。构造DFA自动机代价远大于NFA自动机，但DFA自动机执行效率高于NFA。NFA 自动机的优势是支持更多功能。例如，捕获 group、环视、占有优先量词等高级功能。这些功能都是基于子表达式独立进行匹配，因此在编程语言里，使用的正则表达式库都是基于 NFA 实现的。</p><h2 id="NFA自动机回溯"><a href="#NFA自动机回溯" class="headerlink" title="NFA自动机回溯"></a>NFA自动机回溯</h2><p>用 NFA 自动机实现的比较复杂的正则表达式，在匹配过程中经常会引起回溯问题。大量的回溯会长时间地占用 CPU，从而带来系统性能开销。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">text=“abbc”regex=“ab{1,3}c”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个例子匹配目的是：匹配以 a 开头，以 c 结尾，中间有 1-3 个 b 字符的字符串。NFA 自动机对其解析的过程是这样的：</p><ul><li>读取正则表达式第一个匹配符 a 和字符串第一个字符 a 进行比较，a 对 a，匹配。</li><li>然后，读取正则表达式第二个匹配符 <code>b{1,3}</code> 和字符串的第二个字符 b 进行比较，匹配。但因为 <code>b{1,3}</code> 表示 1-3 个 b 字符串，NFA 自动机又具有贪婪特性，所以此时不会继续读取正则表达式的下一个匹配符，而是依旧使用 <code>b{1,3}</code> 和字符串的第三个字符 b 进行比较，结果还是匹配。</li><li>接着继续使用 <code>b{1,3}</code> 和字符串的第四个字符 c 进行比较，发现不匹配了，此时就会发生回溯，已经读取的字符串第四个字符 c 将被吐出去，指针回到第三个字符 b 的位置。</li><li>那么发生回溯以后，匹配过程怎么继续呢？程序会读取正则表达式的下一个匹配符 c，和字符串中的第四个字符 c 进行比较，结果匹配，结束。</li></ul><h2 id="如何避免回溯"><a href="#如何避免回溯" class="headerlink" title="如何避免回溯"></a>如何避免回溯</h2><p>正则表达式在进行匹配时，存在以下三种匹配模式：</p><ul><li><p>贪婪模式(Greedy)</p><p>顾名思义，就是在数量匹配中，如果单独使用<code>+</code>、<code>?</code>、<code>*</code>、<code>{n,m}</code>等量词时，正则表达式会匹配尽可能多的内容。</p></li><li><p>懒惰模式(Reluctant)</p><p>在该模式下，正则表达式会尽可能少的重复匹配字符，如果成功，则继续匹配剩余字符。通过在已有表达式后添加<code>？</code>来启用懒惰模式。</p></li><li><p>独占模式(Possessive)</p><p>同贪婪模式一样，独占模式一样会最大限度匹配更多内容。不同的是，匹配失败就会结束匹配，不会发生回溯问题。通过在已有表达式后添加<code>+</code>来启用独占模式。</p></li></ul><h2 id="正则表达式优化"><a href="#正则表达式优化" class="headerlink" title="正则表达式优化"></a>正则表达式优化</h2><h3 id="少用贪婪模式，多用独占模式"><a href="#少用贪婪模式，多用独占模式" class="headerlink" title="少用贪婪模式，多用独占模式"></a>少用贪婪模式，多用独占模式</h3><p>通过独占模式来规避回溯问题。</p><h3 id="减少分支选择"><a href="#减少分支选择" class="headerlink" title="减少分支选择"></a>减少分支选择</h3><p>分支选择会降低正则表达式性能，可以通过以下几种方式来优化：</p><ul><li>常用的选择项放在前面，使其较快地被匹配</li><li>尝试提取多个分支中的共用模式，减少匹配次数</li></ul><h3 id="减少捕获嵌套"><a href="#减少捕获嵌套" class="headerlink" title="减少捕获嵌套"></a>减少捕获嵌套</h3><p>减少不需要获取的分组，可以提高正则表达式性能。</p><h1 id="元字符字典"><a href="#元字符字典" class="headerlink" title="元字符字典"></a>元字符字典</h1><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td><code>+</code></td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td><code>?</code></td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</td></tr><tr><td><code>{n}</code></td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td><code>{n,}</code></td><td>n 是一个非负整数。至少匹配 n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td><code>{n,m}</code></td><td>m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td><code>$</code></td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td><code>\b</code></td><td>匹配一个字边界，即字与空格间的位置。</td></tr><tr><td><code>\B</code></td><td>非字边界匹配。</td></tr></tbody></table><h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\cx</code></td><td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td><code>\f</code></td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td><code>\n</code></td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td><code>\r</code></td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td><code>\s</code></td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td><code>\S</code></td><td>匹配任何非空白字符。等价于 [ \f\n\r\t\v]。</td></tr><tr><td><code>\t</code></td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td><code>\v</code></td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td><code>(exp)</code></td><td>匹配的子表达式。()中的内容就是子表达式。</td></tr><tr><td><code>(?&lt;name&gt;exp)</code></td><td>命名的子表达式（反向引用）。</td></tr><tr><td><code>(?:exp)</code></td><td>非捕获组，表示当一个限定符应用到一个组，但组捕获的子字符串并非所需时，通常会使用非捕获组构造。</td></tr><tr><td><code>(?=exp)</code></td><td>匹配 exp 前面的位置。</td></tr><tr><td><code>(?&lt;=exp)</code></td><td>匹配 exp 后面的位置。</td></tr><tr><td><code>(?!exp)</code></td><td>匹配后面跟的不是 exp 的位置。</td></tr><tr><td><code>(?&lt;!exp)</code></td><td>匹配前面不是 exp 的位置。</td></tr></tbody></table><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\</code></td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘' 匹配 “”，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td><code>|</code></td><td>指明两项之间的一个选择。</td></tr><tr><td><code>[]</code></td><td>匹配方括号范围内的任意一个字符。形式如：[xyz]、[^xyz]、[a-z]、[^a-z]、[x,y,z]</td></tr></tbody></table><h1 id="常用案例"><a href="#常用案例" class="headerlink" title="常用案例"></a>常用案例</h1><h2 id="校验中文"><a href="#校验中文" class="headerlink" title="校验中文"></a>校验中文</h2><p>校验字符串中只能有中文字符（不包括中文标点符号）。中文字符的 Unicode 编码范围是 <code>\u4e00</code> 到 <code>\u9fa5</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">^</span><span class="token punctuation">[</span>\u4e00<span class="token operator">-</span>\uu9fa5<span class="token punctuation">]</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="校验身份证号码"><a href="#校验身份证号码" class="headerlink" title="校验身份证号码"></a>校验身份证号码</h2><p>身份证为 15 位或 18 位。15 位是第一代身份证。从 1999 年 10 月 1 日起，全国实行公民身份证号码制度，居民身份证编号由原 15 位升至 18 位。</p><ul><li><strong>15 位身份证</strong>：由 15 位数字组成。排列顺序从左至右依次为：六位数字地区码；六位数字出生日期；三位顺序号，其中 15 位男为单数，女为双数。</li><li><strong>18 位身份证</strong>：由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地区码；八位数字出生日期；三位数字顺序码和一位数字校验码（也可能是 X）。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 15位有效身份证</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">4</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">5</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">6</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>\d<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">13578</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">02</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">13456789</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">012</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token function">02</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span>\d<span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">02468</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">048</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">13579</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">0229</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>$<span class="token comment">// 18位有效身份证</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">4</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">5</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">6</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>\d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">13578</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">02</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">13456789</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">012</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token function">02</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span>\d<span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">02468</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">048</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">13579</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">0229</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">(</span>\d<span class="token operator">|</span><span class="token class-name">X</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="校验邮箱"><a href="#校验邮箱" class="headerlink" title="校验邮箱"></a>校验邮箱</h2><p>邮箱一般有以下要求：</p><ol><li>不能使用IP作为域名</li><li>字符只能是英文字母、数字、<code>_</code>、<code>.</code>、<code>-</code>;</li><li>首字符必须为英文字母或数字；</li><li>特殊符号不能连续出现；</li><li>必须包含<code>@</code></li><li>域名的根域只能是字母，且至少为两个字符</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//邮箱正则</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>_\<span class="token punctuation">.</span>\<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span>@<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\<span class="token punctuation">.</span>\<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="校验URL"><a href="#校验URL" class="headerlink" title="校验URL"></a>校验URL</h2><p>校验 URL。支持 http、https、ftp、ftps。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//校验URL</span><span class="token operator">^</span><span class="token punctuation">(</span>ht<span class="token operator">|</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span>tp<span class="token operator">|</span>tps<span class="token punctuation">)</span>\<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span>\<span class="token operator">-</span>\<span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token class-name">Z</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token operator">/</span>\<span class="token class-name">S</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">?</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="校验时间-日期"><a href="#校验时间-日期" class="headerlink" title="校验时间/日期"></a>校验时间/日期</h2><ul><li>时间：时分秒必须是有效数字，十位不足补零；</li><li>日期：校验闰年2月最后一天，大小月最后一天；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//时间</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$<span class="token comment">//日期</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span><span class="token number">0000</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\<span class="token function">1</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\<span class="token function">1</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">|</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">13578</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">02</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\<span class="token function">1</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">2468</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">048</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">13579</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">2468</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">048</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">13579</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">2</span>\<span class="token function">2</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="校验中国手机"><a href="#校验中国手机" class="headerlink" title="校验中国手机"></a>校验中国手机</h2><p>十一位数字，或者带国际区号13位数字；</p><blockquote><p>移动有 16 个号段：134、135、136、137、138、139、147、150、151、152、157、158、159、182、187、188。其中 147、157、188 是 3G 号段，其他都是 2G 号段。联通有 7 种号段：130、131、132、155、156、185、186。其中 186 是 3G（WCDMA）号段，其余为 2G 号段。电信有 4 个号段：133、153、180、189。其中 189 是 3G 号段（CDMA2000），133 号段主要用作无线网卡号。总结：13 开头手机号 0-9；15 开头手机号 0-3、5-9；18 开头手机号 0、2、5-9。</p><p>此外，中国在国际上的区号为 86，所以手机号开头有+86、86 也是合法的。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//手机号码</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>\<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">86</span>\s<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token function">15</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\d<span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="中国固话"><a href="#中国固话" class="headerlink" title="中国固话"></a>中国固话</h2><p>固话号码，必须加区号（以 0 开头）。</p><p> 3 位有效区号：010、020~029，固话位数为 8 位。</p><p> 4 位有效区号：03xx 开头到 09xx，固话位数为 7。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//中国固话号码</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">010</span><span class="token operator">|</span><span class="token number">02</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\s<span class="token operator">|</span><span class="token operator">-</span><span class="token punctuation">)</span>\d<span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\s<span class="token operator">|</span><span class="token operator">-</span><span class="token punctuation">)</span>\d<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="校验IP地址"><a href="#校验IP地址" class="headerlink" title="校验IP地址"></a>校验IP地址</h2><p>IPv4 地址通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d 都是 0~255 之间的十进制整数</p><p>IPv6 的 128 位地址通常写成 8 组，每组为四个十六进制数的形式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//IPv4</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token operator">?</span>\d\d<span class="token operator">?</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token operator">?</span>\d\d<span class="token operator">?</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token operator">?</span>\d\d<span class="token operator">?</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token operator">?</span>\d\d<span class="token operator">?</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$  <span class="token comment">//IPv6</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">|</span>fe80<span class="token operator">:</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token class-name">Z</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token operator">::</span><span class="token punctuation">(</span><span class="token function">ffff</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token class-name">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="特定字符"><a href="#特定字符" class="headerlink" title="特定字符"></a>特定字符</h2><ul><li>匹配长度为 3 的字符串：<code>^.{3}$</code>。</li><li>匹配由 26 个英文字母组成的字符串：<code>^[A-Za-z]+$</code>。</li><li>匹配由 26 个大写英文字母组成的字符串：<code>^[A-Z]+$</code>。</li><li>匹配由 26 个小写英文字母组成的字符串：<code>^[a-z]+$</code>。</li><li>匹配由数字和 26 个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code>。</li><li>匹配由数字、26 个英文字母或者下划线组成的字符串：<code>^\w+$</code></li></ul><h2 id="特定数字"><a href="#特定数字" class="headerlink" title="特定数字"></a>特定数字</h2><ul><li>匹配正整数：<code>^[1-9]\d*$</code></li><li>匹配负整数：<code>^-[1-9]\d*$</code></li><li>匹配整数：<code>^(-?[1-9]\d*)|0$</code></li><li>匹配正浮点数：<code>^[1-9]\d*\.\d+|0\.\d+$</code></li><li>匹配负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code></li><li>匹配浮点数：<code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：编码</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-12-bian-ma/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-12-bian-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h1><h2 id="Base64原理"><a href="#Base64原理" class="headerlink" title="Base64原理"></a>Base64原理</h2><p>Base64内容传送编码是一种以任意8位字节序列组合的描述形式，这种形式不易被人直接识别。</p><p>Base64是一种很常见的编码规范，其作用是将二进制序列转换为人类可读的ASCII字符序列，常用在需要通过文本协议(HTTP、SMTP)来传输二进制数据的情况下。</p><p>Base64并不是加密解密算法，仅提供编码与解码功能，其变换非常简单，仅能够避免信息被直接识别。</p><p>Base64算法主要是将给定的字符以字符编码对应的十进制数为基准，进行编码操作：</p><ol><li>将给定的字符串以字符为单位，转换为对应的字符编码；</li><li>将获得的字符编码转换为二进制；</li><li>对二进制编码进行分组转换，每3个字节为一组，转换为每4个6位二进制为一组（不足时低位补0）。实际上是一个分组变换过程，由3个8位二进制码转换为4个6位二进制码，变换后总长度不变。</li><li>对获得4-6二进制码补位，向6位二进制码高位补0，组成4个8位二进制码；</li><li>将获取的4-8二进制码转换为十进制码；</li><li>将获取的十进制编码转换为Base64字符表中对应的字符。</li></ol><blockquote><p>Base64编码表</p><table><thead><tr><th><strong>索引</strong></th><th><strong>对应字符</strong></th><th><strong>索引</strong></th><th><strong>对应字符</strong></th><th><strong>索引</strong></th><th><strong>对应字符</strong></th><th><strong>索引</strong></th><th><strong>对应字符</strong></th></tr></thead><tbody><tr><td>0</td><td>A</td><td>17</td><td>R</td><td>34</td><td>i</td><td>51</td><td>z</td></tr><tr><td>1</td><td>B</td><td>18</td><td>S</td><td>35</td><td>j</td><td>52</td><td>0</td></tr><tr><td>2</td><td>C</td><td>19</td><td>T</td><td>36</td><td>k</td><td>53</td><td>1</td></tr><tr><td>3</td><td>D</td><td>20</td><td>U</td><td>37</td><td>l</td><td>54</td><td>2</td></tr><tr><td>4</td><td>E</td><td>21</td><td>V</td><td>38</td><td>m</td><td>55</td><td>3</td></tr><tr><td>5</td><td>F</td><td>22</td><td>W</td><td>39</td><td>n</td><td>56</td><td>4</td></tr><tr><td>6</td><td>G</td><td>23</td><td>X</td><td>40</td><td>o</td><td>57</td><td>5</td></tr><tr><td>7</td><td>H</td><td>24</td><td>Y</td><td>41</td><td>p</td><td>58</td><td>6</td></tr><tr><td>8</td><td>I</td><td>25</td><td>Z</td><td>42</td><td>q</td><td>59</td><td>7</td></tr><tr><td>9</td><td>J</td><td>26</td><td>a</td><td>43</td><td>r</td><td>60</td><td>8</td></tr><tr><td>10</td><td>K</td><td>27</td><td>b</td><td>44</td><td>s</td><td>61</td><td>9</td></tr><tr><td>11</td><td>L</td><td>28</td><td>c</td><td>45</td><td>t</td><td>62</td><td>+</td></tr><tr><td>12</td><td>M</td><td>29</td><td>d</td><td>46</td><td>u</td><td>63</td><td>/</td></tr><tr><td>13</td><td>N</td><td>30</td><td>e</td><td>47</td><td>v</td><td></td><td></td></tr><tr><td>14</td><td>O</td><td>31</td><td>f</td><td>48</td><td>w</td><td></td><td></td></tr><tr><td>15</td><td>P</td><td>32</td><td>g</td><td>49</td><td>x</td><td></td><td></td></tr><tr><td>16</td><td>Q</td><td>33</td><td>h</td><td>50</td><td>y</td><td></td><td></td></tr></tbody></table></blockquote><h1 id="消息摘要"><a href="#消息摘要" class="headerlink" title="消息摘要"></a>消息摘要</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>消息摘要，其实就是将需要摘要的数据做为参数，经过哈希函数计算，得到的散列值。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>唯一性：数据只要有一点改变，那么再通过消息摘要算法得到的摘要也会发生变化。虽然理论上有可能会发生碰撞，但是概率极其低。</li><li>不可逆：消息摘要算法的密文无法被解密。</li><li>不需要密钥，可使用于分布式网络。</li><li>长度固定：无论输入的明文有多长，计算出来的消息摘要的长度总是固定的。</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>消息摘要算法包括**MD(Message Digest，消息摘要算法)<strong>、</strong>SHA(Secure Hash Algorithm，安全散列算法)<strong>、</strong>MAC(Message AuthenticationCode，消息认证码算法)**共 3 大系列，常用于验证数据的完整性，是数字签名算法的核心算法。</p><p><strong>MD5</strong>和<strong>SHA1</strong>分别是<strong>MD</strong>、<strong>SHA</strong>算法系列中最有代表性的算法。</p><p>如今，MD5 已被发现有许多漏洞，从而不再安全。SHA 算法比 MD 算法的摘要长度更长，也更加安全。</p><h1 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>数字签名算法可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，<strong>数字签名算法是非对称加密算法和消息摘要算法的结合体</strong>。</p><p>数字签名算法要求能够验证数据完整性、认证数据来源，并起到抗否认的作用。</p><p>数字签名算法包含签名和验证两项操作，遵循私钥签名，公钥验证的方式。</p><p>签名时要使用私钥和待签名数据，验证时则需要公钥、签名值和待签名数据，其核心算法主要是消息摘要算法。</p><p>数字签名常用算法：<strong>RSA</strong>、<strong>DSA</strong>、<strong>ECDSA</strong></p><h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>对称加密算法主要有DES、3DES、AES、IDEA、RC2、RC4、RC5和Blowfish等。</p><p>对称加密算法是应用较早的加密算法，技术成熟。在对称加密算法中，数据发信方将明文和加密秘钥一起经过特殊加密算法处理后，将其变成复杂的加密密文发送出去。收信方收到密文后，需要使用加密使用的秘钥和相同的算法逆运算对密文进行解密，才能使其恢复成可读明文。在对称加密算法中，秘钥只有一个，发收信双方都使用这个秘钥对数据进行加解密，这要求加解密双方实现必须知道加密秘钥。</p><p>对称加密特点：</p><ul><li>优点：计算量小，加密速度快，加密效率高。</li><li>缺点：算法公开，安全无法保障。</li></ul><h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>非对称加密常用算法：DH(Diffie-Hellman)、RSA</p><p>非对称加密算法和对称加密算法的主要差别在于非对称加密算法用于加密和解密的秘钥是不同的。一个公开，称为公钥(public key)；一个保密，称为私钥(private key)。因此，非对称加密算法也称为双钥加密算法或公钥加密算法。</p><p>非对称加密算法特点：</p><ul><li>优点：安全性高，解决了对称加密算法的秘钥分配问题。</li><li>缺点：算法复杂，加解密效率相对于对称加密算法要低。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：JDK8新特性</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-13-jdk8-xin-te-xing/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-13-jdk8-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="接口默认方法"><a href="#接口默认方法" class="headerlink" title="接口默认方法"></a>接口默认方法</h1><p>JDK8开始支持通过<code>default</code>关键字将非抽象方法实现添加到接口。这个功能也被称为虚拟扩展方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Formula</span><span class="token punctuation">{</span>  <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> doubel <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jdk8NewDemo01</span> <span class="token keyword">implements</span> <span class="token class-name">Formula</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name">Jdk8NewDemo01</span> demo01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jdk8NewDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo01<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接口默认方法，不需要重写即可直接使用</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo01<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>Lambda表达式又称闭包或匿名函数，主要优点在于简化代码、并行操作集合等。</p><h2 id="Lambda语法"><a href="#Lambda语法" class="headerlink" title="Lambda语法"></a>Lambda语法</h2><p>lambda基本语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">（<span class="token class-name">Type1</span> param1<span class="token punctuation">,</span> <span class="token class-name">Type2</span> param2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token class-name">TypeN</span> paramN） <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  statment1<span class="token punctuation">;</span>  statment2<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> statmentM<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lambda表达式特性：</p><ul><li>可选类型声明：无需声明参数类型，编译器即可自动识别</li><li>可选的参数圆括号：仅有一个参数时圆括号可以省略</li><li>可选的大括号：主体只包含一个语句时可省略大括号</li><li>可选的返回关键字：主体只包含一个表达式返回值并省略大括号时，编译器会自动return返回值；有大括号时，需要显式指定表达式return一个结果；</li></ul><blockquote><p>从程序的严谨性触发，尽量指明函数的参数类型，避免出错。</p></blockquote><h2 id="Lambda示例"><a href="#Lambda示例" class="headerlink" title="Lambda示例"></a>Lambda示例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// demo1</span><span class="token comment">//before java8</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before Java 8, too much code for too little to do!"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//java8</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"In Java 8, Lambda expression rocks !!"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//demo2</span><span class="token comment">// before java8</span><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Event handling without lambda expression !"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//java8</span><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span> e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lambda expression!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//demo3</span><span class="token comment">// before java 8</span><span class="token class-name">List</span> li <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Lambdas"</span><span class="token punctuation">,</span><span class="token string">"Method"</span><span class="token punctuation">,</span><span class="token string">"Stream"</span><span class="token punctuation">,</span> <span class="token string">"Date"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> e<span class="token operator">:</span> li<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">// java 8</span><span class="token class-name">List</span> li <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Lambdas"</span><span class="token punctuation">,</span><span class="token string">"Method"</span><span class="token punctuation">,</span><span class="token string">"Stream"</span><span class="token punctuation">,</span> <span class="token string">"Date"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>li<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//demo4</span>  <span class="token comment">//before java 8</span><span class="token class-name">List</span> tax <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> cost<span class="token operator">:</span>tax<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">double</span> price <span class="token operator">=</span> cost <span class="token operator">+</span> <span class="token number">0.12</span> <span class="token operator">*</span> cost<span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">//java8</span><span class="token class-name">List</span> tax <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tax<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cost <span class="token operator">-&gt;</span> cost <span class="token operator">+</span> cost <span class="token operator">*</span> <span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>函数式接口就是一个有且仅有一个抽象方法，但是可以有很多个非抽象方法或静态方法的接口。</p><p>函数式接口可以被隐式转换为lambda表达式，让代码更简洁。</p><p>JDK8包含了许多内置的函数式接口，这些接口可以通过<code>@FunctionalInterfaceannotation</code>注解扩展为支持Lambda。</p><h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p><code>Predicate</code>是只有一个参数的布尔型函数。该接口包含各种默认方法，用于将谓词组合成复杂的逻辑术语（与、或、非）</p><ul><li>抽象方法：<code>boolean test(T t)</code>传入一个参数，返回一个布尔型。</li></ul><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p><code>Function</code>接口一个参数并产生一个结果。可以使用默认方法将多个函数链接在一起。</p><ul><li>抽象方法：<code>R apply(T t)</code>传入一个参数，返回想要的结果。</li></ul><h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><p><code>Supplier</code>产生一个泛型结果，与<code>Function</code>不同，<code>Supplier</code>不接受参数。</p><ul><li>抽象方法：<code>T get()</code> 返回一个自定义数据。</li></ul><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p><code>Consumer</code>表示要在一个输入参数上执行的操作。</p><ul><li>抽象方法：<code>void accept(T t)</code> 接收一个参数进行消费，但无需返回结果。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionalInterfaceDemo</span> <span class="token punctuation">{</span>    <span class="token comment">//输入一个指定类型的参数，基于此参数进行计算，但并不返回结果</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demoConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> counter <span class="token operator">=</span> list <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> num <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token string">"and"</span><span class="token punctuation">,</span><span class="token string">"jerry"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    counter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token comment">//输入一个指定类型的参数，返回另外一个指定类型的结果</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demoFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> square <span class="token operator">=</span> i<span class="token operator">-&gt;</span> i<span class="token operator">*</span>i<span class="token punctuation">;</span>        <span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> square<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">//不需要提供参数，每次总是返回同一个常量</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demoSupplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> constValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">//输入一个指定类型为T的参数，基于它执行某种断言逻辑，给出一个true/false结论</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demoPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> flag <span class="token operator">=</span> type <span class="token operator">-&gt;</span> type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> animal <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isDog <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p><code>Optional</code>不是功能性接口，而是防止<code>NullPointerException</code>的好工具。</p><p><code>Optional</code>是一个简单的容器，其值可以是null或非null。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> option <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>option<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>option<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"apple"</span>option<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"pear"</span>option<span class="token punctuation">.</span><span class="token function">ofPresent</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//"a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h1><p>JDK8中的<code>Stream</code>是对集合对象功能的增强，它专注于对集合对象进行各种非常便利】高效的聚合操作，或者大批量数据操作。<code>Stream API</code>借助于同样新出现的Lambda表达式，极大的提高了编程效率和程序可读性。同时它提供串行和并行两种模型进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用<code>fork/join</code>并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错，但使用<code>Stream API</code>无需编写一行多线程代码，就可以很方便的写出高性能的并发程序。所以说，JDK8中首次出现的<code>java.util.Stream</code>是一个函数式语言 + 多核时代综合影响的产物。</p><h2 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h2><p><code>Stream</code>不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的<code>Iterator</code>。原始版本的<code>Iterator</code>，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的<code>Stream</code>，用户只需要给出需要对其包含的元素执行什么操作，<code>Stream</code>会隐式地在内部进行遍历，做出相应的数据转换。</p><p><code>Stream</code>就如同一个迭代器，单向，不可往复，数据只能遍历一次；而和迭代器又不通，<code>Stream</code>可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个<code>item</code>读完后再读下一个<code>item</code>。而是用并行去遍历时，数据会被拆分成多个段，每一段在不同的线程中处理，然后一起输出。<code>Stream</code>的并行操作依赖于JDK7引入的<code>Fork/Join</code>框架来拆分任务和加速处理过程。</p><p><code>Stream</code>的另外一大特点就是，数据源本身可以是无限的。</p><h2 id="流的构成"><a href="#流的构成" class="headerlink" title="流的构成"></a>流的构成</h2><p>当我们使用一个流时，通常包括三个步骤：</p><ol><li>获取一个数据源；</li><li>数据转换；</li><li>执行操作获取想要的结果；</li></ol><blockquote><p>针对流的每次转换，原有的Stream对象不改变，返回一个新的Stream兑现个，这就允许对其操作可以像链条一样排列，编程一个管道。</p></blockquote><p>流数据源类型：</p><ul><li><p>从<code>Collection</code>和数组创建</p><ul><li><code>Collection.stream()</code></li><li><code>Collection.parallelStream()</code></li><li><code>Arrays.stream(T array)</code></li><li><code>Arrays.Stream.of(T array)</code></li></ul></li><li><p>从<code>BufferedReader</code>创建</p><ul><li><code>java.io.BufferedReader.lines()</code></li></ul></li><li><p>静态工厂</p><ul><li><code>java.util.stream.IntStream.range()</code></li><li><code>java.nio.file.File.walk()</code></li></ul></li><li><p>用户构建</p><ul><li><code>java.util.Spliterator</code></li><li>其它<ul><li><code>Random.ints()</code></li><li><code>BitSet.stream()</code></li><li><code>Pattern.splitAsStream(java.lang.CharSequence)</code></li><li><code>JarFile.stream()</code></li></ul></li></ul></li></ul><p>流的操作类型：</p><ul><li><code>Intermediate</code>：一个流可以后面跟随零个或多个<code>intermediate</code>操作。其目的主要是打开流，做出某种程度的数据映射/过滤，并返回一个新的流，交给下一个操作使用。这类操作都是惰性化的(lazy)。</li><li><code>Terminal</code>：一个流只能有一个<code>terminal</code>操作，当这个操作执行后，流就无法再被操作。所以这必定是流的最后一个操作。<code>terminal</code>操作的执行，擦灰真正开始流的遍历，并生成一个结果，或者<code>side effect</code>。</li><li><code>short-circuiting</code>：<ul><li>对于一个<code>intermediate</code>操作，如果它接受一个无限大的<code>Stream</code>，但返回一个有限的新的<code>Stream</code>；</li><li>对于一个<code>terminal</code>操作，如果它接受一个无限大的<code>Stream</code>，但能在有限的时间结算出结果。</li></ul></li></ul><h2 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h2><p>常见的流的操作可以归类如下：</p><h3 id="Intermediate类"><a href="#Intermediate类" class="headerlink" title="Intermediate类"></a>Intermediate类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">map</span><span class="token punctuation">(</span>mapToInt<span class="token punctuation">,</span>flatMap<span class="token punctuation">)</span>、filter、distinct、sorted、peek、limit、skip、parallel、sequential、unordered<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">forEach、forEachOrdered、toArray、reduce、collect、min、max、count、anyMatch、allMatch、noneMatch、findFirst、findAny、iterator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Short-circuiting"><a href="#Short-circuiting" class="headerlink" title="Short-circuiting"></a>Short-circuiting</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">anyMatch、allMatch、noneMatch、findFirst、findAny、limit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e<span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Filtered value: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Date-API"><a href="#Date-API" class="headerlink" title="Date API"></a>Date API</h1><p>JDK8在<code>java.time</code>包下新增了一个全新的日期和时间<code>API</code>。新的日期<code>API</code>与<code>Joda-Time</code>库相似，但不一样。以下示例涵盖了此新<code>API</code>的最重要部分。</p><h2 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h2><p><code>Clock</code>提供对当前日期和时间的访问。<code>Clock</code>知道一个时区，可以使用它来代替<code>System.currentTimeMillis()</code>获取从<strong>Unix EPOCH</strong>开始的以毫秒为单位的当前时间。时间线上的某一时刻也由类<code>Instant</code>表示。<code>Instants</code>可以用来创建遗留的<code>java.util.Date</code>对象。</p><h2 id="TimeZone"><a href="#TimeZone" class="headerlink" title="TimeZone"></a>TimeZone</h2><p>时区由<code>ZoneId</code>来表示，他们可以很容易地通过静态工厂方法访问。时区定义了某一时刻和当地日期、时间之间转换的重要偏移量。</p><h2 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h2><p><code>LocalTime</code>代表没有时区的时间，例如晚上10点或<code>17:30:00</code>。</p><h2 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h2><p><code>LocalDate</code>表示不同的日期，它是不可变的，与<code>LocalTime</code>完全类似。</p><h2 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h2><p><code>LocalDateTime</code>表示日期时间，它将日期和时间组合成一个实例。<code>LocalDateTime</code>是不可变的。</p><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Clock</span> clock <span class="token operator">=</span> <span class="token class-name">Clock</span><span class="token punctuation">.</span><span class="token function">systemDefaultZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">long</span> millis <span class="token operator">=</span> colck<span class="token punctuation">.</span><span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Instant</span> instant <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> legacyDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//legacy java.util.Date</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">getAvailableZoneIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZoneId</span> zone1 <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Europe/Berlin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZoneId</span> zone2 <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Brazil/East"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zone1<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span> now1 <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zone1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span> now2 <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zone2<span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>now2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> hoursBeteween <span class="token operator">=</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now1<span class="token punctuation">,</span>now2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> minutesBetween <span class="token operator">=</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now1<span class="token punctuation">,</span>now2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hoursBetween<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span> late <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>late<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DateTimeFormatter</span> formater <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span><span class="token constant">SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withLocale</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">GERMAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span> leetTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"13:37"</span><span class="token punctuation">,</span>formater<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leettime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> today <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> tomorrow <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> inDay <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2014</span><span class="token punctuation">,</span><span class="token class-name">Month</span><span class="token punctuation">.</span><span class="token constant">JULY</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DayOfWeek</span> dayOfWeek <span class="token operator">=</span> inDay<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DateTimeFormatter</span> formater <span class="token operator">=</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDate</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span><span class="token constant">MEDIUM</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withLocale</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">GERMAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> xmas <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"24.12.2021"</span><span class="token punctuation">,</span>formater<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> now_full <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token class-name">Month</span><span class="token punctuation">.</span><span class="token constant">DECEMBER</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> munuteOfDay <span class="token operator">=</span> now_full<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token class-name">ChronoField</span><span class="token punctuation">.</span><span class="token constant">MONUTE_OF_DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DateTimeFormatter</span> formater <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"MMM dd,yyyy - HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> parsed <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"Nov 05, 2021 - 22:24"</span><span class="token punctuation">,</span> formater<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> formater<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DateTimeFormatter是不可变且线程安全的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：并发简介</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-14-bing-fa-jian-jie/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-14-bing-fa-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="并发概念"><a href="#并发概念" class="headerlink" title="并发概念"></a>并发概念</h1><p>并发编程中有很多术语概念相近，容易混淆。</p><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><p>并发和并行最关键的差异在于：是否同时发生。</p><ul><li>并发：指具备处理多个任务的能力，但不一定要求同时。</li><li>并行：指具备同时处理多个任务的能力。</li></ul><blockquote><p>要求以下几个人画一个圆形和一个方形：</p><ul><li>杨过：因为只有一只手，只能先画一个圆形，然后再画一个方形。— <strong>既不支持并行也不支持并发</strong></li><li>黄蓉：可以左手先画个圆形，然后右手画个方形，但无法两只手同时完成画圆形和方形。 — <strong>支持并发但不支持并行</strong></li><li>小龙女：精通左右互搏术，可以同时左手画圆形，右手画方形。 — <strong>支持并行</strong></li></ul></blockquote><h2 id="同步与异步（线程间调用）"><a href="#同步与异步（线程间调用）" class="headerlink" title="同步与异步（线程间调用）"></a>同步与异步（线程间调用）</h2><p>同步与异步表示的是一种<strong>协作方式</strong>，从全局角度看待进程之间的关系，关注的是消息通信机制。</p><ul><li>同步：调用者需要等待被调用者返回结果，才进行下一步操作；</li><li>异步：调用者发起调用后不需要等待被调用者返回结果，直接进行其他操作；被调用者依靠事件、回调机制等来通知调用者结果；</li></ul><h2 id="阻塞与非阻塞（线程内调用）"><a href="#阻塞与非阻塞（线程内调用）" class="headerlink" title="阻塞与非阻塞（线程内调用）"></a>阻塞与非阻塞（线程内调用）</h2><p>阻塞与非阻塞描述的是<strong>线程状态</strong>，在某个时刻，线程要么处于阻塞，要么处于非阻塞；</p><p>阻塞：指调用结果返回之前，线程被挂起；</p><p>非阻塞：指调用不能立刻得到结果时，当前线程继续进行其他操作；</p><blockquote><p>阻塞是实现同步的一种手段；</p></blockquote><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><ol><li>同步阻塞：小明家里穷，洗衣机不是自动化的，衣服洗好了也不会发出提示，而且人还笨；衣服放进洗衣机后，一直在旁边看洗衣机知道衣服洗完；</li><li>异步阻塞：经过辛苦挣钱，买了一台高级洗衣机，衣服洗好之后会响铃通知；衣服放进洗衣机后，一直在洗衣机旁边等待洗衣机洗完衣服响铃；</li><li>同步非阻塞：某天高级洗衣机坏掉了，只好临时再用下原来的洗衣机，但经过这么长时间使用洗衣机，总结了一些经验，在把衣服放到洗衣机开始洗之后，就回去做家务，隔一段时间回来看下洗衣机是否洗完衣服，循环往复直到衣服洗完；</li><li>异步非阻塞：高级洗衣机修好之后，经过经验总结，发现可以把衣服放到洗衣机启动后，可以放心的去做家务，等到洗衣机响铃后，过来晾衣服就可以了。</li></ol><blockquote><p>小明看洗衣机状态是否洗完，是为同步；</p><p>洗衣机响铃通知小明衣服是否洗完，是为异步；</p><p>小明将衣服放到洗衣机后，一直蹲在洗衣机旁等待衣服洗完，是为阻塞；</p><p>小明将衣服放到洗衣机后，就去做家务，是为非阻塞；</p></blockquote><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><ul><li>进程：进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动。进程是操作系统进行资源分配的基本单位。进程可视为一个正在运行的程序。</li><li>线程：线程是操作系统进行调度的基本单位；</li></ul><blockquote><ol><li><p>进程是操作系统分配资源的最小单位，线程是程序执行的最小单位</p></li><li><p>一个进程由一个或多个线程组成。</p></li><li><p>进程间相互独立，同一进程下的线程之间共享内存空间。</p></li></ol></blockquote><h2 id="竞态条件与临界区"><a href="#竞态条件与临界区" class="headerlink" title="竞态条件与临界区"></a>竞态条件与临界区</h2><ul><li>竞态条件：<code>Race Condition</code>，当两个线程竞争同一资源时，如果对资源的访问顺序敏感，则称存在竞态条件。</li><li>临界区：<code>Critical Sections</code>，导致竞态条件发生的代码区称为临界区。</li></ul><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><p>管程(<code>Monitor</code>)，指管理共享变量以及对共享变量的操作过程，让他们支持并发。</p><p>Java采用的是管程技术，<code>synchronized</code>关键字以及<code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code>这三个方法都是管程的组成部分。而管程和信号量是等价的，即可以用管程实现信号量，也可以用信号量实现管程。</p><h1 id="并发的特点"><a href="#并发的特点" class="headerlink" title="并发的特点"></a>并发的特点</h1><p>技术在进步，CPU、内存、IO设备的性能也在不断提高。但是，始终存在一个核心矛盾：CPU、内存、IO设备存在速度差异。CPU远快于内存，内存远快于IO设备。</p><p>木桶短板理论告诉我们：一只木桶能装多少水，取决于最短的那块模板。同理，计算机整体性能取悦于最慢的操作，即IO操作，所以单独提高CPU或者内存性能效果基本可以忽略。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210715170322359.png" alt="image-20210715170322359"><p>为了合理利用CPU的高性能，平衡三者之间的速度差异，计算机体系结构、操作系统】编译程序都做出了贡献，主要体现在：</p><ul><li>CPU增加缓存，以均衡与内存的速度差异</li><li>操作系统增加进程与线程，以分时复用CPU，进而均衡CPU与IO设备的速度差异</li><li>编译程序优化指令执行次序，使缓存能够得到更加合理的利用</li></ul><h2 id="并发的问题"><a href="#并发的问题" class="headerlink" title="并发的问题"></a>并发的问题</h2><p>任何事务都有两面性，并发也不例外。</p><p>优点：</p><ul><li>提升资源利用率</li><li>提升程序响应速度</li></ul><p>缺点：</p><ul><li>安全性问题</li><li>活跃性问题</li><li>性能问题</li></ul><h1 id="安全性问题"><a href="#安全性问题" class="headerlink" title="安全性问题"></a>安全性问题</h1><p>并发最重要的问题就是并发安全问题。</p><p>并发安全问题是指保证程序的正确性，使得并发处理结果符合预期。</p><p>并发安全需要保证以下几个基本特征：</p><ul><li>可见性：一个线程修改了某个共享变量后，其状态能够立即被其他线程知晓，通常被解释为将线程本地状态反映到主内存上，<code>volatile</code>就是负责保证可见性的。</li><li>原子性：相关操作不会中途被其他线程干扰，一般通过同步机制实现。</li><li>有序性：保证线程内串行语义，避免指令重排。</li></ul><h2 id="保证安全策略"><a href="#保证安全策略" class="headerlink" title="保证安全策略"></a>保证安全策略</h2><ul><li><p>阻塞同步</p><p>又叫互斥同步，是最常见的并发安全保障手段。通过同步保证多线程并发访问共享数据是，同一时刻只会被一个线程访问。</p><p>临界区、互斥量和信号量是主要的互斥实现方式，典型的案例是使用<code>synchronized</code>或<code>Lock</code>。</p><p>互斥同步中线程阻塞和唤醒会带来性能问题。互斥同步属于一种悲观并发策略，它认为只要不做正确的同步措施，就肯定会出现问题。</p></li><li><p>非阻塞同步</p><p>非阻塞同步采用基于冲突检测的乐观并发策略：先进行操作，如果没有其他线程竞争则成功，否则采取补偿措施（不断重试直至成功）。非阻塞同步需要硬件指令集支持，因为操作和冲突检测的原子性需要硬件来保证。</p><p>Java典型应用场景为：J.U.C包中的原子类(基于<code>Unsafe</code>类的CAS操作)</p></li><li><p>无同步</p><p>同步的目的是为了保证共享数据争用时的正确性，如果方法调用不涉及共享数据则不需要同步。</p><p>Java中的无同步方案有：</p><ul><li>可重入代码：也叫纯代码。如果一个方法的返回结果是可预测的，即输入数据确定则返回结果确定，那它就满足可重入性，当然也就是线程安全的。</li><li>线程本地存储：使用<code>ThreadLocal</code>为共享变量在每个线程中都创建一个本地副本，这个副本只能被当前线程访问，其他线程无法访问，那么线程也是安全的。</li></ul></li></ul><h1 id="活跃性问题"><a href="#活跃性问题" class="headerlink" title="活跃性问题"></a>活跃性问题</h1><h2 id="死锁（Deadlock）"><a href="#死锁（Deadlock）" class="headerlink" title="死锁（Deadlock）"></a>死锁（Deadlock）</h2><p><strong>什么是死锁？</strong></p><p>多个线程互相等待对象释放锁的情况叫做死锁。</p><p><strong>如何避免死锁？</strong></p><ol><li><p>按序加锁</p><p>当多个线程需要相同的锁时，如果按照不同的顺序加锁，则很容易发生死锁。</p><p>按照顺序加锁是一种有效的死锁预防机制。</p></li><li><p>超时释放锁</p><p>对锁配置一个超时时间是一个比较好的避免死锁的方法。</p></li><li><p>死锁检测</p><p>死锁检测是一个更好的死锁预防机制，，它主要针对不可能实现按序加锁且无法配置超时释放锁场景。</p><p>死锁检测成功后，有两种处理手段：</p><ul><li>释放所有锁：释放所有锁后，回退，等待一段随机时间后重试。但如果有大量线程竞争同一批锁，还是会重复触发死锁，无法从根本上解决竞争。</li><li>线程优先级：通过设置优先级，在发生死锁时，让部分线程回退规避竞争。</li></ul></li></ol><h2 id="活锁（Livelock）"><a href="#活锁（Livelock）" class="headerlink" title="活锁（Livelock）"></a>活锁（Livelock）</h2><p><strong>什么是活锁？</strong></p><p>活锁是一个递归场景，两个或更多的线程不断重复一个特定的代码逻辑。</p><p><strong>如何避免活锁？</strong></p><p>解决活锁的方案很简单，线程间避让时，尝试添加一个随机的等待时间即可。</p><h2 id="饥饿（Starvation）"><a href="#饥饿（Starvation）" class="headerlink" title="饥饿（Starvation）"></a>饥饿（Starvation）</h2><p><strong>什么是饥饿？</strong></p><ul><li>高优先级线程占用所有低优先级线程的CPU时间</li><li>线程被永久堵塞在一个等待进入同步块的状态</li><li>线程等待一个本身处于永久等待完成的对象</li></ul><p><strong>如何解决饥饿？</strong></p><p>Java不可能实现100%的公平性，但我们可以通过同步结构在线程间提升公平性。具体有以下方案：</p><ul><li>保证资源充足</li><li>尽可能公平分配资源</li><li>避免持有锁的线程长时间执行</li></ul><blockquote><p>三个方案中，方案1和方案3适用场景有限。方案2适用场景相对较广。</p><p>在并发编程中，主要通过公平锁来实现公平分配资源。所谓公平锁，是一种先来后到的方案。根据线程等待顺序按序分配资源。</p></blockquote><h1 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h1><p>并发执行一定比串行执行快吗？线程越多执行就越快吗？</p><p>其实，并发并不一定总是比串行快，因为创建线程和线程上下文切换会产生性能开销。</p><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p><strong>什么是上下文切换？</strong></p><p>当CPU从执行一个线程切换到另一个线程时，CPU需要保存当前线程的本地数据、程序指针等状态，并加载下一个要执行的线程的本地数据、程序指针等。这个开关就被称为“上下文切换”。</p><p><strong>减少上下文切换方法</strong></p><ul><li>无锁并发编程：多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一些办法来避免使用锁，如将数据的ID按照哈希算法分区，不同线程处理不同分区的的数据。</li><li>CAS算法：Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li><li>使用最少线程：避免创建不需要的线程。</li><li>使用协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</li></ul><h2 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h2><p><strong>什么是资源限制？</strong></p><p>资源限制是指在进行并发编程时，程序的执行速度受限于计算机硬件资源或软件资源。</p><p><strong>资源限制引发的问题</strong></p><p>在并发编程中，将代码执行速度加快的原则是将代码中串行执行的部分编程并行执行，但如果将某段串行的代码并发执行，因为受限于资源，仍然在串行执行，这时候程序不仅不会加快执行，反而会更慢，因为增加了上下文切换和资源调度的时间。</p><p><strong>如何解决资源限制的问题</strong></p><p>在资源限制情况下进行并发编程，根据不同的资源限制调整程序的并发度。</p><ul><li>对于硬件资源限制，可以考虑使用集群并行执行程序。</li><li>对于软件资源限制，可以考虑使用资源池进行资源复用。</li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>并发编程可以总结为三个核心问题：分工、同步、互斥。</p><ul><li>分工：指如何高效地拆解任务并分配给线程</li><li>同步：指线程之间如何协作</li><li>互斥：指保证同一时刻只允许有一个线程访问共享资源</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：线程</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-15-xian-cheng/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-15-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h1><h2 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h2><p>简言之，进程可视为一个正在运行的程序。它是系统运行程序的基本单位，因此进程是动态的。进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动。进程是操作系统进行资源分配的基本单位。</p><h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><p>线程是操作系统进行调度的基本单位。线程也叫轻量级进程，在一个进程里可以创建多个线程，这些线程都拥有各自的计数器、堆栈和局部变量等属性，并且能够访问共享的内存变量。</p><h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><p>创建线程有以下三种方式：</p><ul><li>继承<code>Thread</code>类</li><li>实现<code>Runnable</code>接口</li><li>实现<code>Callable</code>接口</li></ul><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>通过继承<code>Thread</code>类创建线程的步骤：</p><ol><li>定义<code>Thread</code>类的子类，并覆写该类的<code>run</code>方法。<code>run</code>方法的方法体就代表了线程要完成的任务，因此把<code>run</code>方法称为执行体。</li><li>创建<code>Thread</code>子类的实例，即创建了线程对象。</li><li>调用线程对象的<code>start</code>方法来启动该线程。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Print "</span> <span class="token operator">+</span> num <span class="token operator">+</span><span class="token string">" time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"Thread A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MyThread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"Thread B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h2><p>实现<code>Runnable</code>接口优于继承<code>Thread</code>类，因为：</p><ol><li>Java不支持多重继承，所有的类都只允许继承一个父类，可以实现多个接口。如果继承了<code>Thread</code>类就无法继承其他类，这不利于扩展。</li><li>类可能只要求可执行就行，继承整个<code>Thread</code>类开销过大。</li></ol><p>通过实现<code>Runnable</code>接口创建线程步骤：</p><ol><li>定义<code>Runnable</code>接口的实现类，并覆写该接口的<code>run</code>方法。该<code>run</code>方法的方法体同样是该线程的线程执行体。</li><li>创建<code>Runnable</code>实现类的实例，并以此实例作为<code>Thread</code>的<code>target</code>来创建<code>Thread</code>对象，该<code>Thread</code>对象才是真正的线程对象。</li><li>调用线程对象的<code>start</code>方法来启动该线程。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableDemo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"Thread A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MyThread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"Thread B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Print "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">" times!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      num<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Callable、Future、FutureTask"><a href="#Callable、Future、FutureTask" class="headerlink" title="Callable、Future、FutureTask"></a>Callable、Future、FutureTask</h2><p>继承<code>Thread</code>类和实现<code>Runnable</code>接口这两种创建线程的方式都是没有返回值的。所以，线程执行结束后，无法看到执行结果。</p><p>为了解决这个问题，JDK5后，提供了<code>Callable</code>接口和<code>Future</code>接口，通过它们，可以在线程执行结束后，返回执行结果。</p><h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><p><code>Callable</code>接口只声明了一个方法，这个方法叫做<code>call()</code>。<code>Callable</code>接口一般配合<code>ExecutorService</code>类来完成调用。</p><h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><p><code>Future</code>就是对于具体的<code>Callable</code>任务的执行结果进行取消、查询是否完成、获取结果。必要时可以通过<code>get</code>方法获取执行结果，该方法会阻塞直到任务返回结果。</p><h3 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h3><p><code>FutureTask</code>类实现了<code>RunnableFuture</code>接口，<code>RunnableFuture</code>继承了<code>Runnable</code>接口和<code>Future</code>接口。</p><p>所以，<code>FutureTask</code>既可以作为<code>Runnable</code>被线程执行，又可以作为<code>Future</code>得到<code>Callable</code>的返回值。事实上，<code>FutureTask</code>是<code>Future</code>接口的一个唯一实现类。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>通过<code>Callable</code>接口创建线程的步骤：</p><ol><li>创建<code>Callable</code>接口的实现类，并实现<code>call</code>方法。该<code>call</code>方法将作为线程执行体，并且有返回值。</li><li>创建<code>Callable</code>实现类的实例，使用<code>FutureTask</code>类来包装<code>Callable</code>对象，该<code>FutureTask</code>对象封装了该<code>Callable</code>对象的<code>call</code>方法的返回值。</li><li>使用<code>FutureTask</code>对象作为<code>Thread</code>对象的<code>target</code>创建并启动新线程。</li><li>调用<code>FutureTask</code>对象的<code>get</code>方法来获得线程执行结束后的返回值。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableDemo01</span> <span class="token punctuation">{</span>  publci <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> call01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>call01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ft<span class="token punctuation">,</span> <span class="token string">"Callable Thread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Task cost : "</span> <span class="token operator">+</span> ft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000000</span> <span class="token operator">+</span> <span class="token string">" ms !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e <span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" print "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">" times! "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="线程基本使用"><a href="#线程基本使用" class="headerlink" title="线程基本使用"></a>线程基本使用</h1><p>线程（<code>Thread</code>）常用方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>run()</td><td>线程的执行实体</td></tr><tr><td>start()</td><td>线程的启动方法</td></tr><tr><td>currentThread()</td><td>返回对当前正在执行的线程对象的引用</td></tr><tr><td>setName()</td><td>设置线程名称</td></tr><tr><td>getName()</td><td>获取线程名称</td></tr><tr><td>setPriority()</td><td>设置线程优先级，范围为[1,10]；默认为5</td></tr><tr><td>getPriority()</td><td>获取线程优先级</td></tr><tr><td>setDaemon()</td><td>设置线程为守护线程</td></tr><tr><td>isDaemon()</td><td>判断线程是否为守护线程</td></tr><tr><td>isAlive()</td><td>判断线程是否启动</td></tr><tr><td>interrupt()</td><td>终端一个线程的运行状态</td></tr><tr><td>interrupted()</td><td>测试当前线程是否已被中断。该方法也可以清楚线程的中断状态</td></tr><tr><td>join()</td><td>可以使一个线程强制运行，线程强制运行期间，其他线程无法运行，必须等待此线程运行完成之后才可以继续执行</td></tr><tr><td>Thread.sleep()</td><td>静态方法，将当前正在执行的线程休眠</td></tr><tr><td>Thread.yield(0)</td><td>静态方法，将正在执行的线程暂停，让其他线程执行</td></tr></tbody></table><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><p>使用<code>Thread.sleep</code>方法可以使当前正在执行的线程进入休眠状态。该方法接收一个整数值，单位为毫秒。</p><h2 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h2><p><code>Thread.yield</code>方法的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其他线程来执行。该方法是针对线程调度器的一个建议，而且也只有建议具有相同优先级的其他线程可以运行。</p><h2 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h2><p>安全地终止线程有两种方法：</p><ul><li>定义<code>volatile</code>标志位，在<code>run</code>方法中使用标志位控制线程终止。</li><li>使用<code>interrupt</code>方法和<code>Thread.interrupted</code>方法配合使用来控制线程终止。</li></ul><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p><strong>什么是守护线程？</strong></p><ul><li>守护线程是在后台执行并且不会组织JVM终止的线程。当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。</li><li>与守护线程对应的，叫做用户线程，也就是非守护线程。</li></ul><p><strong>为什么需要守护线程？</strong></p><p>守护线程的优先级比较低，用于为系统中的其它对象和线程提供服务。典型的应用就是垃圾回收器。</p><p><strong>如何使用守护线程？</strong></p><ul><li>使用<code>isDaemon</code>方法判断线程是否为守护线程。</li><li>可以使用<code>setDaemon</code>方法设置线程为守护线程。<ul><li>正在运行的用户线程无法设置为守护线程，所以<code>setDaemon</code>必须在<code>thread.start</code>方法之前设置，否则会抛出<code>illegalThreadStateException</code>异常。</li><li>一个守护线程创建的子线程依然是守护线程。</li></ul></li></ul><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p>当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。</p><h2 id="wait-notify-notifyAll"><a href="#wait-notify-notifyAll" class="headerlink" title="wait/notify/notifyAll"></a>wait/notify/notifyAll</h2><ul><li><code>wait</code>：自动释放当前线程占有的对象锁，并请求操作系统挂起当前线程，让线程从<code>Running</code>状态转入<code>Waiting</code>状态，等待<code>notify/notifyAll</code>来唤醒。如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行<code>notify</code>或<code>notifyAll</code>来环形挂起的线程，造成死锁。</li><li><code>notify</code>：唤醒一个正在<code>Waiting</code>状态的线程，并让它拿到对象锁，具体环形哪一个线程由JVM控制。</li><li><code>notifyAll</code>：唤醒所有正在<code>Waiting</code>状态的线程，唤醒的线程可能会产生锁竞争。</li></ul><blockquote><p>基本知识点：</p><ol><li>每一个Java对象都有一个与之对应的监视器（<code>Monitor</code>）</li><li>每一个监视器里面都有一个<strong>对象锁</strong>、一个<strong>等待队列</strong>、一个<strong>同步队列</strong></li><li><code>wait</code>、<code>notify</code>、<code>notifyAll</code>属于<code>Obejct</code>类中的方法；</li><li><code>wait</code>、<code>notify</code>、<code>notifyAll</code>只能用在<code>synchronized</code>方法或者<code>synchronized</code>代码块中，否则会抛出<code>IllegalMonitorStateException</code></li></ol></blockquote><p>生产者、消费者模型示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author : Semon * @Date : Created in 2021/7/16 10:36 * @ Description: Thread demo * @ Modified by : * @ Version: v1.0 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerAndConsumerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">QUEUE_SIZE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">QUEUE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token string">"Producer_A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token string">"Producer_B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token string">"Consumenr_A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token string">"Consumer_B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span><span class="token punctuation">{</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Queue is empty,wait for data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            queue<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            queue<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//move head element</span>                    queue<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"get an element from queue, the queue has "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" element currently."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">QUEUE_SIZE</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the queue capacity is full, pls wait a minute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        queue<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        queue<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"insert an element to the queue. current "</span> <span class="token operator">+</span>                        <span class="token string">"capacity is "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>在线程操作中，可以使用<code>join</code>方法让一个线程强制运行，线程强制运行期间，其他线程无法运行，必须等待此线程完成之后才尅继续执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadJoinDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MyThread</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">,</span><span class="token string">"mythread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>          t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main Thread run ---"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>currentThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" run, i = "</span> <span class="token operator">+</span> i <span class="token string">" times."</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道输入/输出流与普通的文件输入/输出流或者网络输入/输出流不同之处在于，它主要用于线程间的数据传输，传输媒介为内存。管道输入/输出流主要包括如下4种具体实现：</p><ul><li><code>PipedOutputStream</code></li><li><code>PipedInputStream</code></li><li><code>PipedReader</code></li><li><code>PipedWriter</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PipedDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">PipedWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PipedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> printThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Print</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"PrintThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>receive <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>receive<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Print</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">PipedReader</span> in <span class="token punctuation">;</span>    <span class="token class-name">Print</span><span class="token punctuation">(</span><span class="token class-name">PipedReader</span> in <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>in <span class="token operator">=</span> in<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>receive <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> receive<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h1><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210716141154264.png" alt="image-20210716141154264"><p><code>java.lang.Thread.State</code>中定义了6种不同的线程状态，在给定的某一时刻，线程必定处于其中某一个状态。</p><p>以下为各状态说明：</p><ul><li><code>New</code>：新建，尚未调用<code>start</code>方法的线程处于此状态。该状态意味着，创建的线程尚未启动。</li><li><code>Runnable</code>：就绪，已经调用了<code>start</code>方法的线程处于此状态。该状态意味着，线程已经在JVM中运行，但在操作系统层面，它可能处于运行状态，也可能处于等待资源调度。</li><li><code>Blocked</code>：阻塞，线程处于被阻塞状态。此状态意味着，线程在等待<code>synchronized</code>的隐式锁（<code>Monitor lock</code>）。</li><li><code>Waiting</code>：等待。此状态意味着，线程无限期等待，知道被其他线程显式的唤醒。阻塞与等待的区别在于，阻塞是被动的，获取到<code>synchronized</code>隐式锁即可转换为就绪状态；而等待是主动的，通过调用<code>Object.wait</code>等方法进入，只能等待其他线程进行唤醒。</li><li><code>Timed waiting</code>：定时等待。此状态意味着，无需等待其它线程显式唤醒，在一定时间之后会被系统自动唤醒。</li><li><code>Terminated</code>：终止，线程执行完<code>run</code>方法，或因异常退出了<code>run</code>方法。此状态意味着，线程结束了生命周期。</li></ul><h1 id="线程常见问题"><a href="#线程常见问题" class="headerlink" title="线程常见问题"></a>线程常见问题</h1><h2 id="yield方法"><a href="#yield方法" class="headerlink" title="yield方法"></a>yield方法</h2><ul><li><code>yield</code>方法会让线程从<code>Running</code>状态转入<code>Runnable</code>状态。</li><li>调用了<code>yield</code>方法后，只有与当前线程相同或更高优先级的<code>Runnable</code>状态线程才会获得执行机会。</li></ul><h2 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h2><ul><li><code>sleep</code>方法会让线程从<code>Running</code>状态转入<code>waiting</code>状态。</li><li><code>sleep</code>方法需要指定等待时间，超过等待时间后，JVM会自动将线程从<code>waiting</code>状态转入<code>Runnable</code>状态。</li><li>调用了<code>sleep</code>方法后，任何线程都可能得到执行机会。</li><li><code>sleep</code>方法不会释放“锁标记”，即如果存在<code>synchronized</code>同步代码块，其他线程仍然无法访问共享数据。</li></ul><h2 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h2><ul><li><code>join</code>方法会让线程从<code>Running</code>状态转入<code>Waiting</code>状态。</li><li>当调用了<code>join</code>方法后，当前线程必须等待调用<code>join</code>方法的线程结束后才能继续执行。</li></ul><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>在Java中，即便对线程设置了优先级，也无法保证高优先级的线程一定比低优先级的线程先执行。</p><p>线程优先级依赖于操作系统的支持，然而，不同的操作系统支持的线程优先级并不相同，不能很好的与Java中的线程优先级一一对应。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：并发核心</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-16-bing-fa-he-xin/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-16-bing-fa-he-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="J-U-C简介"><a href="#J-U-C简介" class="headerlink" title="J.U.C简介"></a>J.U.C简介</h1><p>Java的<code>java.util.concurrent</code>包（简称<code>J.U.C</code>）提供了大量并发工具类，是Java并发能力的主要体现。从功能上，大致可以分为：</p><ul><li>原子类：<code>AtomicInteger</code>、<code>AtomicIntegerArray</code>、<code>AtomicReference</code>、<code>AtomicStampedReference</code>等</li><li>锁：<code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code>等</li><li>并发容器：<code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code>、<code>CopyOnWriteArraySet</code>等</li><li>阻塞队列：<code>ArrayBlockingQueue</code>、<code>LinkedBlockingQueue</code>等</li><li>非阻塞队列：<code>ConcurrentLinkedQueue</code>、<code>LinkedTransferQueue</code>等</li><li><code>Executor</code>框架：<code>ThreadPoolExecutor</code>、<code>Executors</code>等</li></ul><p><code>J.U.C</code>包中的工具类是基于<code>synchronized</code>、<code>volatile</code>、<code>CAS</code>、<code>ThreadLocal</code>这样的并发核心机制打造的。</p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><code>synchronized</code>是Java的关键字，是利用锁的机制来实现互斥同步。</p><p><code>synchronized</code>可以保证同一时刻，只有一个线程可以执行某个方法或代码块。</p><p><code>synchronized</code>是JVM的内置特性，所有版本JDK均提供支持。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>同步实例方法：对于普通同步方法，锁为当前实例对象；</li><li>同步静态方法：对于静态同步方法，锁为当前类的<code>Class</code>对象；</li><li>同步代码块：对于同步代码块，锁是<code>synchronized</code>后小括号中显式指定的对象；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> balance<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> seq <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//同步实例方法，本例因为涉及多个Account对象，所以需要使用对象公用锁</span>  <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Account</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> amt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">&gt;</span> amt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">-=</span> amt<span class="token punctuation">;</span>    target<span class="token punctuation">.</span>balance <span class="token operator">+=</span> amt<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment">//同步静态方法，不需要指明锁，默认为当前类的Class对象</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    seq<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">//同步代码块，需要显式执行同步锁，该锁对象可以是对象实例或Class实例</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      seq<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><code>synchronized</code>代码块是由一对<code>monitorenter</code>和<code>monitorexit</code>指令实现的，<code>Monitor</code>对象是同步的基本实现单元。在JDK6之前，<code>Monitor</code>的实现完全依靠操作系统内部的互斥锁，因为需要进行用户态到内核态的切换，所以同步操作是一个无差别的重量级操作。</p><p><code>synchronized</code>明确指定了对象参数，则锁为该对象的引用；如果没有明确指定，则根据<code>synchronized</code>修饰的方法类型来判断，静态方法锁为该类的<code>Class</code>对象；实例方法锁为该对象实例。</p><p><code>synchronized</code>同步块对同一线程来说是可重入的，不会导致锁死问题。</p><p><code>synchronized</code>同步块是互斥的，即已进入同步代码块的线程执行完成前，会阻塞其他视图进入的线程。</p><p><strong>同步代码块</strong></p><p><code>synchronized</code>在修饰同步代码块时，是由<code>monitorenter</code>和<code>monitorexit</code>指令来实现的。进入<code>monitorenter</code>指令后，线程将持有<code>Monitor</code>对象，退出<code>monitorenter</code>指令后，线程释放<code>Monitor</code>对象。</p><p><strong>同步方法</strong></p><p><code>synchronized</code>修饰同步方法时，会设置一个<code>ACC_SYNCHRONIZED</code>标志。当方法调用时，调用指令将会检查该方法是否被设置<code>ACC_SYNCHRONIZED</code>访问标志；如果设置了该标志，执行线程将先持有<code>Monitor</code>对象，然后在执行方法。在该方法运行期间，其他线程将无法获取到<code>Monitor</code>对象，当方法执行完成后，再释放<code>Monitor</code>对象。</p><p><strong>Monitor</strong></p><p>每个对象实例都会有一个<code>Monitor</code>，<code>Monitor</code>可以和对象一起创建、销毁。<code>Monitor</code>是由<code>ObjectMonitor</code>实现，而<code>ObjectMonitor</code>是由C++的<code>ObjectMonitor.hpp</code>文件实现。</p><p>当多个线程同时访问一段同步代码时，多个线程会先被存放在<code>EntryList</code>集合中，处于<code>block</code>状态的线程，都会被加入该列表。接下来当线程获取到对象的<code>Monitor</code>时，<code>Monitor</code>是依靠底层操作系统的<code>Mutex Lock</code>来实现互斥的，线程申请<code>Mutex</code>成功，则持有该<code>Mutex</code>，其他线程将无法获取到该<code>Mutex</code>。如果线程调用<code>wait()</code>方法，就会释放当前持有的<code>Mutex</code>，并且该线程会进入<code>WaitSet</code>集合中，等待下一次被唤醒。如果当前线程顺利执行完毕，也将释放<code>Mutex</code>。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><blockquote><p>JDK6以，<code>synchronized</code>做了大量的优化，其性能已经与<code>Lock</code>，<code>ReadWriteLock</code>基本持平。</p></blockquote><p><strong>Java对象头</strong></p><p>在JDK6的JVM中，对象实例在堆内存中被分为了三个部分：对象头、实例数据和对齐填充。其中Java对象头由<code>Mark Word</code>、指向类的指针以及数组长度三部分组成。</p><p><code>Mark Word</code>记录了对象和锁有关的信息。<code>Mark Word</code>在64位JVM中的长度是64bit，64位JVM的存储结构如下：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210719115231932.png" alt="image-20210719115231932"><p>锁升级功能主要依赖于<code>Mark Word</code>中的锁标志位和是否偏向锁标志位，<code>synchronized</code>同步锁就是从偏向锁开始的，锁着竞争越来越激烈，偏向锁升级到轻量级锁，最终升级到重量级锁。</p><p>JDK6引入了偏向锁和轻量级锁，从而让<code>synchronized</code>拥有的四个状态：</p><ul><li>无锁状态(unlocked)</li><li>偏向锁状态(biasble)</li><li>轻量级锁状态(lightweight locked)</li><li>重量级锁状态(inflated)</li></ul><p>当JVM检测到不同的竞争状况时，会自动切换到适合的锁实现。</p><p>当没有竞争出现时，默认使用偏向锁。JVM利用CAS操作(compare and swap)，在对象头上的<code>Mark Word</code>部分设置线程ID，以表示这个对象偏向于当前线程，随意并不涉及真正的互斥锁。这样做的假设是基于在很多应用场景中，大部分对象生命周期中最多会被一个线程锁定，使用偏向锁可以降低无竞争开销。</p><p>如果有另外的线程视图锁定有个已经被偏向过的对象，JVM就需要撤销偏向锁，并切换到轻量级锁实现。轻量级锁依赖CAS操作<code>Mark Word</code>来试图获取锁，如果重试成功，就使用普通的轻量级锁；否则，进一步升级为重量级锁。</p><p><strong>偏向锁</strong></p><p>偏向锁的思想是偏向于第一个获取锁对象的线程，这个线程在之后获取该锁就不在需要进行同步操作，甚至连CAS操作也不再需要。</p><p><strong>轻量级锁</strong></p><p>轻量级锁是相对于传统的重量级锁而言，它使用CAS操作来避免重量级锁使用互斥量的开销。对于绝大部分的锁，在整个同步周期内都是不存在竞争的，因此也就不需要使用互斥量进行同步，可以先采用CAS操作进行同步，如果CAS失败了再改用互斥量进行同步。</p><p>当尝试获取一个锁对象时，如果锁对象标记为<code>0|01</code>，说明锁对象的锁为未锁定状态(unlocked)；此时虚拟机在 当前线程的虚拟机栈中创建<code>Lock Record</code>，然后使用CAS操作将对象的<code>Mark Word</code>更新为<code>Lock Redord</code>指针；如果CAS操作成功了，那么线程就获取了该对象上的锁，并且对象的<code>Mark Word</code>的锁标记变更为<code>00</code>，表示该对象处于轻量级锁状态。</p><p><strong>锁消除|锁粗化</strong></p><p>出了锁升级优化，Java还使用了编译器对锁进行优化。</p><ul><li><p>锁消除</p><p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。</p><p>JIT编译器在动态编译同步块的时候，借助了一种被称为逃逸分析的技术，来判断同步块使用的锁对象是否只能够被一个线程访问，而没有被发布到其他线程。确认结果为肯定，则JIT编译器在编译这个同步块的时候就不会生成<code>synchronized</code>锁表示的锁的申请与释放机器码，即消除了锁的使用。在JDK7之后的版本，该操作自动实现。</p></li><li><p>锁粗化</p><p>锁粗化与锁消除类似，就是在JIT编译器动态编译时，如果发现几个相邻的同步块使用的是同一个锁实例，那么JIT编译器会把几个同步块合并为一个大的同步块，从而避免一个线程频繁申请/释放锁带来性能开销。</p><p>如果一系列的连续操作都对同一个对象反复加锁与解锁，频繁的加锁操作会导致额外的性能损耗。</p></li></ul><p><strong>自旋锁</strong></p><p>互斥同步进入阻塞状态的开销都很大，因尽量避免。在许多应用中，共享数据的锁定状态只会持续很短的一段时间。自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果这段时间内能获取到锁，则可以避免进入阻塞状态。</p><p>自旋锁虽然能避免进行阻塞状态从而减少开销，但他需要进行忙循环操作占用CPU时间，它只适用于共享数据的锁定状态很短的场景。</p><p>JDK6引入了自适应的自旋锁，自适应意味着自旋的次数不在固定，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p><code>volatile</code>是轻量级的<code>synchronized</code>，它在多处理器开发中保证了共享变量的“可见性”。</p><p>被<code>volatile</code>修饰的变量，具备以下特性：</p><ul><li>线程可见性：保证了不同线程对这个变量进行操作时的可见性，即一个修改了某个共享变量，另外一个线程能读取到这个修改的值</li><li>禁止指令重编排</li><li>不保证原子性</li></ul><p>线程安全需要具备：可见性、原子性、顺序性。<code>volatile</code>不保证原子性，所以决定了它不能彻底地保证线程安全。</p><h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><p>如果<code>volatile</code>变量修饰符使用恰当的话，它比<code>synchronized</code>的使用和执行成本要低，因为它不会引起线程上下文切换和调度。但是<code>volatile</code>无法替代<code>synchronized</code>，因为<code>volatile</code>无法保证操作的原子性。</p><p>通常来说，<code>volatile</code>必须具备以下两个条件：</p><ul><li>对变量的写操作不依赖于当前值</li><li>该变量没有包含在具有其他变量的表达式中</li></ul><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>使用<code>volatile</code>关键字时，编译后的代码会多出一个<code>lock</code>前缀指令。<code>lock</code>前缀指令实际上相当于一个内存屏障，内存屏障会提供3个功能：</p><ul><li>确保指令重排序时不会将其后指令排到内存屏障之前，也不会将前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</li><li>强制将对缓存的修改操作立即写入主存；</li><li>写操作会导致其他CPU中对应的缓存行无效；</li></ul><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>互斥同步是最常见的并发正确性保障手段。</p><p>互斥同步最主要的问题是线程阻塞和唤醒所带来的性能问题，因此互斥同步也内称为阻塞同步。互斥同步属于一种悲观并发策略，总是认为只要不做正确的同步措施，就肯定会出问题。无论共享数据是否真的会出现竞争，它都要进行加锁、用户态核心态切换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p><p>随着硬件指令集发展，我们可以使用基于冲突检测的乐观并发策略：先进行操作，如果没有其他线程争用共享数据，则操作成功；否则采用补偿措施)(不断重试，直至成功为止)。乐观并发策略的许多实现都不需要将线程阻塞，因此这种同步操作称之为非阻塞同步。</p><p>为什么乐观并发策略需要硬件指令集发展才能进行？因为乐观并发策略需要操作和冲突检测这两个步骤具备原子性，而这点需要由硬件来完成，而硬件支持的原子性操作最典型的按理为：CAS.</p><p>CAS—<code>compare and swap</code>，字面意思为比较并交换。CAS有3个操作数，分别为内存值M，期望值E以及更新值U。当且仅当内存值M与期望值E相同时，将内存值M修改为U，否则什么都不做。</p><h3 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h3><p>CAS适用于线程冲突较少的情况。</p><p>CAS典型应用场景：</p><ul><li>原子类</li><li>自旋锁</li></ul><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>Java主要利用<code>Unsafe</code>这个类提供的CAS操作。<code>Unsafe</code>的CAS依赖的是JVM针对不同的操作系统实现的硬件指令<code>Atomic::cmpxchg</code>。<code>Atomic::cmpxchg</code>的实现使用了汇编的CAS操作，并使用CPU提供的<code>lock</code>信号保证其原子性。</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>任何事务都是有利有弊，CAS也存在以下问题：</p><ul><li>ABA问题</li><li>循环时间长开销大</li><li>只能保证一个共享变量原子性</li></ul><h4 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h4><p>如果一个变量初次读取的时候值为A，当该值变更为B后再次更新为A，那么CAS操作会误认为它从来没有发生过改变。</p><p>J.U.C包提供了一个带有标记的原子类引用<code>AtomicStampedReference</code>来解决这个问题，他可以通过控制变量值的版本来保证CAS的正确性。大部分情况下ABA问题不会影响程序并发的正确性，如果需要解决ABA问题，则改用传统的互斥同步可能会比原子类更高效。</p><h4 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a>循环时间长开销大</h4><p>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</p><p>如果JVM能支持处理器提供的<code>pause</code>指令那么效率会有一定的提成，<code>pause</code>指令有两个作用：</p><ul><li>延迟流水线执行指令(de-pipeline)。使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。</li><li>避免在退出循环的时候因内存顺序冲突(memory order violation)而引起CPU流水线被清空(CPU pipeline flush),从而提高CPU的执行效率。</li></ul><h4 id="只能保证一个共享变量原子性"><a href="#只能保证一个共享变量原子性" class="headerlink" title="只能保证一个共享变量原子性"></a>只能保证一个共享变量原子性</h4><p>当一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。</p><p>或者通过取巧的办法，将多个共享变量合并成一个共享变量来操作。从JDK5开始提供了<code>AtomicReference</code>类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p><code>ThreadLocal</code>是一个存储线程本地副本的工具类。</p><p>要保证线程安全，不一定非要进行同步。同步只是保证共享数据争用时的正确性，如果一个方法本来就不涉及共享数据，那么自然无须同步。</p><blockquote><p>Java中的无同步方案有：</p><ul><li>可重入代码：也叫纯代码。如果一个方法，它的返回结果是可以预测的，即只要输入了相同的数据，就会返回相同的结果，那么就满足可重入性，当然也是线程安全的。</li><li>线程本地存储：使用<code>ThreadLocal</code>为共享变量在每个线程中都创建了一个本地副本，这个副本只能被当前线程访问，其他线程无法访问，那么自然是线程安全的。</li></ul></blockquote><h3 id="应用-3"><a href="#应用-3" class="headerlink" title="应用"></a>应用</h3><p><code>ThreadLocal</code>常用于防止对可变的单例变量或全局变量进行共享。典型应用场景有：管理数据库了解、Session。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ThreadLoacl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><code>get</code>：用于获取<code>ThreadLocal</code>在当前线程找那个保存的副本；</li><li><code>set</code>：用于设置当前线程中变量的副本；</li><li><code>remove</code>：用于删除当前线程中变量的副本。如果此线程局部变量随后被当前线程读取，则其值将通过调用其<code>initialValue</code>方法重新初始化，除非其值由中间线程中的当前线程设置。这可能会导致当前线程中多次调用<code>initialValue</code>方法；</li><li><code>initialValue</code>：为<code>ThreadLocal</code>设置默认的<code>get</code>初始值，需要重写<code>initialValue</code>方法；</li></ul></blockquote><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p><strong>存储结构</strong></p><p><code>Thread</code>类中维护着一个<code>ThreadLocal.ThreadLocalMap</code>类型的成员<code>threadLocals</code>。这个成员就是用来存储当前线程独占的变量副本。</p><p><code>ThreadLocalMap</code>是<code>ThreadLocal</code>的内部类，它维护者一个<code>Entry</code>数组，<code>Entry</code>继承了<code>WeakReference</code>，所以是弱引用，<code>Entry</code>用于保存键值对，其中：</p><ul><li><code>key</code>是<code>ThreadLocal</code>对象；</li><li><code>value</code>是传递进来的对象（变量副本）；</li></ul><p><strong>如何解决<code>Hash</code>冲突</strong></p><p><code>ThreadLocalMap</code>虽然是类似<code>Map</code>结构的数据结构，但它并没有实现<code>Map</code>接口。它不支持<code>Map</code>接口中的<code>next</code>方法，这意味着<code>ThreadLocalMap</code>中解决Hash冲突的方式并非拉链表方式。</p><p>实际上，<code>ThreadLocalMap</code>采用线性探测的方式来解决Hash冲突。所谓线程探测，就是根据初始<code>key</code>的<code>hashcode</code>值确定元素在<code>table</code>数组中的位置，如果发现这个位置上已经被其他的<code>key</code>值占用，则利用固定的算法寻找一定步长的下个位置，依次判断，直至找到能够存放的位置。</p><p><strong>内存泄露问题</strong></p><p><code>ThreadLocalMap</code>的<code>Entry</code>继承了<code>WeakReference</code>，所以它的<code>key（ThreadLocal对象）</code>是弱引用，而<code>value</code>是强引用。</p><ul><li>如果<code>ThreadLocal</code>对象没有外部强引用来引用它，那么<code>ThreadLocal</code>对象会在下次GC时被回收。</li><li>若<code>Entry</code>中的<code>key</code>已经被回收，但是<code>value</code>由于是强引用不会被垃圾回收器回收。如果创建<code>ThreadLocal</code>的线程一直持续运行，那么<code>value</code>一直得不到回收，产生内存泄露。</li></ul><blockquote><p>避免内存泄露的方式为：使用<code>ThreadLocal</code>的<code>set</code>方法后，显示的调用<code>remove</code>方法</p></blockquote><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><code>ThreadLocal</code>适用于变量在线程间间隔，而在方法或类间共享的场景。</p><blockquote><p>线程池会重用固定的几个线程，一旦线程重用，那么很可能首次从<code>ThreadLocal</code>中获取的值是之前其他用户请求遗留的值。这时候，<code>ThreadLocal</code>中的用户信息就是其他用户的信息。所以没有显示开启多线程也可能会存在线程安全问题。使用<code>ThreadLocal</code>工具来存放数据时，切记要显示地清空设置的数据。</p></blockquote><h2 id="InheritableThreadLocal"><a href="#InheritableThreadLocal" class="headerlink" title="InheritableThreadLocal"></a>InheritableThreadLocal</h2><p><code>InheritableThreadLocal</code>类是<code>ThreadLocal</code>类的子类。</p><p><code>ThreadLocal</code>中每个线程拥有它自己独占的数据。与<code>ThreadLocal</code>不同的是，<code>InheritableThreadLocal</code>允许一个线程以及该线程创建的所有子线程都可以访问它保存的数据。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：并发锁</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-17-bing-fa-suo/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-17-bing-fa-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="并发锁简介"><a href="#并发锁简介" class="headerlink" title="并发锁简介"></a>并发锁简介</h1><p>确保线程安全最常见的做法是利用锁机制（<code>Lock</code>、<code>synchronized</code>）来对共享数据做互斥同步，这样在同一个时刻，只有一个线程可以执行某个方法或者代码块，那么操作必然是原子性的，线程安全的。</p><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可重入锁，顾名思义，指的是线程可以重复获取同一把锁。即同一个线程在外层方法获取 了锁，在进入内层方法会自动获取锁。</p><p>可重入锁可在一定程度 上避免死锁。</p><ul><li><code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code>是可重入锁。</li><li><code>synchronized</code>也是一个可重入锁。</li></ul><h2 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h2><ul><li>公平锁：公平锁是指多线程按照申请锁的顺序来获取锁。</li><li>非公平锁：非公平锁是指多线程不按照申请锁的顺序来获取锁。这就可能出现优先级反转或者饥饿现象。</li></ul><p>公平锁为 了保证线程申请顺序，势必要付出一定的性能代价，因此其吞吐量一般低于非公平锁。</p><p>公平锁与非公平锁在Java中的典型实现：</p><ul><li><code>synchronized</code>只支持非公平锁。</li><li><code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code>，默认是非公平锁，但支持公平锁。</li></ul><h2 id="独享锁与共享锁"><a href="#独享锁与共享锁" class="headerlink" title="独享锁与共享锁"></a>独享锁与共享锁</h2><p>独享锁与共享锁是一种广义上的说法，从实际用途上来看，也常被称为互斥锁与读写锁。。</p><ul><li>独享锁：独享锁是指锁一次只能被一个线程所持有。</li><li>共享锁：共享锁是指锁可以被多个线程锁持有。</li></ul><p>独享锁与共享锁在Java中的典型实现：</p><ul><li><code>synchronized</code>、<code>ReentrantLock</code>只支持独享锁。</li><li><code>ReentrantReadWriteLock</code>其写锁是独享锁，其读锁是共享锁。读锁是共享锁使得并发读是非常高效的，读写、写读、写写的过程是互斥的。</li></ul><h2 id="悲观锁与乐观锁"><a href="#悲观锁与乐观锁" class="headerlink" title="悲观锁与乐观锁"></a>悲观锁与乐观锁</h2><p>乐观锁与悲观锁不是指具体的什么类型的锁，而是并发同步的策略。</p><ul><li>悲观锁：悲观锁对于并发采取悲观的态度，悲观锁认为：不加锁的并发操作一定会出问题。悲观锁适合写操作频繁的场景。</li><li>乐观锁：乐观锁对于并发采取乐观的态度，乐观锁认为：不加锁的并发操作也没什么问题；对于同一个数据的并发操作，是不会发生修改操作的。在更新数据时，会采用不断尝试更新的方式更新数据，乐观锁适合读多写少的场景。</li></ul><p>悲观锁与乐观锁在Java中的典型实现：</p><ul><li>悲观锁在Java中的应用是通过<code>synchronized</code>和<code>Lock</code>显示加锁来进行互斥同步，这是一种阻塞同步。</li><li>乐观锁在Java中的应用就是采用<code>CAS</code>机制。（<code>CAS</code>操作通过<code>Unsafe</code>类提供，但这个类不直接暴露为API，所以都是间接使用，如各种原子类）</li></ul><h2 id="偏向锁、轻量级锁及重量级锁"><a href="#偏向锁、轻量级锁及重量级锁" class="headerlink" title="偏向锁、轻量级锁及重量级锁"></a>偏向锁、轻量级锁及重量级锁</h2><p>所谓轻量级锁与重量级锁，指的是锁控制粒度的粗细。显然，控制粒度越细，阻塞开销越小，并发性也就越高。</p><p>JDK6以前，重量级锁一般指的是<code>synchronized</code>，而轻量级锁指的是<code>volatile</code>。</p><p>JDK6以后，针对<code>synchronized</code>做了大量优化，引入无锁状态、偏向锁、轻量级锁和重量级锁。锁可以单向的从偏向锁升级到轻量级锁，再升级至重量级锁。</p><ul><li>偏向锁：偏向锁是指一段同步代码一直被一个线程所访问，那么该线程就会升级为轻量级锁。降低获取锁的代价。</li><li>轻量级锁：是指当锁是偏向锁的时候，被另一个线程锁访问，那么该线程会自动获取锁，其他线程会通过自选的形式尝试获取锁，不会阻塞，提高性能。</li><li>重量级锁：是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低。</li></ul><h2 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h2><p>分段锁其实是一种锁的设计，并不是具体的一种锁。所谓分段锁，就是把锁的独享分成多段，每段独立控制，使得锁的粒度更细，减少阻塞开销，从而提高并发性。</p><p><code>Hashtable</code>使用<code>synchronized</code>稀释方法来保证线程安全性，面对线程的访问，<code>Hashtable</code>就会锁住整个对象，所有的其他线程只能等待，这种阻塞方式的吞吐量很低。</p><p>JDK7以前的<code>ConcurrentHashMap</code>就是分段锁的典型按理。<code>ConcurrentHashMap</code>维护了一个<code>Segment</code>数组，一般称为分段桶。</p><p>当有线程访问<code>ConcurrentHashMap</code>的数据时，<code>ConcurrentHashMap</code>会先根据<code>hashCode</code>计算出数据在哪个桶，然后锁住该桶。</p><h2 id="显式锁与内置锁"><a href="#显式锁与内置锁" class="headerlink" title="显式锁与内置锁"></a>显式锁与内置锁</h2><p>JDK5之前，协调对共享对象的访问时可以使用的机制只有<code>synchronized</code>和<code>volatile</code>。这两个都属于内置锁，即锁的申请和释放都是由JVM控制。</p><p>JDK5之后，增加了新的机制：<code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code>，这类锁的申请和释放都可以由程序控制，所以常被称为显式锁。</p><p>显式锁与内置锁的差异：</p><ul><li>主动获取锁和释放锁<ul><li><code>synchronized</code>不能主动获取锁和释放锁。获取锁和释放锁都是JVM控制。</li><li><code>ReentrantLock</code>可以主动获取锁和释放锁。（忘记释放锁可能产生死锁）</li></ul></li><li>响应中断<ul><li><code>synchronized</code>不能响应中断。</li><li><code>ReentrantLock</code>可以响应中断。</li></ul></li><li>超时机制<ul><li><code>synchronized</code>没有超时机制。</li><li><code>ReentrantLock</code>有超时机制；设置超时后，超时自动释放锁，避免一直等待。</li></ul></li><li>支持公平锁<ul><li><code>synchronized</code>只支持非公平锁。</li><li><code>ReentrantLock</code>支持公平锁和非公平锁。</li></ul></li><li>是否支持共享<ul><li><code>synchronized</code>修饰的方法或代码块，只能被一个线程访问（独享）。如果这个线程被阻塞，其他线程也只能等待。</li><li><code>ReentrantLock</code>可以基于<code>Condition</code>灵活控制同步条件。</li></ul></li><li>是否支持读写分离<ul><li><code>synchronized</code>不支持读写锁分离。</li><li><code>ReentrantReadWriteLock</code>支持读写锁，从而使阻塞读写的操作分开，有效提高并发性。</li></ul></li></ul><h1 id="Lock和Condition"><a href="#Lock和Condition" class="headerlink" title="Lock和Condition"></a>Lock和Condition</h1><h2 id="为何引入Lock和Condition"><a href="#为何引入Lock和Condition" class="headerlink" title="为何引入Lock和Condition"></a>为何引入Lock和Condition</h2><p>并发编程领域，有量大核心问题：互斥与同步。</p><ul><li>互斥：同一时刻只允许一个线程访问共享资源。</li><li>同步：线程间如何通信、协作。</li></ul><p>这两大问题，管程都是能够解决的。JDK并发包通过Lock和Condition两个接口来实现管程，其中Lock用于解决互斥问题，Condition用于解决同步问题。</p><p><code>synchronized</code>是管程的一种实现，但使用不当可能会出现死锁。</p><p><code>synchronized</code>无法通过破坏不可抢占条件来避免死锁，原因是<code>synchronized</code>申请资源的时候，如果申请不到，线程直接进入阻塞状态，无法操作也无法释放已占有资源。</p><p>与<code>synchronized</code>不同的是，<code>Lock</code>提供了一组无条件、可轮询、定时的以及可中断的锁操作，所有获取锁、释放锁的操作都是显示的操作。</p><h2 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h2><p><code>Lock</code>接口定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> timeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>lock()</code>：获取锁；</li><li><code>unlock()</code>：释放锁；</li><li><code>tryLock()</code>：尝试获取锁；</li><li><code>tryLock(long time TimeUnit unit)</code>：和<code>tryLock()</code>类似，区别在于限定时间，如果达到限定时间未获取到锁，则视为失败；</li><li><code>lockInterruptibly()</code>：锁未被另一个线程持有，且线程没有被中断的情况下，才能获取锁；</li><li><code>newCondition()</code>：返回一个绑定到<code>Lock</code>对象上的<code>Condition</code>实例；</li></ul><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p><code>Condition</code>实现了管程模型里面的条件变量。</p><p>在单线程中，一段代码的可执行可能依赖于某个状态，如果不满足状态条件，代码就不会被执行（典型场景为<code>if...else…</code>）。在并发环境中，当一个线程判断某个状态条件时，其状态可能是由于其他线程的操作而改变，这时就需要一定的协调机制来确保在同一时刻，数据只能被一个线程锁修改，且修改的数据状态被所有线程锁感知。</p><p>在JDK5之前，主要利用<code>Object</code>类的<code>wait</code>、<code>notify</code>及<code>notifyAll</code>配合<code>synchronized</code>来进行线程间通信。</p><p>JDK5之后引入<code>Lock</code>，使用<code>Lock</code>的线程彼此间通过<code>Condition</code>通信。</p><p><strong>Condition特性</strong></p><p><code>Condition</code>接口定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">awiatUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> <span class="token function">awaitNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> time <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">awaitUntil</span><span class="token punctuation">(</span><span class="token class-name">Date</span> deadline<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每个锁（<code>Lock</code>）上可以存在多个<code>Condition</code>，这意味着锁的状态条件可以有多个。</li><li>支持公平的或非公平的队列操作。</li><li>支持可中断的条件等待。</li><li>支持可定时的等待。</li></ul><h1 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h1><p><code>ReentrantLock</code>类是<code>Lock</code>接口的具体实现，与内置锁<code>synchronized</code>相同的是，它是一个可重入锁。</p><h2 id="ReentrantLock特性"><a href="#ReentrantLock特性" class="headerlink" title="ReentrantLock特性"></a>ReentrantLock特性</h2><p><code>ReentrantLock</code>特性如下：</p><ul><li>支持互斥性、内存可见性和可重入性。</li><li>支持公平锁和非公平锁（默认）两种模式。</li><li>实现了<code>Lock</code>接口，支持了<code>synchronized</code>锁不具备的灵活性。<ul><li><code>synchronized</code>无法中断一个重在等待获取锁的线程</li><li><code>synchronized</code>无法在请求获取一个锁时无休止地等待</li></ul></li></ul><h2 id="ReentrantLock使用"><a href="#ReentrantLock使用" class="headerlink" title="ReentrantLock使用"></a>ReentrantLock使用</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>ReentrantLock()</code>：默认构造方法，初始化一个非公平锁（NonfairSync）；</li><li><code>ReentrantLock(boolean)</code>：初始化一个公平锁(FairSync)；</li></ul><h3 id="lock和unlock方法"><a href="#lock和unlock方法" class="headerlink" title="lock和unlock方法"></a>lock和unlock方法</h3><ul><li><code>lock()</code>：无条件获取锁。如果当前线程无法获取锁，则当前线程进入休眠状态不可用，直至当前线程获取到锁。如果该锁没有被另一个线程持有，则获取该锁并立即返回，并将锁的持有计数设置为1。</li><li><code>unlock()</code>：用于释放锁。</li></ul><blockquote><p>获取锁操作<code>lock()</code>必须在<code>try catch</code>块中进行，并且释放锁操作<code>unlock()</code>放在<code>finally</code>块中进行，以保证锁一定被释放，防止死锁发生。</p></blockquote><h3 id="trylock方法"><a href="#trylock方法" class="headerlink" title="trylock方法"></a>trylock方法</h3><p>无与条件获取锁相比，<code>tryLock</code>有更完善的容错机制。</p><ul><li><code>tryLock()</code>：可轮询获取锁。如果成功，则返回<code>true</code>；如果失败，则返回<code>false</code>。也就是说，这个方法无论成败都会立即返回，获取不到锁时会一直等待。</li><li><code>tryLock(long,TimeUnit)</code>：可定时获取锁。与<code>tryLock</code>类似，区别仅在于这个方法在获取不到锁时会等待一定时间，在时间期限之内如果还获取不到锁，就返回<code>false</code>。如果一开始就拿到锁或者在等待期间内拿到了锁，则返回<code>true</code>。</li></ul><h3 id="lockInterruptibly方法"><a href="#lockInterruptibly方法" class="headerlink" title="lockInterruptibly方法"></a>lockInterruptibly方法</h3><ul><li><code>lockInterruptibly()</code>：可中断获取锁。可中断获取锁可以在获得锁的同时保持对中断的响应。可中断获取锁比其他获取锁的方式更复杂一些，需要两个<code>try catch</code>。</li></ul><blockquote><p>当一个线程获取到了锁之后，是不会被<code>interrupt()</code>方法中断的。单独调用<code>interrupt()</code>方法不能中断正在运行状态中的线程，只能中断阻塞状态中的线程。因此当通过<code>lockInterruptibly()</code>方法获取某个锁时，如果未获取到锁，只有在等待的状态下，才可以响应中断。</p></blockquote><h3 id="newCondition方法"><a href="#newCondition方法" class="headerlink" title="newCondition方法"></a>newCondition方法</h3><p><code>newCondition()</code>：返回一个绑定到<code>Lock</code>对象上的<code>Condition</code>实例。</p><h1 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h1><p><code>ReadWriteLock</code>适用于读多写少的场景。</p><p><code>ReentrantReadWriteLock</code>类是<code>ReadWriteLock</code>接口的具体实现，它是一个可重入的写锁。</p><p><code>ReentrantReadWriteLock</code>维护了一对读写锁，将读写锁分开，有利于提高并发效率。</p><p>读写锁，并不是Java语言特有的，而是一个广为使用的通用技术，所有的读写锁都遵守以下基本原则：</p><ul><li>允许多个线程同时读共享变量；</li><li>只允许一个线程写共享变量；</li><li>如果一个写线程正在执行写操作，此时禁止读线程读共享变量；</li></ul><p>读写锁与互斥锁的一个重要区别就是读写锁允许多个线程同时读共享变量，而互斥锁是不允许的，这是读写锁在读多写少场景下性能优于互斥锁的关键。但读写锁的写操作是互斥的，当一个线程在写共享变量的时候，是不允许其他线程执行写操作和读操作的。</p><h2 id="ReentrantReadWriteLock特性"><a href="#ReentrantReadWriteLock特性" class="headerlink" title="ReentrantReadWriteLock特性"></a>ReentrantReadWriteLock特性</h2><ul><li>适合读多写少场景，如果写多读少，则性能反而较<code>ReentrantLock</code>差一些。</li><li>读写锁分离，有利于提高并发效率。锁策略为：允许多个读操作并发执行，但每次只允许一个写操作。</li><li>读写锁都提供可重入的加锁语义。</li><li>支持公平锁与非公平锁（默认）模式。</li></ul><h1 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h1><p><code>ReadWriteLock</code>支持读锁与写锁。而<code>StampedLock</code>支持三种模式，分别是写锁、悲观读锁和乐观读。其中，写锁、悲观读锁的语义和<code>ReadWriteLock</code>的写锁、读锁的语义非常类似，允许多个线程同时获取悲观读锁。但是只允许一个线程获取写锁，写锁与悲观读锁是互斥的。不同的是：<code>StampedLock</code>里的写锁和悲观读锁加锁成功之后，都会返回一个<code>stamp</code>；然后解锁的时候，需要传入这个<code>stamp</code>。</p><blockquote><p>乐观读操作是无锁的，所以相较于写锁，乐观读的性能会更好一些。</p></blockquote><p><code>StampedLock</code>的性能之所以比<code>ReadWriteLock</code>好，其关键是<code>StampedLock</code>支持乐观读。</p><ul><li><code>ReadWriteLock</code>支持多个线程同时读，但是当多个线程同时读的时候，所有的写操作会被阻塞；</li><li><code>StampedLock</code>提供乐观读，允许一个线程获取写锁，也就是说不是所有的写操作都被阻塞；</li></ul><p>对于读多写少的场景<code>StampedLock</code>性能很好，简单的应用场景基本上可以替代<code>ReadWriteLock</code>，但是<code>StampedLock</code>的功能仅仅是<code>ReadWriteLock</code>的子集，在使用的时候，需要注意以下几点：</p><ul><li><code>StampedLock</code>不支持重入；</li><li><code>StampedLock</code>悲观读锁、写锁都不支持条件变量；</li><li>如果线程<code>StampedLock</code>的<code>readLock()</code>或者<code>writeLock()</code>上时，此时调用该阻塞线程的<code>interrupt()</code>方法，会导致CPU飙升。使用<code>StampedLock</code>一定不要调用中断操作，如果需要支持中断功能，一定要使用可中断的悲观读锁<code>readLockInterruptibly()</code>和写锁<code>writeLockInterruptibly()</code>；</li></ul><h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><p><code>AbstractQueuedSynchronizer</code>简称AQS，是队列同步器，顾名思义，其主要作用是处理同步。它是并发锁和很多同步工具类的实现基石。</p><h2 id="AQS要点"><a href="#AQS要点" class="headerlink" title="AQS要点"></a>AQS要点</h2><p>AQS提供了对独享锁与共享锁的支持。</p><p>在<code>java.lang.concurrent.locks</code>包中的相关锁都是基于AQS来实现。这些锁都没有直接继承AQS,而是定义了一个<code>Sync</code>类去继承AQS。因为锁面向的是使用用户，而同步器面向的则是线程控制，在锁的实现中聚合同步器而不是直接继承AQS，可以很好的做到隔离二者过关注的事情。</p><h2 id="AQS应用"><a href="#AQS应用" class="headerlink" title="AQS应用"></a>AQS应用</h2><p>AQS提供了对独占锁与共享锁的支持。</p><h3 id="独占锁API"><a href="#独占锁API" class="headerlink" title="独占锁API"></a>独占锁API</h3><p>获取、释放速战所的主要API如下：</p><ul><li><code>acquire</code>：获取独占锁；</li><li><code>acquireInterruptibly</code>：获取可中断的独占锁；</li><li><code>tryAcquireNanos</code>：尝试在指定时间内获取可中断的独占锁，在以下情况下返回：<ul><li>超时时间内，成功获取锁；</li><li>当前线程超时时间内被中断；</li><li>超时时间结束，仍未获取锁返回<code>false</code>；</li></ul></li><li><code>release</code>：释放独占锁；</li></ul><h3 id="共享锁API"><a href="#共享锁API" class="headerlink" title="共享锁API"></a>共享锁API</h3><ul><li><code>acquireShared</code>：获取共享锁；</li><li><code>acquireSharedInterruptibly</code>：获取可中断的共享锁；</li><li><code>tryAcquireSharedNanos</code>：尝试在指定时间内获取可中断的共享锁；</li><li><code>release</code>：释放共享锁；</li></ul><h2 id="AQS原理"><a href="#AQS原理" class="headerlink" title="AQS原理"></a>AQS原理</h2><ul><li>AQS使用一个整形的<code>volatile</code>变量来维护同步状态，状态的意义由子类赋予；</li><li>AQS维护一个FIFO的双链表，用来存储获取锁失败的线程；</li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h2 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h2><p>死锁是一种特定的程序状态，在实体之间，由于循环依赖导致彼此一直处于等待之中，没有任何个体可以继续前进。死锁不仅仅是在线程之间会发生，存在资源独占的进程之间同样也可能出现死锁。通常来说，我们大多聚焦在多线程场景中的死锁，指两个或多个线程之间，由于互相持有对方需要的锁，而永久处于阻塞的状态。</p><h2 id="如何定位死锁"><a href="#如何定位死锁" class="headerlink" title="如何定位死锁"></a>如何定位死锁</h2><p>定位死锁最常见的方式就是利用<code>jstack</code>等工具获取线程栈，然后定位互相之间的依赖关系，进而找到死锁。如果是比较明显的死锁，往往<code>jstack</code>等就能直接定位，类似<code>JConsole</code>甚至可以在图形化界面进行优先的死锁检测。</p><p>如果是开发自己管理的工具，需要更加程序化的方式扫描服务进程、定位死锁，可以考虑使用Java提供的标准管理API，<code>ThreadMXBean</code>，其直接就提供了<code>findDeadlockedThreads()</code>方法用于定位。</p><h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><p>基本上死锁的发生是因为：</p><ul><li>互斥：类似Java中<code>Monitor</code>都是独占的；</li><li>长期保持互斥，在使用结束前，不会释放，也不能被其他线程抢占；</li><li>循环依赖，多个个体之间虚线了锁的循环依赖，彼此依赖上一环释放锁；</li></ul><p>由此可知，避免死锁的思路为：</p><ul><li>避免一个线程同时获取多个锁；</li><li>避免一线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源；</li><li>尝试使用定时锁<code>Lock.tryLock(timeout)</code>，避免锁一直不能释放；</li><li>对于数据库锁，加锁和解锁必须在一个数据库链接里，否则会出现解锁失败情况；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：原子类</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-18-yuan-zi-lei/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-18-yuan-zi-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="原子变量类简介"><a href="#原子变量类简介" class="headerlink" title="原子变量类简介"></a>原子变量类简介</h1><h2 id="为什么需要原子变量类"><a href="#为什么需要原子变量类" class="headerlink" title="为什么需要原子变量类"></a>为什么需要原子变量类</h2><p>保证线程安全是Java并发变成必须要解决的重要问题。Java从原子性、可见性、有序性这三大特性入手，确保多线程的数据一致性。</p><ul><li>确保线程安全最常见的做法是利用锁机制来对共享数据做互斥同步，这样在同一个时刻，只有一个线程可以执行某个方法或者代码块，那么操作必然是原子性的，线程安全的。互斥同步最主要的问题是线程阻塞和唤醒所带来的性能问题。</li><li><code>volatile</code>是轻量级锁，它保证了共享变量在多线程中的可见性，但无法保证原子性。所以，它只能在一些特定场景下使用。</li><li>为了兼顾原子性以及锁带来的性能问题，Java引入了CAS来实现非阻塞同步（也叫乐观锁），并基于CAS，提供了一套原子工具类。</li></ul><h2 id="原子变量类的作用"><a href="#原子变量类的作用" class="headerlink" title="原子变量类的作用"></a>原子变量类的作用</h2><p>原子变量类比锁的粒度更细，更轻量级，并且对于在多处理器系统上实现高性能的并发代码来说是非常关键的。原子变量将发生竞争的范围缩小到单个变量上。</p><p>原子变量类相当于一种繁华的<code>volatile</code>变量，能够支持原子的、有条件的读/改/写操作。</p><p>原子类在内部使用CAS指令来实现同步，这些指令通常比锁更快。</p><p>原子变量类可分为4组：</p><ul><li>基本类型<ul><li><code>AtomicBoolean</code>：布尔类型原子类</li><li><code>AtomicInteger</code>：整形原子类</li><li><code>AtomicLong</code>：长整形原子类</li></ul></li><li>引用类型<ul><li><code>AtomReference</code>：引用类型原子类</li><li><code>AtomicMarkableReference</code>：带有标记位的引用类型原子类</li><li><code>AtomicStampedReference</code>：带有版本号的引用类型原子类</li></ul></li><li>数组类型<ul><li><code>AtomicIntegerArray</code>：整形数组原子类</li><li><code>AtomicLongArray</code>：长整形数组原子类</li><li><code>AtomicReferenceArray</code>：引用类型数组原子类</li></ul></li><li>属性更新器类型<ul><li><code>AtomicIntegerFieldUpdater</code>：整形字段的原子更新器</li><li><code>AtomicLongFieldUpdater</code>：长整形字段的原子更新器</li><li><code>AtomicReferenceFieldUpdater</code>：引用类型字段的原子更新器</li></ul></li></ul><h1 id="原子变量类使用"><a href="#原子变量类使用" class="headerlink" title="原子变量类使用"></a>原子变量类使用</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>这一类型的原子类是针对Java基本类型进行操作。基本类型的原子变量类都支持CAS技术，此外，<code>AtomicInteger</code>、<code>AtomicLong</code>还支持算术运算。</p><blockquote><p>虽然Java只提供了<code>AtomicBoolean</code>、<code>AtomicInteger</code>、<code>AtomicLong</code>,但是可以模拟其它基本类型的原子变量。模式方式为将<code>short</code>或<code>byte</code>等类型与<code>int</code>类型进行转换或者使用<code>Float.floatToIntBits</code>、<code>Double.doubleToLongBits</code>来转换浮点数。</p></blockquote><p>以<code>AtomicInteger</code>为例，常用方法为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取当前值</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前值并设置新值</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前值并自增</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前值并自减</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前值并加上预期值</span><span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果update等于expect，将update设置为输入值</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lazySet</span><span class="token punctuation">(</span><span class="token keyword">int</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最终设置为newValue， 设置后其他线程在短时间内仍然只能获取到旧值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>引用类型对应Java引用数据类型的处理 ，并可以在一定程度上规避ABA问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicReferenceDemo01</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">threadSafeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">threadSafeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">SpinLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpinLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ExecutorService</span> es <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      es<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        es<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SpinLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> af <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Thread</span> curr <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>af<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SpinLock</span> lock<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">SpinLock</span> lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span> ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" sell out "</span> <span class="token operator">+</span> ticket <span class="token operator">+</span> <span class="token string">" tickets"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><p>数组类型的原子类为数组元素提供了<code>volatile</code>类型的访问语义。</p><blockquote><p><code>volatile</code>类型的数组仅在数组上具备<code>volatile</code>语义，但针对数组中的元素不具备<code>volatile</code>语义。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerArrayDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicIntegerArray</span> atarr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Init Values: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>atarr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      atarr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atarr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final Values: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>atarr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atarr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Increment</span> implement <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>atarr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> atarr<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" , index= "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" value = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>atarr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> swapped <span class="token operator">=</span> atarr<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>swapped<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" swapped, index = "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" , value = 3 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="属性更新类型"><a href="#属性更新类型" class="headerlink" title="属性更新类型"></a>属性更新类型</h2><p>更新器类支持基于反射机制的更新字段值的原子操作。使用时有一定的限制：</p><ul><li>属性更新类型原子类都是抽象类，每次使用必须使用静态方法<code>newUpdater</code>创建一个更新器，并且需要设置想要更新的类和属性。</li><li>字段必须使用<code>volatile</code>修饰；</li><li>不能作用于静态变量；</li><li>不能作用于常量；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicReferenceFieldUpdaterDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> updater <span class="token operator">=</span> <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> es <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            es<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        es<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>updater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token string">"begin"</span><span class="token punctuation">,</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" already modify name = "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" had modified by other Thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token keyword">volatile</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>            <span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原子化的累加器"><a href="#原子化的累加器" class="headerlink" title="原子化的累加器"></a>原子化的累加器</h2><p><code>DoubleAccumulator</code>、<code>DoubleAdder</code>、<code>LongAccumulator</code>、<code>LongAdder</code>四个类仅用来执行累加操作，相比原子化的数据类型，速度更快，但是不支持<code>compareAndSet()</code>方法。如果仅需要累加功能，使用原子化的累加器性能会更好，代价是消耗更多内存资源。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：并发容器</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-19-bing-fa-rong-qi/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-19-bing-fa-rong-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="同步容器"><a href="#同步容器" class="headerlink" title="同步容器"></a>同步容器</h1><h2 id="同步容器简介"><a href="#同步容器简介" class="headerlink" title="同步容器简介"></a>同步容器简介</h2><p>在Java中，同步容器主要包括2类：</p><ul><li><code>Vector</code>、<code>Stack</code>、<code>Hashtable</code><ul><li><code>Vector</code>：<code>Vector</code>实现了<code>List</code>接口，其实际上是一个数组，和<code>ArrayList</code>类似，但<code>Vector</code>中的方法都是<code>synchronized</code>方法，即进行了同步措施。</li><li><code>Stack</code>：<code>Stack</code>是一个同步容器，它的方法也使用了<code>synchronized</code>进行了同步，实际上升是继承于<code>Vector</code>类。</li><li><code>Hashtable</code>：<code>Hashtable</code>实现了<code>Map</code>接口，它和<code>HashMap</code>很相似，但是<code>Hashtable</code>进行了同步处理，而<code>HashMap</code>没有。</li></ul></li><li><code>Collections</code>类中提供的静态工厂方法创建的类（由<code>Collections.synchronizedXXX</code>等方法）</li></ul><h2 id="同步容器的问题"><a href="#同步容器的问题" class="headerlink" title="同步容器的问题"></a>同步容器的问题</h2><p>同步容器的同步原理就是在其<code>get</code>、<code>set</code>、<code>size</code>等主要方法上用<code>synchronized</code>修饰。</p><p><code>synchronized</code>可以保证在同一时刻，只有一个线程可以执行某个方法或代码块。</p><p><strong>性能问题</strong></p><p><code>synchronized</code>的互斥同步会产生阻塞和唤醒线程的开销。显然，这种方式比没有使用<code>synchronized</code>的容器性能差很多。</p><p><strong>安全问题</strong></p><p>同步容器是否绝对安全呢？</p><p>其实也未必。在进行复合操作（非原子操作）时，仍然需要加锁来保护。常见复合操作如下：</p><ul><li>迭代：反复访问元素，直至遍历完全部元素。</li><li>跳转：根据指定顺序寻找当前元素的下1或N个元素。</li><li>条件运算：例如若没有则添加等。</li></ul><h1 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h1><h2 id="并发容器简介"><a href="#并发容器简介" class="headerlink" title="并发容器简介"></a>并发容器简介</h2><p>同步容器将所有对容器状态的访问都串行化，以保证线程安全性，这种策略会严重降低并发性。</p><p>JDK5后提供了多种并发容器，使用并发容器来代替同步容器，可以极大的提高伸缩性并降低风险。</p><p>J.U.C包中提供了一个非常有用的并发容器作为线程安全的容器：</p><table><thead><tr><th>并发容器</th><th>普通容器</th><th>描述</th></tr></thead><tbody><tr><td><code>ConcurrentHashMap</code></td><td><code>HashMap</code></td><td>JDK8之前采用分段锁机制细化锁粒度，之后基于CAS实现。</td></tr><tr><td><code>ConcurrentSkipListMap</code></td><td><code>SortedMap</code></td><td>基于跳表实现</td></tr><tr><td><code>CopyOnWriteArrayList</code></td><td><code>ArrayList</code></td><td></td></tr><tr><td><code>CopyOnWriteArraySet</code></td><td><code>Set</code></td><td>基于<code>CopyWriteArrayList</code>实现</td></tr><tr><td><code>ConcurrentSkipListSet</code></td><td><code>SortedSet</code></td><td>基于<code>ConcurrentSkipListMap</code>实现</td></tr><tr><td><code>ConcurrentLinkedQueue</code></td><td><code>Queue</code></td><td>线程安全的无界队列，底层采用单链表，支持FIFO</td></tr><tr><td><code>ConcurrentLinkedDeque</code></td><td><code>Deque</code></td><td>线程安全的无界双端队列，底层采用双向链表，支持FIFO和FILO</td></tr><tr><td><code>ArrayBlockingQueue</code></td><td><code>Queue</code></td><td>数组实现的阻塞队列</td></tr><tr><td><code>LinkedBlockingQueue</code></td><td><code>Queue</code></td><td>链表实现的阻塞队列</td></tr><tr><td><code>LinkedBlockingDeque</code></td><td><code>Deque</code></td><td>双向链表实现的双端阻塞队列</td></tr></tbody></table><p>J.U.C包中提供的并发容器命名一般分为三类：</p><ul><li><code>Concurrent*</code>：<ul><li>这类型的锁竞争相对于<code>CopyOnWrite*</code>要高一些，但写操作代价要小一些。</li><li><code>Concurrent*</code>往往提供较低的遍历一致性；即：当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍历。代价就是，在获取容器代销，容器是否为空等方法时，结果不一定完全精确，这是为了获取并发吞吐量的设计取舍；与之相比，如果使用同步容器，可能会出现<code>fail-fast</code>问题，即：检测到容器在遍历过程中发生了修改，则抛出<code>ConcurrentModificationException</code>，不在继续遍历。</li></ul></li><li><code>CopyOnWrite*</code>：<ul><li>一个线程写，多个线程读。读操作时不加锁，写操作时通过在副本上加锁保证并发安全，空间开销大。</li></ul></li><li><code>Blocking*</code>：<ul><li>内部实现一般是基于锁，提供阻塞队列的能力。</li></ul></li></ul><h2 id="并发场景下Map"><a href="#并发场景下Map" class="headerlink" title="并发场景下Map"></a>并发场景下Map</h2><p>如果对数据有强一致性要求，则需使用<code>Hashtable</code>；在大部分场景通常都是弱一致性的情况下，使用<code>ConcurrentHashMap</code>即可；如果数据量达到千万级别，且存在大量增删改操作时，则可以考虑使用<code>ConcurrentSkipListMap</code>。</p><h2 id="并发场景下List"><a href="#并发场景下List" class="headerlink" title="并发场景下List"></a>并发场景下List</h2><p>读多写少使用<code>CopyOnWriteArrayList</code>；写多读少使用<code>ConcurrentLinkedQueue</code>，但由于其是无界的，需要进行容量限制，避免无限膨胀，导致内存溢出。</p><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p><code>Map</code>接口的两个实现是<code>ConcurrentHashMap</code>和<code>ConcurrentSkipListMap</code>；从应用角度来看，主要区别在于<code>ConcurrentHashMap</code>的<code>key</code>是无序的，而<code>ConcurrentSkipListMap</code>的<code>key</code>是有序的，且两者的<code>key</code>与<code>value</code>均不能为空，否则会抛出<code>NullPointerException</code>运行时异常。</p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p><code>ConcurrentHashMap</code>是线程安全的<code>HashMap</code>，用于替代<code>Hashtable</code>。</p><p><strong>特性</strong></p><p><code>ConcurrentHashMap</code>实现了<code>ConcurrentMap</code>接口，而<code>ConcurrentMap</code>接口扩展了<code>Map</code>接口。</p><p><code>ConcurrentHashMap</code>的实现包含了<code>HashMap</code>所有的基本特性，如数据结构、读写策略等。</p><p><code>ConcurrentHashMap</code>没有实现对<code>Map</code>加锁以提供独占访问。因此无法通过在客户端加锁的方式来创建新的原子操作。但是，一些常见的复合操作，如“若没有则添加”、“若相等则替换”等都以实现为原子操作，并且是围绕着<code>ConcurrentMap</code>的扩展来实现的。</p><p><strong>原理</strong></p><ul><li><p>JDK7</p><ul><li><p>数据结构：数组+单链表</p></li><li><p>并发机制：分段锁机制细化锁粒度，降低阻塞，提高并发性</p></li><li><p>实现：分段锁，是将内部进行分段（Segment），里面是<code>HashEntry</code>数组，和<code>HashMap</code>类似，哈希相同的条目也是以链表形式存放。<code>HashEntry</code>内部使用<code>volatile</code>的<code>value</code>字段来保证可见性，也利用了不可变对象的机制，以改进利用<code>Unsafe</code>提供的底层能力，比如<code>volatile access</code>，去直接完成部分操作，以优化性能。</p></li></ul></li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210721224900435.png" alt="image-20210721224900435"><ul><li><p>JDK8</p><ul><li>数据结构：数组+单链表+红黑树</li><li>并发机制：取消分段锁，基于CAS+<code>synchronized</code>实现。</li><li>实现：<ul><li>当数据出现哈希冲突时，数据会存入数据指定桶的单链表，当链表长度达到8，则将其转换为红黑树结构，以改进性能。</li><li>取消<code>segments</code>字段，直接采用<code>transient volatile HashEntry&lt;K,V&gt;[] table</code>保存数据，采用<code>table</code>数组元素作为锁，从而实现对每一行数据进行加锁，进一步减少并发冲突的概率。</li><li>使用CAS + <code>synchronized</code>操作，在特定场景进行无锁并发操作。使用<code>Unsafe</code>、<code>LongAdder</code>之类底层手段，进行极端情况的优化。</li></ul></li></ul></li></ul><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p><code>CopyOnWriteArrayList</code>是线程安全的<code>ArrayList</code>。<code>CopyOnWrite</code>字面意思为写的时候会将共享变量新复制一份出来。复制的好处在于读操作是无锁的。</p><p><code>CopyOnWriteArrayList</code>仅适用于写操作非常少的场景，而且能够容忍读写的短暂不一致，如果读写比例均衡或者有大量写操作的话，使用<code>CopyOnWriteArrayList</code>性能会非常糟糕。</p><p><strong>原理</strong></p><p><code>CopyOnWriteArrayList</code>内部维护了一个数组，成员变量<code>array</code>就执行这个内部数组，所有的读操作都是基于<code>array</code>进行的，</p><ul><li><code>lock</code>：执行写时复制操作，需要使用可重入锁加锁</li><li><code>array</code>：对象数组，用于存放元素</li><li>读操作：读操作不同步，他们在内部数组的快照上工作，多个迭代器可同时遍历而不会相互阻塞；</li><li>写操作：所有的写操作都是同步的，他们在备份数组上工作，写操作完成后，后备队列将被替换为复制的队列，并释放锁定。支持数组变得易变，所以数组的调用是原子操作。<ul><li>添加操作：先将原容器复制一份，然后在新副本上执行写操作，之后再切换引用，此过程加锁。</li><li>删除操作：与添加操作类似，将除要删除之外的元素拷贝到新副本中，然后切换引用，将容器引用指向新副本，此过程同样加锁。</li></ul></li></ul><blockquote><p><code>CopyOnWriteArrayList</code>读性能差不多是写性能的一百倍。</p></blockquote><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p><code>Set</code>接口的两个实现是<code>CopyOnWriteArraySet</code>和<code>ConcurrentSkipListSet</code>，使用场景参考<code>CopyOnWriteArrayList</code>和<code>ConcurrentSkipListMap</code>，它们原理是一样的。</p><h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><p>Java并发包里面的<code>Queue</code>类并发容器是最复杂的，可以从以下两个维度分类：</p><ul><li>阻塞与非阻塞</li><li>单端与双端</li></ul><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p><code>BlockingQueue</code>：顾名思义，是一个阻塞对了，<code>BlockingQueue</code>基本都是基于锁实现的，当对垒已满时，入队操作阻塞；当队列已空时，出队操作阻塞。</p><p><code>BlockingQueue</code>对插入操作、移除操作、获取元素提供了四种不同方法用于不同的场景使用：</p><ul><li>抛出异常</li><li>返回特殊值（<code>null</code>或<code>true/false</code>，取决于具体的操作）</li><li>阻塞等待此操作，直到操作成功</li><li>阻塞等待此操作，知道成功或超时</li></ul><p>总结如下：</p><table><thead><tr><th>操作类型</th><th>异常</th><th>特殊值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>Insert</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>Remove</td><td>remove()</td><td>poll()</td><td>take</td><td>poll(time,unit)</td></tr><tr><td>Examine</td><td>element()</td><td>peek()</td><td>not applicable</td><td>not applicable</td></tr></tbody></table><blockquote><p>BlockingQueue不接受<code>null</code>值元素</p></blockquote><p>JDK提供了以下阻塞队列：</p><ul><li><code>ArrayBlockingQueue</code>：一个由数组结构组成的有界阻塞队列。</li><li><code>LinkedBlockingQueue</code>：一个由链表结构组成的有界阻塞队列。</li><li><code>PriorityBlockingQueue</code>：一个支持优先级排序的吴杰阻塞队列。</li><li><code>SynchronousQueue</code>：一个不存储元素的阻塞队列。</li><li><code>DelayQueue</code>：一个使用优先级队列实现的无界阻塞队列。</li><li><code>LinkedTransferQueue</code>：一个由链表结构组成的无界阻塞队列。</li></ul><h2 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h2><p><strong>要点</strong></p><ul><li><code>PriorityBlockingQueue</code>可以视为<code>PriorityQueue</code>的线程安全版本。</li><li><code>PriorityBlockingQueue</code>实现了<code>BlockingQueue</code>，也是一个阻塞队列。</li><li><code>PriorityBlockingQueue</code>实现了<code>Serializable</code>，支持序列化。</li><li><code>PriorityBlockingQueue</code>不接受<code>null</code>值元素。</li><li><code>PriorityBlockingQueue</code>的插入操作<code>put</code>方法不会<code>block</code>，因为它是无界序列。</li></ul><p><strong>原理</strong></p><ul><li><code>queue</code>是一个<code>Object</code>数组，用于保存<code>PriorityBlockingQueue</code>的元素。</li><li>可重入锁<code>lock</code>则用于在执行插入、删除操作时，保证这个方法在当前线程释放锁之前，其他线程不能访问。</li></ul><blockquote><p><code>PriorityBlockingQueue</code>容量索然有初始化大小，但是不限制大小，如果当前容量已满，则插入新元素时自动扩容。</p></blockquote><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p><code>ArrayBlockingQueue</code>是由数组结构组成的有界阻塞队列。</p><p><strong>要点</strong></p><ul><li><code>ArrayBlockingQueue</code>实现<code>BlockingQueue</code>，也是一个阻塞队列。</li><li><code>ArrayBlockingQueue</code>实现了<code>Serializable</code>，支持序列化。</li><li><code>ArrayBlockingQueue</code>是基于数组实现的有界阻塞队列。所以初始化时必须指定容量。</li></ul><p><strong>原理</strong></p><p><code>ArrayBlockingQueue</code>内部以<code>final</code>的数组保存数据，数组的大小决定了队列的边界。</p><p><code>ArrayBlockingQueue</code>实现并发同步，原理为读操作与写操作都需要获取到AQS独占锁才能进行操作。队列构造时可以指定以下三个参数：</p><ul><li>队列容量：限制队列中最多允许的元素个数</li><li>锁类型：可指定为公平锁或非公平锁。非公平锁吞吐量高，公平锁保证每次都是等待醉酒的线程获取到锁。</li><li>初始化：指定一个集合来初始化，将此集合中的元素在构造方法期间就先添加到队列中。</li></ul><h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><p><code>LinkedBlockingQueue</code>是由链表结构组成的有界阻塞队列。容易被误解为无边界，但其实其行为和内部代码都是基于有界的逻辑实现的，如果创建队列时没有指定容量，那么其容量就自动被设置为<code>Integer.MAX_VALUE</code>，约等于无界队列。</p><p><strong>要点</strong></p><ul><li><code>LinkedBlockingQueue</code>实现了<code>BlockingQueue</code>，也是一个阻塞队列。</li><li><code>LinkedBlockingQueue</code>实现了<code>Serializable</code>，支持序列化。</li><li><code>LinkedBlockingQueue</code>基于单链表实现的阻塞队列，可以当做无界队列也可以当做有界队列来使用。</li><li><code>LinkedBlockingQueue</code>中元素按照插入顺序保存(FIFO)。</li></ul><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p><code>SynchronousQueue</code>是不存储元素的阻塞队列。每个删除操作都要等待插入操作，反之每个插入操作也都要等待删除操作。队列容量为0.</p><p><code>SynchronousQueue</code>类，在线程池的实现类<code>ScheduledThreadPoolExecutor</code>中得到了应用。</p><p><code>SynchronousQueue</code>的队列其实是虚的，数据必须从某个写线程交给某个读线程，而不是写到某个队列中等待被消费。</p><p><code>SynchronousQueue</code>不能被迭代，因为没有元素可以拿来迭代。</p><p><code>SynchronousQueue</code>不允许传递<code>null</code>值。</p><h2 id="ConcurrentLinkedDeque"><a href="#ConcurrentLinkedDeque" class="headerlink" title="ConcurrentLinkedDeque"></a>ConcurrentLinkedDeque</h2><p><code>Deque</code>的侧重点是支持对队列头尾都进行插入和删除，所以提供了特定的方法，如：</p><ul><li>尾部插入时需要的<code>addLast(e)</code>、<code>offerLast(e)</code></li><li>尾部删除所需要的<code>removeLast()</code>、<code>poolLast()</code></li></ul><h1 id="Queue并发应用"><a href="#Queue并发应用" class="headerlink" title="Queue并发应用"></a>Queue并发应用</h1><p><code>Queue</code>被广发使用在生产者-消费者场景，在并发场景中，利用<code>BlockingQueue</code>的阻塞机制，可以减少很多并发协调工作。</p><ul><li>队列边界：<ul><li><code>ArrayBlockingQueue</code>有明确容量限制；</li><li><code>LinkedBlockingQueue</code>取决于是否在创建时指定；</li><li><code>SynchronousQueue</code>不能缓存任何元素；</li></ul></li><li>空间利用<ul><li><code>ArrayBlockingQueue</code>要求初始内存较大，且需要连续的内存空间，但整体相对紧凑；</li><li><code>LinkedBlockingQueue</code>整体内存空间要求相对较大；</li></ul></li><li>性能<ul><li><code>ArrayBlockingQueue</code>实现简单，性能稳定；</li><li><code>SynchronousQueue</code>在元素较小的场景是性能非常优异；</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：线程池</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-20-xian-cheng-chi/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-20-xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池简介"><a href="#线程池简介" class="headerlink" title="线程池简介"></a>线程池简介</h1><h2 id="什么是线程池"><a href="#什么是线程池" class="headerlink" title="什么是线程池"></a>什么是线程池</h2><p>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建县城后自动启动这些任务。</p><h3 id="为什么使用线程池"><a href="#为什么使用线程池" class="headerlink" title="为什么使用线程池"></a>为什么使用线程池</h3><p>如果并发请求数量较多 ，但每个线程执行的时间很短时，就会出现频繁的创建和销毁线程，大大降低系统的效率，可能创建与销毁线程的时间、资源开销要大于实际工作的所需。使用线程池的好处：</p><ul><li>降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的损耗。</li><li>提高响应速度：当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li>提高线程可管理性：线程是稀缺资源，如果无限制创建，不会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配、调优和监控。</li></ul><h1 id="Executor框架"><a href="#Executor框架" class="headerlink" title="Executor框架"></a>Executor框架</h1><p><code>Executor</code>框架是一个根据一组执行策略调用、调度、执行和控制的异步任务框架，目的是提供一种将“任务提交”和“任务运行”分离开来的机制。</p><h2 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h2><ul><li><code>Executor</code>：运行任务的简单接口。</li><li><code>ExecutorService</code>：扩展了<code>Executor</code>接口，扩展能力为：<ul><li>支持有返回值的线程；</li><li>支持管理线程的生命周期；</li></ul></li><li><code>ScheduledExecutorService</code>：扩展了<code>ExecutorService</code>接口。<ul><li>扩展能力：支持定期执行任务。</li></ul></li><li><code>AbstractExecutorService</code>：<code>ExecutorService</code>接口的默认实现。</li><li><code>ThreadPoolExecutor</code>：<code>Executor</code>框架最核心的类，它继承<code>AbstractExecutorService</code>类。</li><li><code>ScheduledThreadPoolExecutor</code>：<code>ScheduledExecutorService</code>接口的实现，一个可定时调度任务的线程池。</li><li><code>Executors</code>：可通过调用<code>Executors</code>的静态工厂方法来创建线程池并返回一个<code>ExecutorService</code>对象。</li></ul><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><p><code>Executor</code>接口只定义了一个<code>execute</code>方法，用于接收一个<code>Runnable</code>对象。</p><h2 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h2><p><code>ExecutorService</code>接口继承了<code>Executor</code>接口，它提供了<code>invokeAll</code>、<code>invokeAny</code>、<code>shutdown</code>、<code>submit</code>等方法。其主要的扩展为：</p><ul><li>支持有返回值的线程：<code>submit</code>、<code>invokeAll</code>、<code>invokeAny</code>方法都支持传入<code>Callable</code>对象。</li><li>支持管理线程生命周期：<code>shutdown</code>、<code>shutdownNow</code>、<code>isShutdown</code>等方法。</li></ul><h2 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h2><p><code>ScheduledExecutorService</code>接口扩展了<code>ExecutorService</code>接口。</p><p>它除了支持前面两个接口能力以外，还支持定时调度线程。</p><ul><li><code>shedule</code>方法可以在指定的延时后执行一个<code>Runnable</code>或者<code>Callable</code>任务。</li><li><code>scheduleAtFixedRate</code>方法和<code>scheduleWithFixedDelay</code>方法可以按照指定时间间隔，定期执行任务。</li></ul><h1 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h1><p><code>java.util.concurrent.ThreadPoolExecutor</code>类是<code>Executor</code>框架中最核心的类。</p><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ul><li><p><code>ctl</code>：用于控制线程池的运行状态和线程池中的有效线程数量。</p><ul><li>线程池的运行状态（<code>runState</code>）</li><li>线程池内有效线程数量（<code>workerCount</code>）</li><li><code>ctl</code>使用<code>Integer</code>保存，高3位保存<code>runState</code>，低29位保存<code>workerCount</code>。<code>COUNT_BITS</code>就是29，<code>CAPACITY</code>就是1左移19位减1，这个常量表示<code>workerCount</code>的上限值，大约5亿。</li></ul></li><li><p>运行状态：</p><ul><li><code>RUNNING</code>：运行状态，接口新任务，并且也能处理阻塞队列中的任务。</li><li><code>SHUTDOWN</code>：关闭状态，不接受新任务，但可以处理阻塞队列中的任务。<ul><li>在线程池处于<code>RUNNING</code>状态时，调用<code>shutdown</code>方法会使线程池进入到该状态。</li><li><code>finalize</code>方法在执行过程中也会调用<code>shutdown</code>方法进入该状态。</li></ul></li><li><code>STOP</code>：停止状态，不接受新任务也不处理对垒中的任务。会中断正在处理任务的线程。在线程池处于<code>RUNNING</code>或<code>SHUTDOWN</code>状态时，调用<code>shutdownNow</code>方法会使线程池进入到该状态。</li><li><code>TIDYING</code>：整理状态，如果所有的 任务都已经终止了，<code>workerCount</code>为0，线程池进入该状态后会调用<code>terminated</code>方法进入<code>TERMINATED</code>状态。</li><li><code>TERMINATED</code>：已终止状态，在<code>terminated</code>方法执行完后进入该状态。默认<code>terminated</code>方法中什么也没有做。进入<code>TERMINATED</code>的条件如下:<ul><li>线程池不是<code>RUNNING</code>状态。</li><li>线程池状态不是<code>TIDYING</code>或<code>TERMINATED</code>状态。</li><li>线程池状态为<code>SHUTDOWN</code>且<code>workerCount</code>为空。</li><li><code>workerCount</code>为0。</li><li>设置<code>TIDYING</code>状态成功。</li></ul></li></ul></li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210722002858083.png" alt="image-20210722002858083"><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p><code>ThreadPoolExecutor</code>有四个构造方法，前三个都是基于第四个实现。第四个构造方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span> <span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                            <span class="token keyword">int</span> maximunPoolSize<span class="token punctuation">,</span>                           <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                            <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                            <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>                            <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                            <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>corePoolSize</code>：核心线程数量，当有新任务通过<code>execute</code>方法提交时，线程池会执行以下判断：<ul><li>运行线程数小于<code>corePoolSize</code>，则创建新线程来处理任务，即使线程池中的其他线程是空闲状态。</li><li>如果线程池中线程数量大于等于<code>corePoolSize</code>且小于<code>maximumPoolSize</code>，则只有当<code>workQueue</code>满时才创建新的线程去处理任务。</li><li>如果设置的<code>corePoolSize</code>和<code>maximumPoolSize</code>相同，则创建的线程池的大小是固定的。任务提交时，如果<code>workQueue</code>未满，则将请求放入<code>workQueue</code>中，等待有空闲的线程去从<code>workQueue</code>中取任务并处理。</li><li>如果运行的线程数量大于等于<code>maximumPoolSize</code>，这时如果<code>workQueue</code>已经满了，则使用<code>handler</code>所指定的策略来处理任务。</li><li>任务提交判断的顺序为：<code>corePoolSize</code>=&gt; <code>workQueue</code>=&gt; <code>maximumPoolSize</code>。</li></ul></li><li><code>maximumPoolSize</code>：最大线程数。<ul><li>如果队列满，且已创建线程数小于最大线程数，则线程池会再创建新的线程执行任务。</li><li>如果使用吴杰的任务队列，则该参数无效。</li></ul></li><li><code>keepAliveTime</code>：线程保持活动的时间。<ul><li>线程池中的线程数量大于<code>corePoolSize</code>的时候，如果没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，知道等待的时间超过了<code>keepAliveTime</code>。</li></ul></li><li><code>unit</code>：<code>keepAliveTime</code>的时间单位。<ul><li><code>DAYS</code>：天</li><li><code>HOURS</code>：小时</li><li><code>MINUTES</code>：分钟</li><li><code>MILLISECONDS</code>：毫秒</li><li><code>MICROSECONDS</code>：微妙</li><li><code>NANOSECONDS</code>：纳秒</li></ul></li><li><code>workQueue</code>：等待执行的任务队列，用于保存等待执行的任务的阻塞队列。可选队列如下：<ul><li><code>ArrayBlockingQueue</code>：有界阻塞队列<ul><li>基于数组的FIFO队列</li><li>创建时需指定大小</li></ul></li><li><code>LinkedBlockingQueue</code>：无界阻塞对列<ul><li>基于俩表的FIFO队列</li><li>默认大小为<code>Integer.MAX_VALUE</code></li><li>吞吐量高于<code>ArrayBlockingQueue</code></li><li>最大线程数量为<code>corePoolSize</code>，<code>maximumPoolSize</code>参数无效；等待任务队列是无界队列。</li><li><code>Executors.newFixedThreadPool</code>使用了此队列。</li></ul></li><li><code>SynchronousQueue</code>：不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。<ul><li>每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态。</li><li>吞吐量高于<code>LinkedBlockingQueue</code></li><li><code>Executors.newCachedThreadPool</code>使用了此队列。</li></ul></li><li><code>threadFactory</code>：线程工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。</li><li><code>handler</code>：饱和策略，他是<code>RejectedExecutionHandler</code>类型的变量，当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。线程池支持以下策略：<ul><li><code>AbortPolicy</code>：丢弃任务并抛出异常，默认策略。</li><li><code>DiscardPolicy</code>：丢弃任务，但不抛出异常。</li><li><code>DiscardOldestPolicy</code>：丢弃队列最前面的任务，然后重新尝试执行任务。</li><li><code>CallerRunsPolicy</code>：直接调用<code>run</code>方法并且阻塞执行。</li><li>以上策略都不能满足需求，也可以通过<code>RejectedExecutionHandler</code>接口来定制处理策略。如记录日志或持久化不能处理的任务。</li></ul></li></ul></li></ul><h2 id="Execute方法"><a href="#Execute方法" class="headerlink" title="Execute方法"></a>Execute方法</h2><p>默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。</p><p>提交任务可以使用<code>execute</code>方法，它是<code>ThreadPoolExecutor</code>的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。</p><p><code>execute</code>方法工作流程如下：</p><ol><li>如果<code>workerCount &lt; corePoolSize</code>，则创建并启动一个线程来执行新提交的任务；</li><li>如果<code>workerCount &gt;= corePoolSize</code>，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中；</li><li>如果<code>workerCount &gt;= corePoolSize &amp;&amp; workerCount &lt; maximumPoolSize</code>，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务；</li><li>如果<code>workerCount &gt;= maximumPoolSize</code>，并且线程池内的阻塞队列已满，则根据拒绝策略来处理该任务，默认的处理方式是直接抛异常。</li></ol><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210722010120451.png" alt="image-20210722010120451"><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>在<code>ThreadPoolExecutor</code>类中还有一些重要的方法：</p><ul><li><code>submit</code>：类似<code>execute</code>，但是针对的是有返回值的线程。</li><li><code>shutdown</code>：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完成后才终止，但再也不接受新任务。<ul><li>将线程池切换到<code>SHUTDOWN</code>状态。</li><li>调用<code>interruptIdleWorkers</code>方法请求中断所有空闲的<code>worker</code>。</li><li>取出阻塞对垒中没有被执行的任务并返回。</li></ul></li><li><code>isShutdown</code>：调用<code>shutdown</code>或<code>shutdownNow</code>方法后，<code>isShutdown</code>方法就会返回<code>true</code>。</li><li><code>isTerminaed</code>：当所有的任务都已关闭后，才表示线程池关闭成功，这时调用<code>isTerminaed</code>方法会返回<code>true</code>。</li><li><code>setCorePoolSize</code>：设置核心线程数大小。</li><li><code>setMaximumPoolSize</code>：设置最大线程数大小。</li><li><code>getTaskCount</code>：线程池已经执行的和未执行的任务总数。</li><li><code>getCompletedTaskCount</code>：线程池已完成的任务数量，该值小于等于<code>taskCount</code>。</li><li><code>getLargestPoolSize</code>：线程池曾经创建过的最大线程数量。通过这个数据可以知道线程池是否满过，也就是达到了<code>maximumPoolSize</code>。</li><li><code>getPoolSize</code>：线程池当前的线程数量。</li><li><code>getActiveCount</code>：当前线程池中正在执行任务的线程数量。</li></ul><h1 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h1><p>JDK的<code>Executors</code>类中提供了集中具有代表性的线程池，这些线程池都是基于<code>ThreadPoolExecutor</code>的定制化实现。</p><p>在实际使用线程池的场景中，我们一般使用JDK中提供的具有代表性的线程池实例。</p><h2 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h2><p>创建一个单线程的线程池。</p><p>只会创建唯一的工作线程来执行任务，保证所有任务按照指定顺序（FIFO、FILO、优先级）执行。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。</p><p>单线程最大的特点是：可保证顺序地执行各个任务。</p><h2 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h2><p>创建一个固定大小的线程池。</p><p>每次提交一个任务就会新创建一个工作线程，如果工作线程数量达到下次呢恒驰最大线程数，则将提交的任务存储到阻塞队列中。</p><p><code>FixedThreadPool</code>是一个典型且优秀的线程池，它具有线程池提高程序效率和节省创建线程时所耗的开销的有点。但是，在线程池空闲时，即线程池中没有可运行任务时，它不会释放工作线程，还会占用一定的系统资源。</p><h2 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h2><p>创建一个可缓存的线程池。</p><ul><li>如果线程池大小超过处理任务所需要的线程数，就会回收部分空闲线程。</li><li>如果长时间没有往线程池中提交任务，则工作线程自动终止。终止后，如果再提交新的任务，则线程池重新创建一个工作线程。</li><li>此线程池不会对大小做限制，线程池大小完全依赖操作系统（或者说JVM）能够创建的最大线程大小。因此，使用<code>CachedThreadPool</code>时，一定要注意控制任务的数量，否则容易导致系统瘫痪。</li></ul><h2 id="newScheduleThreadPool"><a href="#newScheduleThreadPool" class="headerlink" title="newScheduleThreadPool"></a>newScheduleThreadPool</h2><p>创建一个大小无线的线程池，此线程池支持定时以及周期性执行任务的需求。</p><h2 id="newWorkStealingPool"><a href="#newWorkStealingPool" class="headerlink" title="newWorkStealingPool"></a>newWorkStealingPool</h2><p>JDK8新引入。</p><p>其内部会构建<code>ForkJoinPool</code>，利用<code>Work-Stealing</code>算法，并行地处理任务，不保证处理顺序。</p><h1 id="线程池最佳实践"><a href="#线程池最佳实践" class="headerlink" title="线程池最佳实践"></a>线程池最佳实践</h1><h2 id="计算线程数量"><a href="#计算线程数量" class="headerlink" title="计算线程数量"></a>计算线程数量</h2><p>一般多线程执行的任务类型可以分为CPU密集型和IO密集型，根据不同的任务类型，我们计算线程数的方法也不一样。</p><ul><li>CPU密集型任务：这种任务消耗的主要是CPU资源，可以将线程数设置为N（CPU核心数） + 1，比CPU核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其他原因导致的任务暂停而带来的影响。一旦任务暂定，CPU就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用CPU的空闲时间。</li><li>IO密集型任务：这种任务运行起来，系统会用大部分的时间来处理IO交互，而线程在处理IO的时间段内不会占用CPU来处理，这时就可以将CPU交出来给其它线程使用。因此在IO密集型任务的应用中，我们可以多配置一些线程，具体计算方法为 2N，</li></ul><h2 id="使用有界阻塞队列"><a href="#使用有界阻塞队列" class="headerlink" title="使用有界阻塞队列"></a>使用有界阻塞队列</h2><p>不建议使用<code>Executors</code>的重要原因是：<code>Executors</code>提供的很多方法默认使用的都是无界的<code>LinkedBlockingQueue</code>，高负载情境下，无界队列很容易导致OOM，而OOM会导致所有请求都无法处理，这是致命问题。所以强烈建议使用有界队列。</p><h2 id="重要任务应该自定义拒绝策略"><a href="#重要任务应该自定义拒绝策略" class="headerlink" title="重要任务应该自定义拒绝策略"></a>重要任务应该自定义拒绝策略</h2><p>使用有界队列，当任务过多时，线程池会出发执行拒绝策略，线程池默认的拒绝策略会<code>throw RejectedExecutionException</code>这个运行时异常，对于运行时异常编译器不强制<code>catch</code>它，所以开发人员很容易忽略。因此默认拒绝策略要慎重使用。如果线程池处理的任务非常重要，建议自定义自己的拒绝策略。并且在实际工作中，自定义的拒绝策略往往和降级策略配合使用。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：并发工具类</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-21-bing-fa-gong-ju-lei/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-21-bing-fa-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h1><p>字面意思为递减计数锁，用于控制一个线程等待多个线程。</p><p><code>CountDownLatch</code>维护一个计数器<code>count</code>，表示需要等待的事件数量。<code>countDown</code>方法递减计数器，表示有一个时间已经发生，调用<code>await</code>方法的线程会一直阻塞直到计数器为零，或者等待中的线程中断或者等待超时。</p><p><code>CountDownLatch</code>是基于AQS实现的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>；<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><code>count</code>：初始化时传入的统计值；</li><li><code>await()</code>：调用<code>await()</code>方法的线程会被挂起，它会等待知道<code>count</code>值为0才继续执行；</li><li><code>await(long timeout, TimeUnit unit)</code>：与<code>await()</code>类似，只不过等待一定的时间后<code>count</code>值未归零也会继续执行；</li><li><code>countDown()</code>：将统计值减1；</li></ul><h1 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h1><p>字面意思为循环珊栏，<code>CyclicBarrier</code>可以让一组线程等待至某个状态之后再全部执行。之所以被叫做循环珊栏，是因为当所有等待线程被释放以后，<code>CyclicBarrier</code>可以被重用。</p><p><code>CyclicBarrier</code>维护一个计数器<code>count</code>，每次执行<code>await</code>方法之后，<code>count</code>加1，知道计数器的值与设置的值相等，所有等待的线程才会继续执行。</p><p><code>CyclicBarrier</code>是基于<code>ReentrantLock</code>和<code>Condition</code>实现的。</p><p><code>CyclicBarrier</code>应用场景：并行迭代算法场景；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> barrierAction<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">BrokenBarrierException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterrputedException</span><span class="token punctuation">,</span><span class="token class-name">BrokenBarrierException</span><span class="token punctuation">,</span><span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h1><p>字面意思为信号量，<code>Semaphore</code>用来控制某段代码的并发数。</p><p><code>Semaphore</code>管理着一组虚拟的许可（<code>permit</code>），<code>permit</code>的初始数量可通过构造方法来指定。每次执行<code>acquire</code>方法可以获取一个<code>permit</code>，如果没有就等待；而<code>release</code>方法可以释放一个<code>permit</code>。</p><p><code>Semaphore</code>应用场景：</p><ul><li>用于实现资源池，如数据库连接池。</li><li>用于将任何一种容器编程有界阻塞容器。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>CountDownLatch</code>和<code>Cyclicbarrier</code>都能够实现线程间的等待，只不过他们侧重点不同：</p><ul><li><code>CountDownLatch</code>一般用于某个线程等待若干个其他线程执行完任务后，该线程方可执行；不可重用；</li><li><code>CyclicBarrier</code>一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；可重用；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：内存模型</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-22-nei-cun-mo-xing/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-22-nei-cun-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="物理内存模型"><a href="#物理内存模型" class="headerlink" title="物理内存模型"></a>物理内存模型</h1><p>物理机遇到的并发问题域虚拟机中的情况有很多相似之处，物理机对并发的处理方案对于虚拟机具备参考意义。</p><h2 id="硬件处理效率"><a href="#硬件处理效率" class="headerlink" title="硬件处理效率"></a>硬件处理效率</h2><p>绝大多数的运算任务都不可能只靠处理器“计算”完成，处理器至少需要与内存交互，如读取运算数据、存储运算结果，这类IO操作无法仅依赖寄存器完成；</p><p>由于计算机的存储设备与处理器的运算速度存在多个数量级的差距，这种速度上的矛盾，会降低硬件的处理效率。所以现代计算机都不得不加入高速缓存（<code>Cache</code>）来作为内存与处理器之间的缓冲。将需要的数据复制到缓存中，让运算能快速进行，当运算结束后，再将缓存数据同步到内存中，避免处理器等待内存读写。</p><h2 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h2><p>高速缓存解决了硬件效率问题的同时，也引入了新的问题：缓存一致性（<code>Cache Coherence</code>）。</p><p>在多处理器系统中，每个处理器都有自己的高速缓存，而他们又共享同一份主内存。当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致。</p><p>为了解决缓存一致性问题，需要各个处理器访问缓存时都遵循一些协议，在读写时根据协议来进行操作。</p><h2 id="代码乱序执行"><a href="#代码乱序执行" class="headerlink" title="代码乱序执行"></a>代码乱序执行</h2><p>除了高速缓存外，为了是的处理器内部的运算单元尽量被 充分利用，处理器可能会对输入代码进行乱序执行（<code>Out-Of-Order Memory</code>）优化。处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果一致，但不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致。</p><p>乱序执行技术是处理器为提高运算速度做出违背代码原有顺序的优化。</p><ul><li>单核环境下，处理器保证做出的优化不会导致执行结果远离预期目标；</li><li>多核环境下，如果存在一个核心的计算任务依赖另一个核心的计算任务的中间结果，而且对相关数据读写没有做任何保护措施，那么其顺序并不能靠代码的先后顺序来保证。</li></ul><h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><p><strong>内存模型</strong>这个概念，可以理解为：在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象。不同架构的物理计算机可以有不一样的内存模型，JVM也有自己的内存模型。</p><p>JVM中视图定义一种Java内存模型（<code>Java Momory Model</code>，简称JMM）来  屏蔽各种硬件和操作系统的内存访问间差异，以实现让Java程序 在各种平台下都能达到一致的内存访问效果。</p><p>并发安全需要满足可见性、有序性、原子性。其中，导致可见性的原因是缓存，导致有序性的原因是编译优化。禁用缓存与编译优化可以解决可见性与有序性，但会损失性能；合理的方案应该是按需禁用缓存以及编译优化。Java内存模型规范了JVM如何提供按需禁用缓存和编译优化的方案，具体来说，就是<code>volatile</code>、<code>Synchronized</code>和<code>final</code>三个关键字及<code>Happens-Before</code>规则。</p><h2 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h2><p>JMM的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。此处所说的变量（<code>variables</code>）与Java编程中的变量有所区别，它包括实例字段、静态字段和构成数值对象的元素，但不包含局部变量和方法参数，因为后者是线程私有的，不会被共享，自然也就不存在竞争问题。为了获得较好的执行效率，JMM并没有限制执行引擎使用处理器的特定寄存器或者缓存来与主内存进行交互，也没有限制编译器进行调整代码执行顺序这类优化措施。</p><p>JMM规定了所有变量都存储在主内存中。</p><p>每个线程都有自己的工作内存，工作内存中保留了该线程使用到的变量的主内存的副本。工作内存是JMM的一个抽象概念，并不真实存在，它涵盖了缓存、写缓冲区、寄存器及其他硬件及编译器优化。</p><p>线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程间也无法直接方位对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</p><h2 id="JMM内存操作问题"><a href="#JMM内存操作问题" class="headerlink" title="JMM内存操作问题"></a>JMM内存操作问题</h2><p><strong>工作内存数据一致性</strong>：各个线程操作数据时会保存使用到的内存中的共享变量副本，当多个线程的运算任务都涉及到同一个共享变量时，将导致各自的共享变量副本不一致。Java内存模型主要通过一系列的同步协议、规则来保证数据的一致性。</p><p><strong>指令重排序优化</strong>：Java中重排序通常是编译器或运行时环境为了优化程序性能而采取的对指令进行重新排序执行的一种手段。重排序分分为两类：编译器重排序和运行期重排序，分别对应编译时和运行时环境。重排序需满足以下两个条件：</p><ul><li>单线程环形下不能改变程序运行结果。即编译器需要保证程序能够遵守<code>as-if-serial</code>属性。通俗地说，就是在单线程情况下，要给程序一个顺序执行的假象，即经过重排序执行结果与顺序执行结果保持一致。</li><li>存在数据依赖关系的任务不允许重排序。</li></ul><h2 id="内存交互操作"><a href="#内存交互操作" class="headerlink" title="内存交互操作"></a>内存交互操作</h2><p>JMM定义了8个操作来完成主内存与工作内存之间的交互操作。JVM实现时必须保证以下操作的原子性。（对于<code>double</code>和<code>long</code>型变量来说，某些平台允许<code>load</code>、<code>store</code>、<code>read</code>、<code>write</code>操作例外 ）</p><ul><li><code>lock</code>：锁定，作用于主内存的变量，它将一个变量表示为一条线程独占的状态。</li><li><code>unlock</code>：解锁，作用于主内存的变量，它将一个锁定状态的变量释放出来供其他线程锁定。</li><li><code>read</code>：读取，作用于主内存变量，它将一个变量的值从主内存传输到线程的工作内存中，以便随后的<code>load</code>操作使用。</li><li><code>write</code>：写入，作用于主内存的变量，它把<code>store</code>操作从工作内存中回去的变量值放入主内存的变量中。</li><li><code>load</code>：载入，作用于工作内存的变量，它把<code>read</code>操作从主内存中获取的变量值放入工作内存的变量副本中。</li><li><code>use</code>：使用，作用于工作内存的变量，它把工作内存中的一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时就会执行这个操作。</li><li><code>assign</code>：赋值，作用于工作内存中的变量，它把一个从执行引擎接收到的值赋给工作内存中的变量，每当虚拟机遇到一个给变量赋值的字节码执行时执行这个操作。</li><li><code>store</code>：存储，作用于工作内存的变量，它把工作内存中的一个变量的值传送到主内存中，一遍随后的<code>write</code>操作使用。</li></ul><p>JMM还规定上述8种操作，需要满足以下规则：</p><ul><li><code>read</code>与<code>load</code>必须成对出现，<code>store</code>与<code>write</code>必须成对出现；即不允许将变量从主内存读取了但工作内存不接受，或从工作内存发起回写了单主内存不接受的情况出现。</li><li>不允许一个线程丢弃它的最近<code>assign</code>操作；即变量在工作内存中改变了之后必须将变化同步到主内存中。</li><li>不允许一个线程无原因（未发生任何<code>assign</code>操作）把数据从工作内存同步回主内存。</li><li>一个新的变量只允许在主内存中诞生，不允许在工作内存中直接使用一个未被初始化的变量。</li><li>一个变量在同一时刻只允许一个线程对其进行<code>lock</code>操作，但<code>lock</code>操作可以被同一线程重复执行多次，多次<code>lock</code>后需调用同样次数<code>unlock</code>变量方可解锁。所以<code>lock</code>和<code>unlock</code>必须成对出现。</li><li>如果对一个变量进行<code>lock</code>操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行<code>load</code>或<code>assign</code>操作初始化变量的值。</li><li>如果一个变量实现没有被<code>lock</code>操作锁定，则不允许对它执行<code>unlock</code>，也不允许对一个被其他线程<code>lock</code>的变量进行<code>unlock</code>。</li><li>对一个变量执行<code>unlock</code>操作之前，必须先把此变量同步到主内存中。</li></ul><h2 id="并发安全特性"><a href="#并发安全特性" class="headerlink" title="并发安全特性"></a>并发安全特性</h2><p>Java内存交互的8种基本操作遵循Java内存的三大特性：原子性、可见性、有序性。而三大特性，归根结底，是为了实现多线程的数据一致性，使得程序在多线程并发、指令重排序优化的环境中能如预期运行。</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>原子性即一个操作或者多个操作，要么全部执行，要么全部不执行。即使在多个线程一起执行的时候，一个操作一旦开始，就不会被其它线程干扰。</p><p>在Java中，为了保证原子性，提供了两个高级的字节码指令<code>monitorenter</code>和<code>monitorexit</code>。这两个字节码，在Java中对应的关键字就是<code>synchronized</code>。</p><p>因此，在Java中可以使用<code>synchronized</code>来保证方法和代码块内的操作是原子性的。</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其它线程能够立即看到修改后的值。</p><p>JMM是通过“变量修改后将新值同步回主内存，变量读取前从主内存刷新变量值”这种依赖主内存作为传递媒介的方式来实现的。</p><p>Java实现多线程可见性的方式有：</p><ul><li><code>volatile</code></li><li><code>synchronized</code></li><li><code>final</code></li></ul><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>有序性规则变现在以下两种场景：线程内和线程间</p><ul><li>线程内：从某个线程的角度看方法的执行，指令会按照串行（<code>as-if_serial</code>）的方式执行，此种方法已经应用于顺序编程语言。</li><li>线程间：这个线程“观察”到其他线程并发地执行非同步代码块时，由于指令重排序优化，任何代码都有可能交叉执行。唯一起作用的约束是：对于同步方法，同步块以及<code>volatile</code>字段的操作仍维持相对有序。</li></ul><p>在Java中，可以使用<code>synchronized</code>和<code>volatile</code>来保证多线程之间操作的有序性。实现方式有所区别：</p><ul><li><code>volatile</code>关键字会禁止指令重排序；</li><li><code>synchronized</code>关键字通过互斥保证同一时刻只允许 一条线程操作；</li></ul><h1 id="Happens-Before"><a href="#Happens-Before" class="headerlink" title="Happens-Before"></a>Happens-Before</h1><p>JMM为程序中所有操作定义了一个偏序关系，称之为<strong>先行发生关系（<code>Happens-Before</code>）</strong>。</p><p><code>Happens-Before</code>是指前面一个操作的结果对后续操作是可见的。</p><p><code>Happens-Before</code>非常重要，它是判断数据是否存在竞争、线程是否安全的主要依据，依靠这个原则，我们可以通过几条规则一揽子地解决并发环境下两个操作间是否可能存在冲突的所有问题。</p><ul><li>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作限行发生于书写在后面的操作。</li><li>锁定规则：一个<code>unlock</code>操作先行发生于后面对对同一个锁的<code>lock</code>操作。</li><li><code>volatile</code>变量规则：对一个<code>volatile</code>变量的写操作先行发生于后面对这个变量的读操作。</li><li>线程启动规则：<code>Thread</code>对象的<code>start()</code>方法先行发生于此线程的每一个动作。</li><li>线程终止规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过<code>Thread.join()</code>方法结束，<code>Thread.isAlive()</code>的返回值手段检测到线程已经终止执行。</li><li>线程中断规则：对线程<code>interrupt()</code>方法的调用线程发生于被中断线程的代码检测到中断事件的发生，可以通过<code>Thread.interrupted()</code>方法检测到是否有中断发生。</li><li>对象终结规则：一个对象的初始化完成先行发生于它的<code>finalize()</code>方法的开始。</li><li>传递性：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C。</li></ul><h1 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h1><p>Java可以通过内存屏障（<code>memory barrier</code>）来保证底层操作的有序性和可见性。</p><p>内存屏障是被插入两个CPU指令之间的一种指令，用来禁止处理器指令发生重排序，从而保证有序性。为了达到屏障效果，它也会使处理器写入、读取值之前，将主内存的值写入高速缓存，清空无效队列，从而保障可见性。</p><p>常见有4中屏障：</p><ul><li><code>LoadLoad</code>屏障：对于这样的语句<code>Load1;LoadLoad;Load2</code>，在<code>Load2</code>及后续读取操作要读取的数据被访问前，保证<code>Load1</code>要读取的数据被读取完毕。</li><li><code>StoreStore</code>屏障：对于这样的语句<code>Store1;StoreStore;Store2</code>，在<code>Store2</code>及后续 写入操作执行前，保证<code>Store1</code>的写入操作对其他处理器可见。</li><li><code>LoadStore</code>屏障：对于这样的语句<code>Load1;LoadStore;Store2</code>，在<code>Store2</code>及后续写入操作被执行前，保证<code>Load1</code>要读取的数据被读取完毕。</li><li><code>StoreLoad</code>屏障：对于这样的语句<code>Store1;StoreLoad;Load2</code>，在<code>Load2</code>及后续所有读取操作执行前，保证<code>Store1</code>的写入对所有处理器可见。它的开销是4中屏障中最大的（冲刷写缓冲器，清空无效化队列）。在大多数处理器的实现中，这个屏障是个万能屏障，兼具另外3中内存屏障的功能。</li></ul><p>Java中对内存屏障的使用在一般的代码中不太容易见到，常见的有<code>volatile</code>和<code>synchronized</code>关键字修饰的代码块，也可以通过<code>Unsafe</code>类来使用内存屏障。</p><h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><p><code>volatile</code>是JVM提供的最轻量级的同步机制。</p><p><code>volatile</code>的中文意思是不稳定的，易变的，用<code>volatile</code>修饰变量是为了保证变量在多线程中的可见性。</p><h2 id="volatile特性"><a href="#volatile特性" class="headerlink" title="volatile特性"></a>volatile特性</h2><ul><li><p>保证变量对所有线程的可见性</p><ul><li>可见性是指当一条线程修改了<code>volatile</code>变量的值，新值对于其他线程来说是可以立即得知的。普通变量的值在线程间传递需要通过主内存来完成。</li><li>线程写<code>volatile</code>变量：<ul><li>改变线程工作内存中的<code>volatile</code>变量副本的值；</li><li>将改变后的副本值从工作内存刷新到主内存；</li></ul></li><li>线程读<code>volatile</code>变量：<ul><li>从主内存读取<code>volatile</code>变量的最新值到工作内存中；</li><li>从工作内存中读取<code>volatile</code>变量的副本；</li></ul></li></ul><blockquote><p><code>volatile</code>保证变量的可见性，并不等同于保证变量的并发安全性；非以下两种情况需通过加锁来保证原子性：</p><ul><li>运算结果不依赖变量的当前值，或者能够确保只有单一线程修改变量的值；</li><li>变量不需要与其它状态变量共同参与不变约束；</li></ul></blockquote></li><li><p>禁止进行指令重排序；</p><ul><li>当程序执行到<code>volatile</code>变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，其结果对后面的操作可见；且其后面的操作肯定还没有进行；</li><li>进行指令优化时，不能将在对<code>volatile</code>变量访问的语句放在其后面执行，也不能把<code>volatile</code>变量后面的语句放到其前面执行；</li></ul><blockquote><p>普通变量仅仅会保证方法执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证赋值操作的顺序与程序代码中的执行顺序一致。</p></blockquote></li></ul><h2 id="volatile原理"><a href="#volatile原理" class="headerlink" title="volatile原理"></a>volatile原理</h2><p>具体实现方式是在编译期生成字节码时，会在指令序列中增加内存屏障来保证。下面是基于保守策略的JMM内存屏障插入策略：</p><ul><li>在每个<code>volatile</code>写操作的前面插入一个<code>StoreStore</code>屏障。该屏障除了保证了屏障之前的写操作和该屏障之后的写操作不能重排序，还会保证<code>volatile</code>写操作之前，任何读写操作都会咸鱼<code>volatile</code>被提交。</li><li>在每个<code>volatile</code>写操作后面插入一个<code>StoreLoad</code>屏障。该屏障除了使<code>volatile</code>写操作不会与之后的读操作重排序外，还会刷新处理器缓存，使<code>volatile</code>变量的写更新对其他线程可见。</li><li>在每个<code>volatile</code>读操作前面插入一个<code>LoadLoad</code>屏障。该屏障除了使<code>volatile</code>读操作不会与之前的写操作发生重排序外，还会刷新处理器缓存，使<code>volatile</code>变量读取的为最新值。<ul><li>在每个<code>volatile</code>读操作的后面插入一个<code>LoadStore</code>屏障。该屏障除了禁止<code>volatile</code>读操作与其之后的任何写操作进行重排序，还会刷新处理器缓存，使其它线程<code>volatile</code>变量的写更新对<code>volatile</code>读操作的线程可见。</li></ul></li></ul><h2 id="volatile使用场景"><a href="#volatile使用场景" class="headerlink" title="volatile使用场景"></a>volatile使用场景</h2><p>概括来说，就是<code>一次写入、到处读取</code>，某一线程负责更新变量，其它线程只读取变量（不更新变量），并根据变量的新值执行相应逻辑。例如状态标志位更新、观察者模式变量值发布。</p><h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><h2 id="long和double变量的特殊规则"><a href="#long和double变量的特殊规则" class="headerlink" title="long和double变量的特殊规则"></a>long和double变量的特殊规则</h2><p>JMM要求8中基本操作都具备原子性，但是对于64位的数据类型（long和double），在模型中特别定义相对宽松的规定：允许虚拟机将没有被<code>volatile</code>修饰的64位数据的读写操作分为2次32位操作来进行，即允许虚拟机可选择不保证64位数据类型的<code>load</code>、<code>store</code>、<code>read</code>和<code>write</code>这4个操作的原子性。</p><p>实际开发中，JMM强烈建议虚拟机把64位数据的读写实现为具有原子性，目前各种平台下的商用虚拟机都选择把64位数据的读写操作作为原子操作来对待。</p><h2 id="final型变量的特殊规则"><a href="#final型变量的特殊规则" class="headerlink" title="final型变量的特殊规则"></a>final型变量的特殊规则</h2><p><code>final</code>成员变量必须在声明的时候初始化或者在构造器中初始化，否则会报编译错误。</p><p><code>final</code>关键字的可见性是指：被<code>final</code>修饰的字段在声明时或在构造器中，一旦初始化完成，那么在其它线程无需同步就能正确看见<code>final</code>字段的值。这是因为一旦初始化完成，<code>final</code>变量的值立刻回写到主内存中。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：IO模型</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-23-io-mo-xing/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-23-io-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIX-I-O模型"><a href="#UNIX-I-O模型" class="headerlink" title="UNIX I/O模型"></a>UNIX I/O模型</h1><p>UNIX I/O模型有5种：</p><ul><li>同步阻塞I/O</li><li>同步非阻塞I/O</li><li>I/O多路复用</li><li>信号驱动I/O</li><li>异步I/O</li></ul><h2 id="同步阻塞I-O"><a href="#同步阻塞I-O" class="headerlink" title="同步阻塞I/O"></a>同步阻塞I/O</h2><p>用户线程发起读取调用后阻塞，让出CPU。内存等待数据到来后，将数据拷贝到内核空间，接着拷贝到用户空间后，唤醒阻塞的用户线程。</p><h2 id="同步非阻塞I-O"><a href="#同步非阻塞I-O" class="headerlink" title="同步非阻塞I/O"></a>同步非阻塞I/O</h2><p>用户线程不断发起读取调用，数据拷贝到内核空间前，每次都返回失败，直到数据到达内核空间，这次调用后，等待数据从内核空间拷贝到用户空间时，线程仍然是阻塞的，等到数据到达用户空间再把用户线程唤醒。</p><h2 id="I-O多路复用"><a href="#I-O多路复用" class="headerlink" title="I/O多路复用"></a>I/O多路复用</h2><p>用户线程将读取数据操作拆分为两步，线程先发起查询调用，目的是确认内核数据是否准备好；等内核将数据准备好之后，用户线程再发起读取调用，在等待数据从内核空间拷贝到用户空间的过程，线程是阻塞的；因为一次查询调用可核查多个数据通道的状态，所以叫多路复用；</p><h2 id="信号驱动I-O"><a href="#信号驱动I-O" class="headerlink" title="信号驱动I/O"></a>信号驱动I/O</h2><p>首先开启<code>Socket</code>的信号驱动I/O功能，并安装一个信号处理函数，进程继续运行并不阻塞。当数据准备好时，进程会收到一个SIGIO信号，可以在信号处理函数中调用I/O操作函数处理数据。信号驱动式I/O模型的优点是我们在数据报到达期间进程不会阻塞，我们只要等待信号处理函数的通知即可。</p><h2 id="异步I-O"><a href="#异步I-O" class="headerlink" title="异步I/O"></a>异步I/O</h2><p>用户线程发起读取调用的同时注册一个回调函数，读取调用后立即返回，等内核将数据准备好后，再调用指定的回调函数完成处理。并且在这个过程中，用户线程一直没有阻塞。</p><h1 id="Java-I-O模型"><a href="#Java-I-O模型" class="headerlink" title="Java I/O模型"></a>Java I/O模型</h1><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><blockquote><p>BIO（blocking IO）即阻塞IO。指的主要是传统的<code>java.io</code>包，它基于流模型实现。</p></blockquote><h3 id="BIO简介"><a href="#BIO简介" class="headerlink" title="BIO简介"></a>BIO简介</h3><p><code>java.io</code>包提供了我们最熟知的一些IO功能，比如<code>File</code>抽象、输入输出流等。交互方式为同步、阻塞的方式；也就是说，在读取输入流或者出入输出流时，在读、写动作完成之前，线程会一直阻塞，它们之间的调用是可靠的线性顺序。</p><p>很多时候，<code>java.net</code>下面提供的部分网络API，比如<code>Socket</code>、<code>ServerSocket</code>、<code>HttpURLConnection</code>等也归类到同步阻塞IO类库,因为网络通信同样是IO行为。</p><p>BIO的优点是代码比较简单、直观；缺点是IO效率和扩展性存在局限性，容易称为应用性能的瓶颈。</p><h3 id="BIO性能缺陷"><a href="#BIO性能缺陷" class="headerlink" title="BIO性能缺陷"></a>BIO性能缺陷</h3><p>采用BIO的服务端，通常由一个独立的<code>Acceptor</code>线程负责监听客户端链接。服务端一般在<code>while(true)</code>循环中调用<code>accept()</code>方法等待客户端的链接请求，一旦接收到一个链接请求，就可以建立<code>Socket</code>，并基于这个<code>Socket</code>进行读写操作。此时，不能再接收其他客户端链接请求，只能等待当前链接的操作执行完成。</p><p>如果要让BIO通信模型能够同时处理多个客户端请求，就必须使用多线程，但会造成不必要的线程开销。不过可以通过线程池机制改善，线程池还可以让线程的创建和回收成本相对较低。</p><p>虽然线程池能够略微优化性能，但是会消耗宝贵的线程资源，并且在百万级并发场景下也撑不住。并发访问量增加可能会导致线程数急剧膨胀，进而引发线程堆栈溢出、创建新线程失败等问题，最终导致进程宕机或僵死，无法对外提供服务。</p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><blockquote><p>NIO（non-blocking IO），即非阻塞IO。指的是Java 1.4中引入的<code>java.nio</code>包。</p></blockquote><p>为了解决BIO的性能问题，Java 1.4中引入了<code>java.nio</code>包。NIO优化了内存复制以及阻塞导致的严重性能问题。</p><p><code>java.nio</code>包提供了<code>Channel</code>、<code>Selector</code>、<code>Buffer</code>等新的抽象，可以构建多路复用的、同步非阻塞IO程序，同时提供了更接近操作系统底层的高性能数据操作方式。</p><h3 id="使用缓冲区优化读写流"><a href="#使用缓冲区优化读写流" class="headerlink" title="使用缓冲区优化读写流"></a>使用缓冲区优化读写流</h3><p>NIO与传统I/O不同，它是基于块（<code>Block</code>）的，它以块为基本单位处理数据。在NIO中，最为重要的两个组件是缓冲区（<code>Buffer</code>）和通道（<code>Channel</code>）。</p><p><code>Buffer</code>是一块连续的内存块，是NIO读写数据的缓冲。<code>Buffer</code>可以将文件一次性读入内存再做后续处理，而传统的方式是边读文件边处理数据。<code>Channel</code>表示缓冲数据的源头或者目的地，它用于读取缓冲或者写入数据，是访问缓冲的接口。</p><h3 id="使用DirectBuffer减少内存复制"><a href="#使用DirectBuffer减少内存复制" class="headerlink" title="使用DirectBuffer减少内存复制"></a>使用DirectBuffer减少内存复制</h3><p>NIO还提供了一个可以直接访问物理内存的类<code>DirectBuffer</code>。普通的<code>Buffer</code>分配的是JVM堆内存，而<code>DirectBuffer</code>包装类被回收时，会通过Java引用机制来释放该内存块。</p><h3 id="优化I-O，避免阻塞"><a href="#优化I-O，避免阻塞" class="headerlink" title="优化I/O，避免阻塞"></a>优化I/O，避免阻塞</h3><p>传统I/O的数据读写是在用户空间和内核空间来回复制，而内核空间的数据是通过操作系统层面的I/O接口从磁盘读取或写入。</p><p>NIO的<code>Channel</code>有自己的处理器，可以完成内核空间和磁盘之间的I/O操作。在NIO中，我们读取和写入数据都要通过<code>Channel</code>，由于<code>Channel</code>是双向的，所以读、写可以同时进行。</p><h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h2><blockquote><p>AIO（Asynchronous IO）即异步非阻塞IO，指的是Java 7中，对NIO有了进一步的改进，也称为NIO2，引入了异步非阻塞IO方式。</p></blockquote><p>在Java7中，NIO有了进一步的改进，也就是NIO2，引入了异步非阻塞IO方式，也有很多人叫它AIO（<code>Asynchronous IO</code>）。异步IO操作基于事件和回调机制，可以简单理解为，可以简单理解为，应用操作直接返回，而不会阻塞在那里，当后台处理完成，操作系统会通知响应线程进行后续工作。</p><h2 id="传统IO流"><a href="#传统IO流" class="headerlink" title="传统IO流"></a>传统IO流</h2><p>流从概念上来说是一个连续的数据流。当程序需要读数据的时候就需要使用输入流读取数据，当需要向外写数据的时候就需要输出流。</p><p>BIO中操作的流主要有两大类，字节流和字符流，两类根据流的方向都可以分为输入流和输出流。</p><ul><li>字节流<ul><li>输入字节流：<code>InputStream</code></li><li>输出字节流：<code>OutputStream</code></li></ul></li><li>字符流<ul><li>输入字符流：<code>Reader</code></li><li>输出字符流：<code>Writer</code></li></ul></li></ul><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>字节流主要操作字节数据或二进制对象。</p><p>字节流有两个核心抽象类：<code>InputStream</code>和<code>OutputStream</code>。所有的字节流对象都继承自这两个抽象类。</p><p><strong>文件字节流</strong></p><p><code>FileOutputStream</code>和<code>FileInputStream</code>提供了读写字节到文件的能力。</p><p>文件流操作一般步骤：</p><ul><li>使用<code>File</code>类绑定一个文件；</li><li>把<code>File</code>对象绑定到流对象上；</li><li>进行读或写操作；</li><li>关闭流；</li></ul><p><code>FileOutputStream</code>及<code>FileInputStream</code>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileStreamDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  <span class="token class-name">String</span> <span class="token constant">FILEPATH</span><span class="token operator">=</span><span class="token string">"demo.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token function">writeStream</span><span class="token punctuation">(</span><span class="token constant">FILEPATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readStream</span><span class="token punctuation">(</span><span class="token constant">FILEPATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> filepath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//OutputStream out = new FileOutputStream(f,true);</span>    <span class="token comment">//添加参数true，表示对原文件进行内容追加；否则为覆写</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> filepath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read data length : "</span> <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read data content is : "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内存字节流</strong></p><p><code>ByteArrayInputStream</code>和<code>ByteArrayOutputStream</code>是用来完成内存的输入和输出功能。</p><p>内存操作一般在生成一些临时信息时才使用，如果临时信息保存在文件中，还需要在有效期后删除文件，比较麻烦。</p><p>内存字节流示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteArrayStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>    <span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//wait for read data from memory</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> tmp<span class="token punctuation">;</span>  <span class="token comment">//read number to char</span>      bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//modify char to lower</span>    <span class="token punctuation">}</span>        <span class="token class-name">String</span> newStr <span class="token operator">=</span> bos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>管道流</strong></p><p>管道流的主要作用是可以进行两个线程间通信。</p><p>如果要先进性管道通信，则必须把<code>PipedOutputStream</code>链接在<code>PipedInputStream</code>上。</p><p>管道流示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PipedStreamDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Send</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Receive</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>      s<span class="token punctuation">.</span><span class="token function">getPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getPis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Send</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">PipedOutputStream</span> pos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        pos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token class-name">PipedOutputStream</span> <span class="token function">getPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Receive</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">PipedInputStream</span> pis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Reveive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        len <span class="token operator">=</span> pis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"receive data is :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token class-name">PipedInputStream</span> <span class="token function">getPis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> pis<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对象字节流</strong></p><p><code>ObjectInputStream</code>和<code>ObjectOutputStream</code>是对象输入输出流，一般用于对象序列化。</p><p><strong>数据操作流</strong></p><p>数据操作流提供了格式化读入和输出数据的方法，分别为<code>DataInputStream</code>和<code>DataOutputStream</code>。</p><p>数据操作流示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FILEPATH</span> <span class="token operator">=</span> <span class="token string">"demo.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token function">readStream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">writeStream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> filepath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span><span class="token string">"pear"</span><span class="token punctuation">,</span><span class="token string">"lemon"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12.3f</span><span class="token punctuation">,</span><span class="token number">30.3f</span><span class="token punctuation">,</span><span class="token number">50.5f</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dos<span class="token punctuation">.</span><span class="token function">writeChars</span><span class="token punctuation">(</span>ns<span class="token punctuation">.</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token char">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dos<span class="token punctuation">.</span><span class="token function">writeFloat</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token char">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> filepath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> price <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cahr c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">disreadChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\t'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           tmp<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           len<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>         price <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">dis<span class="token punctuation">.</span></span>ReadFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         dis<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         num <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         dis<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name: %s; price: %5.2f; num: %d\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span>price<span class="token punctuation">,</span>num<span class="token punctuation">)</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EOFException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>合并流</strong></p><p>合并流的主要功能是将多个<code>InputStream</code>合并为一个<code>InputStream</code>。合并流的功能由<code>SequenceInputStream</code>完成。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequenceInputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">InputStream</span> is1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"demo1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">InputStream</span> is2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"demo1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SequenceInputStream</span> sis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequenceInputStream</span><span class="token punctuation">(</span>is1<span class="token punctuation">,</span>is2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"demo3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> sis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        sis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    is1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    is2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>字符流主要操作字符，一个字符等于两个字节。</p><p>字符流有两个核心类：<code>Reader</code>类和<code>Writer</code>类。所有的字符流类都继承自这两个抽象类。</p><p><strong>文件字符流</strong></p><p>文件字符流<code>FileReader</code>和<code>FileWriter</code>可以向文件读写文本数据。</p><p>文件字符流示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReaderWriterDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FILEPATH</span> <span class="token operator">=</span> <span class="token string">"demo.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token function">writeStream</span><span class="token punctuation">(</span><span class="token constant">FILEPATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content is :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">readStream</span><span class="token punctuation">(</span><span class="token constant">FILEPATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> filepath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Writer</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> filepath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      c<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> tmp<span class="token punctuation">;</span>      len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file char nums is : "</span> <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字节流转字符流</strong></p><p>我们可以在程序中通过<code>InputStream</code>和<code>Reader</code>从数据源中读取数据，然后也可以在程序中将数据通过<code>OutputStream</code>和<code>Writer</code>输出到目标媒介中。</p><p>使用<code>InputStreamReader</code>可以将输入字节流转化为输入字符流；使用<code>OutputStreamWriter</code>可以将输出字节流转化为输出字符流。</p><p>字节流转字符流示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamToCharacterDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">stream2Writer</span><span class="token punctuation">(</span><span class="token class-name">String</span> filepath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"demo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Writer</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">stream2Reader</span><span class="token punctuation">(</span><span class="token class-name">String</span> filepath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"demo1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Reader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> cahr<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符流vs字节流"><a href="#字符流vs字节流" class="headerlink" title="字符流vs字节流"></a>字符流vs字节流</h3><p><strong>相同点：</strong></p><p>字节流与字符流都有<code>read()</code>、<code>write()</code>、<code>flush()</code>、<code>close()</code>方法。这决定了他们的操作方式相似。</p><p><strong>不同点：</strong></p><ul><li>数据类型：<ul><li>字节流的数据是字节（二进制数据）。主要核心类是<code>InputStream</code>类和<code>OutputStream</code>类；</li><li>字符流的数据是字符，一个字符等于两个字节。主要核心类是<code>Reader</code>和<code>Writer</code>类；</li></ul></li><li>缓冲区：<ul><li>字节流在操作时本身不会用到缓冲区，是文件直接操作的；</li><li>字符流在操作时是使用了缓冲区，通过缓冲区再操作文件；</li></ul></li></ul><p><strong>使用场景：</strong></p><ul><li>纯文本：能同时支持字符流和字节流；</li><li>媒体类文件：图片、影音文件等只能以字节流进行读写；</li></ul><h1 id="Java-NIO模型"><a href="#Java-NIO模型" class="headerlink" title="Java NIO模型"></a>Java NIO模型</h1><h2 id="NIO简介"><a href="#NIO简介" class="headerlink" title="NIO简介"></a>NIO简介</h2><p>NIO是一种同步非阻塞的I/O模型，在Java1.4中引入的NIO框架，对应的<code>java.nio</code>包，提供了<code>Channel</code>、<code>Selector</code>、<code>Buffer</code>等抽象。</p><p>NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。NIO提供了与传统BIO模型中的<code>Socket</code>和<code>ServerSocket</code>相对应的<code>SocketChannel</code>和<code>ServerSocketChannel</code>两种不同的套接字通道实现，两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性较差；非阻塞模式正好相关，对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的网络用用，使用NIO的非阻塞模式来来发。</p><h3 id="NIO与BIO区别"><a href="#NIO与BIO区别" class="headerlink" title="NIO与BIO区别"></a>NIO与BIO区别</h3><p><strong>Non-blocking IO（非阻塞）</strong></p><p>BIO是阻塞的，NIO是非阻塞的。</p><p>BIO的各种流是阻塞的。这意味着，当一个线程调用<code>read()</code>或<code>write()</code>时，该线程被阻塞，知道一些数据被读取，或者数据完全写入。在此期间，该线程不能再干其他任何事。</p><p>NIO使我们可以进行非阻塞IO操作。比如说，单线程中从通道读取数据到<code>buffer</code>，同时可以继续做别的事情吗，当数据读取到<code>buffer</code>中后，线程再继续处理数据。写数据类似。另外，非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同事可以去做别的事情。</p><p><strong>Buffer</strong></p><p>BIO面向流（Stream oriented），而NIO面向缓冲区（buffer oriented）。</p><p><code>Buffer</code>是一个对象，它包含一些要写入或者读出的数据。在NIO类库中加入<code>Buffer</code>对象，提现了NIO与BIO的一个重要区别。在面向流的BIO中可以将数据直接写入或者将数据直接读到Stream对象中。虽然Stream中也有<code>Buffer</code>开头的扩展类，但只是流的包装类，还是从流读到缓冲区，而NIO确实直接读取到<code>Buffer</code>中进行操作。</p><p>在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读缓冲区中的数据；在写入数据时，写入到缓冲区中。任何访问NIO中的数据，都是通过缓冲区操作。</p><p>最常用的缓冲区是<code>ByteBuffer</code>，一个<code>ByteBuffer</code>提供了一组用于操作<code>byte</code>数组。除了<code>ByteBuffer</code>，还有其他的一些缓冲区，事实上，每一种Java基本类型（除<code>Boolean</code>外）都对应一种缓冲区。</p><p><strong>Channel</strong></p><p>NIO通过<code>Channel</code>进行读写。</p><p>通道是双向的，可读也可写，而流的读写是单向的。无论读写，通道只能与<code>Buffer</code>交互。因为<code>Buffer</code>，通道可以异步地读写。</p><p><strong>Selector</strong></p><p>NIO有选择器，而IO没有。</p><p>选择器用于使用单个线程处理多个通道。因此，它需要较少的线程来处理这些通道。线程之间的切换对于操作系统来说是昂贵的。因此，为了提高 系统效率，选择器是有用的。</p><h3 id="NIO基本流程"><a href="#NIO基本流程" class="headerlink" title="NIO基本流程"></a>NIO基本流程</h3><p>通常来说NIO中的所有IO都是从<code>Channel</code>开始的：</p><ul><li>从通道读取数据：创建一个缓冲区，然后请求通道读取数据；</li><li>从通道写入数据：创建一个缓冲区，填充数据并要求通道写入数据；</li></ul><h3 id="NIO核心组件"><a href="#NIO核心组件" class="headerlink" title="NIO核心组件"></a>NIO核心组件</h3><p>NIO包含以下几个核心组件：</p><ul><li>Channel</li><li>Buffer</li><li>Selector</li></ul><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p>通道是对BIO中的流的模拟，可以通过它读写数据。</p><p><code>Channel</code>，类似在<code>Linux</code>之类的操作系统上看到的文件描述符，是NIO中被用来支持批量式IO操作的一种抽象。</p><p><code>File</code>或者<code>Socket</code>，通常被认为是比较高层次的抽象，而<code>Channel</code>则是更加操作系统底层的一种抽象，这也使得NIO得以充分利用现代操作系统底层机制，获得特定场景的性能优化，例如DMA（<code>Direct Momory Access</code>）等。不同层次的抽象是相互关联的，我们可以通过<code>Socket</code>获取<code>Channel</code>，反之亦然。</p><p>通道与流的不同之处在于：</p><ul><li>流是单向的：一个流只能单纯的负责读或者写；</li><li>通道是双向的：一个通道可以同时用于读写；</li></ul><p>通道包括以下类型：</p><ul><li><code>FileChannel</code>：从文件中读写数据；</li><li><code>DatagramChannel</code>：通过UDP读写网络中的数据；</li><li><code>SocketChannel</code>：通过TCP读写网络中数据；</li><li><code>ServerSocketChannel</code>：可以监听新增的TCP连接，对每一个新进来的连接都会创建一个<code>SocketChannel</code>；</li></ul><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>NIO与传统I/O不同，它是基于块（<code>Block</code>）的，它以块为基本单位处理数据。<code>Buffer</code>是一块连续的内存块，是NIO读写数据的缓冲。<code>Buffer</code>可以将文件一次性读入内存再做后续处理，而传统的方式是边读文件边处理数据。</p><p>向<code>Channel</code>读写的数据都必须先置于缓冲区。也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读写进程。</p><p>BIO和NIO已经很好地继承了，<code>java.io.*</code>已经以NIO为基础重新实现了，所以现在它可以利用NIO的一些特性。例如，<code>java.io.*</code>包中的一些包含以块的形式读写数据的方法，这使得即使在面向流的系统中，处理速度也会更快。</p><p>缓冲区包含以下类型：</p><ul><li><code>ByteBuffer</code></li><li><code>CharBuffer</code></li><li><code>ShortBuffer</code></li><li><code>IntBuffer</code></li><li><code>LongBuffer</code></li><li><code>FloatBuffer</code></li><li><code>DoubleBuffer</code></li></ul><h3 id="缓冲区状态容量"><a href="#缓冲区状态容量" class="headerlink" title="缓冲区状态容量"></a>缓冲区状态容量</h3><ul><li><code>capacity</code>：最大容量；</li><li><code>position</code>：当前已读写的字节数；</li><li><code>limit</code>：还可以读写的字节数；</li><li><code>mark</code>：记录上一次<code>position</code>的位置，默认为0，算是一个便利性的考虑，往往不是必须的。</li></ul><p>缓冲区状态变量的变更过程：</p><ol><li>新建一个大小为8个字节的缓冲区，此时<code>position</code>为0，而<code>limit</code>=<code>capacity</code>=8。<code>capacity</code>变量不会改变；</li><li>从输入通道中读取5个字节数据写入到缓冲区中，此时<code>position</code>=5，而<code>limit</code>保持不变；</li><li>在将缓冲区的数据写到输出通道之前，需要先调用<code>flip()</code>方法，这个方法将<code>limit</code>设置为当前<code>position</code>，并将<code>position</code>设置为0；</li><li>从缓冲区中取4个字节到输出缓冲中，此时<code>position</code>设为4；</li><li>最后需要调用<code>clear()</code>方法来清空缓冲区，此时<code>position</code>和<code>limit</code>都被设置为最初位置；</li></ol><p>NIO快速复制文件示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fastCopy</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span><span class="token class-name">String</span> dest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//获取源文件输入字节流</span>  <span class="token class-name">FileInputStream</span> fin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取输入字节流的文件通道</span>  <span class="token class-name">FileChannel</span> fci <span class="token operator">=</span> fin<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取目标文件的输出字节流</span>  <span class="token class-name">FileOutputStream</span> fout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取输出字节流通道</span>  <span class="token class-name">FileChannel</span>  fco <span class="token operator">=</span> fout<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为缓冲区分配内存</span>  <span class="token class-name">ByteBuffer</span> bb <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> fci<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        bb<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fco<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span>        bb<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DirectBuffer"><a href="#DirectBuffer" class="headerlink" title="DirectBuffer"></a>DirectBuffer</h3><p>NIO还提供了一个可以直接访问物理内存的类<code>DirectBuffer</code>。普通的<code>Buffer</code>分配的是JVM堆内存，而<code>DirectBuffer</code>是直接分配物理内存。</p><p>数据要输出到外部设备，必须先从用户空间复制到内核空间，再复制到输出设备，而<code>DirectBuffer</code>则是直接将步骤简化为从内核空间复制到外部设备，减少了数据拷贝。</p><p><code>DirectBuffer</code>申请的是非JVM的物理内存，所以创建和销毁的代驾都很高。<code>DirectBuffer</code>申请的内存并不是直接由JVM负责垃圾回收，但在<code>DirectBuffer</code>包装类被回收时，会通过Java引用机制来释放该内存块。</p><h2 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h2><p>NIO常常被叫做非阻塞IO，主要是因为NIO在网络通信中的非阻塞特性被广泛使用。</p><p><code>Selector</code>是Java NIO编程的基础。用于检查一个或多个NIO的<code>Channel</code>状态是否处于可读、可写。</p><p>NIO实现了IO多路复用中的Reactor模型：</p><ul><li>一个线程使用一个选择器通过轮询的方式去监听多个通道上的事件（<code>read</code>、<code>accept</code>），如果某个通道上发生监听事件，这个通道就处于就绪状态，然后进行IO操作；</li><li>通过配置监听的通道为非阻塞，那么当通道上的IO事件还未到达时，就不会进入阻塞状态一直等待，而是继续轮询其他通道，找到IO事件已经到达的通道执行；</li><li>因为创建和切换线程的开销很大，因此使用一个线程来处理多个事件而不是一个线程处理一个事件具有更好的性能。</li></ul><blockquote><p>只有<code>SocketChannel</code>才能配置为阻塞，而<code>FileChannel</code>不行；</p><p>目前操作系统的IO多路复用机制都使用了<code>epoll</code>，相比传统的<code>select</code>机制，<code>epoll</code>没有最大连接句柄1024的限制，所以<code>Selector</code>在理论上可以轮询成千上万的客户端。</p></blockquote><p><strong>创建选择器</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注册选择器</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ssc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通道必须配置为非阻塞模式，否则使用选择器就没有任何意义了，因为如果通道在某个事件上被阻塞，那么服务器就不能响应其它事件，必须等待这个事件处理完毕才能去处理其它事件，显然这和选择器的作用背道而驰。</p><p>在将通道注册到选择器上时，还需要指定要注册的具体事件，主要有以下几类：</p><ul><li><code>SelectionKey.OP_CONNECT</code>；</li><li><code>SelectionKey.OP_ACCEPT</code>；</li><li><code>SelectionKey.OP_READ</code>；</li><li><code>SelectionKey.OP_WRITE</code>；</li></ul><p><strong>监听事件</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>select()</code>来监听到达的事件，它会一直阻塞知道有至少一个事件到达。</p><p><strong>获取事件</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keyIterator <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span>keyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>  <span class="token punctuation">}</span>  keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>事件循环</strong></p><p>因为一次<code>select()</code>调用不能处理完所有的事件，并且服务器端有可能需要一直监听事件，因此服务器端处理事件的代码一般会放在一个死循环内。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keyIterator <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">itertor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> keyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//...</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//...</span>    <span class="token punctuation">}</span>    keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>套接字NIO示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ssc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span>ss<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">InetSocketAddress</span> addr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKeys</span><span class="token punctuation">&gt;</span></span> keyIterator <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> keyInterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">ServerSocketChannel</span> ssc1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">SocketChannel</span> ss1 <span class="token operator">=</span> ss1<span class="token punctuation">.</span><span class="token function">accpet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ss1<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ss1<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">SocketChannnel</span> ss2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">readDataFromSocketChannel</span><span class="token punctuation">(</span>ss2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ss2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readDataFromSocketChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ss<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">ByteBuffer</span> bb <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      bb<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>            bb<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> limit <span class="token operator">=</span> bb<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>limit<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>limit<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> bb<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>      bb<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOClient</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内存映射文件</strong></p><p>内存映射文件IO是一种读和写文件数据的方法，它可以比常规的基于流或者基于通道的IO快得多。</p><p>向内存映射文件写入可能是危险的，只是改变数组的单个元素这样的简单操作，就可能还会直接修改磁盘上的文件。修改数据与将数据保存到磁盘是没有分开的。</p><h2 id="NIO-vs-BIO"><a href="#NIO-vs-BIO" class="headerlink" title="NIO vs BIO"></a>NIO vs BIO</h2><p>BIO与NIO最重要的区别是数据打包和传输的方式：BIO以流的方式处理数据，而NIO以块的方式处理数据。</p><ul><li>面向流的BIO一次处理一个字节数据：一个输入流产生一个字节数据，一个输出流消费一个字节数据。以流式数据创建过滤器非常容器，链接几个过滤器，以便每个过滤器只负责复杂处理机制的一部分。不利的一面是，面向流的IO通常效率非常低；</li><li>面向块的NIO一次处理一个数据块，按块处理数据比按流处理数据要快得多。但是面向块的NIO缺少一些面向流的BIO所具有的的优雅性和简单性；</li></ul><h1 id="Java序列化"><a href="#Java序列化" class="headerlink" title="Java序列化"></a>Java序列化</h1><h2 id="Java序列化简介"><a href="#Java序列化简介" class="headerlink" title="Java序列化简介"></a>Java序列化简介</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210727000402678.png" alt="image-20210727000402678"><ul><li>序列化（<code>Serialize</code>）：序列化是将对象转换为字节流的过程；</li><li>反序列化（<code>Deserialize</code>）：反序列化是将字节流转换为对象；</li><li>序列化用途：<ul><li>序列化可以将对象的字节序列持久化—保存在内存、文件、数据库中；</li><li>在网络上传送对象的字节序列；</li><li>RMI（远程方法调用）；</li></ul></li></ul><blockquote><p>使用Java对象序列化，在保存对象时，会将其状态保存为一组字节；在未来，再将这些字节组装成对象。必须注意的是，对象序列化保存的是对象的“状态”，即它的成员变量。对象序列化不会关注类中的静态变量。</p></blockquote><h2 id="Java序列化与反序列化"><a href="#Java序列化与反序列化" class="headerlink" title="Java序列化与反序列化"></a>Java序列化与反序列化</h2><p>Java通过对象输入输出流来实现序列化和反序列化：</p><ul><li><code>java.io.ObjectOutputStream</code>类的<code>writeObject()</code>方法可以实现序列化；</li><li><code>java.io.ObjectInputStream</code>类的<code>readObject()</code>方法用于实现反序列化；</li></ul><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializeDemo01</span> <span class="token punctuation">{</span>  <span class="token keyword">enum</span> <span class="token class-name">Sex</span><span class="token punctuation">{</span>    <span class="token constant">MALE</span><span class="token punctuation">,</span>    <span class="token constant">FEMALE</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token class-name">SerialVersion</span> <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Sex</span> sex<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Integer</span> age<span class="token punctuation">,</span> <span class="token class-name">Sex</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Overide</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"Person { name ="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span> <span class="token string">", age = "</span> <span class="token operator">+</span> age <span class="token string">" , sex = "</span> <span class="token operator">+</span> sex<span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutoutStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token class-name">Sex</span><span class="token punctuation">.</span><span class="token constant">MALE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span><span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span><span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token string">"demo.txt"</span><span class="token punctuation">;</span>    <span class="token function">serialize</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deserialize</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h2><p>被系列化的类必须是属于<code>Enum</code>、<code>Array</code>和<code>Serializable</code>类型中的任意一种，否则将抛出<code>NotSerializableException</code>异常。这是因为：在序列化操作过程中会对类型进行检查，如果不满足序列化类型要求，就会抛出异常。</p><h3 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h3><p><code>serialVersionUID</code>是Java为每个序列化类产生的版本标识。它用来保证在反序列化时，发送方发送的和接收方接收的是可兼容的对象。如果接收方接受的类的<code>serialVersionUID</code>与发送方发送的<code>serialVersionUID</code>不一致，会抛出<code>InvalidClassException</code>。</p><p>如果可序列化类没有显示声明<code>serialVersionUID</code>，则序列化运行时将基于该类的各个方面计算该类的默认<code>serialVersionUID</code>值。但处于良好的编程习惯，建议在每个序列化的类中显示指定<code>serialVersionUID</code>的值。因为不同的JDK可能会生成不同的<code>serialVersionUID</code>默认值，从而导致在反序列化时抛出<code>InvalidClassException</code>。</p><p><code>serialVersionUID</code>字段必须指定为<code>static final long</code>类型。</p><h3 id="默认序列化机制"><a href="#默认序列化机制" class="headerlink" title="默认序列化机制"></a>默认序列化机制</h3><p>如果让某个类实现<code>Serializable</code>接口，而没有其它任何处理的话，那么就会使用默认序列化机制。</p><p>使用默认系列化机制，在序列化对象时，不仅会序列化当前对象本身，还会对其父类的字段以及该对象引用的其它对象也进行序列化，并且递归序列化引用的对象。</p><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><p>在实际应用中，可能希望序列化过程忽略某些敏感信息，或者简化序列化过程，降低序列化开销。</p><p>将不希望序列化的字段声明为<code>transient</code>，默认序列化机制将忽略该字段内容，且序列化后无法访问该字段；</p><h2 id="Externalizable接口"><a href="#Externalizable接口" class="headerlink" title="Externalizable接口"></a>Externalizable接口</h2><p><code>Externalizable</code>是JDK提供的另外一个序列化接口。</p><p>可序列化类实现<code>Externalizable</code>接口之后，基于<code>Serializable</code>接口的默认序列化机制就会失效。</p><ul><li><code>Externalizable</code>继承于<code>Serializable</code>，并增加了两个方法：<code>writeExternal()</code>与<code>readExternal()</code>。这两个方法在序列化和反序列化过程中会被自动调用，以便执行执行一些特殊操作。当使用该接口时，序列化的细节需要由程序员去完成。如未重写方法，则不会进行任何序列化与反序列化操作。</li><li>使用<code>Externalizable</code>进行序列化，当读取对象时，会调用被序列化类的无参构造方法区创建一个新的对象；然后再将被保存对象的字段和值分别填充到新的对象中。所以实现<code>Externalizable</code>接口必须提供一个无参构造方法，且访问权限为<code>public</code>。</li></ul><h3 id="Externalizable替代方案"><a href="#Externalizable替代方案" class="headerlink" title="Externalizable替代方案"></a>Externalizable替代方案</h3><p>通过<code>Externalizable</code>接口控制序列化与反序列化细节的替代方案为：实现<code>Serializable</code>并添加<code>writeObject(ObjectOutputStream out)</code>与<code>readObject(ObjectInputStream in) </code>方法，序列化与反序列化时会自动回调这两个方法。</p><h3 id="readResolve方法"><a href="#readResolve方法" class="headerlink" title="readResolve方法"></a>readResolve方法</h3><p>为了在单例模式中仍然保持序列的特性，尅使用<code>readResolve()</code>方法，在该方法中直接返回类的实例。</p><h2 id="Java序列化问题"><a href="#Java序列化问题" class="headerlink" title="Java序列化问题"></a>Java序列化问题</h2><p>Java的序列化能保证对象状态的持久保存，但是遇到一些对象结构复杂的情况还是难以处理，例如如下场景：</p><ul><li>父类是<code>Serializable</code>，则所有子类都可以序列化；</li><li>子类是<code>Serializable</code>，而父类不是，此时子类可以正确序列化，父类的属性不会被序列化，且不报错（父类属性丢失）；</li><li>如果序列化的属性是对象，则对象也必须是Serializable`，否则会报错；</li><li>反序列化时，如果对象的属性有修改或删减，则修改的部分属性会丢失，但不会报错；</li><li>反序列化时，如果<code>serialVersionUID</code>被修改，则反序列化会失败；</li></ul><h2 id="Java序列化缺陷"><a href="#Java序列化缺陷" class="headerlink" title="Java序列化缺陷"></a>Java序列化缺陷</h2><ul><li>不支持跨语言：Java序列化目前只适用于基于Java语言实现的框架，其他语言大部分都没有使用Java的序列化框架，也没有实现Java徐泪花这套协议。因此，如果两个基于不同语言编写的应用程序相互通信，则无法实现两个应用服务之间传输对象的序列化与反序列化；</li><li>容易被攻击：对象是通过<code>ObjectInputStream</code>上调用<code>readObject()</code>方法进行反序列化的，它可以将类路径上几乎所有实现了<code>Serializable</code>接口的对象都实例化。这意味着，在反序列化字节流的过程中，该方法可以执行任意类型的代码，这是非常危险的。对于需要长时间进行反序列化的对象，不需要执行任何代码，都可以发起一次攻击。攻击者可以创建循环对象链，然后将序列化后的对象传输到程序中反序列化，这种情况会导致<code>hashCode</code>方法被调用次数诚指数级爆发增长，从而引发栈溢出异常；</li><li>序列化后流过大：Java序列化中使用<code>ObjectOutputStream</code>来实现对象二进制编码，编码后数组很大，非常影响存储和传输效率；</li><li>序列化性能太差：Java序列化性能耗时比较长；序列化的速度也是体现序列化性能的重要指标，如果序列化的速度慢，就会影响网络通信的效率，从而增加系统的响应时间；</li><li>序列化编程限制：<ul><li>Java官方的序列化需要实现<code>Serializable</code>接口；</li><li>Java官方的序列化需要关注<code>serialVersionUID</code>属性；</li></ul></li></ul><h2 id="序列化技术选型"><a href="#序列化技术选型" class="headerlink" title="序列化技术选型"></a>序列化技术选型</h2><p>因为Java序列化存在的缺陷问题，我们建议使用第三方序列化工具来替代，根据不同使用场景来进行选型：</p><ol><li>性能敏感，开发体验要求不高：<code>thrift</code>、<code>protobuf</code>；</li><li>开发体验敏感，性能有要求：<code>hessian</code>；</li><li>序列化后数据有良好可读性：<code>jackson</code>、<code>gson</code>、<code>fastjson</code>；（可转为<code>json</code>、<code>xml</code>格式文件）</li></ol><h1 id="Java-IO工具类"><a href="#Java-IO工具类" class="headerlink" title="Java IO工具类"></a>Java IO工具类</h1><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p><code>File</code>类是<code>java.io</code>包中唯一对文件本身进行操作的类。它可以对文件、目录进行增删查操作。</p><h3 id="createNewFile"><a href="#createNewFile" class="headerlink" title="createNewFile"></a>createNewFile</h3><p>可以使用<code>createNewFile()</code>方法创建一个新文件。</p><blockquote><p><code>Windows</code>系统使用反斜杠（<code>\</code>）表示目录的分隔符；</p><p><code>Linux</code>系统使用正斜杠（<code>/</code>）表示目录的分隔符；</p></blockquote><p>良好的开发习惯是使用<code>File.separator</code>静态常量，可以根据所在操作系统选取对应的分隔符。</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p><code>mkdir()</code>可以用来创建文件夹，但是如果需要创建目录的父目录不存在，则无法创建成功。如果需要递归创建目录，可使用<code>mkdirs()</code>方法。</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p><code>delete()</code>用来删除文件或目录。当删除目标为目录且目录不为空时，直接调用<code>delete()</code>方法会失败。</p><p>删除非空目录方案是通过递归来实现。</p><h3 id="list和listFiles"><a href="#list和listFiles" class="headerlink" title="list和listFiles"></a>list和listFiles</h3><p><code>File</code>中给出了两种列出文件夹内容的方法：</p><ul><li><code>list()</code>：列出全部名称，返回一个字符串数组；</li><li><code>listFiles()</code>：列出完整的路径，返回一个<code>File</code>对象数组；</li></ul><h2 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h2><p><code>RandomAccessFile</code>类是随机读取类，它是一个完全独立的类。</p><p>它适用于由大小已知的记录组成的文件，所以我们可以用<code>seek()</code>将记录从一处转移到另一处，然后读取或者修改记录。</p><p>文件中记录的大小不一定都相同，只要能够确定哪些记录有多大以及他们在文件中的位置即可。</p><h3 id="RandomAccessFile写操作"><a href="#RandomAccessFile写操作" class="headerlink" title="RandomAccessFile写操作"></a>RandomAccessFile写操作</h3><p>当使用<code>rw</code>方式声明<code>RandomAccessFile</code>对象时，如果要写入的文件不存在，则系统自动创建。</p><h3 id="RandomAccessFile读操作"><a href="#RandomAccessFile读操作" class="headerlink" title="RandomAccessFile读操作"></a>RandomAccessFile读操作</h3><p>读取是直接使用<code>r</code>模式即可，以只读方式打开文件。</p><p>读取时所有字符串只能按照<code>byte</code>数组方式读取出来，而且长度必须和写入时的固定大小相匹配。</p><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p><code>System</code>类中提供了大量的静态方法，可以获取系统相关的信息或系统级操作，其中提供了3个常用于IO的静态成员：</p><ul><li><code>System.out</code>：一个<code>PrintStream</code>流。<code>System.out</code>一般会把你写到其中的数据输出到控制台上；<code>System.out</code>通常仅用在类似命令行工具的控制台程序上。<code>System.out</code>也经常用于打印程序的调试信息；</li><li><code>System.err</code>：一个<code>PrintStream</code>流。<code>System.err</code>与<code>System.out</code>的运行方式类似，但它更多的是用于打印错误文本。一些IDE会将错误信息以红色文本通过<code>System.err</code>输出到控制台上；</li><li><code>System.in</code>：一个典型的连接控制台程序和键盘输入的<code>InputStream</code>流。通常当数据通过命令行参数或者配置文件传递给命令行Java程序的时候；</li></ul><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p><code>Scanner</code>可以获取用户的输入，并对数据进行校验。</p><h1 id="Java网络编程"><a href="#Java网络编程" class="headerlink" title="Java网络编程"></a>Java网络编程</h1><p>网络编程是指编写运行在多个设备的程序，这些设备通过网络连接起来。</p><p><code>java.net</code>包中提供了低层次的网络通信细节。程序员可以直接使用这些类和接口，来专注于解决问题，而不用关注通信细节。</p><p><code>java.net</code>包中提供了两种常见的网络协议的支持：</p><ul><li>TCP：<code>TCP</code>是传输控制协议的缩写，它保障了两个应用程序之间的可靠通信。通常用于互联网协议，也称<code>TCP/IP</code>；</li><li>UDP：<code>UDP</code>是用户数据包协议的缩写，一个无连接的协议。提供了应用程序之间要发送的数据的数据包；</li></ul><h2 id="Socket与ServerSocket"><a href="#Socket与ServerSocket" class="headerlink" title="Socket与ServerSocket"></a>Socket与ServerSocket</h2><p><code>Socket</code>（套接字）使用TCP提供了两台计算机之间的通信机制。客户端程序创建一个套接字，并尝试连接服务端套接字。</p><p>Java通过<code>Socket</code>和<code>ServerSocket</code>实现对TCP的支持。Java中的<code>Socket</code>通信可以简单理解为：<code>java.net.Socket</code>代表客户端，<code>java.net.ServerSocket</code>代表服务端，二者可以建立连接，然后通信。</p><p><code>Socket</code>通信基本流程：</p><ul><li>服务器实例化一个<code>ServerSocket</code>对象，绑定服务器一个端口；</li><li>服务器调用 <code>ServerSocket</code>的 <code>accept()</code>方法，该方法一直等待，直到客户端链接到服务器的绑定端口（也叫监听端口）；</li><li>客户端实例化一个<code>Socket</code>对象，指定服务器名称和端口号来请求链接；</li><li><code>Socket</code>类的构造函数视图将客户端链接到指定的服务器和端口号，如果通信被建立，则在客户端创建一个<code>Socket</code>对象能够与服务器进行通信；</li><li>在服务端，<code>accept()</code>方法返回服务器上一个新的<code>Socket</code>引用，该引用链接到客户端的<code>Socket</code>；</li></ul><p>链接建立后，可以通过使用IO流进行通信。每一个<code>Socket</code>都有一个输出流和一个输入流。客户端的输出流链接到服务器端的输入流，而客户端的输入流链接到服务器端的输出流。</p><p>TCP是一个双向的通信协议，因此数据可以通过两个数据流在同一时间发送，以下是一些类提供的一套完整的有用的方法来实现<code>sockets</code>。</p><h3 id="ServerSocket"><a href="#ServerSocket" class="headerlink" title="ServerSocket"></a>ServerSocket</h3><p>服务器程序通过使用<code>java.net.ServerSocket</code>类以获取一个端口，并且监听客户端链接此端口的请求。</p><p><strong>ServerSocket构造方法</strong></p><ul><li><code>ServerSocket()</code>：创建非绑定服务器套接字；</li><li><code>ServerSocket(int port) </code>：创建绑定到特定端口的服务器套接字；</li><li><code>ServerSocket(int port, int backlog) </code>：利用指定的<code>backlog</code>创建服务器套接字并将其绑定到指定的本地端口号；</li><li><code>ServerSocket(int port,int backlog, InetAddress addr)</code>：使用指定的端口，监听<code>backlog</code>和要绑定的本地IP地址创建服务器；</li></ul><p><strong>ServerSocket常用方法</strong></p><p>创建非绑定服务器套接字，如果<code>ServerSocket</code>构造方法没有抛出异常，就意味着你的应用程序已经成功绑定到指定的端口，并且侦听客户端请求。</p><ul><li><code>int getLocalPort()</code>：返回此套接字在其上侦听的端口；</li><li><code>Socket accept()</code>：监听并接受到此套接字的连接；</li><li><code>void setSoTimeout(int timeout)</code>：通过指定超时值启用/禁用SO_TIMEOUT，以毫秒为单位；</li><li><code>void bind(SocketAddress host,int backlog)</code>：将<code>ServerSocket</code>绑定到特定地址（IP和端口）；</li></ul><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p><code>java.net.Socket</code>类代表客户端和服务器都用来互相沟通的套接字。</p><p><strong>Socket构造方法</strong></p><ul><li><code>Socket()</code>：通过系统默认类型的<code>SocketImpl</code>创建未连接套接字；</li><li><code>Socket(String host, int port)</code>：创建一个流套接字并将其链接到指定主机上的指定端口；</li><li><code>Socket(InetAddress host,int port)</code>：创建一个流套接字并将其链接到指定IP地址的指定端口；</li><li><code>Socket(String host,int port,InetAddress localAddress int localPort)</code>：创建一个套接字并将其链接到指定远程主机上的指定远程端口；</li><li><code>Socket(InetAddress host,int port,InetAddress localAddress ,int localPort)</code>：创建一个套接字并将其链接到指定远程地址上的指定远程端口；</li></ul><p>当<code>Socket</code>构造方法返回，并没有简单的实例化一个<code>Socket</code>对象，它实际上会尝试链接到指定的服务器端口。</p><p><strong>Socket常用方法</strong></p><p>实际上，客户端与服务端都有一个<code>Socket</code>对象，所以无论客户端耗时服务端都能够调用这些方法。</p><ul><li><code>void connect(SocketAddress host,int timeout)</code>：将此套接字链接到服务器，并指定一个超时值；</li><li><code>InetAddress getInetAddress()</code>：返回套接字链接的地址；</li><li><code>int getPort()</code>：返回套接字链接的远程端口；</li><li><code>int getLocalPort()</code>：返回套接字绑定的本地端口；</li><li><code>SocketAddress getRemoteSocketAddress()</code>：返回套接字链接的端点的地址，如果未连接则返回<code>null</code>；</li><li><code>InputStream getInputStream()</code>：返回套接字的输入流；</li><li><code>OutputStream getOutputStream()</code>：返回套接字的输出流；</li><li><code>void close()</code>：关闭套接字；</li></ul><h2 id="DatagramSocket与DatagramPacket"><a href="#DatagramSocket与DatagramPacket" class="headerlink" title="DatagramSocket与DatagramPacket"></a>DatagramSocket与DatagramPacket</h2><p>Java通过<code>DatagramSocket</code>和<code>DatagramPacket</code>实现对UDP协议的支持。</p><ul><li><code>DatagramSocket</code>：通信类；</li><li><code>DatagramPacket</code>：数据包类；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPServer</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token comment">//服务端绑定端口3000</span>    <span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将发送信息使用buf保存</span>    <span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"send msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPClient</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> dp<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> dp<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h2><p><code>InetAddress</code>类表示互联网协议（IP）地址；</p><p><code>InetAddress</code>没有公有的构造函数，只能通过静态方法来创建实例；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByAddress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>可以直接从URL中读取字节流数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token class-name">URL</span> url  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">InputStream</span> is <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BufferReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> line<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：JVM内存管理</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-24-jvm-nei-cun-guan-li/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-24-jvm-nei-cun-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h1><p>JVM能够跨平台工作，主要是由于JVM屏蔽了与各个计算机平台相关的软件、硬件之间的差异。</p><h2 id="JVM简介"><a href="#JVM简介" class="headerlink" title="JVM简介"></a>JVM简介</h2><h3 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h3><p>真实的计算机体系结构的核心部分包含：</p><ul><li>指令集</li><li>计算单元（CPU）</li><li>寻址方式</li><li>集群器</li><li>存储单元</li></ul><h3 id="JVM体系结构-1"><a href="#JVM体系结构-1" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h3><p>JVM体系结构与计算机体系结构相似，它的核心部分包括：</p><ul><li>JVM指令集</li><li>类加载器</li><li>执行引擎—相当于JVM的CPU</li><li>内存区</li><li>本地方法调用</li></ul><h2 id="Hotspot架构"><a href="#Hotspot架构" class="headerlink" title="Hotspot架构"></a>Hotspot架构</h2><p><code>Hotspot</code>是当前最流行的JVM。</p><p>Java虚拟机的主要组件，包括类加载器、运行时数据区和执行引擎。</p><p><code>Hotspot</code>虚拟机拥有一个架构，它支持强大特性和能力的基础平台，支持实现高性能和强大的可伸缩的能力。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210727221408299.png" alt="image-20210727221408299"><h3 id="Hotspot性能指标"><a href="#Hotspot性能指标" class="headerlink" title="Hotspot性能指标"></a>Hotspot性能指标</h3><p>Java虚拟机的性能指标主要有两点：</p><ul><li>停顿时间：响应延迟是指一个应用回应一个请求的速度有多快。对关注响应能力的应用来说，长暂停时间是不可接受的，重点是在短的时间周期内内能做出响应。</li><li>吞吐量：吞吐量关注在特定的时间周期内一个应用的工作量的最大值。对关注吞吐量的应用来说长暂停时间是可以接受的。由于高吞吐量的应用关注的基准在更长周期时间上，所以快速响应时间不在考虑之内。</li></ul><h1 id="Java内存管理"><a href="#Java内存管理" class="headerlink" title="Java内存管理"></a>Java内存管理</h1><h2 id="内存介绍"><a href="#内存介绍" class="headerlink" title="内存介绍"></a>内存介绍</h2><h3 id="物理内存与虚拟内存"><a href="#物理内存与虚拟内存" class="headerlink" title="物理内存与虚拟内存"></a>物理内存与虚拟内存</h3><p>物理内存就是通常所说的RAM（随机存储器）。</p><p>虚拟内存使得多个进程在同事运行时可以共享物理内存，这里的共享只是空间上共享，在逻辑上彼此依然是隔离的。</p><h3 id="内核空间与用户空间"><a href="#内核空间与用户空间" class="headerlink" title="内核空间与用户空间"></a>内核空间与用户空间</h3><p>一个计算通常有固定大小的内存空间，但是程序并不能使用全部的空间。因为这些空间被划分为内核空间和用户空间，而程序只能使用用户空间的内存。</p><h3 id="使用内存的Java组件"><a href="#使用内存的Java组件" class="headerlink" title="使用内存的Java组件"></a>使用内存的Java组件</h3><p>Java启动后，作为一个进程运行在操作系统中。</p><p>有哪些Java组件需要占用内存呢？</p><ul><li>堆内存：Java堆，类和类加载器；</li><li>栈内存：线程</li><li>本地内存：NIO、JNI</li></ul><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p>JVM在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而简历和销毁。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210727222623699.png" alt="image-20210727222623699"><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器（<code>Program Counter Register</code>）是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。分支、循环、跳转、异常、线程恢复等都依赖于计数器。</p><p>当执行的线程数量超过CPU数量时，线程之间会根据时间片轮询争夺CPU资源。如果一个线程的时间片耗尽，或者其它原因导致这个线程的CPU资源被提前抢夺，那么这个退出的线程就需要单独的一个程序计数器，来记录下一条运行的指令，从而在线程切换后能恢复到正确的执行位置。各条线程间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p><ul><li>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；</li><li>如果正在执行的是<code> Native</code>方法，这个计数器值则为空；</li></ul><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>Java虚拟机栈（<code>Java Virtual Machine Stacks</code>）也是线程私有的，它的生命周期与线程相同。</p><p>每个Java方法在执行的同事都会创建一个栈帧（<code>Stack Frame</code>）用于存储局部变量表、操作数栈、常量池引用等信息。每个方法从调用直至执行完成的过程，就对应着一个栈帧在java虚拟机栈中入栈和出栈的过程。</p><ul><li>局部变量表：32位变量槽，存放了编译期克制的各种基本数据类型、对象引用、<code>ReturnAddress</code>类型；</li><li>操作数栈：基于栈的执行引擎，虚拟机把操作数栈作为它的工作区，大多数指令都要从这里弹出数据、执行运算，然后把结果压回操作数栈；</li><li>动态链接：每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用。持有这个引用是为了支持方法调用过程中的动态链接。Class文件的常量池中有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为静态解析。另一部分将在每一次的运行期间转化为直接引用，这部分称为动态链接；</li><li>方法出口：返回方法被调用的位置，恢复上层方法的局部变量和操作数栈，如果无返回值，则把它压入调用者的操作数栈；</li></ul><blockquote><p>该区域可能抛出以下异常：</p><ul><li>线程请求的栈深度超过最大值，会抛出<code>StackOverflowError</code>异常；</li><li>如果虚拟机栈进行动态扩展时，无法申请到足够内存，就会抛出<code>OutOfMemoryError</code>；</li></ul><p>参数配置：</p><p>可通过<code>-Xss</code>这个虚拟机参数来指定一个程序的Java虚拟机栈内存大小；</p><p><code>java -Xss512M HackTheJava</code></p></blockquote><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈（<code>Native Method Stack</code>）与虚拟机栈的作用相似。</p><p>二者的区别在于：虚拟机栈为Java方法服务，而本地方法区为Native方法服务。本地方法由C语言实现。</p><blockquote><p>本地方法栈也会抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常；</p></blockquote><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆（<code>Java Heap</code>）的作用就是存放对象实例，几乎所有的对象实例都是在这里分配内存。</p><p>Java堆是垃圾收集的主要区域（因此也叫GC堆）。现代的垃圾收集器基本都是采用分代收集算法，该算法的思想是针对不同的对象采取不同的垃圾回收算法。</p><p>虚拟机将Java堆分为以下三块：</p><ul><li>新生代：<code>Young Generation</code><ul><li><code>Eden</code>：占比80%</li><li><code>From Survivor</code>：占比10%</li><li><code>To Survivor</code>：占比10%</li></ul></li><li>老年代：<code>Old Generation</code></li><li>永久代：<code>Permanent Generation</code></li></ul><p>当一个对象被创建时，它首先进入新生代，之后有可能被转移到老年代中。新生代存放着大量的生命很短的对象，因此新生代在三个区域中垃圾回收的频率最高。</p><blockquote><p>Java堆不需要连续内存，并可以动态扩展其内存，扩展失败会抛出<code>OutOfMemoryError</code>异常；</p><p>可以通过<code>-Xms</code>和<code>-Xmx</code>两个虚拟机参数来制定一个程序的Java堆内存大小，第一个参数设置初始值，第二个设置最大值；</p><p><code>java -Xm=1M -Xmx=10M HackTheJava</code></p></blockquote><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区（<code>Method Area</code>）也被称为永久代。方法区用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但一般比较难实现。</p><blockquote><p>方法区不需要连续的内存，并且可以动态扩展，扩展失败会抛出<code>OutOfMemoryError</code>异常；</p><ul><li>JDK8之前，Hotspot虚拟机把它当成永久代来进行来及回收，可通过<code>-XX:PermSize</code>和<code>-XX:MaxPermSize</code>设置；</li><li>JDK8开始，取消了永久代，用<code>metaspace</code>（元数据）区替代，可通过参数<code>-XX:MaxMetaspaceSize</code>设置；</li></ul></blockquote><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池（<code>Runtime Constant Pool</code>）是方法区的一部分，<code>Class</code>文件中除了有类的版本、字段、方法、接口等描述信息，还有一项信息是常量池（<code>Constant Pool Table</code>），用于存放编译器生成的各种字面量和符号引用，这部分内容会在类加载后被放入这个区域。</p><ul><li>字面量：文本字符串、声明为<code>final</code>的常量值等；</li><li>符号引用：类和接口的完全限定名、字段名称和描述符、方法名称和描述符；</li></ul><p>除了在编译器生成的常量，还允许动态生成，例如<code>String</code>类的<code>intern()</code>。这部分常量也会被放入运行时常量池。</p><blockquote><p>运行时常量池无法申请到内存时也会抛出<code>OutOfMemoryError</code>异常；</p></blockquote><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存（<code>Direct Memory</code>）并不是虚拟机运行时数据区的一部分，也不是JVM规范中的内存区域。</p><p>在Java 1.4中新加入了NIO类，它可以使用<code>Native</code>函数库直接分配堆外内存，然后通过一个存储在Java堆里的<code>DirectByteBuffer</code>对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和<code>Native</code>堆中来回复制数据。</p><blockquote><p>直接内存这部分也被频繁的使用，也可能导致<code>OutOfMemoryError</code>异常；</p><p>直接内存可以通过<code>-XX:MaxDirectMemorySize</code>指定，如果不指定，则默认与Java堆最大值(<code>-Xmx</code>)一样；</p></blockquote><h3 id="Java内存区域作用范围"><a href="#Java内存区域作用范围" class="headerlink" title="Java内存区域作用范围"></a>Java内存区域作用范围</h3><table><thead><tr><th>内存区域</th><th>内存作用范围</th><th>常见异常</th></tr></thead><tbody><tr><td>程序计数器</td><td>线程私有</td><td>无</td></tr><tr><td>Java虚拟机栈</td><td>线程私有</td><td><code>StackOverflowError</code>及<code>OutOfMemoryError</code></td></tr><tr><td>本地方法栈</td><td>线程私有</td><td><code>StackOverflowError</code>及<code>OutOfMemoryError</code></td></tr><tr><td>Java堆</td><td>线程共享</td><td><code>OutOfMemoryError</code></td></tr><tr><td>方法区</td><td>线程共享</td><td><code>OutOfMemoryError</code></td></tr><tr><td>运行时常量池</td><td>线程共享</td><td><code>OutOfMemoryError</code></td></tr><tr><td>直接内存</td><td>非运行时数据区</td><td><code>OutOfMemoryError</code></td></tr></tbody></table><h2 id="JVM运行原理"><a href="#JVM运行原理" class="headerlink" title="JVM运行原理"></a>JVM运行原理</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">JVMCase</span> <span class="token punctuation">{</span>  <span class="token comment">//常量</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">MAN_SEX_TYPE</span> <span class="token operator">=</span> <span class="token string">"man"</span><span class="token punctuation">;</span>  <span class="token comment">//静态变量</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">WOMAN_SEX_TYPE</span> <span class="token operator">=</span> <span class="token string">"woman"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Student</span>  stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"nick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu<span class="token punctuation">.</span><span class="token function">setSexType</span><span class="token punctuation">(</span><span class="token constant">MAN_SEX_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JVMCase</span> jvmcase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JVMCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用静态方法</span>    <span class="token function">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用非静态方法</span>    jvmcase<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" name : "</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ; sex: "</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span>getSexType <span class="token operator">+</span> <span class="token string">" ; age : "</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" say: hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token class-name">String</span> sexType<span class="token punctuation">;</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSexType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sexType<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSexType</span><span class="token punctuation">(</span><span class="token class-name">String</span> sexType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sexType <span class="token operator">=</span> sexType<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>JVM向操作系统申请内存，根据内存大小找到具体的内存分配表，然后将内存段开始地址和终止地址分配给JVM，接下来进行内部分配；</li><li>JVM获得内存空间后，会根据配置参数分配对、栈及方法区大小；</li><li>完成<code>class</code>文件加载、验证、准备及解析，其中准备节点会为类的静态变量分配内存；</li><li>JVM执行构造器<code>&lt;clinit&gt;</code>方法，编译器会在<code>.java</code>文件被编译成<code>.class</code>文件时，手机所有类的初始化代码，包括静态变量赋值、静态代码块、静态方法，收集在一起组合成<code>&lt;clinit&gt;()</code>方法；</li><li>执行<code>&lt;clinit&gt;()</code>方法，启动<code>main</code>线程，执行<code>main</code>方法；执行第一行代码，堆内存中创建一个<code>student</code>对象，<code>student</code>对象引用存放在栈中；</li><li>创建<code>JVMCase</code>对象，存入堆内存中，并将其引用存入栈中；通过<code>JVMCase</code>对象调用其方法；</li></ol><h2 id="JVM异常"><a href="#JVM异常" class="headerlink" title="JVM异常"></a>JVM异常</h2><h4 id="OutOfMemoryError"><a href="#OutOfMemoryError" class="headerlink" title="OutOfMemoryError"></a>OutOfMemoryError</h4><p><code>OutOfMemoryError</code>简称<code>OOM</code>。Java中对<code>OOM</code>的解释是，没有空闲内存，并且垃圾收集器也无法提供更多内存，通俗的解释就是：JVM内存不足。</p><p>在JVM规范中，除了程序计数器区域外，其他运行时区域都可能发生<code>OutOfMemoryError</code>异常。</p><h5 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h5><p><code>java.lang.OutOfMemoryError:Java heap space</code>这个错误意味着：堆空间溢出。</p><p>堆空间溢出有可能是<code>内存泄露（Memory Leak）</code>或<code>内存溢出（Memory Overflow）</code>。可通过使用<code>jstack</code>和<code>jmap</code>生成<code>threaddump</code>和<code>heapdump</code>，然后使用内存分析工具如MAT进行分析。</p><p><strong>Java heap space分析步骤</strong></p><ol><li>使用<code>jmap</code>或<code>-XX:+HeapDumpOnOutOfMemoryError</code>获取堆快照；</li><li>使用内存分析工具（<code>visualvm、mat、jProfile</code>等）对堆快照进行分析；</li><li>根据分析图，重点是确认内存中的对象是否是必要的，分析究竟是内存泄露还是内存溢出；</li></ol><p><strong>内存泄露</strong></p><p>内存泄露是指由于疏忽或错误造成程序未能释放已经不在使用的内存的情况。</p><p>内存泄露并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，时区了对该段内存的控制，因而造成了内存的浪费。内存泄露随着被执行的次数不断增加，最终导致内存溢出。</p><p>内存泄露常见场景：</p><ul><li>静态容器<ul><li>声明为静态（<code>static</code>）的<code>HashMap</code>、<code>Vector</code>等集合；</li><li>通俗来讲A中有B，当前只把B设置为空，A没有设置为空，回收时B无法回收。因为B被A引用；</li></ul></li><li>监听器<ul><li>监听器被注册后释放对象时，没有删除监听器；</li></ul></li><li>物理链接<ul><li>各种连接池简历了链接，未通过<code>close()</code>关闭链接；</li></ul></li><li>内部类和外部模块引用</li></ul><p>重点关注：</p><ul><li><code>FGC</code>：从应用程序启动到采样时发生<code>Full GC</code>的次数；</li><li><code>FGCT</code>：从应用程序启动到采样时<code>Full GC</code>所用的时间（单位为毫秒）；</li><li><code>FGC</code>次数越多，<code>FGCT</code>所需时间越多，越有可能发生内存泄露；</li></ul><p>如果内存泄露，可以进一步查看泄露对象到<code>GC Roots</code>的对象引用链。这样就能找到泄露对象是怎样与<code>GC Roots</code>关联并导致<code>GC</code>无法回收它们的。</p><p>导致内存泄露的常见原因是使用容器，且不断想容器中添加元素，但没有清理，导致容器内存不断膨胀。</p><p><strong>内存溢出</strong></p><p>如果不存在内存泄露，即内存中的对象确实都必须存活着，则应当检查虚拟机的堆参数（<code>-Xms</code>和<code>-Xmx</code>），与机器物理内存进行对比，看看是否可以调大。</p><h5 id="GC开销超过限制"><a href="#GC开销超过限制" class="headerlink" title="GC开销超过限制"></a>GC开销超过限制</h5><p><code>java.lang.OutOfMemoryError:GC overhead limit exceeded</code>这个错误，官方给出的定义是：超过<code>98%</code>的时间用来做GC并且回收了不到<code>2%</code>的堆内存时会抛出此异常。这意味着，发生在GC占用大量时间为释放很小空间的时候发生的，这是一种保护机制。导致异常的原因：一般是因为堆太小，没有足够的内存。</p><p>与<code>Java heap space</code>错误处理方法类似，先判断是否存在内存泄露。如果有，则修正代码，如果没有，则通过<code>-Xms</code>和<code>-Xmx</code>适当调整堆内存大小。</p><h5 id="永久代空间不足"><a href="#永久代空间不足" class="headerlink" title="永久代空间不足"></a>永久代空间不足</h5><p><code>Perm</code>（永久代）空间主要用于存放<code>Class</code>和<code>Meta</code>信息，包括类的名称和字段，带有方法字节码的方法、常量池信息，与类关联的对象数组和类型数组以及即时编译器优化。GC在主程序运行期间不会对永久代空间进行清理，默认为64M大小。</p><p>根据上面的定义，可以得出<code>PermGen</code>大小要求取决于加载的类的数量以及此类声明的大小。造成该错误的主要原因是永久代中装入了太多的类或太大的类。</p><p>在JDK8之前的版本，可以通过<code>-XX:PermSize</code>和<code>-XX:MaxPermSize</code>设置永久代空间大小，在JDK8及之后的版本，可通过<code>--XX:MaxMetaspaceSize</code>从而限制方法区大小，并简介限制其中常量池的容量。</p><p><strong>PermGen space解决方案</strong></p><ul><li><p>解决初始化时的<code>OutOfMemoryError</code></p><p>在应用程序启动期间触发由于<code>PermGen</code>耗尽导致的<code>OOM</code>时，只需要扩大<code>PermGen</code>大小，，能够将所有类加载到<code>PermGen</code>即可；</p></li><li><p>解决重新部署时的<code>OOM</code></p><p>冲洗部署应用程序 后立即发生<code>OOM</code>，一般为类加载器泄露导致。这种情况需要使用借助<code>jmap</code>等工具进行分析；</p></li><li><p>解决运行时<code>OOM</code></p><p>第一步检查是否允许GC从<code>PermGen</code>卸载类。可通过添加JVM参数<code>-XX:CMSClassUnloadingEnabled=true;-XX:+UseConcMarkSweepGC</code>允许GC扫描<code>PermGen</code>并删除不在使用的类。</p><p>第二步使用如<code>jmap</code>、<code>jstack</code>等分析工具进行分析；</p></li></ul><h5 id="元数据空间不足"><a href="#元数据空间不足" class="headerlink" title="元数据空间不足"></a>元数据空间不足</h5><p>Java8以后，JVM内存空间发生了很大变化，取消了永久代，转换为元数据区。</p><p>元数据区的内存不足，即方法区和运行时常量池的空间不足。</p><p>一个类要被垃圾回收期回收，判断条件比较苛刻。</p><p><strong>解决方案</strong></p><ul><li>增加元数据区空间：通过参数<code>-XX:MaxMetaspaceSize=512M</code>扩大元数据区空间；</li><li>删除此参数完全解除对元数据区的大小限制，JVM默认对元数据区的大小没有限制。但这可能会导致大量交换或到达本机物理内存而分配失败。</li></ul><h5 id="无法创建本地线程"><a href="#无法创建本地线程" class="headerlink" title="无法创建本地线程"></a>无法创建本地线程</h5><p><code>java.lang.OutOfMemoryError:Unable to create new native thread</code>这个错误意味着：Java应用程序已达到其可以启动线程数的限制。</p><p>当发起一个线程的创建时，虚拟机在JVM内存中创建一个<code>Thread</code>对象同时创建一个操作系统线程，而这个系统线程的内存使用的不是JVM内存，而是系统中剩下的内存。</p><p>一个JVM能够创建多个线程呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">线程数<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">MaxProcessMemory</span> <span class="token operator">-</span> <span class="token class-name">JVMMemory</span> <span class="token operator">-</span> <span class="token class-name">ReservedOsMemory</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">ThreadStackSize</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li><code>MaxProcessMemory</code>：一个进程的最大内存；</li><li><code>JVMMemory</code>：JVM内存；</li><li><code>ReservedOsMemory</code>：保留的操作系统内存；</li><li><code>ThreadStackSize</code>：线程栈大小；</li></ul><p>给JVM分配的内存越多，那么能用来创建系统线程的内存就会越少，越容易发生<code>unable to create new native thread</code>。所以，JVM内存不是分配越大越好。</p><p>通常无法创建本地线程会经历以下几个阶段：</p><ol><li>JVM内部运行的应用程序请求新的Java线程；</li><li>JVM本机代码代理为操作系统创建新本地线程的请求；</li><li>操作系统尝试创建一个新的本机线程，该线程需要将内存分配给该线程；</li><li>操作系统拒绝本机内存分配，原因是32位Java进程大小已耗尽其内存地址或操作系虚拟内存已耗尽；</li><li>引发<code>java.lang.OutOfMemoryError:Unable to create new native thread</code>错误；</li></ol><h5 id="直接内存溢出"><a href="#直接内存溢出" class="headerlink" title="直接内存溢出"></a>直接内存溢出</h5><p>由直接内存导致的内存溢出，一个明显的特征是在<code>Heap Dump</code>文件中不会看见明显的异常，如果发现<code>OOM</code>之后的<code>Dump</code>文件很小，而程序中又直接或间接使用了NIO，则可能是因为这个原因导致的。</p><h4 id="StackOverflowError"><a href="#StackOverflowError" class="headerlink" title="StackOverflowError"></a>StackOverflowError</h4><p>对应<code>Hotspot</code>虚拟机来说，栈容量只由<code>-Xss</code>参数来决定如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出<code>StackOverflowError</code>异常。</p><p>从实战来说，栈溢出的常见原因：</p><ul><li>递归函数调用层数太深</li><li>大量循环或死循环</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：JVM垃圾回收</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-25-jvm-la-ji-hui-shou/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-25-jvm-la-ji-hui-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM垃圾收集"><a href="#JVM垃圾收集" class="headerlink" title="JVM垃圾收集"></a>JVM垃圾收集</h1><p>程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有，只存在于线程的生命周期，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。垃圾回收的主要对象是Java堆和方法区。</p><h2 id="对象活着吗"><a href="#对象活着吗" class="headerlink" title="对象活着吗"></a>对象活着吗</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>给对象添加一个引用计数器，当对象增加一个引用时计数器加1，引用失效时计数器减1。引用计数为0的对象可被回收。</p><p>两个对象出现循环引用的情况下，此时引用计数器永远不为0，导致无法对它们进行回收。</p><p>因为循环引用的存在，所以Java虚拟机不适用引用计数算法。</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>通过<code>GC Roots</code>作为七点进行搜索，<code>JVM</code>将能够到达的对象是为存活，不可达的对象视为死亡。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728005638987.png" alt="image-20210728005638987"><p>可作为<code>GC Roots</code>的对象包括以下几种：</p><ul><li>虚拟机栈中引用的对象；</li><li>本地方法栈中引用的对象（<code>Native</code>方法）；</li><li>方法区中，类静态属性引用的对象；</li><li>方法区中，常量引用的对象；</li></ul><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>无论通过引用计算算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可达，判断对象是否可被回收都与引用有关。</p><p>Java具有四种强度不同的引用类型。</p><p><strong>强引用</strong></p><p>被强引用关联的对象不会被垃圾回收器回收。</p><p>强引用：使用<code>new</code>一个新对象的方式来创建强引用。</p><p><strong>软引用</strong></p><p>被软引用关联的对象，只有在内存不够的情况下才会被回收。</p><p>软引用：使用<code>SoftReference</code>类来创建软引用。</p><p><strong>弱引用</strong></p><p>被弱引用关联的对象一定会被垃圾收集器回收，也就是说它只能存活到下一次垃圾收集发生之前。</p><p>使用<code>WeakReference</code>类来实现弱引用。</p><p><strong>虚引用</strong></p><p>又被称为幽灵引用或者幻影引用。一个对象是否有虚引用存在，完全不会对其生存时间构成影响，也无法通过虚引用取的一个对象实例。</p><p>为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</p><p>使用<code>PhantomReference</code>来实现虚引用。</p><h3 id="方法区回收"><a href="#方法区回收" class="headerlink" title="方法区回收"></a>方法区回收</h3><p>因为方法区主要存放永久代对象，而永久代对象的回收率比年轻代差很多，因此在方法区上进行回收性价比不高。</p><p>主要是对常量池的回收和对类的卸载。</p><p>类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：</p><ul><li>该类的所有实例都已经被回收，也就是Java堆中不存在该类的任何实例；</li><li>加载该类的<code>ClassLoader</code>已经被回收；</li><li>该类的<code>java.lang.Class</code>对象没有在任何地方被引用，也就无法在任何地方通过反射方位该类方法；</li></ul><p>可以通过<code>-Xnoclassgc</code>参数来控制是否对类进行卸载。</p><p>在大量使用反射、动态代理、CGLib等字节码框架、动态生成JSP以及OSGi这类频繁自定义<code>ClassLoader</code>的场景跟你都需要虚拟机具备类卸载功能，以保证不会出现内存溢出。</p><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h3><p><code>finalize()</code>类似C++的析构函数，用来做关闭外部资源等工作。但是<code>try-finally</code>等方式可以做的更好，并且该方法运行代价高昂，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用<code>finalize()</code>。</p><p>当一个对象可被回收时，如果需要执行该对象的<code>finalize()</code>方法，那么就可能通过在该方法中让对象重新被引用，从而实现自救。</p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="垃圾收集性能"><a href="#垃圾收集性能" class="headerlink" title="垃圾收集性能"></a>垃圾收集性能</h3><p>垃圾收集器的性能指标有两点：</p><ul><li>停顿时间：停顿时间是因为GC而导致程序不能工作的时间长度；</li><li>吞吐量：吞吐量关注在特定的时间周期内一个应用的工作量的最大值。对关注吞吐量的应用来说长暂停时间是可以接受的。由于高吞吐量的应用关注的基准在更长周期时间上，所以快速响应时间不在考虑之内；</li></ul><h3 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728011618987.png" alt="image-20210728011618987"><p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p>这种做法嫩巩固解决内存碎片化的问题，但代价是压缩算法的性能开销。</p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728011755687.png" alt="image-20210728011755687"><p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p><p>主要不足是只使用了内存的一半。</p><p>现在的商业虚拟机都采用这种收集算法来回收年轻代，但是并不是将内存划分为大小相等的两块，而是分为一块较大的<code>Eden</code>空间和两块较小的<code>Survivor</code>空间，每次使用<code>Eden</code>空间和其中一块<code>Survivor</code>。在回收时，将<code>Eden</code>和<code>Survivor</code>中还存活的对象复制到另一块<code>Survivor</code>空间上，最后清理<code>Eden</code>和使用过的<code>Survivor</code>。<code>Hotspot</code>虚拟机的<code>Eden</code>和<code>Survivor</code>的大小比例默认为8:1（可以通过参数<code>-XX:SurvivorRatio</code>来调整比例），保证了内存的利用率到90%。如果每次回收有多余10%的对象存活，那么一块<code>Survivor</code>空间就不够了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。</p><h3 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h3><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将Java堆分为年轻代和老年代。</p><ul><li>年轻代：使用复制算法；</li><li>老年代：使用标记-清理算法或标记-整理算法；</li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728012723739.png" alt="image-20210728012723739"><p><strong>新生代</strong></p><p>新生代是大部分对象创建和销毁的区域，在通常的Java应用中，绝大部分对象生命周期都是很短暂的。其内部又分为<code>Eden</code>区域，作为对象初始分配的区域；两个<code>Survivor</code>，有时候也叫<code>from</code>、<code>to</code>区域，被用来放置从<code>Minor GC</code>中保留下来的对象。</p><p>JVM会随意选取一个<code>Survivor</code>作为<code>to</code>，然后在GC过程中进行区域间拷贝，也就是将<code>Eden</code>中存活下来的对象和<code>from</code>区域的对象，拷贝到<code>to</code>区域。这种设计主要是为了防止内存的碎片化，并进一步清理无用对象。</p><p>Java虚拟机会记录<code>Survivor</code>区中的对象一共被来回复制了几次。如果一个对象被复制的次数为15（对应虚拟机参数<code>-XX:+MaxTenuringThreshold</code>），那么该对象将被晋升（<code>promote</code>）至老年代。另外，如果单个<code>Survivor</code>区已经被占用了50%（对应虚拟机参数<code>-XX:TargetSurvivorRatio</code>），那么较高复制次数的对象也会被晋升至老年代。</p><p><strong>老年代</strong></p><p>防止长生命周期的对象，通常都是从<code>Survivor</code>区域拷贝过来的对象。当然，也有特殊情况，如果对象较大，JVM会试图直接分配在<code>Eden</code>其它位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。</p><p><strong>永久代</strong></p><p>这部分就是早期<code>Hotspot</code> JVM的方法区实现方式，储存Java类元数据、常量池、<code>Intern</code>字符串缓存。JDK8之后改为存储在元数据空间中。</p><h3 id="JVM参数"><a href="#JVM参数" class="headerlink" title="JVM参数"></a>JVM参数</h3><p>jvm允许对堆空间大小、各代空间大小进行设置，以调整JVM GC。</p><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td><code>-Xss</code></td><td>虚拟机栈大小</td></tr><tr><td><code>-Xms</code></td><td>堆空间初始值</td></tr><tr><td><code>-Xmx</code></td><td>堆空间最大值</td></tr><tr><td><code>-Xmn</code></td><td>新生代空间大小</td></tr><tr><td><code>-XX:NewSize</code></td><td>新生代空间初始值</td></tr><tr><td><code>-XX:MaxNewSize</code></td><td>新生代空间最大值</td></tr><tr><td><code>-XX:NewRatio</code></td><td>新生代与老年代比例，默认为2，意味着老年代是新生代的2倍</td></tr><tr><td><code>-XX:SurvivorRatio</code></td><td>新生代中调整<code>Eden</code>与<code>Survivor</code>的比例，默认为8.即<code>eden</code>区为80%的大小，两个<code>Survivor</code>分别为10%大小</td></tr><tr><td><code>-XX:PermSize</code></td><td>永久代空间的初始值</td></tr><tr><td><code>-XX:MaxPermSize</code></td><td>永久代空间最大值</td></tr></tbody></table><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728014629695.png" alt="image-20210728014629695"><p>以上为<code>Hotspot</code>虚拟机中的7个垃圾收集器，连线表示垃圾回收器可以配合使用。</p><blockquote><p>G1垃圾收集器既可以回收年轻代内存，也可以回收老年代内存。而其他垃圾收集器只能针对特定代的内存进行回收。</p></blockquote><h3 id="串行收集器"><a href="#串行收集器" class="headerlink" title="串行收集器"></a>串行收集器</h3><p>串行收集器（<code>Serial</code>）是最基本、发展历史最悠久的收集器。</p><p>串行收集器是<code>client</code>模式下的默认收集器配置。因为在客户端模式下，分配给虚拟机管理的内存一般来说不会很大。<code>Serial</code>收集器收集几十兆甚至一两百兆的年轻代停顿时间可以控制在一百毫秒以内，只要不是太频繁，这点停顿是可以接受的。</p><p>串行收集器采用单线程<code>stop-the-world</code>的方式进行收集。当内存不足时，串行GC设置停顿标识，待所有线程都进入安全点（<code>Safepoint</code>）时，应用线程暂停，串行GC开始工作，采用单线程方式回收空间并整理内存。</p><p>单线程意味着复杂度更低、占用内存更少，垃圾回收效率高；但同时也意味着不能有效利用多核优势。事实上，串行收集器特别适合堆内存不高、单核甚至双核CPU的场合。</p><blockquote><p>开启选项：<code>-XX:UseSerialGC</code></p><p>打开此开关后，使用<code>Serial + SerialOld</code>收集器组合来进行内存回收。</p></blockquote><p><strong>Serial Old收集器</strong></p><p><code>Serial Old</code>是<code>Serial</code>收集器的老年代版本，也是给<code>Client</code>模式下的虚拟机使用。如果用在<code>Server</code>模式下，它有两大用途：</p><ul><li>在JDK1.5之前版本中与<code>Parallel Scavenge</code>收集器搭配使用；</li><li>作为<code>CMS</code>收集器的后备预案，在并发收集发生<code>Concurrent Modle Failure</code>时使用；</li></ul><h3 id="并行收集器"><a href="#并行收集器" class="headerlink" title="并行收集器"></a>并行收集器</h3><p>其他收集器都是以关注停顿时间为目标，而并行收集器是以关注吞吐量为目标的垃圾收集器。</p><ul><li>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验；</li><li>高吞吐量可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</li></ul><pre class="line-numbers language-none"><code class="language-none">吞吐量 = 运行用户代码时间 /(运行用户代码时间 + 垃圾手机时间)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并行收集器是<code>server</code>模式下的默认收集器。</p><p>并行收集器与串行收集器工作模式相似，都是<code>stop-the-world</code>方式，只是暂停时并行地进行垃圾收集。并行收集器年轻代采用复制算法，老年代采用标记-整理，再回收的同时还会对内存进行压缩。并行收集器适合对吞吐量要求远远高于延迟要求的场景，并且在满足最差延时的情况下，并行收集器将提供最佳的吞吐量。</p><p>在注重吞吐量以及CPU资源敏感的场景，都可以优先考虑<code>Parallel Scavenge</code>收集器 + <code>Parallel Pld</code>收集器。</p><p><strong>Parallel Scavenge收集器</strong></p><p><code>Parallel Scavenge</code>收集器提供了两个参数用于精确控制吞吐量，分别是：</p><ul><li><code>-XX:MaxGCPauseMillis</code>：控制最大垃圾收集停顿时间，收集器将尽可能保证内存回收时间不超过设定值；</li><li><code>-XX:GCTimeRatio</code>：直接设置吞吐量代销（值为大于0且小于100的整数）；</li></ul><p>缩短停顿时间是以牺牲吞吐量和年轻代空间来换取的：年轻代空间变小，垃圾回收变的频繁，导致吞吐量下降；</p><p><code>Parallel Scavenge</code>收集器还提供了一个参数<code>-XX:+UseAdptiveSizePolicy</code>，这是一个开关参数，打开参数后，就不需要手工指定年轻代大小、<code>Eden</code>和<code>Survivor</code>比例、进程老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况手机性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种方式称为GC自适应调节策略。</p><p><strong>Parallel Old收集器</strong></p><p>是<code>Parallel Scavenge</code>收集器的老年代版本，使用多线程和“标记-整理”算法。</p><h3 id="并发标记清除收集器"><a href="#并发标记清除收集器" class="headerlink" title="并发标记清除收集器"></a>并发标记清除收集器</h3><p>并发标记清除收集器是以获取最短停顿时间为目标。</p><p>开启后，年轻代使用<code>ParNew</code>收集器；老年代使用<code>CMS</code>收集器，如果CMS产生的碎片过多，导致无法存放浮动垃圾，JVM或出现<code>Concurrent Mode Failure</code>，此时使用<code>Serial Old</code>收集器来替代<code>CMS</code>收集器清理碎片。</p><blockquote><p>开启选项：<code>-XX:UseConcMarkSweepGC</code></p><p>开启后，虚拟机将使用<code>CMS + ParNew + Serial Old</code>收集器组合来进行内存回收；</p></blockquote><h4 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h4><p><code>CMS</code>收集器是一种以获取最短停顿时间为 目标的收集器。</p><p><code>CMS（Concurrent Mark Sweep）</code>，<code>Mark Sweep</code>指的是标记-清除算法。</p><p><code>CMS</code>收集器运行步骤如下：</p><ol><li>初始标记：仅仅只是标记以下<code>GC Roots</code>能直接关联到的对象，速度很快，但也需要停顿；</li><li>并发标记：进行<code>GC Roots Tracing</code>的过程，它在整个回收过程中耗时最长，不需要停顿；</li><li>重新标记：为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，需要停顿；</li><li>并发清楚：回收在标记阶段被鉴定为不可达的对象；不需要停顿；</li></ol><p><strong>CMS回收年轻代</strong></p><ul><li><p>堆空间被分割为三块空间</p><p>年轻代分割成一个<code>Eden</code>区和两个<code>Survivor</code>区。老年代是一个连续的空间。</p></li><li><p>CMS年轻代垃圾收集</p><p>使用<code>CMS</code>，老年代对象就地释放，它们不会被来回移动；这个空间不会被压缩除非发生<code>FullGC</code>。</p></li><li><p>年轻代收集</p><p>从<code>Eden</code>和<code>Survivor</code>区复制活跃对象到另一个<code>Survivor</code>区。所有到达年龄阈值的对象会晋升到老年代。</p></li><li><p>年轻代回收</p><p>一次年轻代垃圾收集之后，<code>Eden</code>区和<code>Survivor</code>区被清空。</p></li></ul><p><strong>CMS回收老年代</strong></p><ul><li><p>CMS老年代收集</p><p>发生两次<code>stop the world</code>事件：初始标记和重新标记，<code>CMS</code>开始执行。</p><ul><li>初始标记是一个短暂暂停的、可达对象被标记的阶段；</li><li>并发标记需要活跃对象在应用连续执行时；</li><li>重新标记阶段，寻找在之前并发标记阶段中丢失的对象；</li></ul></li><li><p>老年代收集-并发清除</p><p>在之前阶段没有被标记的对象会被就地释放，不进行压缩操作。</p><p>未被标记的对象等于死亡对象。</p></li><li><p>老年代收集-清除之后</p><p>清除阶段之后，会有大量内存被释放，且不进行压缩。CMS收集器会再次进入重新设置阶段，等待下一次垃圾收集时机到来。</p></li></ul><p><strong>CMS特点</strong></p><p><code>CMS</code>收集器有以下缺点：</p><ul><li>并发收集：并发指定是用户线程和GC线程同时运行；</li><li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致CPU利用率不够高；</li><li>无法处理浮动垃圾：可能出现<code>Concurrent Mode Failure</code>异常；浮动垃圾是指并发清楚阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次GC时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着CMS收集不能像其它收集器那样等待老年代快满的时候在回收；<ul><li>可以使用<code>-XX:CMSInitiatingOccupancyFraction</code>改变触发<code>CMS</code>收集器工作的内存占用百分比，如果这个值设置过大，导致预留内存不够存放浮动垃圾，就会出现<code>Concurrent Mode Failure</code>，此时虚拟机将临时启用<code>Serial Old</code>收集器来替代CMS收集器；</li></ul></li><li>标记：清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续堆空间来分配当前对象，不得不提前出发<code>FullGC</code>；<ul><li>可以使用<code>-XX:+UseCMSCompactAtFullCollection</code>，用于在<code>CMS</code>收集器要进行<code>FullGC</code>时开启内存碎片的合并整理，内存整理的过程是无法并发的，内存碎片问题没有了，但停顿时间将不得不延长；</li><li>可以是使用<code>-XX:+UseCMSFullGCsBeforeCompaction</code>，设置执行了多少次不压缩的<code>FullGC</code>后，进行一次带压缩的（默认为0，表示每次进入<code>FullGC</code>时都进行压缩）；</li></ul></li></ul><h5 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h5><p><code>ParNew</code>收集器其实是<code>Serial</code>收集器的多线程版本。</p><blockquote><p>开启选项：<code>-XX:UseParNewGC</code></p></blockquote><p><code>ParNew</code>是<code>Server</code>模式下的虚拟机首选年轻代收集器，除了性能原因外，主要是因为除了<code>Serial</code>收集器，只有<code>ParNew</code>能够与<code>CMS</code>收集器配合工作。</p><p><code>ParNew</code>收集器默认开启的线程数与CPU数量相同，可以使用<code>-XX:ParallelGCThreads</code>参数来设置线程数。</p><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><p><code>G1</code>收集器是一种兼顾吞吐量和停顿时间的GC收集器。<code>G1</code>是<code>Oracle JDK9</code>以后默认的收集器。<code>G1</code>可以直观的设定停顿时间的目标，相比于<code>CMS GC</code>，<code>G1</code>未必能做到<code>CMS</code>在最好情况下的延时停顿，但是最差情况要好很多。</p><p><code>G1</code>最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至<code>CMS</code>的众多缺陷。</p><h4 id="分区和分代"><a href="#分区和分代" class="headerlink" title="分区和分代"></a>分区和分代</h4><p>旧的垃圾收集器一般采集分代收集，Java对被分为年轻代、老年代和永久代。收集的范围是整个年轻代或老年代。</p><p><code>G1</code>取消了永久代，并把年轻代和老年代划分成多个大小相等的独立区域（<code>Region</code>），年轻代和老年代不在物理隔离。<code>G1</code>可以直接对年轻代和老年代一起回收。</p><p>通过引入<code>Region</code>概念，将原来的一整块内存空间划分为多个小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，是的可预测的停顿时间模型成为可能。通过记录每个<code>Region</code>垃圾回收时间以及回收所获得的空间（根据历史经验值推断），并维护一个优先列表，每次根据允许的手机时间，优先回收价值最大的<code>Region</code>。</p><p>每一个<code>Region</code>都有一个<code>Remembered Set</code>，用来记录该<code>Region</code>对象的引用对象所在的<code>Region</code>。通过使用<code>Remembered Set</code>，在做可达性分析的时候可以避免全堆扫描。</p><h4 id="运作流程"><a href="#运作流程" class="headerlink" title="运作流程"></a>运作流程</h4><p>忽略<code>Remembered Set</code>维护操作，大致流程如下：</p><ol><li>初始标记</li><li>并发标记</li><li>最终标记：为了修正并发标记期间因用户程序继续运行导致标记发生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的<code>Remembered Set Logs</code>里面，最终标记阶段需要把<code>Remembered Set Logs</code>的数据合并到<code>Remembered Set</code>中。这个阶段需要停顿线程，但是可并行执行；</li><li>筛选回收：首先对各个<code>Region</code>中的回收价值和成本进行排序，根据用户所期望的<code>GC</code>停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分<code>Region</code>，时间是用户可控的，而且停顿用户线程将大幅度提高收集效率；</li></ol><p><strong>特点：</strong></p><ul><li>空间整合：整体来看是基于“标记-整理”算法实现的收集器。从局部（<code>Region</code>）来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片；</li><li>可预测的停顿：能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在GC上的时间不得超过N毫秒；</li></ul><p><strong>G1回收年轻代</strong></p><ul><li><p>G1初始堆空间</p><p>堆空间是一个被分成许多固定大小区域的内存块。</p></li><li><p>G1堆空间分配</p><p>实际上，G1堆空间被映射成<code>Eden</code>、<code>Survivor</code>、老年代空间的逻辑表达形式。活跃对象从一个<code>Region</code>疏散（复制、移动）到另一个<code>Region</code>。<code>Region</code>被设计为并行的方式收集，可以暂停或不暂停所有的其他用户线程。</p><p>堆内存除了被分配成<code>Eden</code>、<code>Survivor</code>及<code>Old</code>区域外，还有第四种类型的区域：极大区域（<code>Humongous regions</code>）。这些区域被设计成保持标准区域大小的50%或者更大对象。他们被保存在一个连续的区域集合里。最后一个类型的区域就是堆空间里没有使用的区域。</p></li><li><p>G1的年轻代</p><p>堆空间被分割成大约2000个区域（<code>Region</code>）。最小1M，最大32M，区分不同的<code>Region</code>用来单独保存年轻代对象或老年代对象。</p></li><li><p>G1年轻代收集</p><p>活跃对象被疏散到一个或多个<code>Survivor</code>区域。如果达到晋升年龄阈值，对象会晋升到老年代区域。这是一个<code>stop the world</code>暂停，为下一次年轻代垃圾回收计算<code>Eden</code>和<code>Survivor</code>的大小，保留审计信息有助于计算大小。类似目标暂停时间会被考虑在内。这个方法使重调区域大小变得容易，可以按需调整<code>Region</code>大小。</p></li><li><p>G1年轻代回收</p><p>活跃对象被疏散到<code>Survivor</code>或者老年代区域。</p><p>关于G1年轻代回收：</p><ul><li>堆空间是一块单独的内存空间被分割成多个区域；</li><li>年轻代内存是由一组非连续的区域组成。这使得需要重调大小变得容易；</li><li>年轻代垃圾回收是<code>stop the world</code>事件，所有线程都会因此操作暂停；</li><li>年轻代垃圾收集使用多线程并行回收；</li><li>活跃对象被复制到新的<code>Survivor</code>区或老年代区域；</li></ul></li></ul><p><strong>G1回收老年代</strong></p><ul><li><p>初始标记阶段</p><p>年轻代垃圾收集肩负活跃对象初始标记的任务。在日志文件中被标为<code>GC pause (young)</code>。</p></li><li><p>并发标记阶段</p><p>发现空白区域，在重新标记阶段会被马上清除掉。决定火星的审计信息也在此时被计算。</p></li><li><p>重新标记阶段</p><p>空的区域被清楚和回收掉。所有区域的活性在此时计算。</p></li><li><p>复制/清理阶段</p><p>G1选择活性最低的区域，这些区域能够以最快的速度回收。这些区域会在年轻代垃圾回收过程中被回收（日志中记录为<code>GC pause(mixed)</code>）所有年轻代与老年代是在同一时间被回收的。</p></li><li><p>复制/清理阶段</p><p>被选择的区域将被回收或压缩存储到其他<code>Region</code>。</p></li></ul><h3 id="收集器总结"><a href="#收集器总结" class="headerlink" title="收集器总结"></a>收集器总结</h3><table><thead><tr><th>收集器</th><th>串行/并行/并发</th><th>年轻代/老年代</th><th>收集算法</th><th>目标</th><th>适用场景</th></tr></thead><tbody><tr><td><code>Serial</code></td><td>串行</td><td>年轻代</td><td>复制</td><td>速度优先</td><td>单CPU环境Client模式</td></tr><tr><td><code>Serial Old</code></td><td>串行</td><td>老年代</td><td>标记-整理</td><td>速度优先</td><td>单CPU环境下Client模式、CMS后备预案</td></tr><tr><td><code>ParNew</code></td><td>串行+并行</td><td>年轻代</td><td>复制</td><td>速度优先</td><td>多CPU环境Server模式与CMS配合</td></tr><tr><td><code>Parallel Scavenge</code></td><td>串行+并行</td><td>年轻代</td><td>复制</td><td>吞吐优先</td><td>后台运算少交互场景</td></tr><tr><td><code>Parallel Old</code></td><td>串行+并行</td><td>老年代</td><td>标记-整理</td><td>吞吐优先</td><td>后台运算少交互场景</td></tr><tr><td><code>CMS</code></td><td>串行+并行</td><td>老年代</td><td>标记-清除</td><td>速度优先</td><td>B/S系统服务端应用</td></tr><tr><td><code>G1</code></td><td>串行+并行</td><td>年轻代+老年代</td><td>标记-整理+复制</td><td>速度优先</td><td>面向服务端应用，CMS替代方案</td></tr></tbody></table><h2 id="内存分配回收策略"><a href="#内存分配回收策略" class="headerlink" title="内存分配回收策略"></a>内存分配回收策略</h2><p>对象的内存分配，也就是在堆上分配。主要分配在年轻代的<code>Eden</code>区上，少数情况下也可能直接分配在老年代中。</p><h3 id="Minor-GC"><a href="#Minor-GC" class="headerlink" title="Minor GC"></a>Minor GC</h3><p>当<code>Eden</code>区空间不足时，会触发<code>Minor GC</code>。</p><p><code>Minor GC</code>发生在年轻代上，因为年轻代对象存活时间很短，因此<code>Minor GC</code>会频繁执行，执行的速度一般会比较快。</p><p><code>Minor GC</code>工作流程：</p><ol><li>Java应用不断创建对象，通常都是分配在<code>Eden</code>区域，当其空间不足时（达到设定的阈值），触发<code>Minor GC</code>。仍然内引用的对象存活下来，被复制到JVM选择的<code>Survivor</code>区域，而没有被引用的对象则被回收；</li><li>经过一次<code>Minor GC</code>，<code>Eden</code>区就会空闲下来，直到再次达到<code>Minor GC</code>触发条件。这时候，另外一个<code>Survivor</code>区域则会成为<code>To</code>区域。<code>Eden</code>区域的存活对象和<code>From</code>区域对象，都会被复制到<code>To</code>区域，并且存活的年龄计数加1；</li><li>重复步骤2，知道有对象年龄计数达到阈值，这时候就会发生晋升（<code>Promotion</code>）过程，超过阈值的对象会被晋升到老年代。</li></ol><h3 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h3><p><code>Full GC</code>发生在老年代上，老年代对象和年轻代相反，其存活时间长，因此<code>Full GC</code>很少执行，而且执行速度会比<code>Minor GC</code>慢很多。</p><p><strong>内存分配策略</strong></p><ul><li><p>对象优先在<code>Eden</code>分配</p><p>大多数情况下，对象在年轻代<code>Eden</code>区分配，当<code>Eden</code>区空间不足时，发起<code>Minor GC</code>.</p></li><li><p>大对象直接进入老年代</p><p>大对象是指需要连续内存空间的对象，最典型的大对象如长字符串及数组。经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。</p><p>参数<code>-XX:PretenureSizeThreshold</code>配置大于该值的对象直接在老年代分配，避免<code>Eden</code>区和<code>Survivor</code>区之前的大量内存复制。</p></li><li><p>长期存活对象进入老年代</p><p>为对象添加年龄计数器，对象在<code>Eden</code>出生并经过<code>Minor GC</code>仍然存活，将移动到<code>Survivor</code>中，年龄计数器加1，增加到年龄阈值则移动到老年代中。年龄阈值可通过参数<code>-XX:MaxTenuringThreshold</code>配置。</p></li><li><p>动态对象年龄判断</p><p>JVM并不是永远地要求对象的年龄必须达到<code>MaxTenuringThreshold</code>才能晋升老年代，如果在<code>Survivor</code>区中相同年龄虽有对象大小的综合大于<code>Survivor</code>空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到<code>MaxTenuringThreshold</code>要求的年龄。</p></li><li><p>空间分配担保</p><p>在发生<code>Minor GC</code>之前，JVM先检查老年代最大可用的连续空间是否大于年轻代所有对象空间总和，如果条件成立，则<code>Minor GC</code>可以确认是安全的；如果不成立JVM或查看<code>HandlePromotionFailure</code>设置值是否允许担保失败，如果允许那么就会继续检查老年代可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次<code>Minor GC</code>，尽管这次<code>Minor GC</code>是有风险的；如果小于，或者<code>HandlePromotionFailure</code>设置不允许冒险，那这时也要改为进行一次<code>Full GC</code>。</p></li></ul><p><strong>Full GC触发条件</strong></p><p>对于<code>Minor GC</code>，其触发条件非常简单，当<code>Eden</code>区空间满时，便会触发；而<code>Full GC</code>则相对复杂，有以下条件：</p><ul><li><p>调用<code>System.gc()</code></p><p>显示调用该方法是建议虚拟机进行<code>Full GC</code>，虽然只是建议而非一定，但很多情况下它会触发<code>Full GC</code>，从而增加<code>Full GC</code>的频率，也即增加了间歇性停顿的次数。因此强烈不建议显式调用此方法，而是让JVM自己去管理它的内存。可通过<code>-XX:DisplayExplicitGC</code>来禁止<code>RMI</code>调用<code>System.gc()</code>。</p></li><li><p>老年代空间不足</p><p>老年代空间不足的常见场景有：大对象直接进入老年代、长期存活对象进入老年代等，当执行<code>Full GC</code>后空间仍然不足，则抛出<code>java.lang.OutOfMemoryError:Java heap space</code>。为避免以上原因引起<code>Full GC</code>，调优时应尽量做到让对象在<code>Minor GC</code>阶段被回收、让对象在年轻代多存活一段时间以及不要创建过大的对象及数组。</p></li><li><p>方法区空间不足</p><p>JVM规范中运行时数据区域中的方法区，在<code>Hotspot</code>虚拟机中又被习惯称为永久代，永久代中存放的是类的描述信息、常量、静态变量等数据，当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用<code>CMS GC</code>的情况下也会执行<code>Full GC</code>。如果<code>Full GC</code>仍然回收不了，那么JVM将抛出<code>java.lang.OutOfMemoryError:PermGen space</code>错误。为避免永久代占满造成<code>Full GC</code>现象，可采用的方法为增大<code>Perm Gen</code>空间或转为使用<code>CMS GC</code>.</p></li><li><p><code>Minor GC</code>平均晋升空间大于老年代剩余空间</p><p>统计数据显示<code>Minor GC</code>的平均晋升空间比老年代剩余空间大，则不会触发<code>Minor GC</code>而是转为触发<code>Full GC</code>。</p></li><li><p>对象大于<code>To</code>区和老年代可用内存</p><p>由<code>Eden</code>区、<code>From</code>区向<code>To</code>区复制时，对象大于<code>To</code>区可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：JVM类加载</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-26-lei-jia-zai/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-26-lei-jia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM字节码"><a href="#JVM字节码" class="headerlink" title="JVM字节码"></a>JVM字节码</h1><p>Java之所以可以“一次编译，到处运行”，一是因为JVM针对各种操作系统、平台都进行了定制，二是因为无论在什么平台，都可以编译生成固定格式的字节码(<code>.class</code>文件)供JVM使用。</p><p><code>.class</code>文件是一组以8位字节为基础单位的二进制流，各个数据项严格按照顺序紧凑地排列在<code>.class</code>文件中，中间没有添加任何分隔符。整个<code>.class</code>文件本质上就是一张表。</p><h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><h3 id="什么是字节码"><a href="#什么是字节码" class="headerlink" title="什么是字节码"></a>什么是字节码</h3><p>之所以被称为字节码，是因为字节码文件由十六进制值组成，而JVM以两个十六进制值为一组，即以字节为单位进行读取。在Java中一般是用<code>javac</code>命令编译源代码为字节码文件，一个<code>.java</code>文件从编译到运行的实例如下图：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728211919066.png" alt="image-20210728211919066"><p>对于开发人员，了解字节码可以更准确、直观地理解Java语言中更深层次的东西，比如通过字节码，可以很直观地看到<code>Volatile</code>关键字如何在字节码上生效。另外，字节码增强技术在<code>Spring AOP</code>、各种<code>ORM</code>框架、热部署中的应用屡见不鲜，深入理解其原理对于我们来说大有裨益。除此之外，由于JVM规范的存在，只要最终可以生成符合规范的字节码就可以在JVM上运行，因此这就给了各种运行在JVM上的语言（如<code>Scala</code>、<code>Groovy</code>、<code>Kotlin</code>）一种契机，可以扩展Java所没有的特定或者实现各种语法糖。理解字节码后再学习这些语言，可以“逆流而上”，从字节码视角看它的设计思路，降低学习难度。</p><h3 id="字节码结构"><a href="#字节码结构" class="headerlink" title="字节码结构"></a>字节码结构</h3><p><code>.java</code>文件通过<code>javac</code>编译后将得到一个<code>.class</code>文件，打开后可以发现是一堆十六进制数字。JVM规范要求每个字节码文件都要由十部分按照固定的顺序组成，结构如下：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728212940982.png" alt="image-20210728212940982"><ul><li><p>魔数（<code>Magic Number</code>）</p><p>每个<code>.class</code>文件的头4个字节称为<code>魔数（magic number）</code>，它唯一的作用是确定这个文件是否为一个能被虚拟机接收的<code>.class</code>文件。魔数的固定值为：<code>0XCAFEBABE</code>。</p><blockquote><p>魔数的固定值是Java之父<code>James Gosling</code>制定的，为<code>CafeBabe</code>（咖啡宝贝）。</p></blockquote></li><li><p>版本号（<code>Version</code>）</p><p>版本号为魔数之后的4个字节，前两个字节表示此版本号<code>Minor Version</code>，后两个字节表示主版本号<code>Major Version</code>。</p><blockquote><p>举例来说，如果版本号为：“00 00 00 34”。那么，次版本号转化为十进制为0，主版本号转化为十进制为52，在<code>Oracle</code>官网查询序号可知52对应的主版本号为1.8，所以编译该文件的Java版本号为1.8.0</p></blockquote></li><li><p>常量池（<code>Constant Pool</code>）</p><p>紧接着主版本号之后的字节为常量池入口。</p><p>常量池主要存放两类常量：</p><ul><li>字面量：如文本字符串、<code>final</code>常量值；</li><li>符号引用：<ul><li>类和接口的全限定名；</li><li>字段的名称和描述符；</li><li>方法的名称和描述符；</li></ul></li></ul><p>常量池整体上分为两部分：常量池计数器以及常量池数据区，如下图所示：</p></li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728214102405.png" alt="image-20210728214102405"><ul><li><p>常量池计数器（<code>Constant_pool_count</code>）：由于常量的数量不固定，所以需要先放置两个字节来表示常量池容量计数值。</p></li><li><p>常量池数据区：数据区是由<code>constant_pool_count-1</code>个<code>cp_info</code>结构组成，一个<code>cp_info</code>结构对应一个常量。在字节码中共有14种类型的<code>cp_info</code>，每种类型的结构都是固定的。</p></li><li><p>访问标志</p><p>紧接着的2个字节代表访问标志，这个标志用于识别一些类或接口的访问信息，描述该<code>Class</code>是类还是接口，以及是否被<code>public</code>、<code>abstract</code>、<code>final</code>等修饰符修饰。</p></li><li><p>当前类名</p><p>访问标志后的2个字节，描述的是当前类的全限定名。这两个字节保存的值为常量池中的索引值，根据索引值就能在常量池中找到这个类的全限定名。</p></li><li><p>父类名称</p><p>当前类名后的2个字节，描述父类的全限定名，保存的也是常量池中的索引值。</p></li><li><p>接口信息</p><p>父类名称后的2个字节即为接口计数器，描述了该类或父类实现的接口数量。紧接着的n个字节是所有接口名称的字符串常量的索引值。</p></li><li><p>字段表</p><p>字段表用于描述类和接口中声明的变量，包含类级别的变量以及实例变量，但是不包含方法内部声明的局部变量。字段表也分为两部分，的一部分为两个字节，描述字段个数；第二部分是每个字段的详细信息<code>fields_info</code>。字段表结构如下图所示：</p></li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728220114771.png" alt="image-20210728220114771"><ul><li><p>方法表</p><p>字段表结束后为方法表，方法表也是由两部分组成，第一部分为两个字节描述方法的个数；第二部分为每个方法的详细信息。方法的详细信息较为复杂，包括方法的访问标志、方法名、方法的描述符以及方法的属性，如下图所示：</p></li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728220413673.png" alt="image-20210728220413673"><ul><li><p>附加属性表</p><p>字节码的最后一部分，存放了在该文件中类或接口所定义属性的基本信息。</p></li></ul><blockquote><p>JVM的指令集是基于栈而非寄存器，基于栈可以具备很好的跨平台性（因为寄存器指令集往往与硬件挂钩），但缺点在于，完成同样的操作，基于栈的实现需要更多指令才能完成（栈是一个FILO结构，需要频繁压栈出栈）。栈是在于内存实现，相比基于CPU高速缓冲区的寄存器，速度要慢的多；</p></blockquote><h2 id="字节码增强"><a href="#字节码增强" class="headerlink" title="字节码增强"></a>字节码增强</h2><h3 id="Asm"><a href="#Asm" class="headerlink" title="Asm"></a>Asm</h3><p>对于需要手动操纵字节码的需求，可以使用<code>Asm</code>，它可以直接生产<code>.class</code>字节码文件，也可以在类被加载进JVM之前动态修改类行为。</p><p><code>Asm</code>的应用场景有<code>AOP</code>、热部署、修改其他<code>jar</code>包中的类等。当然，涉及底层的步骤，实现起来同样麻烦。</p><h3 id="Javassist"><a href="#Javassist" class="headerlink" title="Javassist"></a>Javassist</h3><p>利用Javassist实现字节码增强时，可以无需关注字节码结构，优点在于编程简单。直接使用<code>java</code>编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构或者动态生成类。</p><p>其中最重要的是<code>ClassPool</code>、<code>CtClass</code>、<code>CtMethod</code>、<code>CtField</code>四个类：</p><ul><li><code>CtClass（compile-time class）</code>：编译时类信息，它是一个<code>class</code>文件在代码中的抽象表现形式，可以通过一个类的全限定名来获取一个<code>CtClass</code>对象，用来标示这个类文件；</li><li><code>ClassPool</code>：从开发视角来看，<code>ClassPool</code>是一张保存<code>CtClass</code>信息的<code>HashTable</code>，<code>key</code>为类名，<code>value</code>为类名对应的<code>CtClass</code>对象。当我们需要对某个类进行修改时，就是通过<code>pool.getCtClass(“className”)</code>方法从<code>pool</code>中获取到相应的<code>CtClass</code>；</li><li><code>CtMethod</code>及<code>CtField</code>：对应的是类中的方法和属性；</li></ul><h1 id="JVM类加载"><a href="#JVM类加载" class="headerlink" title="JVM类加载"></a>JVM类加载</h1><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>类是在运行期间动态加载的。</p><p>类的加载是指将类的<code>.class</code>文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个<code>java.lang.Class</code>对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的<code>Class</code>对象，<code>Class</code>对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p><p>类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了<code>.class</code>文件缺失或存在错误，类加载器必须在程序首次主动使用该类的时报告错误，如果该类一直没有被程序主动使用，那么类加载器不需要报告错误。</p><h2 id="类生命周期"><a href="#类生命周期" class="headerlink" title="类生命周期"></a>类生命周期</h2><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728223125347.png" alt="image-20210728223125347"><p>Java类的完整生命周期包括以下几个阶段：</p><ul><li>加载（<code>Loading</code>）</li><li>链接（<code>Linking</code>）<ul><li>验证(<code>Verification</code>)</li><li>准备(<code>Preparation</code>)</li><li>解析（<code>Resolution</code>）</li></ul></li><li>初始化（<code>Initialization</code>）</li><li>使用（<code>Using</code>）</li><li>卸载（<code>Unloading</code>）</li></ul><p>加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始。而解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持Java的动态绑定。</p><p>类的加载过程是指加载、验证、准备、解析、和初始化这5个阶段。</p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>加载是类加载的一个阶段，是指查找字节流，并且据此创建类的过程。</p><p>加载过程完成以下三件事：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流；</li><li>将字节流所代表的的静态存储结构转化为方法区的运行时存储结构；</li><li>在内存中生成一个代表这个类的<code>Class</code>对象，作为方法区这个类的各种数据的访问入口；</li></ul><p>其中二进制字节流可以从以下方式获取：</p><ul><li><code>ZIP</code>包读取，是<code>JAR</code>、<code>EAR</code>、<code>WAR</code>格式的基础；</li><li>从网络中获取，最典型的应用是<code>Applet</code>；</li><li>运行时计算生成，通过动态代理技术，在<code>java.lang.reflect.Proxy</code>中，就是用了<code>ProxyGenerator.gengerateProxyClass</code>的代理类的二进制字节流；</li><li>由其他文件生成，典型场景是JSP应用；</li><li>从数据库读取；</li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证是链接阶段的第一步，验证的目标是确保<code>Class</code>文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><p>验证阶段大致会完成4个阶段的检验动作：</p><ul><li>文件格式验证：雁阵个字节流是否符合<code>Class</code>文件格式的规范，并且能被当前版本的虚拟机处理；</li><li>元数据验证：对字节码的描述信息进行语义分析，以保证其描述的信息符合Java语言规范的要求；</li><li>字节码验证：通过数据流和控制流分析，确保程序语义是合法、符合逻辑的；</li><li>符号引用验证：发生在虚拟机将服药引用转换为直接引用的时候，对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验；</li></ul><p>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用<code>-Xverifynone</code>参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>类变量是被<code>static</code>修饰的变量，准备阶段为<code>static</code>变量在方法区分配内存并初始化为默认值，使用的是方法区的内存。</p><p>实例变量不会在这阶段分配内存，它将会在对象实例化时随着对象一起分配在Java堆中。（实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次）</p><p>准备阶段有以下几点注意事项：</p><ul><li>进行内存分配的仅包括类变量（<code>static</code>），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中；</li><li>设置的初始值通此昂情况下是数据类型的默认零值，而不是代码中显示赋予的值；</li></ul><blockquote><ul><li>对于基本数据类型来说，类变量(<code>static</code>)和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认零值；对于局部变量，在使用前必须显式地为其赋值，否则编译时会报错；</li><li>对于同时被<code>static</code>和<code>final</code>修饰的常量，必须在声明的时候就为其显示地赋值，否则编译会报错；仅被<code>final</code>修饰的常量则即可在声明时显式赋值，也可在类初始化时显式赋值；但必须为<code>final</code>修饰的变量显式赋值，系统不会为其赋予默认零值；</li><li>对于引用数据类型，如数组引用、对象引用等，如果没有显式地赋值而直接使用，系统都会为其赋予默认的零值，即<code>null</code>；</li><li>如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值；</li></ul></blockquote><ul><li>如果类字段的属性表中存在<code>ConstantValue</code>属性，即同时被<code>final</code>和<code>static</code>修饰，那么在准备阶段变量<code>value</code>就会被初始化为<code>ConstValue</code>属性所指定的值。</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>在<code>class</code>文件被加载至Java虚拟机之前，这个类无法知道其他类及其方法、字段所对应的具体地址，甚至不知道自己方法、字段的地址。因此，每当需要引用这些成员时，Java编译器会生成一个符号引用。在运行阶段，这个符号引用一般都能够无歧义地定位到具体目标上。</p><p>解析阶段目标是将常量池的符号引用替换为直接引用的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄、和调用点限定符7类符号引用进行。</p><ul><li>符号引用：符号医用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能够无歧义地定位到目标即可；</li><li>直接引用：直接引用可以是直接指向目标的指针、相对偏移量伙食一个能间接定位到目标的句柄；</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在Java代码中，如果要初始化一个静态字段，可以在声明时直接赋值，也可以在静态代码块中对其进行赋值。</p><p>如果直接赋值的静态字段被<code>final</code>所修饰，并且它的类型是基本类型或字符串时，那么该字段便会被Java编译器标记成常量值，其初始化直接由JVM完成。除此之外的直接赋值操作、以及所有静态代码块中的代码，会被Java编译器置于同一方法中，并把它命名为<code>&lt;clinit&gt;</code>。</p><p>初始化阶段才真正开始执行类中的定义的Java程序代码。初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。</p><p><strong>类初始化方式</strong></p><ul><li>声明类变量时指定初始值；</li><li>使用静态代码块为类变量指定初始值；</li></ul><blockquote><p>准备阶段，类变量已经赋予一次系统要求的初始值；初始化阶段，根据程序员指定进行初始化类变量和其他资源；</p></blockquote><p><strong>类初始化步骤</strong></p><ol><li>如果类还没有被加载和链接，开始加载该类；</li><li>如果该类的直接父类还没有被初始化，则先初始化其父类；</li><li>如果该类有初始化语句，则一次执行这些初始化语句；</li></ol><p><strong>类初始化时机</strong></p><ul><li><p>主动引用</p><p>类的主动引用包括以下六种情形：</p><ul><li>创建类的实例：<code>new</code>对象；</li><li>访问静态变量：访问某个类或接口的静态变量，或对静态变量赋值；</li><li>访问静态方法：</li><li>反射：</li><li>初始化子类：初始化某个类的子类，则其父类也会被初始化；</li><li>启动类：JVM启动时被标明为启动类的类；</li></ul></li><li><p>被动引用</p><ul><li>通过子类引用父类的静态字段，不会导致子类初始化；</li><li>通过数组定义来引用类，不会触发此类的初始化；</li><li>常量在编译阶段会存入调用类的常量池，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化；</li></ul></li></ul><p><strong>类初始化细节</strong></p><p>类初始化<code>&lt;clinit&gt;()</code>方法的细节：</p><ul><li>由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问；</li><li>与类的构造函数不同，不需要显示的调用父类的构造器。JVM会自动保证在子类的<code>&lt;clinit&gt;()</code>方法运行前，父类的<code>&lt;clinit&gt;()</code>方法已经执行结束。因此JVM中第一个执行<code>&lt;clinit&gt;()</code>方法的类肯定是<code>java.lang.Object</code>；</li><li>由于父类的<code>&lt;clinit&gt;()</code>方法先执行，也就意味着父类中定义的静态语句块要优于子类的变量赋值操作；</li><li><code>&lt;clinit&gt;()</code>方法对于类或接口不是必须的，如果一个类中不包含静态语句块，也没有对类变量的赋值操作，编译器可以不为该类生成<code>&lt;clinit&gt;()</code>方法；</li><li>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成<code>&lt;clinit&gt;()</code>方法。但接口与类不同的是，执行接口的<code>&lt;clinit&gt;()</code>方法不需要先执行父接口的<code>&lt;clinit&gt;()</code>方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时，也不会执行接口的<code>&lt;clinit&gt;()</code>方法；</li><li>JVM会抱枕搞一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都会阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。如果一个类的<code>&lt;clinit&gt;()</code>方法中与耗时的操作，就会造成多个线程阻塞，在实际过程中这种阻塞很隐蔽；</li></ul><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p><code>ClassLoader</code>即类加载器，负责将类加载到JVM。</p><p>JVM加载<code>class</code>文件到内存有两种方式：</p><ul><li>隐式加载：JVM自动加载需要的类到内存中；</li><li>显式加载：通过使用<code>ClassLoader</code>来加载一个类到内存中；</li></ul><h3 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h3><p>如何判断两个类是否相同：类本身相同，并且使用同一个类加载器进行加载。这是因为每一个<code>ClassLoader</code>都拥有一个独立的类命名空间。</p><h3 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210728233755460.png" alt="image-20210728233755460"><p><strong>Bootstrap ClassLoader</strong></p><p><code>Bootstrap ClassLoader</code>，即启动类加载器，负责加载JVM自身工作所需的类。</p><p><code>Bootstrap ClassLoader</code>会将<code>&lt;JAVA_HOME&gt;/lib</code>目录中的，或被<code>-Xbootclasspath</code>参数所指定的路径中的，并且是虚拟机识别的（按照文件名识别，如<code>rt.jar</code>，名字不符合的类库即便放在<code>lib</code>目录中也不会被加载）类库加载到虚拟机内存中。</p><p><code>Bootstrap ClassLoader</code>是由C++实现的，它完全由JVM自己控制，启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用<code>null</code>代替即可。</p><p><strong>ExtClassLoader</strong></p><p><code>ExtClassLoader</code>，即扩展类加载器，这个类加载器是由<code>ExtClassLoader(sun.misc.Launcher\$ExtClassLoader)</code>实现的。</p><p><code>ExtClassLoader</code>负责将<code>&lt;JAVA_HOME&gt;/lib/ext</code>或者<code>java.ext.dir</code>系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。</p><p><strong>APPClassLoader</strong></p><p><code>APPClassLoader</code>，即应用程序类加载器，这个类加载器是由<code>APPClassLoader(sun.misc.Lanuncher/$AppClassLoader)</code>实现的。由于这个类加载器是<code>ClassLoader</code>中的<code>getSystemClassLoader()</code>方法的返回值，因此一般称为系统类加载器。</p><p><code>AppClassLoader</code>负责加载用户类路径（即<code>classpath</code>）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p><p><strong>自定义类加载器</strong></p><p>自定义类加载器可以做到以下几点：</p><ul><li>在执行非置信代码之前，自动验证数字签名；</li><li>动态地创建符合用户特定需要的定制化构建类；</li><li>从特定的场所取得<code>java class</code>，例如数据库和网络；</li></ul><p><code>ClassLoader</code>常用的场景：</p><ul><li>容器-典型应用：<code>Servlet</code>容器、udf等；加载解压<code>jar</code>包或<code>war</code>包后，加载其<code>Class</code>到指定的类加载器中运行；</li><li>热部署、热插拔：应用启动后，动态获取某个类信息，然后加载到JVM中工作；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileSystemClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> rootDir<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FileSystemClassLoader</span><span class="token punctuation">(</span><span class="token class-name">String</span> rootDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rootDir <span class="token operator">=</span> rootDir<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classData <span class="token operator">=</span> <span class="token function">getClassData</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>classData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>classData<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> classData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getClassData</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token function">classNameToPath</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>      <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>bufferSize<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> bytesNumRead <span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesNumRead <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>bytesNumRead<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e <span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">classNameToPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> rootDir <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar <span class="token operator">+</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210729001220129.png" alt="image-20210729001220129"><p>类加载器之间的层次关系，称为类加载器的双亲委派模型（<code>Parents Delegation Model</code>）。该模型要求除了顶层的<code>Bootstrap ClassLoader</code>外，其余的类加载器都应该有自己的父类加载器。这里类加载器之间的父子关系一般通过组合（<code>Composition</code>）关系来实现，而不是通过继承（<code>Inheritance</code>）的关系实现。</p><p><strong>工作过程</strong></p><p>一个类加载器首先将类加载请求传送到父类加载器，只有当父类加载器无法完成类加载请求时才尝试加载。</p><p><strong>好处</strong></p><p>Java类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一：</p><ul><li>系统类防止内存中出现多份同样的字节码；</li><li>保证Java程序安全稳定运行；</li></ul><h3 id="ClassLoader参数"><a href="#ClassLoader参数" class="headerlink" title="ClassLoader参数"></a>ClassLoader参数</h3><p>在生产环境上启动Java应用时，通常会指定一些<code>ClassLoader</code>参数，以加载需要的<code>lib</code>：</p><p><code>ClassLoader</code>相关参数：</p><table><thead><tr><th>参数选项</th><th>ClassLoader类型</th><th>说明</th></tr></thead><tbody><tr><td><code>-Xbootclasspath</code></td><td><code>Bootstrap ClassLoader</code></td><td>设置启动类加载器搜索路径；不常用</td></tr><tr><td><code>-Xbootclasspath/a</code></td><td><code>Bootstrap ClassLoader</code></td><td>将路径添加到已存在的启动类加载器搜索路径后面；常用</td></tr><tr><td><code>-Xbootclasspath/p</code></td><td><code>Bootstrap ClassLoader</code></td><td>将路径添加到已存在的启动类加载器搜索路径前面；不常用</td></tr><tr><td><code>-Djava.ext.dirs</code></td><td><code>ExtClassLoader</code></td><td>设置扩展类加载器搜索路径</td></tr><tr><td><code>-Djava.classpath</code>或<code>-cp</code>或<code>-classpath</code></td><td><code>APPClassLoader</code></td><td>设置应用程序加载器搜索路径</td></tr></tbody></table><h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><h3 id="类加载方式"><a href="#类加载方式" class="headerlink" title="类加载方式"></a>类加载方式</h3><p>类加载有三种方式：</p><ul><li>命令行启动应用时候由JVM初始化加载；</li><li>通过<code>Class.forName()</code>方法动态加载；</li><li>通过<code>ClassLoader.loadClass()</code>方法动态加载；</li></ul><p><code>Class.forName()</code>与<code>ClassLoader.loadClass()</code>区别：</p><ul><li><code>Class.forName()</code>将类的<code>.class</code>文件加载到JVM，并对类进行解释，执行类中的<code>static</code>块；</li><li><code>ClassLoader.loadClass()</code>将<code>.class</code>文件加载到到JVM中，不会执行<code>static</code>中的内容，只有在<code>newInstance</code>时才会执行<code>static</code>块代码；</li><li><code>Class.forName(name,initialize,loader)</code>带参函数也可以控制是否加载<code>static</code>块。并且只有调用了<code>newInstance()</code>方法采用调用构造函数，创建类的对象；</li></ul><h3 id="加载类错误"><a href="#加载类错误" class="headerlink" title="加载类错误"></a>加载类错误</h3><ul><li><p>ClassNotFoundException</p><p>该异常表示当前<code>classpath</code>下找不到指定的类</p><p>常见问题原因为：</p><ul><li>调用<code>Class</code>的<code>forName()</code>方法，未找到类；</li><li>调用<code>ClassLoader</code>中的<code>loadClass()</code>方法，未找到类；</li><li>调用<code>ClassLoader</code>中的<code>findSystemClass()</code>方法，未找到类；</li></ul><p>解决方法：</p><ul><li>检查<code>classpath</code>下有没有相应的<code>class</code>文件；</li></ul></li><li><p>NoClassDefFoundError</p><p>常见问题原因：</p><ul><li>类依赖的<code>Class</code>或者<code>jar</code>不存在；</li><li>类文件存在，但是存在不同的域中；</li></ul><p>解决方法：</p><ul><li>现代Java项目，一般使用<code>maven</code>、<code>gradle</code>等构建工具管理项目，自己检查找不到的类所在<code>jar</code>包是否已添加为依赖；</li></ul></li><li><p>UnstatisfiedLinkError</p><p>通常为JVM启动的时候不小心删除了JVM的某个lib；</p></li><li><p>ClassCastException</p><p>通常是在程序中强制类型转换失败时出现；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：JVM调优及常用工具</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-27-jvm-gong-ju/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-27-jvm-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM调优实战"><a href="#JVM调优实战" class="headerlink" title="JVM调优实战"></a>JVM调优实战</h1><h2 id="JVM调优概述"><a href="#JVM调优概述" class="headerlink" title="JVM调优概述"></a>JVM调优概述</h2><h3 id="GC性能指标"><a href="#GC性能指标" class="headerlink" title="GC性能指标"></a>GC性能指标</h3><p>对于JVM调优来说，需要先明确调优的目标。从性能角度来看，通常关注三个指标：</p><ul><li>吞吐量（<code>throughtput</code>）：指不考虑GC引起的停顿时间或内存消耗，垃圾收集器能支撑应用达到的最高性能指标；</li><li>停顿时间（<code>latency</code>）：其度量标准为缩短由于垃圾收集器引起的停顿时间或完全消除因垃圾收集所引起的停顿，避免应用运行时发生抖动；</li><li>垃圾回收频率：通常垃圾回收的频率越低越好，增大堆内存空间可以有效降低垃圾回收发生的频率，但同时也意味着堆积的回收对象越多，最终也会增加回收时的停顿时间。所以我们只要适当地增大堆内存空间，保证正常的垃圾回收频率即可；</li></ul><h3 id="调优原则"><a href="#调优原则" class="headerlink" title="调优原则"></a>调优原则</h3><p>GC优化的两个目标：</p><ul><li>降低<code>Full GC</code>频率；</li><li>减少<code>Full GC</code>执行时间；</li></ul><p>GC优化基本原则是：将不同的GC参数应用到两个及以上的服务器上然后比较他们的性能，将能够提高性能或减少GC执行时间的参数应用于最终的工作服务器上</p><p><strong>降低Minor GC频率</strong></p><p>单次<code>Minor GC</code>时间由两部分组成：T1-扫描新生代，T2-复制存活对象；通常在JVM中，复制对象的成本要远高于扫描成本。</p><p>如果新生代空间较小，<code>Eden</code>区很快被填满，就会导致频繁<code>Minor GC</code>因此我们可以通过增大新生代空间来降低<code>Minor GC</code>的频率；</p><p>如果堆内存中存在较多的长期存活的对象，此时增加年轻代空间，反而会增加<code>Minor GC</code>的时间。如果堆中的短期对象较多，那么扩展新生代，单次<code>Minor GC</code>时间不会显著增加。因此，单次<code>Minor GC</code>时间更多取决于GC后存活对象的数量，而非<code>Eden</code>区的大小。</p><p><strong>降低Full GC频率</strong></p><p><code>Full GC</code>相对来说会比<code>Minor GC</code>更耗时，减少进入老年代的对象数量可以显著降低<code>Full GC</code>的频率。</p><p>减少创建大对象：如果对象占用内存过大，在<code>Eden</code>区被创建后会直接传入老年代。</p><p>增大堆内存空间：在堆内存不足的情况下，增大堆内存空间，且设置初始化堆内存为最大堆内存，也可以降低<code>Full GC</code>的频率。</p><p><strong>降低Full GC时间</strong></p><p><code>Full GC</code>的执行时间比<code>Minor GC</code>要长很多，因此<code>Full GC</code>花费时间过长，将可能出现超时错误。</p><ul><li>如果通过减小老年代内存来减少<code>Full GC时间，可能会引起</code>OutOfMemoryError或导致<code>Full GC</code>频率升高；</li><li>通过增加老年代内存来降低<code>Full GC</code>频率，<code>Full GC</code>时间将会增加；</li></ul><p>因此，老年代的大小需要设置为一个“恰当”的值；</p><p><strong>GC优化参数</strong></p><table><thead><tr><th>类型</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>堆内存</td><td><code>-Xms</code></td><td>堆内存初始值</td></tr><tr><td>堆内存</td><td><code>-Xmx</code></td><td>堆内存最大值</td></tr><tr><td>新生代</td><td><code>-XX:NewRatio</code></td><td>新生代与老年代占比</td></tr><tr><td>新生代</td><td><code>-XX:NewSize</code></td><td>新生代内存值</td></tr><tr><td>新生代</td><td><code>-XX:SurvivorRatio</code></td><td><code>Eden</code>与<code>Survivor</code>占比</td></tr></tbody></table><p>GC优化时最常用参数为<code>-Xms</code>、<code>-Xmx</code>和<code>-XX:NewRatio</code>。</p><p><strong>GC优化过程</strong></p><p>GC优化大概可分为以下步骤：</p><ul><li><p>监控GC状态</p><p>监控GC从而检查系统中运行的GC的各种状态；</p></li><li><p>分析GC日志</p><p>可以通过<code>jmap</code>工具来创建堆快照，来检查java内存中的对象和数据的内存文件；分析监控结构并决定是否需要进行GC优化。</p></li><li><p>选择合适的GC回收器</p></li><li><p>分析结果</p><p>设置完GC参数后，收集数据，分析输入日志并检查分配的内存，不断调整GC类型/内存大小来找到系统的最佳参数。</p></li><li><p>应用优化配置</p><p>GC优化结果达到预期，即可应用于服务器上。</p></li></ul><h2 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a>GC日志</h2><h3 id="获取GC日志"><a href="#获取GC日志" class="headerlink" title="获取GC日志"></a>获取GC日志</h3><p>获取GC日志有两种方式：</p><ul><li>使用<code>jstat</code>命令动态查看</li><li>容器中设置相关参数打印GC日志</li></ul><p><strong>jstat命令查看GC</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jstat <span class="token parameter variable">-gc</span> 进程号  时间间隔  输出次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>打印GC参数</strong></p><p>通过JVM参数预设GC日志，通常有以下几种参数设置：</p><pre class="line-numbers language-none"><code class="language-none">-XX:+PrintGC 输出 GC 日志-XX:+PrintGCDetails 输出 GC 的详细日志-XX:+PrintGCTimeStamps 输出 GC 的时间戳（以基准时间的形式）-XX:+PrintGCDateStamps 输出 GC 的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）-XX:+PrintHeapAtGC 在进行 GC 的前后打印出堆的信息-verbose:gc -Xloggc:../logs/gc.log 日志文件的输出路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析GC日志"><a href="#分析GC日志" class="headerlink" title="分析GC日志"></a>分析GC日志</h3><p><strong>CPU过高</strong></p><p>定位步骤：</p><ol><li>通过<code>top -c</code>找到CPU最高的进程ID；</li><li><code>jstack PID</code>导出Java应用程序的线程堆栈信息；</li><li>定位<code>CPU</code>高的线程打印其<code>nid</code></li></ol><h2 id="GC配置"><a href="#GC配置" class="headerlink" title="GC配置"></a>GC配置</h2><h3 id="堆大小设置"><a href="#堆大小设置" class="headerlink" title="堆大小设置"></a>堆大小设置</h3><p>新生代的设置很关键。</p><p>JVM中最大堆大小有三方面限制：</p><ol><li>相关操作系统的数据模型限制（32bit/64bit）；</li><li>系统的可用虚拟内存；</li><li>系统的可用物理内存；</li></ol><blockquote><p>堆大小=新生代大小 + 老年代大小 + 永久代大小</p></blockquote><ul><li>永久代一般为固定大小：64m。可使用<code>-XX:PermSize</code>设置；</li><li>官方推荐新生代栈整个堆的3/8。 使用<code>-Xmn</code>设置；</li></ul><h3 id="JVM内存配置"><a href="#JVM内存配置" class="headerlink" title="JVM内存配置"></a>JVM内存配置</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-Xss</code></td><td>JVM栈大小</td></tr><tr><td><code>-Xms</code></td><td>JVM堆初始值</td></tr><tr><td><code>-Xmx</code></td><td>JVM堆最大值</td></tr><tr><td><code>-Xmn</code></td><td>JVM新生代大小</td></tr><tr><td><code>-XX:NewSize</code></td><td>新生代初始值</td></tr><tr><td><code>-XX:MaxNewSize</code></td><td>新生代最大值</td></tr><tr><td><code>-XX:NewRatio</code></td><td>新生代与老年代比例；默认为2，即老年代是新生代2倍</td></tr><tr><td><code>-XX:SurvivorRatio</code></td><td>新生代<code>Eden</code>与<code>Survivor</code>比例。默认为8</td></tr><tr><td><code>-XX:PermSize</code></td><td>永久代初始值</td></tr><tr><td><code>-XX:MaxPermSize</code></td><td>永久代最大值</td></tr></tbody></table><h3 id="GC类型配置"><a href="#GC类型配置" class="headerlink" title="GC类型配置"></a>GC类型配置</h3><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td><code>-XX:+UseSerialGC</code></td><td>使用<code>Serial+Serial Old</code>垃圾回收组合</td></tr><tr><td><code>-XX:+UseParallelGC</code></td><td>使用<code>Parallel Scavenge + Parallel Old</code>垃圾回收组合</td></tr><tr><td><code>-XX:UseParNewGC</code></td><td>使用<code>ParNew + Serial Old</code>垃圾回收组合</td></tr><tr><td><code>-XX:UseConcMarkSweepGC</code></td><td>使用<code>CMS+ParNew + Serial Old</code>垃圾回收组合</td></tr><tr><td><code>-XX:UseG1GC</code></td><td>使用G1垃圾回收器</td></tr><tr><td><code>-XX:ParallelCMSThreads</code></td><td>并发标记扫描垃圾回收器；并发数=线程数</td></tr></tbody></table><h3 id="垃圾回收通用参数"><a href="#垃圾回收通用参数" class="headerlink" title="垃圾回收通用参数"></a>垃圾回收通用参数</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>PretenureSizeThreshold</code></td><td>设置默认晋升老年代对象大小。默认为0</td></tr><tr><td><code>MaxTenuringThreshold</code></td><td>设置晋升老年代最大年龄，默认为15；</td></tr><tr><td><code>DisableExplicitGC</code></td><td>禁用<code>System.gc()</code></td></tr></tbody></table><h3 id="JMX"><a href="#JMX" class="headerlink" title="JMX"></a>JMX</h3><p>开启JMX后，可以使用<code>jconsole</code>或<code>jvisualvm</code>进行监控java程序的基本信息和运行情况。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-Dcom.sun.management.jmxremote</span><span class="token operator">=</span>true<span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false<span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>false<span class="token parameter variable">-Djava.rmi.server.hostname</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token parameter variable">-Dcom.sun.management.jmxremote.port</span><span class="token operator">=</span><span class="token number">18888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>-Djava.rmi.server.hostname</code>：指定Java程序运行的服务器；</p><p><code>-Dcom.sun.management.jmxremote.port</code>：指定服务监听端口；</p><h3 id="远程DEBUG"><a href="#远程DEBUG" class="headerlink" title="远程DEBUG"></a>远程DEBUG</h3><p>如果需要开启Java应用的远程Debug功能，需指定以下参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-Xdebug</span><span class="token parameter variable">-Xnoagent</span><span class="token parameter variable">-Djava.compiler</span><span class="token operator">=</span>NONE<span class="token parameter variable">-Xrunjdwp:transport</span><span class="token operator">=</span>dt_socket,address<span class="token operator">=</span><span class="token number">28888</span>,server<span class="token operator">=</span>y,suspend<span class="token operator">=</span>n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>address</code>即为远程debug的监听端口；</p><h3 id="HeapDump"><a href="#HeapDump" class="headerlink" title="HeapDump"></a>HeapDump</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:-OmitStackTraceInFastThrow</span> <span class="token parameter variable">-XX:+HeapDumpOnOutOfMemoryError</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="辅助配置"><a href="#辅助配置" class="headerlink" title="辅助配置"></a>辅助配置</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>-XX:+PrintGCDetials</code></td><td>打印GC日志</td></tr><tr><td><code>-Xloggc:&lt;filename&gt;</code></td><td>指定GC日志文件名</td></tr><tr><td><code>-XX:+HeapDumpOnOutOfMemoryError</code></td><td>内存溢出时输出堆快照文件</td></tr></tbody></table><h1 id="JVM命令行工具"><a href="#JVM命令行工具" class="headerlink" title="JVM命令行工具"></a>JVM命令行工具</h1><p>Java程序员免不了故障排查工作，所以经常需要使用一些JVM工具；</p><p>JDK自带了一些使用的命令行工具来监控、分析JVM信息，掌握他们，非常有助于我们进行Troubleshooting；</p><p>常用JDK命令行工具：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>jps</code></td><td>JVM级才能拿状态工具，显示系统内所有JVM进程</td></tr><tr><td><code>jstat</code></td><td>JVM统计监控工具。监控虚拟机运行时状态，可以显示JVM进程中的类装载、内存、GC、JIT编译等运行数据</td></tr><tr><td><code>jmap</code></td><td>JVM堆内存分析工具，用于打印JVM进程对象直方图、类加载统计；生成堆转存快照</td></tr><tr><td><code>jstack</code></td><td>JVM栈查看工具。用于打印JVM进程的线程和锁情况；兵器可以生成线程快照</td></tr><tr><td><code>jhat</code></td><td>用来分析<code>jmap</code>的转储文件</td></tr><tr><td><code>jinfo</code></td><td>JVM信息查看工具，用于实时查看和调整JVM进程参数</td></tr><tr><td><code>jcmd</code></td><td>JVM命令行调试工具，用于向JVM发送调试命令</td></tr></tbody></table><h2 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h2><p><code>jps（JVM Process Status Tool）</code> 是虚拟机进程状态工具。它可以显示指定系统内所有的<code>Hotspot</code>虚拟机进程状态信息。<code>jps</code>通过<code>RMI</code>协议查询开启了<code>RMI</code>服务的远程虚拟机进程状态。</p><h2 id="jps-命令用法"><a href="#jps-命令用法" class="headerlink" title="jps 命令用法"></a>jps 命令用法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jps <span class="token punctuation">[</span>option<span class="token punctuation">]</span> <span class="token punctuation">[</span>hostid<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不指定<code>hostid</code>就默认为当前主机；</p><p>常用参数：</p><ul><li><code>option</code><ul><li><code>-m</code>：输出JVM启动时传递给<code>main()</code>的参数;</li><li><code>-l</code>：输出主类的全名，如果是执行的<code>jar</code>包，则输出<code>jar</code>路径；</li><li><code>-v</code>：显示传递给JVM的参数；</li><li><code>-q</code>：仅输出本地JVM进程ID；</li><li><code>-V</code>：仅输出本地JVM标识符；</li></ul></li><li><code>hostid</code>：<code>RMI</code>注册表中注册的主机名，如果不指定则默认当前主机；</li></ul><h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><p><code>jstat（JVM statistics Monitoring）</code>是虚拟机统计信息监视工具。它可以用于监视虚拟机运行时状态信息，显示出虚拟机级进程中的类状态、内存、垃圾收集、JIT编译等运行数据。</p><h3 id="jstat命令用法"><a href="#jstat命令用法" class="headerlink" title="jstat命令用法"></a>jstat命令用法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jstat <span class="token punctuation">[</span>option<span class="token punctuation">]</span> VMID <span class="token punctuation">[</span>interval<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用参数：</p><ul><li><code>option</code><ul><li><code>-class</code>：监视类状态、卸载数量、总空间以及类状态所耗费时间；</li><li><code>-compiler</code>：显示JIT编译的相关信息；</li><li><code>-gc</code>：监视java堆状况。显示<code>Eden</code>、<code>Survivor</code>、老年代、永久代等容量、已用空间、GC时间等；</li><li><code>-gccapacity</code>：显示各个代的容量以及使用情况；</li><li><code>-gcmetacapacity</code>：显示Metaspace大小；</li><li><code>-gcnew</code>：显示新生代信息；</li><li><code>-gcnewcapacity</code>：显示新生代大小及使用情况；</li><li><code>-gcold</code>：显示老年代和永久代信息；</li><li><code>-gcoldcapacity</code>：显示老年代的大小；</li><li><code>-gcutil</code>：显示垃圾回收统计信息；</li><li><code>-gccause</code>：显示垃圾回收的相关信息，同时显示最后一次或当前正在发生的垃圾回收诱因；</li><li><code>-printcompilation</code>：输出JIT编译的方法信息</li></ul></li><li><code>VMID</code>：如果是本地虚拟机进程，则VMID与LVMID一致；如果是远程虚拟机进程，那么VMID格式为<code>[protocol:][//]lvmid[@hostname[:port]/servername]</code></li><li><code>interval</code>：查询间隔</li><li><code>count</code>：查询次数</li></ul><h4 id="jstat使用示例"><a href="#jstat使用示例" class="headerlink" title="jstat使用示例"></a>jstat使用示例</h4><p><strong>类加载统计</strong></p><p>使用 <code>jstat -class pid</code> 命令可以查看编译统计信息。</p><p>【参数】</p><ul><li>Loaded - 加载 class 的数量</li><li>Bytes - 所占用空间大小</li><li>Unloaded - 未加载数量</li><li>Bytes - 未加载占用空间</li><li>Time - 时间</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jstat <span class="token parameter variable">-class</span> <span class="token number">7129</span>Loaded  Bytes  Unloaded  Bytes     Time <span class="token number">26749</span> <span class="token number">50405.3</span>      <span class="token number">873</span>  <span class="token number">1216.8</span>      <span class="token number">19.75</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>编译统计</strong></p><p>使用 <code>jstat -compiler pid</code> 命令可以查看编译统计信息。</p><p>【参数】</p><ul><li>Compiled - 编译数量</li><li>Failed - 失败数量</li><li>Invalid - 不可用数量</li><li>Time - 时间</li><li>FailedType - 失败类型</li><li>FailedMethod - 失败的方法</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jstat <span class="token parameter variable">-compiler</span> <span class="token number">7129</span>Compiled Failed Invalid   Time   FailedType FailedMethod   <span class="token number">42030</span>      <span class="token number">2</span>       <span class="token number">0</span>   <span class="token number">302.53</span>          <span class="token number">1</span> org/apache/felix/framework/BundleWiringImpl<span class="token variable">$BundleClassLoader</span> findClass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>GC 统计</strong></p><p>使用 <code>jstat -gc pid time</code> 命令可以查看 GC 统计信息。</p><p>参数说明：</p><ul><li><code>S0C</code>：年轻代中 To Survivor 的容量（单位 KB）；</li><li><code>S1C</code>：年轻代中 From Survivor 的容量（单位 KB）；</li><li><code>S0U</code>：年轻代中 To Survivor 目前已使用空间（单位 KB）；</li><li><code>S1U</code>：年轻代中 From Survivor 目前已使用空间（单位 KB）；</li><li><code>EC</code>：年轻代中 Eden 的容量（单位 KB）；</li><li><code>EU</code>：年轻代中 Eden 目前已使用空间（单位 KB）；</li><li><code>OC</code>：Old 代的容量（单位 KB）；</li><li><code>OU</code>：Old 代目前已使用空间（单位 KB）；</li><li><code>MC</code>：Metaspace 的容量（单位 KB）；</li><li><code>MU</code>：Metaspace 目前已使用空间（单位 KB）；</li><li><code>YGC</code>：从应用程序启动到采样时年轻代中 gc 次数；</li><li><code>YGCT</code>：从应用程序启动到采样时年轻代中 gc 所用时间 (s)；</li><li><code>FGC</code>：从应用程序启动到采样时 old 代（全 gc）gc 次数；</li><li><code>FGCT</code>：从应用程序启动到采样时 old 代（全 gc）gc 所用时间 (s)；</li><li><code>GCT</code>：从应用程序启动到采样时 gc 用的总时间 (s)。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jstat <span class="token parameter variable">-gc</span> <span class="token number">25196</span> 1s <span class="token number">4</span> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<span class="token number">20928.0</span> <span class="token number">20928.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">167936.0</span>  <span class="token number">8880.5</span>   <span class="token number">838912.0</span>   <span class="token number">80291.2</span>   <span class="token number">106668.0</span> <span class="token number">100032.1</span> <span class="token number">12772.0</span> <span class="token number">11602.2</span>    <span class="token number">760</span>   <span class="token number">14.332</span>  <span class="token number">580</span>   <span class="token number">656.218</span>  <span class="token number">670.550</span><span class="token number">20928.0</span> <span class="token number">20928.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">167936.0</span>  <span class="token number">8880.5</span>   <span class="token number">838912.0</span>   <span class="token number">80291.2</span>   <span class="token number">106668.0</span> <span class="token number">100032.1</span> <span class="token number">12772.0</span> <span class="token number">11602.2</span>    <span class="token number">760</span>   <span class="token number">14.332</span>  <span class="token number">580</span>   <span class="token number">656.218</span>  <span class="token number">670.550</span><span class="token number">20928.0</span> <span class="token number">20928.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">167936.0</span>  <span class="token number">8880.5</span>   <span class="token number">838912.0</span>   <span class="token number">80291.2</span>   <span class="token number">106668.0</span> <span class="token number">100032.1</span> <span class="token number">12772.0</span> <span class="token number">11602.2</span>    <span class="token number">760</span>   <span class="token number">14.332</span>  <span class="token number">580</span>   <span class="token number">656.218</span>  <span class="token number">670.550</span><span class="token number">20928.0</span> <span class="token number">20928.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">167936.0</span>  <span class="token number">8880.5</span>   <span class="token number">838912.0</span>   <span class="token number">80291.2</span>   <span class="token number">106668.0</span> <span class="token number">100032.1</span> <span class="token number">12772.0</span> <span class="token number">11602.2</span>    <span class="token number">760</span>   <span class="token number">14.332</span>  <span class="token number">580</span>   <span class="token number">656.218</span>  <span class="token number">670.550</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><p><code>jmap（JVM Memory Map）</code>是Java内存映射工具。<code>jmap</code>用于生成堆转储快照。</p><h3 id="jmap命令用法"><a href="#jmap命令用法" class="headerlink" title="jmap命令用法"></a>jmap命令用法</h3><p>命令格式：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">jmap [option] pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>option</code> 选项参数：<ul><li><code>-dump</code> - 生成堆转储快照。<code>-dump:live</code> 只保存堆中的存活对象。</li><li><code>-finalizerinfo</code> - 显示在 F-Queue 队列等待执行 <code>finalizer</code> 方法的对象</li><li><code>-heap</code> - 显示 Java 堆详细信息。</li><li><code>-histo</code> - 显示堆中对象的统计信息，包括类、实例数量、合计容量。<code>-histo:live</code> 只统计堆中的存活对象。</li><li><code>-permstat</code> - to print permanent generation statistics</li><li><code>-F</code> - 当-dump 没有响应时，强制生成 dump 快照</li></ul></li></ul><h3 id="jmap使用示例"><a href="#jmap使用示例" class="headerlink" title="jmap使用示例"></a>jmap使用示例</h3><p><strong>生成 heapdump 快照</strong></p><p>dump 堆到文件，format 指定输出格式，live 指明是活着的对象，file 指定文件名</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jmap -dump:live,format<span class="token operator">=</span>b,file<span class="token operator">=</span>dump.hprof <span class="token number">28920</span>Dumping heap to /home/xxx/dump.hprof <span class="token punctuation">..</span>.Heap dump <span class="token function">file</span> created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>dump.hprof 这个后缀是为了后续可以直接用 MAT(Memory Anlysis Tool)等工具打开。</p><p><strong>查看实例数最多的类</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jmap <span class="token parameter variable">-histo</span> <span class="token number">29527</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">6</span> num     <span class="token comment">#instances         #bytes  class name</span>----------------------------------------------   <span class="token number">1</span>:      <span class="token number">13673280</span>     <span class="token number">1438961864</span>  <span class="token punctuation">[</span>C   <span class="token number">2</span>:       <span class="token number">1207166</span>      <span class="token number">411277184</span>  <span class="token punctuation">[</span>I   <span class="token number">3</span>:       <span class="token number">7382322</span>      <span class="token number">347307096</span>  <span class="token punctuation">[</span>Ljava.lang.Object<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看指定进程的堆信息</strong></p><p>注意：使用 CMS GC 情况下，<code>jmap -heap PID</code> 的执行有可能会导致 java 进程挂起。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jmap <span class="token parameter variable">-heap</span> <span class="token number">12379</span>Attaching to process ID <span class="token number">12379</span>, please wait<span class="token punctuation">..</span>.Debugger attached successfully.Server compiler detected.JVM version is <span class="token number">17.0</span>-b16using thread-local object allocation.Parallel GC with <span class="token number">6</span> thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Heap Configuration:   MinHeapFreeRatio <span class="token operator">=</span> <span class="token number">40</span>   MaxHeapFreeRatio <span class="token operator">=</span> <span class="token number">70</span>   MaxHeapSize      <span class="token operator">=</span> <span class="token number">83886080</span> <span class="token punctuation">(</span><span class="token number">80</span>.0MB<span class="token punctuation">)</span>   NewSize          <span class="token operator">=</span> <span class="token number">1310720</span> <span class="token punctuation">(</span><span class="token number">1</span>.25MB<span class="token punctuation">)</span>   MaxNewSize       <span class="token operator">=</span> <span class="token number">17592186044415</span> MB   OldSize          <span class="token operator">=</span> <span class="token number">5439488</span> <span class="token punctuation">(</span><span class="token number">5</span>.1875MB<span class="token punctuation">)</span>   NewRatio         <span class="token operator">=</span> <span class="token number">2</span>   SurvivorRatio    <span class="token operator">=</span> <span class="token number">8</span>   PermSize         <span class="token operator">=</span> <span class="token number">20971520</span> <span class="token punctuation">(</span><span class="token number">20</span>.0MB<span class="token punctuation">)</span>   MaxPermSize      <span class="token operator">=</span> <span class="token number">88080384</span> <span class="token punctuation">(</span><span class="token number">84</span>.0MB<span class="token punctuation">)</span>Heap Usage:PS Young GenerationEden Space:   capacity <span class="token operator">=</span> <span class="token number">9306112</span> <span class="token punctuation">(</span><span class="token number">8</span>.875MB<span class="token punctuation">)</span>   used     <span class="token operator">=</span> <span class="token number">5375360</span> <span class="token punctuation">(</span><span class="token number">5</span>.1263427734375MB<span class="token punctuation">)</span>   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">3930752</span> <span class="token punctuation">(</span><span class="token number">3</span>.7486572265625MB<span class="token punctuation">)</span>   <span class="token number">57.761608714788736</span>% usedFrom Space:   capacity <span class="token operator">=</span> <span class="token number">9306112</span> <span class="token punctuation">(</span><span class="token number">8</span>.875MB<span class="token punctuation">)</span>   used     <span class="token operator">=</span> <span class="token number">3425240</span> <span class="token punctuation">(</span><span class="token number">3</span>.2665634155273438MB<span class="token punctuation">)</span>   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">5880872</span> <span class="token punctuation">(</span><span class="token number">5</span>.608436584472656MB<span class="token punctuation">)</span>   <span class="token number">36.80634834397007</span>% usedTo Space:   capacity <span class="token operator">=</span> <span class="token number">9306112</span> <span class="token punctuation">(</span><span class="token number">8</span>.875MB<span class="token punctuation">)</span>   used     <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span>.0MB<span class="token punctuation">)</span>   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">9306112</span> <span class="token punctuation">(</span><span class="token number">8</span>.875MB<span class="token punctuation">)</span>   <span class="token number">0.0</span>% usedPS Old Generation   capacity <span class="token operator">=</span> <span class="token number">55967744</span> <span class="token punctuation">(</span><span class="token number">53</span>.375MB<span class="token punctuation">)</span>   used     <span class="token operator">=</span> <span class="token number">48354640</span> <span class="token punctuation">(</span><span class="token number">46</span>.11457824707031MB<span class="token punctuation">)</span>   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">7613104</span> <span class="token punctuation">(</span><span class="token number">7</span>.2604217529296875MB<span class="token punctuation">)</span>   <span class="token number">86.39733629427693</span>% usedPS Perm Generation   capacity <span class="token operator">=</span> <span class="token number">62062592</span> <span class="token punctuation">(</span><span class="token number">59</span>.1875MB<span class="token punctuation">)</span>   used     <span class="token operator">=</span> <span class="token number">60243112</span> <span class="token punctuation">(</span><span class="token number">57</span>.452308654785156MB<span class="token punctuation">)</span>   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">1819480</span> <span class="token punctuation">(</span><span class="token number">1</span>.7351913452148438MB<span class="token punctuation">)</span>   <span class="token number">97.06831451706046</span>% used<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h2><p><code>jstack(Stack Trace for Java)</code>是Java堆跟踪工具。jstack 用来打印目标 Java 进程中各个线程的栈轨迹，以及这些线程所持有的锁，并可以生成 java 虚拟机当前时刻的线程快照（一般称为 threaddump 或 javacore 文件）。</p><p>线程快照是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等。</p><p><code>jstack</code> 通常会结合 <code>top -Hp pid</code> 或 <code>pidstat -p pid -t</code> 一起查看具体线程的状态，也经常用来排查一些死锁的异常。</p><p>线程出现停顿的时候通过 jstack 来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果 java 程序崩溃生成 core 文件，jstack 工具可以用来获得 core 文件的 java stack 和 native stack 的信息，从而可以轻松地知道 java 程序是如何崩溃和在程序何处发生问题。另外，jstack 工具还可以附属到正在运行的 java 程序中，看到当时运行的 java 程序的 java stack 和 native stack 的信息, 如果现在运行的 java 程序呈现 hung 的状态，jstack 是非常有用的。</p><h3 id="jstack命令用法"><a href="#jstack命令用法" class="headerlink" title="jstack命令用法"></a>jstack命令用法</h3><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jstack <span class="token punctuation">[</span>option<span class="token punctuation">]</span> pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>option</code> 选项参数<ul><li><code>-F</code> - 当正常输出请求不被响应时，强制输出线程堆栈</li><li><code>-l</code> - 除堆栈外，显示关于锁的附加信息</li><li><code>-m</code> - 打印 java 和 jni 框架的所有栈信息</li></ul></li></ul><h3 id="thread-dump-文件"><a href="#thread-dump-文件" class="headerlink" title="thread dump 文件"></a>thread dump 文件</h3><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210729021242309.png" alt="image-20210729021242309"><p>一个 Thread Dump 文件大致可以分为五个部分。</p><p><strong>第一部分：Full thread dump identifier</strong></p><p>这一部分是内容最开始的部分，展示了快照文件的生成时间和 JVM 的版本信息。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">2017-10-19 10:46:44Full thread dump Java HotSpot(TM) 64-Bit Server VM (24.79-b02 mixed mode):<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第二部分：Java EE middleware, third party &amp; custom application Threads</strong></p><p>这是整个文件的核心部分，里面展示了 JavaEE 容器（如 tomcat、resin 等）、自己的程序中所使用的线程信息。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">"resin-22129" daemon prio=10 tid=0x00007fbe5c34e000 nid=0x4cb1 waiting on condition [0x00007fbe4ff7c000]   java.lang.Thread.State: WAITING (parking)    at sun.misc.Unsafe.park(Native Method)    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:315)    at com.caucho.env.thread2.ResinThread2.park(ResinThread2.java:196)    at com.caucho.env.thread2.ResinThread2.runTasks(ResinThread2.java:147)    at com.caucho.env.thread2.ResinThread2.run(ResinThread2.java:118)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><p><code>"resin-22129"</code> <strong>线程名称：</strong>如果使用 java.lang.Thread 类生成一个线程的时候，线程名称为 Thread-(数字) 的形式，这里是 resin 生成的线程；</p></li><li><p><code>daemon</code> <strong>线程类型：</strong>线程分为守护线程 (daemon) 和非守护线程 (non-daemon) 两种，通常都是守护线程；</p></li><li><p><code>prio=10</code> <strong>线程优先级：</strong>默认为 5，数字越大优先级越高；</p></li><li><p><code>tid=0x00007fbe5c34e000</code> <strong>JVM 线程的 id：</strong>JVM 内部线程的唯一标识，通过 java.lang.Thread.getId()获取，通常用自增的方式实现；</p></li><li><p><code>nid=0x4cb1</code> <strong>系统线程 id：</strong>对应的系统线程 id（Native Thread ID)，可以通过 top 命令进行查看，现场 id 是十六进制的形式；</p></li><li><p><code>waiting on condition</code> <strong>系统线程状态：</strong>这里是系统的线程状态；</p></li><li><p><code>[0x00007fbe4ff7c000]</code> <strong>起始栈地址：</strong>线程堆栈调用的其实内存地址；</p></li><li><p><code>java.lang.Thread.State: WAITING (parking)</code> <strong>JVM 线程状态：</strong>这里标明了线程在代码级别的状态。</p></li><li><p><strong>线程调用栈信息：</strong>下面就是当前线程调用的详细栈信息，用于代码的分析。堆栈信息应该从下向上解读，因为程序调用的顺序是从下向上的。</p></li><li><p><em>第三部分：HotSpot VM Thread</em>*</p></li></ul><p>这一部分展示了 JVM 内部线程的信息，用于执行内部的原生操作。下面常见的集中内置线程：</p><p><code>Attach Listener</code></p><p>该线程负责接收外部命令，执行该命令并把结果返回给调用者，此种类型的线程通常在桌面程序中出现。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">"Attach Listener" daemon prio=5 tid=0x00007fc6b6800800 nid=0x3b07 waiting on condition [0x0000000000000000]   java.lang.Thread.State: RUNNABLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>DestroyJavaVM</code></p><p>执行 <code>main()</code> 的线程在执行完之后调用 JNI 中的 <code>jni_DestroyJavaVM()</code> 方法会唤起 <code>DestroyJavaVM</code> 线程，处于等待状态，等待其它线程（java 线程和 native 线程）退出时通知它卸载 JVM。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">"DestroyJavaVM" prio=5 tid=0x00007fc6b3001000 nid=0x1903 waiting on condition [0x0000000000000000]   java.lang.Thread.State: RUNNABLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>Service Thread</code></p><p>用于启动服务的线程</p><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">"Service Thread" daemon prio=10 tid=0x00007fbea81b3000 nid=0x5f2 runnable [0x0000000000000000]   java.lang.Thread.State: RUNNABLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>CompilerThread</code></p><p>用来调用 JITing，实时编译装卸类。通常 JVM 会启动多个线程来处理这部分工作，线程名称后面的数字也会累加，比如 CompilerThread1。</p><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">"C2 CompilerThread1" daemon prio=10 tid=0x00007fbea814b000 nid=0x5f1 waiting on condition [0x0000000000000000]   java.lang.Thread.State: RUNNABLE"C2 CompilerThread0" daemon prio=10 tid=0x00007fbea8142000 nid=0x5f0 waiting on condition [0x0000000000000000]   java.lang.Thread.State: RUNNABLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Signal Dispatcher</code></p><p>Attach Listener 线程的职责是接收外部 jvm 命令，当命令接收成功后，会交给 signal dispather 线程去进行分发到各个不同的模块处理命令，并且返回处理结果。 signal dispather 线程也是在第一次接收外部 jvm 命令时，进行初始化工作。</p><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">"Signal Dispatcher" daemon prio=10 tid=0x00007fbea81bf800 nid=0x5ef runnable [0x0000000000000000]   java.lang.Thread.State: RUNNABLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>Finalizer</code></p><p>这个线程也是在 main 线程之后创建的，其优先级为 10，主要用于在垃圾收集前，调用对象的 <code>finalize()</code> 方法；关于 Finalizer 线程的几点：</p><ul><li>只有当开始一轮垃圾收集时，才会开始调用 finalize()方法；因此并不是所有对象的 finalize()方法都会被执行；</li><li>该线程也是 daemon 线程，因此如果虚拟机中没有其他非 daemon 线程，不管该线程有没有执行完 finalize()方法，JVM 也会退出；</li><li>JVM 在垃圾收集时会将失去引用的对象包装成 Finalizer 对象（Reference 的实现），并放入 ReferenceQueue，由 Finalizer 线程来处理；最后将该 Finalizer 对象的引用置为 null，由垃圾收集器来回收；</li></ul><p>JVM 为什么要单独用一个线程来执行 <code>finalize()</code> 方法呢？</p><p>如果 JVM 的垃圾收集线程自己来做，很有可能由于在 finalize()方法中误操作导致 GC 线程停止或不可控，这对 GC 线程来说是一种灾难。</p><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">"Finalizer" daemon prio=10 tid=0x00007fbea80da000 nid=0x5eb in Object.wait() [0x00007fbeac044000]   java.lang.Thread.State: WAITING (on object monitor)    at java.lang.Object.wait(Native Method)    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)    - locked &lt;0x00000006d173c1a8&gt; (a java.lang.ref.ReferenceQueue$Lock)    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)    at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Reference Handler</code></p><p>VM 在创建 main 线程后就创建 Reference Handler 线程，其优先级最高，为 10，它主要用于处理引用对象本身（软引用、弱引用、虚引用）的垃圾回收问题 。</p><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">"Reference Handler" daemon prio=10 tid=0x00007fbea80d8000 nid=0x5ea in Object.wait() [0x00007fbeac085000]   java.lang.Thread.State: WAITING (on object monitor)    at java.lang.Object.wait(Native Method)    at java.lang.Object.wait(Object.java:503)    at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)    - locked &lt;0x00000006d173c1f0&gt; (a java.lang.ref.Reference$Lock)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>VM Thread</code></p><p>JVM 中线程的母体，根据 HotSpot 源码中关于 vmThread.hpp 里面的注释，它是一个单例的对象（最原始的线程）会产生或触发所有其他的线程，这个单例的 VM 线程是会被其他线程所使用来做一些 VM 操作（如清扫垃圾等）。 在 VM Thread 的结构体里有一个 VMOperationQueue 列队，所有的 VM 线程操作(vm_operation)都会被保存到这个列队当中，VMThread 本身就是一个线程，它的线程负责执行一个自轮询的 loop 函数(具体可以参考：VMThread.cpp 里面的 void VMThread::loop()) ，该 loop 函数从 VMOperationQueue 列队中按照优先级取出当前需要执行的操作对象(VM_Operation)，并且调用 VM_Operation-&gt;evaluate 函数去执行该操作类型本身的业务逻辑。 VM 操作类型被定义在 vm_operations.hpp 文件内，列举几个：ThreadStop、ThreadDump、PrintThreads、GenCollectFull、GenCollectFullConcurrent、CMS_Initial_Mark、CMS_Final_Remark….. 有兴趣的同学，可以自己去查看源文件。</p><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">"VM Thread" prio=10 tid=0x00007fbea80d3800 nid=0x5e9 runnable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第四部分：HotSpot GC Thread</strong></p><p>JVM 中用于进行资源回收的线程，包括以下几种类型的线程：</p><p><code>VM Periodic Task Thread</code></p><p>该线程是 JVM 周期性任务调度的线程，它由 WatcherThread 创建，是一个单例对象。该线程在 JVM 内使用得比较频繁，比如：定期的内存监控、JVM 运行状况监控。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">"VM Periodic Task Thread" prio=10 tid=0x00007fbea82ae800 nid=0x5fa waiting on condition<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用 jstat 命令查看 GC 的情况，比如查看某个进程没有存活必要的引用可以使用命令 <code>jstat -gcutil 250 7</code> 参数中 pid 是进程 id，后面的 250 和 7 表示每 250 毫秒打印一次，总共打印 7 次。 这对于防止因为应用代码中直接使用 native 库或者第三方的一些监控工具的内存泄漏有非常大的帮助。</p><p><code>GC task thread#0 (ParallelGC)</code></p><p>垃圾回收线程，该线程会负责进行垃圾回收。通常 JVM 会启动多个线程来处理这个工作，线程名称中#后面的数字也会累加。</p><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">"GC task thread#0 (ParallelGC)" prio=5 tid=0x00007fc6b480d000 nid=0x2503 runnable"GC task thread#1 (ParallelGC)" prio=5 tid=0x00007fc6b2812000 nid=0x2703 runnable"GC task thread#2 (ParallelGC)" prio=5 tid=0x00007fc6b2812800 nid=0x2903 runnable"GC task thread#3 (ParallelGC)" prio=5 tid=0x00007fc6b2813000 nid=0x2b03 runnable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在 JVM 中增加了 <code>-XX:+UseConcMarkSweepGC</code> 参数将会启用 CMS （Concurrent Mark-Sweep）GC Thread 方式，以下是该模式下的线程类型：</p><p><code>Gang worker#0 (Parallel GC Threads)</code></p><p>原来垃圾回收线程 GC task thread#0 (ParallelGC) 被替换为 Gang worker#0 (Parallel GC Threads)。Gang worker 是 JVM 用于年轻代垃圾回收(minor gc)的线程。</p><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">"Gang worker#0 (Parallel GC Threads)" prio=10 tid=0x00007fbea801b800 nid=0x5e4 runnable"Gang worker#1 (Parallel GC Threads)" prio=10 tid=0x00007fbea801d800 nid=0x5e7 runnable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Concurrent Mark-Sweep GC Thread</code></p><p>并发标记清除垃圾回收器（就是通常所说的 CMS GC）线程， 该线程主要针对于年老代垃圾回收。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">"Concurrent Mark-Sweep GC Thread" prio=10 tid=0x00007fbea8073800 nid=0x5e8 runnable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Surrogate Locker Thread (Concurrent GC)</code></p><p>此线程主要配合 CMS 垃圾回收器来使用，是一个守护线程，主要负责处理 GC 过程中 Java 层的 Reference（指软引用、弱引用等等）与 jvm 内部层面的对象状态同步。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">"Surrogate Locker Thread (Concurrent GC)" daemon prio=10 tid=0x00007fbea8158800 nid=0x5ee waiting on condition [0x0000000000000000]   java.lang.Thread.State: RUNNABLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里以 WeakHashMap 为例进行说明，首先是一个关键点：</p><ul><li>WeakHashMap 和 HashMap 一样，内部有一个 Entry[]数组;</li><li>WeakHashMap 的 Entry 比较特殊，它的继承体系结构为 Entry-&gt;WeakReference-&gt;Reference;</li><li>Reference 里面有一个全局锁对象：Lock，它也被称为 pending_lock，注意：它是静态对象；</li><li>Reference 里面有一个静态变量：pending；</li><li>Reference 里面有一个静态内部类：ReferenceHandler 的线程，它在 static 块里面被初始化并且启动，启动完成后处于 wait 状态，它在一个 Lock 同步锁模块中等待；</li><li>WeakHashMap 里面还实例化了一个 ReferenceQueue 列队</li></ul><p>假设，WeakHashMap 对象里面已经保存了很多对象的引用，JVM 在进行 CMS GC 的时候会创建一个 ConcurrentMarkSweepThread（简称 CMST）线程去进行 GC。ConcurrentMarkSweepThread 线程被创建的同时会创建一个 SurrogateLockerThread（简称 SLT）线程并且启动它，SLT 启动之后，处于等待阶段。 CMST 开始 GC 时，会发一个消息给 SLT 让它去获取 Java 层 Reference 对象的全局锁：Lock。直到 CMS GC 完毕之后，JVM 会将 WeakHashMap 中所有被回收的对象所属的 WeakReference 容器对象放入到 Reference 的 pending 属性当中（每次 GC 完毕之后，pending 属性基本上都不会为 null 了），然后通知 SLT 释放并且 notify 全局锁:Lock。此时激活了 ReferenceHandler 线程的 run 方法，使其脱离 wait 状态，开始工作了。 ReferenceHandler 这个线程会将 pending 中的所有 WeakReference 对象都移动到它们各自的列队当中，比如当前这个 WeakReference 属于某个 WeakHashMap 对象，那么它就会被放入相应的 ReferenceQueue 列队里面（该列队是链表结构）。 当我们下次从 WeakHashMap 对象里面 get、put 数据或者调用 size 方法的时候，WeakHashMap 就会将 ReferenceQueue 列队中的 WeakReference 依依 poll 出来去和 Entry[]数据做比较，如果发现相同的，则说明这个 Entry 所保存的对象已经被 GC 掉了，那么将 Entry[]内的 Entry 对象剔除掉。</p><p><strong>第五部分：JNI global references count</strong></p><p>这一部分主要回收那些在 native 代码上被引用，但在 java 代码中却没有存活必要的引用，对于防止因为应用代码中直接使用 native 库或第三方的一些监控工具的内存泄漏有非常大的帮助。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">JNI global references: 830<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="系统进程状态"><a href="#系统进程状态" class="headerlink" title="系统进程状态"></a>系统进程状态</h4><p>系统线程有如下状态：</p><p><strong>deadlock</strong></p><p>死锁线程，一般指多个线程调用期间进入了相互资源占用，导致一直等待无法释放的情况。</p><p><strong>runable</strong></p><p>一般指该线程正在执行状态中，该线程占用了资源，正在处理某个操作，如通过 SQL 语句查询数据库、对某个文件进行写入等。</p><p><strong>blocked</strong></p><p>线程正处于阻塞状态，指当前线程执行过程中，所需要的资源长时间等待却一直未能获取到，被容器的线程管理器标识为阻塞状态，可以理解为等待资源超时的线程。</p><p><strong>waiting on condition</strong></p><p>线程正处于等待资源或等待某个条件的发生，具体的原因需要结合下面堆栈信息进行分析。</p><p>（1）如果堆栈信息明确是应用代码，则证明该线程正在等待资源，一般是大量读取某种资源且该资源采用了资源锁的情况下，线程进入等待状态，等待资源的读取，或者正在等待其他线程的执行等。</p><p>（2）如果发现有大量的线程都正处于这种状态，并且堆栈信息中得知正等待网络读写，这是因为网络阻塞导致线程无法执行，很有可能是一个网络瓶颈的征兆：</p><ul><li>网络非常繁忙，几乎消耗了所有的带宽，仍然有大量数据等待网络读写；</li><li>网络可能是空闲的，但由于路由或防火墙等原因，导致包无法正常到达；</li></ul><p>所以一定要结合系统的一些性能观察工具进行综合分析，比如 netstat 统计单位时间的发送包的数量，看是否很明显超过了所在网络带宽的限制；观察 CPU 的利用率，看系统态的 CPU 时间是否明显大于用户态的 CPU 时间。这些都指向由于网络带宽所限导致的网络瓶颈。</p><p>（3）还有一种常见的情况是该线程在 sleep，等待 sleep 的时间到了，将被唤醒。</p><p><strong>waiting for monitor entry 或 in Object.wait()</strong></p><p>Moniter 是 Java 中用以实现线程之间的互斥与协作的主要手段，它可以看成是对象或者 class 的锁，每个对象都有，也仅有一个 Monitor。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210729022945748.png" alt="image-20210729022945748"><p>从上图可以看出，每个 Monitor 在某个时刻只能被一个线程拥有，该线程就是 “Active Thread”，而其他线程都是 “Waiting Thread”，分别在两个队列 “Entry Set”和”Waint Set”里面等待。其中在 “Entry Set” 中等待的线程状态是 <code>waiting for monitor entry</code>，在 “Wait Set” 中等待的线程状态是 <code>in Object.wait()</code>。</p><p>（1）”Entry Set”里面的线程。</p><p>我们称被 <code>synchronized</code> 保护起来的代码段为临界区，对应的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当一个线程申请进入临界区时，它就进入了 “Entry Set” 队列中，这时候有两种可能性：</p><ul><li>该 Monitor 不被其他线程拥有，”Entry Set”里面也没有其他等待的线程。本线程即成为相应类或者对象的 Monitor 的 Owner，执行临界区里面的代码；此时在 Thread Dump 中显示线程处于 “Runnable” 状态。</li><li>该 Monitor 被其他线程拥有，本线程在 “Entry Set” 队列中等待。此时在 Thread Dump 中显示线程处于 “waiting for monity entry” 状态。</li></ul><p>临界区的设置是为了保证其内部的代码执行的原子性和完整性，但因为临界区在任何时间只允许线程串行通过，这和我们使用多线程的初衷是相反的。如果在多线程程序中大量使用 synchronized，或者不适当的使用它，会造成大量线程在临界区的入口等待，造成系统的性能大幅下降。如果在 Thread Dump 中发现这个情况，应该审视源码并对其进行改进。</p><p>（2）”Wait Set”里面的线程</p><p>当线程获得了 Monitor，进入了临界区之后，如果发现线程继续运行的条件没有满足，它则调用对象（通常是被 synchronized 的对象）的 wait()方法，放弃 Monitor，进入 “Wait Set”队列。只有当别的线程在该对象上调用了 notify()或者 notifyAll()方法，”Wait Set”队列中的线程才得到机会去竞争，但是只有一个线程获得对象的 Monitor，恢复到运行态。”Wait Set”中的线程在 Thread Dump 中显示的状态为 in Object.wait()。通常来说，当 CPU 很忙的时候关注 Runnable 状态的线程，反之则关注 waiting for monitor entry 状态的线程。</p><h2 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h2><p><code>jinfo(JVM Configuration info)</code>，是Java配置信息工具。<code>jinfo</code>用于实时查看和调整虚拟机运行参数。</p><p>jinfo 命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jinfo <span class="token punctuation">[</span>option<span class="token punctuation">]</span> pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>option</code> 选项参数：<ul><li><code>-flag</code> - 输出指定 args 参数的值</li><li><code>-sysprops</code> - 输出系统属性，等同于 <code>System.getProperties()</code></li></ul></li></ul><h2 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h2><p><code>jhat（JVM Heap Analysis Tool）</code>是虚拟机堆转储快照分析工具。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jhat <span class="token punctuation">[</span>dumpfile<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="JVM-GUI工具"><a href="#JVM-GUI工具" class="headerlink" title="JVM GUI工具"></a>JVM GUI工具</h1><p>Java程序员在进行故障排查工作时，除了可以使用JDK自带的命令行工具外，还可以使用一些常用的GUI工具；</p><h2 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h2><p>jconsole是JDK自带的GUI工具。jconsole（Java Monitor and Management Console）是一种基于JVM的可视化监视与管理工具；</p><p>jconsole的管理功能是是针对JMV MBean进行管理，由于MBean可以使用代码、中间服务器的管理控制台或所有符合JMX规范的软件进行访问；</p><blockquote><p>jconsole的前提是Java应用开启JMX;</p></blockquote><h3 id="开启JMX"><a href="#开启JMX" class="headerlink" title="开启JMX"></a>开启JMX</h3><p>Java应用开启JMX后，可以使用<code>jconsole</code>或<code>jvisualvm</code>进行监控Java程序的基本信息和运行情况；</p><p>开启方法是，在<code>java</code>执行后，添加以下参数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>ssl<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>authenticate<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>hostname<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">18888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>-Djava.rmi.server.hostname</code> - 指定 Java 程序运行的服务器</li><li><code>-Dcom.sun.management.jmxremote.port</code> - 指定 JMX 服务监听端口</li></ul><h3 id="连接jconsole"><a href="#连接jconsole" class="headerlink" title="连接jconsole"></a>连接jconsole</h3><p>如果是本地Java进程，jconsole可以直接绑定连接；</p><p>如果是远程Java进行，需要连接Java进程的JMX端口；</p><h3 id="jconsole界面"><a href="#jconsole界面" class="headerlink" title="jconsole界面"></a>jconsole界面</h3><p>进入jconsole应用后，可以看到以下<code>tab</code>页面：</p><ul><li>概述：显示有关Java VM的监视值的概述信息；</li><li>内存：显示有关内存使用的信息；相当于可视化的<code>jstat</code>命令；</li><li>线程：显示有关线程使用的信息；</li><li>类：显示有关类加载的信息；</li><li>VM摘要：显示有关Java VM的信息；</li><li>MBean：显示有关MBean的信息；</li></ul><h2 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h2><p>jvisualvm 是 JDK 自带的 GUI 工具。<strong>jvisualvm(All-In-One Java Troubleshooting Tool) 是多合一故障处理工具</strong>。它支持运行监视、故障处理、性能分析等功能。</p><h3 id="jvisualvm概述页面"><a href="#jvisualvm概述页面" class="headerlink" title="jvisualvm概述页面"></a>jvisualvm概述页面</h3><p>jvisualvm概述页面可以查看当前Java进程的基本信息，如：JDK版本、Java进程、JVM参数 等；</p><h3 id="jvisualvm监控页面"><a href="#jvisualvm监控页面" class="headerlink" title="jvisualvm监控页面"></a>jvisualvm监控页面</h3><p>在jvisualvm监控页面，可以看到Java进程的CPU、内存、类加载、线程的实时变化；</p><h3 id="jvisualvm线程页面"><a href="#jvisualvm线程页面" class="headerlink" title="jvisualvm线程页面"></a>jvisualvm线程页面</h3><p>jvisualvm线程页面展示了当前的线程状态；</p><p>jvisualvm还可以生成线程的Dump文件，帮助进一步分析线程栈信息；</p><h3 id="jvisualvm抽样器页面"><a href="#jvisualvm抽样器页面" class="headerlink" title="jvisualvm抽样器页面"></a>jvisualvm抽样器页面</h3><p>jvisualvm可以对CPU、内存进行抽样，可以帮助我们进行性能分析；</p><blockquote><p>相较jconsole而言，jvisualvm更好用；</p></blockquote><h2 id="MAT"><a href="#MAT" class="headerlink" title="MAT"></a>MAT</h2><p>MAT解压后，安装目录下有个<code>MemoryAnalyzer.ini</code>配置文件；</p><p><code>MemoryAnalyzer.ini</code>中有个重要的参数<code>-Xmx</code>表示最大内存，默认为：<code>-vmargs -Xmx1024m</code></p><p>如果试图使用MAT导入的dump文件超过1024M，会触发<code>An internal error occurred during: "Parsing heap dump from XXX"</code>报错，此时可适当调整<code>Xmx</code>大小；</p><h3 id="MAT分析"><a href="#MAT分析" class="headerlink" title="MAT分析"></a>MAT分析</h3><p><code>Leak Suspects</code>可以进入内存泄露页面；</p><ul><li>查看饼图了解内存整体消耗情况；</li><li>缩小范围，寻找问题可疑点；</li></ul><h2 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h2><p>Arthas是Alibaba开源的Java诊断工具，深受Java程序员喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态；</p><h3 id="Arthas-基础命令"><a href="#Arthas-基础命令" class="headerlink" title="Arthas 基础命令"></a>Arthas 基础命令</h3><p>help——查看命令帮助信息<br>cat (opens new window)——打印文件内容，和 linux 里的 cat 命令类似<br>echo (opens new window)–打印参数，和 linux 里的 echo 命令类似<br>grep (opens new window)——匹配查找，和 linux 里的 grep 命令类似<br>tee (opens new window)——复制标准输入到标准输出和指定的文件，和 linux 里的 tee 命令类似<br>pwd (opens new window)——返回当前的工作目录，和 linux 命令类似<br>cls——清空当前屏幕区域<br>session——查看当前会话的信息<br>reset (opens new window)——重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类<br>version——输出当前目标 Java 进程所加载的 Arthas 版本号<br>history——打印命令历史<br>quit——退出当前 Arthas 客户端，其他 Arthas 客户端不受影响<br>stop——关闭 Arthas 服务端，所有 Arthas 客户端全部退出<br>keymap (opens new window)——Arthas 快捷键列表及自定义快捷键</p><h3 id="Arthas-jvm-相关命令"><a href="#Arthas-jvm-相关命令" class="headerlink" title="Arthas jvm 相关命令"></a>Arthas jvm 相关命令</h3><p>dashboard (opens new window)——当前系统的实时数据面板<br>thread (opens new window)——查看当前 JVM 的线程堆栈信息<br>jvm (opens new window)——查看当前 JVM 的信息<br>sysprop (opens new window)——查看和修改 JVM 的系统属性<br>sysenv (opens new window)——查看 JVM 的环境变量<br>vmoption (opens new window)——查看和修改 JVM 里诊断相关的 option<br>perfcounter (opens new window)——查看当前 JVM 的 Perf Counter 信息<br>logger (opens new window)——查看和修改 logger<br>getstatic (opens new window)——查看类的静态属性<br>ognl (opens new window)——执行 ognl 表达式<br>mbean (opens new window)——查看 Mbean 的信息<br>heapdump (opens new window)——dump java heap, 类似 jmap 命令的 heap dump 功能</p><h3 id="Arthas-class-classloader-相关命令"><a href="#Arthas-class-classloader-相关命令" class="headerlink" title="Arthas class/classloader 相关命令"></a>Arthas class/classloader 相关命令</h3><p>sc (opens new window)——查看 JVM 已加载的类信息<br>sm (opens new window)——查看已加载类的方法信息<br>jad (opens new window)——反编译指定已加载类的源码<br>mc (opens new window)——内存编译器，内存编译.java文件为.class文件<br>redefine (opens new window)——加载外部的.class文件，redefine 到 JVM 里<br>dump (opens new window)——dump 已加载类的 byte code 到特定目录<br>classloader (opens new window)——查看 classloader 的继承树，urls，类加载信息，使用 classloader 去 getResource</p><h3 id="Arthas-monitor-watch-trace-相关命令"><a href="#Arthas-monitor-watch-trace-相关命令" class="headerlink" title="Arthas monitor/watch/trace 相关命令"></a>Arthas monitor/watch/trace 相关命令</h3><p>请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 stop 或将增强过的类执行 reset 命令。</p><p>monitor (opens new window)——方法执行监控<br>watch (opens new window)——方法执行数据观测<br>trace (opens new window)——方法内部调用路径，并输出方法路径上的每个节点上耗时<br>stack (opens new window)——输出当前方法被调用的调用路径<br>tt (opens new window)——方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：JUnit测试</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-28-junit-ce-shi/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-28-junit-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JUnit是一个Java编程语言的单元测试框架；JUnit在测试驱动的开发方面有很重要的作用，起源于JUnit的一个统称为xUnit的单元测试框架；</p><p>JUnit功能包括：</p><ol><li>用于测试预期结果的断言；</li><li>用于共享通用测试数据的测试装置；</li></ol><p><strong>好处：</strong></p><ol><li><code>JUnit</code>是 一个测试框架，开发人员可以在开发软件时用来编写测试用例；可以为程序员编写的每个函数编写并运行测试用例；因此，可以确保程序员编写的每行代码都会收到测试；</li><li>每次对代码进行变更时，都可以通过一次为该函数编写所有<code>JUnit</code>测试用例来确保该函数运行良好且没有破坏任何较旧的功能；因此，编写一个测试用例后，可以重复使用该测试用例，以确保每次修改代码时，都能够按照预期运行；</li><li>使用<code>JUnit</code>，可以轻松创建并为整个软件管理丰富的单元测试用例套件；</li><li>团队中的任何新成员都可以轻松理解使用<code>JUnit</code>编写和管理的测试用例，有助于编写更多的测试用例以提升开发软件的健壮性；</li><li><code>JUnit</code>已成为使用Java编程语言进行测试的标准，并且几乎受所有IDE的支持；</li></ol><h1 id="JUnit断言"><a href="#JUnit断言" class="headerlink" title="JUnit断言"></a>JUnit断言</h1><p>什么是断言呢？简而言之就是判断；</p><p><code>JUnit</code>所有的断言都包含在<code>Assert</code>类中；</p><p>这个类提供了很多有用的断言方法来编写测试用例。只有失败的断言才会被记录。<code>Assert</code>类中的一些有用的方法如下：</p><ul><li><code>void assertEquals(boolean expected, boolean actual)</code>:检查两个变量或者等式是否平衡;</li><li><code>void assertTrue(boolean expected,boolean actual)</code>：检查条件为真；</li><li><code>void assertFalse(boolean condition)</code>：检查条件为假；</li><li><code>void assertNotNull(Object obj)</code>：检查对象不为空；</li><li><code>void assertNull(Object obj)</code>：检查对象为空；</li><li><code>void assertSame(boolean condition)</code>：检查两个相关对象是否指向同一个对象；</li><li><code>void assertNotSame(boolean condition)</code>：检查两个相关对象是否不指向同一个对象；</li><li><code>void assertArrayEquals(Object[] expectedArray,Object[] resultArray)</code>：检查两个数组是否相等；</li></ul><h1 id="JUnit注解"><a href="#JUnit注解" class="headerlink" title="JUnit注解"></a>JUnit注解</h1><ul><li><code>@Test</code>：创建一个待测试方法的测试案例；</li><li><code>@Ignore</code>：定义需要忽略的测试方法或测试类；<code>JUnit</code>会统计忽略的用例数；</li><li><code>@BeforeClass</code>：定义在所有测试用例前运行；一般用于多个有关联的用例时，可以将前期准备的公用部分提取出来封装在一个方法里，例如创建数据库链接、读取文件等；该方法必须是<code>public static void</code>修饰，即公开、静态、无返回；该方法仅运行一次；</li><li><code>@AfterClass</code>：与<code>@BeforeClass</code>相对应，在测试类所有用例运行之后，运行一次，用于处理一些测试后续数据，如清理数据、恢复线程等；该方法必须是<code>public static void</code>修饰，该方法同样只运行一次；</li><li><code>@Before</code>：与<code>@BeforeClass</code>类似，区别在于其修饰的方法在每个用例运行前都会运行一次；主要用于一些独立于用例之间的准备工作；该方法必须是<code>public void</code>修饰，且不能为<code>static</code>；</li><li><code>@After</code>：与<code>@Before</code>对应；在用例运行之后运行；</li><li><code>RunWith</code>：定义测试类的测试运行器，决定用什么方式偏好去运行这些测试集/类/方法；如不指定，则使用默认运行期；常见运行器有：<ul><li><code>@RunWith(Parameterized.class)</code>：参数运行器，配合<code>@Patameters</code>使用<code>JUnit</code>的参数化功能；</li><li><code>@RunWith(Suite.class) @SuiteClass(ATest.class,BTest.class,CTest.class)</code>：测试集运行器配合使用测试集功能；</li><li><code>@RunWith(JUnit4.class)</code>：<code>JUnit4</code>的默认运行器；</li></ul></li><li><code>@Parameters</code>：用于使用参数化功能；</li><li><code>@Test(timeout=1000)</code>：限时测试，用于应对逻辑复杂、嵌套循环比较深的程序，对测试设置一个执行时间，超时系统自动终止，以毫秒为单位；</li></ul><h1 id="JUnit参数化测试"><a href="#JUnit参数化测试" class="headerlink" title="JUnit参数化测试"></a>JUnit参数化测试</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p><code>Junit4</code>引入了一个新的功能：参数化测试；参数化测试允许开发人员使用不同的值反复运行同一个测试；测试步骤如下：</p><ul><li><code>@RunWith(Parameterized.class)</code>来修饰测试类；</li><li>创建一个由<code>@Parameters</code>注释的公用静态方法，返回一个对象的集合（数组）来作为测试数据集合；</li><li>创建一个公共的构造函数，它接受和一行测试数据相等同的东西；</li><li>为每一列测试数据创建一个实例变量；</li><li>用实例变量作为测试数据的来源创建测试用例；</li></ul><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><p><code>JUnit5</code>引入<code>JUnitParamsRunner</code>执行器，相较<code>JUnit4</code>的参数化测试更为简便，具体使用步骤为：</p><ul><li><code>@RunWith(JUnitParamsRunner)来修饰测试类</code>；</li><li>在待测试方法上添加注释<code>@Parameters({"arg11,arg12,arg13","arg21,arg22,arg23"})</code>，多组参数使用大括号限定，逗号分隔；同一组参数位于同一组双引号内，使用逗号分隔；</li><li>测试方法定义形参按顺序与注解中参数对应即可；</li></ul><blockquote><p><code>JUnit4</code>可以通过引入<code>JUnitParams</code>包来使用该功能</p></blockquote><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><ol><li><p><code>java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing</code></p><p>该报错是因为<code>JUnit</code>版本升级后，默认不在包含<code>hamcrest-core</code>包导致，降低<code>JUnit</code>版本至4.10或添加<code>hamcrest-core</code>即可；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：泛型类型</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-7-fan-xing-lei-xing/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-7-fan-xing-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Java泛型类型"><a href="#Java泛型类型" class="headerlink" title="Java泛型类型"></a>Java泛型类型</h1><p>JDK5引入了泛型的概念，泛型的出现，解决了类型安全问题；</p><p>泛型具有以下优点：</p><ul><li><p>编译时强类型检查</p><p>泛型要求在声明时指定实际数据类型，Java编译器在编译时会对泛型代码做强类型检查，并在代码违反类型安全时发出告警；早发现早治理；编译器发现并修复错误代价远低于运行时；</p></li><li><p>避免类型转换</p></li><li><p>泛型编程可以实现通用算法；</p></li></ul><h2 id="泛型使用"><a href="#泛型使用" class="headerlink" title="泛型使用"></a>泛型使用</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型类声明语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span>  clazzName<span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span><span class="token class-name">Tn</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">{</span>  <span class="token comment">/*...*/</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>泛型类的声明与非泛型类的声明类似，除了在类名后添加类型参数声明部分；类型参数部分声明使用<code>&lt;&gt;</code>包围，位于类名与类语句块之间；</p><p>一般将泛型中的类名称为<strong>原型</strong>，将<code>&lt;&gt;</code>指定的参数称为<strong>类型参数</strong>；</p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>接口也可以声明泛型；</p><p>泛型接口声明语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterName</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>泛型接口有两种实现方式：</p><ul><li>实现接口时明确泛型类型</li><li>实现接口时继承泛型类型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// m1:实现接口时明确泛型类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericsDemo01</span> <span class="token keyword">implements</span> <span class="token class-name">InterName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//m2 ：实现接口时继承泛型类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericsDemo02</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">InterName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>泛型方法是引入自己声明的泛型参数的方法，泛型方法可以是普通方法、静态方法或构造方法；</p><p>泛型方法声明语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>泛型方法通过<code>&lt;&gt;</code>来生命泛型类型，出现在方法返回类型之前，泛型类型可以被用来作为方法返回值类型，也可以来定义方法的参数列表（也支持变长参数列表）；</p><p>泛型方法调用时通常不比执行类型参数，因为编译器会为我们找出具体的类型，这种行为称为<strong>类型参数推断</strong>；类型推断仅对赋值操作有效；</p><blockquote><p>如果将泛型方法调用的结果作为参数传递给另一个方法，编译器会将泛型返回结果赋值给一个<code>Object</code>类型的变量，再传递给另一个方法；</p></blockquote><h2 id="泛型特性"><a href="#泛型特性" class="headerlink" title="泛型特性"></a>泛型特性</h2><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><p>Java语言引入泛型是为了在编译时提供更严格的类型检查，并支持泛型编程，不同于C++的模板机制，Java泛型是使用类型擦除来实现的，即泛型在运行期间，任何具体的类型信息都被擦除了； </p><p>类型擦除流程：</p><ol><li>将泛型中所有类型的参数统一替换为<code>Object</code>，如果指定类型边界，则使用类型边界来替换；因此，生成的字节码仅包含普通的类、接口和方法；</li><li>擦除出现的类型生命，即去掉<code>&lt;&gt;</code>的内容，比如<code>T get()</code>方法声明退化成了<code>Object get()</code>；</li><li>生成桥接方法以保留扩展反省类型中的多态性；类型擦除确保不为参数化类型创建新类；因此，泛型不会额外产生运行时开销；</li></ol><blockquote><p>Java泛型的实现方式不够优雅，这是因为引入时需要兼容老版本代码，必须在设计上做的一些妥协；</p></blockquote><h3 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h3><p>泛型是基于类型擦除实现的，所以泛型类型无法向上转型；</p><blockquote><p>向上转型是指用子类实例去初始化父类，这是面向对象中多态的重要提现；</p></blockquote><h2 id="泛型边界与约束"><a href="#泛型边界与约束" class="headerlink" title="泛型边界与约束"></a>泛型边界与约束</h2><h3 id="泛型边界"><a href="#泛型边界" class="headerlink" title="泛型边界"></a>泛型边界</h3><p>在特定场景中，程序员可能希望限制可在泛型类型中用作类型参数的范围；类型边界可以对泛型的类型参数设置限制条件；</p><p>要声明有界类型参数，需列出类型参数的名称、限制关键字<code>extends</code>，后接其限制类或接口；</p><p>类型边界的语法为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">T1</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span> <span class="token constant">T2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>T1为类或接口；</li><li>T2只能为接口；</li></ul><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><p>Java中一般使用<code>？</code>来代替具体的类型参数；</p><h4 id="上界通配符"><a href="#上界通配符" class="headerlink" title="上界通配符"></a>上界通配符</h4><p>上界通配符来缩小类型参数的类型范围；</p><p>语法形式为：<code>&lt;? extends Number&gt;</code>；</p><h4 id="下界通配符"><a href="#下界通配符" class="headerlink" title="下界通配符"></a>下界通配符</h4><p>下界通配符用来将未知类型限制为该类型的特定类型或超类类型；</p><p>语法形式为：<code>&lt;？ super Number&gt;</code></p><blockquote><p>注意：上界通配符与下界通配符不能同时使用；</p></blockquote><h4 id="无界通配符"><a href="#无界通配符" class="headerlink" title="无界通配符"></a>无界通配符</h4><p>泛型继承中提到过泛型是不能向上转型的，但是我们可以通过使用通配符来变相实现向上转型；</p><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>泛型类型的类型参数不能是值类型；</p><p>泛型类型不能创建类型参数的实例；</p><p>泛型类型不能声明类型参数的静态成员；</p><p>泛型类型的类型参数不能使用类型转换或<code>instanceof</code>；</p><p>泛型类型不能创建类型参数的数组；</p><p>泛型类型不能创建、<code>catch</code>或<code>throw</code>参数化类型对象；</p><p>泛型类型相同但类型参数不同的方法不能重载；</p><h2 id="泛型最佳实践"><a href="#泛型最佳实践" class="headerlink" title="泛型最佳实践"></a>泛型最佳实践</h2><h3 id="泛型命名"><a href="#泛型命名" class="headerlink" title="泛型命名"></a>泛型命名</h3><p>泛型有一些约定俗成的命名：</p><ul><li><code>E</code>:<code>Element</code></li><li><code>K</code>：<code>Key</code></li><li><code>N</code>:<code>Number</code></li><li><code>T</code>：<code>Type</code></li><li><code>V</code>：<code>Value</code></li></ul><h3 id="泛型使用建议"><a href="#泛型使用建议" class="headerlink" title="泛型使用建议"></a>泛型使用建议</h3><ul><li>消除类型检查告警；</li><li><code>List</code>优先数组；</li><li>优先考虑使用泛型来提高代码通用性；</li><li>优先考虑使用泛型方法来限定泛型范围；</li><li>利用通配符来提升API灵活性；</li><li>优先考虑类型安全的异构容器；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：控制语句</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-8-kong-zhi-yu-ju/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-8-kong-zhi-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="Java控制语句"><a href="#Java控制语句" class="headerlink" title="Java控制语句"></a>Java控制语句</h1><p>Java控制语句大致可分为三类：</p><ul><li>选择语句<ul><li><code>if...else</code></li><li><code>switch</code></li></ul></li><li>循环语句<ul><li><code>while</code></li><li><code>do...while</code></li><li><code>for</code></li><li><code>foreach</code></li></ul></li><li>中断语句<ul><li><code>break</code></li><li><code>continue</code></li><li><code>return</code></li></ul></li></ul><h2 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h2><h3 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h3><p><code>if</code>语句会判断括号中条件是否成立，如果成立则执行<code>if</code>语句后的代码块，否则跳过继续向下执行；<code>if</code>语句可单独使用，也可支持多级嵌套使用；</p><p><strong>语法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span> 布尔表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//布尔表达式1为true时需要执行的代码块</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>布尔表达式<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//布尔表达式2位true时需要执行的代码块</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">//以上if后布尔表达式都不为true时，需要执行的代码块</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p><code>switch</code>语句判断一个变量与一系列值中的每个值是否相等，每个值称为一个分支；</p><p><code>switch</code>语句有以下规则：</p><ul><li><code>switch</code>语句的变量只支持<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、<code>String</code>或<code>enum</code></li><li><code>switch</code>语句可以拥有多个<code>case</code>语句，每个<code>case</code>后面跟一个要比较的值和冒号</li><li><code>case</code>语句中的值的类型必须与变量的数据类型相同，而且只能是常量或者字面常量</li><li>当变量的值与<code>case</code>语句的值相等时，那么<code>case</code>语句之后的语句开始执行，知道<code>break</code>语句出现才会跳出<code>switch</code>语句</li><li>当遇到<code>break</code>语句时，<code>switch</code>语句终止。程序跳转到<code>switch</code>语句后面的语句执行，<code>case</code>语句不必须要包含<code>break</code>语句；如果没有<code>break</code>语句出现，则程序会继续执行吓一跳<code>case</code>语句，知道出现<code>break</code>语句</li><li><code>switch</code>语句可以包含一个<code>default</code>分支，且该分支必须是<code>switch</code>语句的最后一个分支。<code>default</code>在没有<code>case</code>语句的值和变量值相等的时候执行。<code>default</code>分支不需要<code>break</code>语句</li></ul><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> value <span class="token operator">:</span>       <span class="token comment">//语句</span>       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选</span>    <span class="token keyword">case</span> value <span class="token operator">:</span>       <span class="token comment">//语句</span>       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选</span>    <span class="token comment">//你可以有任意数量的case语句</span>    <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token comment">//可选</span>       <span class="token comment">//语句</span>       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选，但一般建议加上</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>只要布尔表达式为<code>true</code>，<code>while</code>循环体会一直执行下去。</p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span> 布尔表达式 <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//循环内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><p>对于<code>while</code>语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p><p><code>do while</code>和<code>while</code>循环类似，不同的是，<code>do while</code>循环至少会执行一次。</p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token comment">//代码语句</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>虽然所有循环结构都可以用<code>while</code>或者<code>do while</code>表示，但Java提供了另一种语句—<code>for</code>循环，使一些循环结构变得更加简单。<code>for</code>循环执行的次数是在执行前就确定的。</p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 布尔表达式<span class="token punctuation">;</span> 更新<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//代码语句</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li><li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为 false，循环终止，开始执行循环体后面的语句。</li><li>执行一次循环后，更新循环控制变量。</li><li>再次检测布尔表达式。循环执行上面的过程。</li></ul><h3 id="foreach循环"><a href="#foreach循环" class="headerlink" title="foreach循环"></a>foreach循环</h3><p>Java5引入了一种主要主要用于数组的增强型for循环。</p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>声明语句 <span class="token operator">:</span> 表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//代码句子</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>声明语句</strong>：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p><p><strong>表达式</strong>：表达式是要访问的数组名，或者是返回值为数组的方法。</p><h2 id="中断语句"><a href="#中断语句" class="headerlink" title="中断语句"></a>中断语句</h2><h3 id="break关键字"><a href="#break关键字" class="headerlink" title="break关键字"></a>break关键字</h3><p><code>break</code>主要用在循环语句或者<code>switch</code>语句中，用来跳出整个语句块。</p><p><code>break</code>跳出最里层循环，并且继续执行该循环下面的语句；</p><h3 id="continue关键字"><a href="#continue关键字" class="headerlink" title="continue关键字"></a>continue关键字</h3><p><code>continue</code>适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。在<code>for</code>循环中，<code>continue</code>语句使程序立即跳转到更新语句。在<code>while</code>或者<code>do while</code>循环中，程序立即跳转到布尔表达式的判断语句。</p><h3 id="return关键字"><a href="#return关键字" class="headerlink" title="return关键字"></a>return关键字</h3><p>跳出整个函数体，函数体后面大部分不再执行。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>选择分支特别多的时候，<code>switch</code>由于<code>if...else if... else</code>语句</li><li><code>switch</code>语句尽量使用<code>default</code></li><li><code>switch</code>语句中的<code>default</code>必须放在最后面</li><li><code>foreach</code>循环优于传统<code>for</code>循环</li><li>不要循环遍历容器元素，然后删除特定元素。正确姿势应该是遍历容器的迭代器，删除元素。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：反射</title>
      <link href="/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-9-fan-she/"/>
      <url>/2021/08/03/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-9-fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><h2 id="反射简介"><a href="#反射简介" class="headerlink" title="反射简介"></a>反射简介</h2><p>反射（<code>Reflection</code>）是Java程序开发语言的特征之一，它允许运行中的Java程序获取自身的信息，并且可以操作类或对象的内部属性；</p><p>通过反射机制，可以在运行时访问Java对象的属性、方法等；</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>反射的应用场景主要有：</p><ol><li>开发通用框架：反射最重要的用于就是开发各种通用框架，很多商用框架都是配置化的，为了保证框架的通用性，他们可能需要根据配置文件加载不同的对象或类，调用不同的方法，这就需要通过反射–运行时动态加载来实现；</li><li>动态代理：在切面编程（<code>AOP</code>）中，需要拦截特定的方法，通常，会选择动态代理方式来实现；</li><li>注解：注解本身仅起到标记作用，实际需要利用反射机制，根据注解标记去调用对应的注解解释器，执行行为；</li><li>可扩展性：应用程序可以通过使用完全限定名创建可扩展对象实例来使用外部用户定义类，比如数据库驱动类；</li></ol><h2 id="反射缺点"><a href="#反射缺点" class="headerlink" title="反射缺点"></a>反射缺点</h2><p>任何事务都是有双面性的，反射实现了一系列功能的同事，也引入了一些缺点：</p><ol><li>性能开销：由于反射涉及动态解析，因此无法执行某些Java虚拟机优化；因此，反射操作的性能相对较差，在性能敏感性应用中因避免频繁调用；</li><li>破坏封装性：反射调用方法时可以忽略权限检查，因此可能破坏封装性而导致安全问题；</li><li>内部曝光：由于反射允许代码执行非反射代码中的非法操作，如访问私有字段或方法；这可能导致代码功能失常并可能破坏代码可移植性；反射代码打破了抽象，可能会随着平台的升级而改变行为；</li></ol><h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><h2 id="类加载流程"><a href="#类加载流程" class="headerlink" title="类加载流程"></a>类加载流程</h2><p>类加载完成过程如下：</p><ol><li>编译阶段：Java编译器对<code>.java</code>文件编译完成，在磁盘中生成<code>.class</code>文件；<code>.class</code>文件是二进制文件，内容是只有JVM能够识别的机器码；</li><li>加载阶段：JVM的类加载器读取字节码文件，取出二进制数据，加载到内存中，解析<code>.class</code>文件内的信息；类加载器会根据类的全限定名来获取此类的二进制字节流；将字节流所代表的的静态存储结构转化为方法区的运行时数据结构，在内存中生成代表这个类的<code>java.lang.Class</code>对象；</li><li>执行阶段：加载结束后，JVM开始进行链接阶段（包括验证、准备、初始化）；经过这一系列操作，类的变量会被初始化；</li><li>底层调用：将JVM的调用提交至操作系统进行计算；</li></ol><h2 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h2><p>想使用反射，首先需要获得待操作的类所对应的<code>Class</code>对象；在Java中，无论生成某个类的多少个对象，这些对象都会对应于同一个<code>Class</code>对象。这个<code>Class</code>对象是由JVM生成的，通过它能够获悉整个类的结构；所以，<code>java.lang.Class</code>可以是为所有反射API的入口；</p><p>反射的本质就是：在运行时，把Java类中的各种成分映射成一个个的Java对象；</p><blockquote><p>JVM自动创建类的<code>Class</code>对象后，存储在JVM的方法区中；且一个类有且只有一个<code>Class</code>对象；</p></blockquote><h2 id="方法反射调用"><a href="#方法反射调用" class="headerlink" title="方法反射调用"></a>方法反射调用</h2><p>方法的反射调用，也就是<code>Method.invoke</code>方法；</p><p><code>Method.invoke</code>方法源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Method</span> <span class="token keyword">extends</span> <span class="token class-name">Executable</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>    <span class="token class-name">MethodAccessor</span> ma <span class="token operator">=</span> methodAccessor<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ma <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ma <span class="token operator">=</span> <span class="token function">acquireMethodAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ma<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><code>NativeMethodAccessorImpl</code>：本地方法来实现反射调用；</li><li><code>DelegationMethodAccessorImpl</code>：委派模式来实现反射调用；</li></ul><p><code>Method.invoke</code>方法调用实际上是委派给<code>MethodAccessor</code>接口来处理；每个<code>Method</code>实例的第一次反射调用都会生成一个委派实现，它所委派的具体实现便是一个本地实现（<code>NativeMethodAccessorImpl</code>）；</p><p>Java的反射机制还设立了另一种动态生成字节码的实现，直接使用<code>invoke</code>指令来调用目标方法；通过委派实现，能够在本地实现与动态实现中切换；动态实现不需要经过Java到C++再到Java，效率比本地实现高20倍，但生成字节码很耗时，仅调用一次的话，反而是本地实现要快3到4倍；（在16次调用时，动态调用性能追上本地调用）</p><h2 id="反射调用开销"><a href="#反射调用开销" class="headerlink" title="反射调用开销"></a>反射调用开销</h2><p>方法的反射调用会带来不少性能开销，主要原因为：</p><ul><li>变长参数方法导致的<code>Object</code>数组；</li><li>基本类型的自动装箱、拆箱；</li><li>方法内联；</li></ul><p><code>Class.forName()</code>会调用本地方法，<code>Class.getMethod()</code>则会遍历该类的共有方法，如果没有匹配到，它还将遍历父类的公有方法，可想而知，这两个操作都非常费时；</p><h1 id="反射使用"><a href="#反射使用" class="headerlink" title="反射使用"></a>反射使用</h1><h2 id="java-lang-reflect包"><a href="#java-lang-reflect包" class="headerlink" title="java.lang.reflect包"></a>java.lang.reflect包</h2><p>Java中的<code>java.lang.reflect</code>包提供了反射功能，包中的类都没有<code>public</code>构造方法；</p><p><code>java.lang.reflect</code>包的核心接口和类如下：</p><ul><li><code>Member</code>接口：反映关于单个成员（字段或方法）或构造函数的标识信息；</li><li><code>Field</code>类：提供一个类的域信息以及访问类的域的接口；</li><li><code>Method</code>类：提供一个类的方法的信息以及访问类的方法的接口；</li><li><code>Constructor</code>类：提供一个类的构造函数的信息以及访问类的狗仔函数的接口；</li><li><code>Array</code>类：提供动态生成和访问JAVA数组的方法；</li><li><code>Modifier</code>类：提供了static方法和常量，对类和成员访问修饰符进行解码；</li><li><code>Proxy</code>类：提供动态地生成代理类和类实例的静态方法；</li></ul><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><p>获取<code>Class</code>对象的三种方法：</p><ol><li><code>Class.forName()</code>静态方法：使用类的完全限定名来反射对象的类；常用应用场景为：在JDBC开发中常用此方法加载数据库驱动；</li><li>类名 + <code>.class</code></li><li><code>Object</code>的<code>getClass</code>方法：<code>Object</code>类中有<code>getClass</code>方法，因为所有类都继承<code>Object</code>类；从而调用<code>Object</code>类来获取<code>Class</code>对象；</li></ol><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectClassDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>    <span class="token comment">//m1  jdbc驱动</span>    <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// double 数组</span>    <span class="token class-name">Class</span> c2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"[D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// double[]</span>        <span class="token comment">//m2</span>    <span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>PrintStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c4 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// int[][][]</span>        <span class="token comment">//m3</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c5 <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// java.util.HashSet</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断类实例"><a href="#判断类实例" class="headerlink" title="判断类实例"></a>判断类实例</h2><p>判断是否为某个类的实例方式：</p><ul><li><code>instanceof</code>关键字；</li><li><code>Class</code>对象<code>isinstance</code>方法（<code>Native</code>方法）；</li></ul><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceOfDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ArrayList is  List"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ArrayList is  List"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><p>通过反射来创建实例对象有以下方式：</p><ul><li>用<code>Class</code>对象的<code>newInstance</code>方法；</li><li>用<code>Constructor</code>对象的<code>newInstance</code>方法；</li></ul><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectNewInstanceDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//m1</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c1 <span class="token operator">=</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StringBuilder</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//m2</span>    <span class="token comment">//获取String对应class对象</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token comment">//获取String类带一个String参数的构造器</span>    <span class="token class-name">Constructor</span> con <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用构造器构造对象</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建数组实例"><a href="#创建数组实例" class="headerlink" title="创建数组实例"></a>创建数组实例</h2><p>数组在Java中是比较特殊的一种类型，它可以赋值给一个对象引用；Java中，可以通过<code>Array.newInstance</code>来创建数组实例；</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectArrayDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> arr <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"Scala"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="d"><a href="#d" class="headerlink" title="d"></a>d</h3><p><code>Class</code>对象提供以下方法获取对象的成员：</p><ul><li><code>getFiled</code>：根据名称获取共有的类成员；</li><li><code>getDeclaredField</code>：根据名称获取以声明的类成员，但不能获取起父类成员；</li><li><code>getFields</code>：获取所有共有的类成员；</li><li><code>getDeclaredFields</code>：获取所有已声明的类成员；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectFieldDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">FieldDemo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Alice"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> val<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span>    <span class="token class-name">Field</span> f1 <span class="token operator">=</span> <span class="token class-name">FieldDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Type: %s%n"</span> <span class="token punctuation">,</span>f1<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> f2 <span class="token operator">=</span> <span class="token class-name">FieldDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"type: %s%n"</span><span class="token punctuation">,</span> f2<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p><code>Class</code>对象提供以下方法获取对象的方法：</p><ul><li><code>getMethod</code>：返回类或接口的特定方法。其中第一个参数为方法名称，后面的参数为方法参数对应的<code>Class</code>对象；</li><li><code>getDeclaredMethod</code>：返回类或接口的特定声明方法。其中第一个参数为方法名称，后面的参数为方法参数对应<code>Class</code>对象；</li><li><code>getMethods</code>：返回类或接口的所有公有方法，包括起父类的公有方法；</li><li><code>getDeclaredMethods</code>：返回类或接口声明的所有方法，但不包括继承的方法；</li></ul><p>获取一个<code>Method</code>对象后，可以用<code>invoke</code>方法来调用这个方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectMethodDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span> m1<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><p><code>Class</code>对象提供以下方法获取对象的构造方法：</p><ul><li><code>getConstructor</code>：返回类的特定公有构造方法，参数为方法参数对应的<code>Class</code>对象;</li><li><code>getDeclaredConstructor</code>：返回类的特定构造方法，参数为方法参数对应的<code>Class</code>对象；</li><li><code>getConstructors</code>：返回类的所有共有构造方法；</li><li><code>getDeclaredConstructors</code>：返回类的所有构造方法；</li></ul><p>获取一个<code>Constructor</code>对象后，可以使用<code>newInstance</code>方法来创建类实例；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectConstructorDemo</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="绕开访问限制"><a href="#绕开访问限制" class="headerlink" title="绕开访问限制"></a>绕开访问限制</h3><p>反射可以通过<code>setAccessible(true)</code>来绕开Java的访问限制，直接访问私有成员、私有方法；</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理其实就是指设计模式中的代理模式；代理模式为其它对象提供一种代理以控制对这个对象的访问；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义抽象类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//实现抽象类</span><span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"real Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//定义代理类，用来保存一个引用使代理可以访问实体，并提供一个与Subject的接口相同的接口，这样代理就可以用来替代实体</span><span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">RealSubject</span> real<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span>  real<span class="token punctuation">)</span> <span class="token punctuation">{</span>      real <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name"><span class="token namespace">real<span class="token punctuation">.</span></span>Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优点：能够访问正常实体无法访问的资源，增强现有的接口业务功能；</li><li>缺点：真实实体与代理的功能本质上是相同的，代理只起到了中介作用，但代理的存在会导致系统结构比较臃肿，增加维护难度；</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>为了解决静态代理的问题，所以有了动态代理的概念；</p><p>动态代理是一种方便运行是动态构建代理、动态处理代理方法调用的机制，很多场景都是利用类似机制实现的，比如包装RPC调用、面向切面编程等；</p><p>实现动态代理的方式很多，比如JDK自身提供的动态代理，主要就是利用了反射机制；高性能的字节码操作机制，类似ASM、cglib、javassist等；</p><p>Java动态代理基于经典代理模式，引入了一个<code>InvocationHandler</code>，<code>InvocationHandler</code>负责统一管理所有的方法调用；</p><p>动态代理步骤：</p><ol><li>获取真实实体上所有接口列表；</li><li>确认要生成的代理类的类名，默认为：<code>com.sun.proxy.$ProxyXXX</code>；</li><li>根据需要实现的接口信息，在代码中动态创建该<code>Proxy</code>类的字节码；</li><li>将对应的字节码转换为对应的<code>class</code>对象；</li><li>创建<code>InvocationHandler</code>实例<code>handler</code>，用来实现<code>proxy</code>所欲方法调用；</li><li><code>Proxy</code>的<code>class</code>对象以创建的<code>handler</code>对象为参数，实例化一个<code>proxy</code>对象；</li></ol><p>JDK动态代理的实现是基于实现接口的方式，使得<code>Proxy</code>与真实实体具有相同的功能；</p><h4 id="InvocationHandler接口"><a href="#InvocationHandler接口" class="headerlink" title="InvocationHandler接口"></a>InvocationHandler接口</h4><p>每一个动态代理类都必须要实现<code>InvocationHandler</code>接口，并且每个代理类的实例都关联到了一个<code>handler</code>。当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由<code>InvocationHandler</code>接口的<code>invoke</code>方法来进行调用；</p><p>接口定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><code>proxy</code>：代理的真实对象；</li><li><code>method</code>：要调用真实对象的某个方法的<code>Method</code>对象；</li><li><code>args</code>：调用真实对象的某个方法时接受的参数；</li></ul><h4 id="Proxy类"><a href="#Proxy类" class="headerlink" title="Proxy类"></a>Proxy类</h4><p><code>Proxy</code>类的作用是用来动态创建一个代理对象的类，它提供了许多方法，但使用最多的就是<code>newProxyInstance</code>方法；</p><p>方法定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span> <span class="token class-name">InvocationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><ul><li><code>loader</code>：一个<code>ClassLoader</code>对象，定义了生成代理对象进行加载的<code>ClassLoader</code>；</li><li><code>interface</code>：一个<code>Class&lt;?&gt;</code>对象的数组，表示的是将要提供给代理的对象提供的一组接口，代理对象宣称实现这组接口，代理对象即可调用这组接口的方法；</li><li><code>handler</code>：一个<code>InvocationHandler</code>对象，表示的是当动态代理对象调用方法时，会关联到哪一个<code>InvocationHandler</code>对象上；</li></ul><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义接口</span><span class="token keyword">public</span>  <span class="token keyword">interface</span> <span class="token class-name">Subject</span>  <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">bye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//定义一个类并实现接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token class-name">String</span> <span class="token function">bye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Goodbye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"Over"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//动态代理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvocationHandlerDemo</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>  <span class="token comment">//要代理的对象</span>  <span class="token keyword">private</span> <span class="token class-name">Object</span> subject<span class="token punctuation">;</span>    <span class="token comment">//自定义构造方法</span>  <span class="token keyword">public</span> <span class="token class-name">InvocationHandlerDemo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subject  <span class="token operator">=</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>    <span class="token comment">//代理真实实体前，添加一些自定义操作</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before Method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理真实实体后，添加一些自定义操作</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After Method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment">//调用测试</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientDemo</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//要代理的实体</span>    <span class="token class-name">Subject</span> realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绑定代理实体</span>    <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandlerDemo</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    通过Proxy的newProxyInstance方法来创建代理对象，    参数1：handler.getClass().getClassLoader()，使用handler类的ClassLoader对象来加载我们的代理对象；    参数2：realSubject.getClass().getInterfaces()，这里为代理对象提供的接口是针对实体所实现的接口，表示我要dialing的是该真实实体，这样就可以调用这组接口中的方法了；    参数3：handler，将代理对象关联到InvocationHandler对象上    */</span>    <span class="token class-name">Subject</span>  subject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Subject</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> realSubject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    subject<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">bye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>JDK动态代理特点：</p><p>优点：相对于静态代理模式，不需要硬编码接口，代码复用率高；</p><p>缺点：强制要求代理类实现InvocationHandler接口；</p></blockquote><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><p>CGLIB提供了与JDK动态代理不同的方案；很多框架，例如<code>Spring AOP</code>中，就使用了CGLIB动态代理；</p><p>CGLIB底层,其实是借助了ASM这个强大的Java字节码框架去进行字节码增强操作；</p><p>CGLIB动态代理步骤：</p><ul><li>生成代理类的二进制字节码文件；</li><li>加载二进制字节码，生成<code>Class</code>对象；</li><li>通过反射获得实例构造，并创建代理类实例；</li></ul><p>CGLIB动态代理特点：</p><ul><li>优点：使用字节码增强，比JDK动态代理方式性能更高；可以在运行时对类或者是接口进行增强操作，且委托类无需实现接口；</li><li>缺点：不能对<code>final</code>类及<code>final</code>方法进行代理；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：枚举</title>
      <link href="/2021/08/02/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-5-mei-ju/"/>
      <url>/2021/08/02/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-5-mei-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>enum</code>的全称为<code>enumeration</code>，是JDK5引入的新特性；</p><p>在Java中，被<code>enum</code>关键字修饰的类型就是枚举类型，形式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">ColorEm</span> <span class="token punctuation">{</span><span class="token constant">RED</span><span class="token punctuation">,</span><span class="token constant">GREEN</span><span class="token punctuation">,</span><span class="token constant">BLUE</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>枚举好处：可以将常量组织起来，统一进行管理；</li><li>应用场景：错误码、状态机；</li></ul><h1 id="枚举解析"><a href="#枚举解析" class="headerlink" title="枚举解析"></a>枚举解析</h1><h2 id="枚举定义"><a href="#枚举定义" class="headerlink" title="枚举定义"></a>枚举定义</h2><p><code>java.lang.Enum</code>类声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>  <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span><span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">==</span> other<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>enum</code>中，提供了一些基本方法：</p><ul><li><code>name()</code>：返回实例名；</li><li><code>ordinal()</code>：返回实例声明时的次序，从0开始；</li><li><code>equals()</code>：判断是否为同一个对象；</li><li><code>getDeclaringClass()</code>：返回实例所属的<code>enum</code>类型；</li><li><code>compareTo()</code>：对象比较；</li></ul><blockquote><p><code>enum</code>支持通过<code>==</code>来进行实例比较；</p></blockquote><h2 id="枚举特性"><a href="#枚举特性" class="headerlink" title="枚举特性"></a>枚举特性</h2><p>枚举的本质是<code>java.lang.Enum</code>的子类，是一种受限制的类，并且不能别其他类继承；</p><p>定义的枚举值，默认会被<code>public static final</code>修饰，本质上是静态常量；</p><h3 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h3><p>如果枚举没有定义方法，也可以在最后一个实例后添加逗号、分号或什么都不加；</p><p>如果枚举中没有定义方法，枚举值默认为从0开始的数值；</p><h3 id="枚举方法"><a href="#枚举方法" class="headerlink" title="枚举方法"></a>枚举方法</h3><p>枚举中可以添加普通方法、静态方法、抽象方法、构造方法；</p><p>枚举不支持使用<code>=</code>进行赋值，但可通过定义方法来实现对枚举赋值；</p><p>枚举如果定义方法，那么必须在枚举的最后一个实例添加分号作为结尾，否则编译器会报错；</p><h1 id="枚举应用"><a href="#枚举应用" class="headerlink" title="枚举应用"></a>枚举应用</h1><h2 id="组织常量"><a href="#组织常量" class="headerlink" title="组织常量"></a>组织常量</h2><p>在JDK5之前，在Java中定义常量的方式为<code>public static final Type var</code>；有了枚举之后，可以将有关联关系的常量组织起来，使代码更加易读、安全，并且可以使用枚举提供的方法；</p><h2 id="switch状态机"><a href="#switch状态机" class="headerlink" title="switch状态机"></a>switch状态机</h2><p>Java经常使用<code>switch</code>来编写状态机，在JDK7之后，<code>switch</code>已经支持<code>int</code>、<code>char</code>、<code>String</code>及<code>enum</code>类型的参数。这几种类型参数比较起来，使用枚举的<code>switch</code>代码更具有可读性；</p><h1 id="枚举工具类"><a href="#枚举工具类" class="headerlink" title="枚举工具类"></a>枚举工具类</h1><p>Java提供了两个方便操作的工具类：<code>EnumSet</code>及<code>EnumMap</code>；</p><h2 id="EnumSet"><a href="#EnumSet" class="headerlink" title="EnumSet"></a>EnumSet</h2><p><code>EnumSet</code>是枚举类型的高性能<code>Set</code>实现；它要求放入它的枚举常量必须属于同一枚举类型；</p><p>主要方法：</p><ul><li><p><code>noneOf</code>：创建一个具有指定元素类型的空<code>EnumSet</code>；</p></li><li><p><code>allOf</code>：创建一个指定元素类型并包括所有枚举类型的<code>EnumSet</code>；</p></li><li><p><code>range</code>：创建一个包含枚举值中指定范围元素的<code>EnumSet</code>；</p></li><li><p><code>complementOf</code>：初始集合包括指定集合的补集；</p></li><li><p><code>of</code>：创建一个包括阐述中所有元素的<code>EnumSet</code>；</p></li><li><p><code>copyOf</code>：创建一个包含参数容器中的所有元素的<code>EnumSet</code>；</p></li></ul><h2 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h2><p><code>EnumMap</code>是专门为枚举类型量身定做的<code>Map</code>实现，虽然使用其他的<code>Map</code>实现也能完成枚举类型实例到值的映射，但是使用<code>EnumMap</code>会更加高效：它只能接收同一枚举类型的实例作为键值，并且由于枚举类型实例的数量相对固定并且有限，所以<code>EnumMap</code>使用属组来存放与枚举类型对应的值，这使得<code>EnumMap</code>效率非常高；</p><p>主要方法：</p><ul><li><code>size</code>:返回键值对数量；</li><li><code>containsValue</code>：判断是否存在指定的<code>value</code>；</li><li><code>containsKey</code>：判断是否存在指定的<code>key</code>；</li><li><code>get</code>：根据指定的<code>key</code>获取对应<code>value</code>；</li><li><code>put</code>：根据指定的<code>key</code>取出<code>value</code>；</li><li><code>remove</code>：删除指定的键值对；</li><li><code>putAll</code>：批量去除所有的键值对；</li><li><code>keySet</code>：获取所有<code>key</code>的集合；</li><li><code>values</code>：返回所有<code>value</code>；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：方法与异常</title>
      <link href="/2021/08/02/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-6-fang-fa-yu-yi-chang/"/>
      <url>/2021/08/02/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-6-fang-fa-yu-yi-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h1><p>Java方法（也叫函数）是一段可重用的代码片段；</p><h2 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h2><p>方法定义语法格式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型  方法名<span class="token punctuation">(</span><span class="token punctuation">[</span>参数类型 参数名称<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  方法体；  <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修饰符：修饰符是可选的，它桃酥编译器如何调用该方法，定义了方法的访问类型；</li><li>返回值类型：返回值类型表示方法执行结束后，返回结果的数据类型；如果没有返回值，返回值类型为<code>void</code>；</li><li>方法名：是方法的实际名称；方法名和参数列表共同构成方法签名；</li><li>参数类型：参数像是占位符；当方法被调用时，传递值给参数；参数列表包括参数类型、顺序及个数；参数是可选的，方法可以不包含任何参数；</li><li>方法体：方法体包含具体的代码片段，实现该方法的功能；</li><li><code>return</code>：用于声明方法返回值；返回值类型需与方法定义返回值类型保持一致；在<code>void</code>方法中，<code>return</code>可省略；</li></ul><h2 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h2><p>在C/C++等编程语言中，方法的参数传递一般有两种形式：</p><ul><li>值传递：值传递的参数被称为形参；值传递时，传入的参数，在方法中的修改，不会在方法外部生效；</li><li>引用传递：引用传递的参数被称为实参；引用传递时，传入的参数，在方法中修改，会在方法外部生效；</li></ul><p>在Java中，只支持值传递：</p><ul><li>基本类型：会直接拷贝值传递到方法中；</li><li>引用类型：拷贝当前对象的引用地址，然后将该地址传递过去，实质上仍然是值传递，只是传递的值是引用地址；</li></ul><h2 id="方法修饰符"><a href="#方法修饰符" class="headerlink" title="方法修饰符"></a>方法修饰符</h2><p>Java方法有以下几类修饰符：</p><h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><p>访问控制修饰符用于定义方法的访问权限控制，权限大小次序为：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">public &gt; protected &gt; 包访问权限(默认权限，无关键字)  &gt; private<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>public</code>：表示任何类都可以访问；</li><li><code>protected</code>：表示子类可以访问，此外，同一个包内的其他类也可以访问；</li><li><code>包访问权限</code>：默认权限，无关键字，表示当前包中所有类都可以访问；</li><li><code>private</code>：表示其它任何类都无法访问；</li></ul><h3 id="静态修饰符"><a href="#静态修饰符" class="headerlink" title="静态修饰符"></a>静态修饰符</h3><p>静态修饰符关键字为<code>static</code>，被其修饰的方法为静态方法；</p><p>静态方法相比于普通方法，主要有以下区别：</p><ul><li>支持<code>类名.方法名</code>方式调用，也支持<code>对象名.方法名</code>调用；</li><li>静态方法访问本类成员时，只允许访问静态成员，不允许访问实例成员变量及方法；</li></ul><p>静态方法常被用于各种工具类、工厂方法类；</p><h3 id="最终修饰符"><a href="#最终修饰符" class="headerlink" title="最终修饰符"></a>最终修饰符</h3><p>最终修饰符关键字为<code>final</code>，其修饰的方法不能被子类覆写；其修饰的变量赋值后不允许变更；</p><h3 id="默认修饰符"><a href="#默认修饰符" class="headerlink" title="默认修饰符"></a>默认修饰符</h3><p>默认修饰符关键字为<code>default</code>，JDK8中引入，支持在<code>interface</code>中定义默认方法；<code>default</code>方法只能出现在<code>interface</code>中；</p><p>接口中被<code>default</code>修饰的方法被称为默认方法，实现此接口的类如果没有被<code>Override</code>，则直接继承这个方法，不强制要求实现此方法；</p><h3 id="抽象修饰符"><a href="#抽象修饰符" class="headerlink" title="抽象修饰符"></a>抽象修饰符</h3><p>抽象修饰符关键字为<code>abstract</code>，其修饰的方法称为抽象方法，该方法不能有实体；抽象方法只能出现在抽象类中；</p><h3 id="同步修饰符"><a href="#同步修饰符" class="headerlink" title="同步修饰符"></a>同步修饰符</h3><p>同步修饰符关键字为<code>synchronized</code>，常用于并发编程；被<code>synchronized</code>修饰的方法在一个时刻，只允许一个线程执行；</p><h2 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h2><p>Java中，存在一些较为特殊的方法，分别适用于特殊的场景；</p><h3 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h3><p>Java中的<code>main</code>方法是一种特殊的静态方法，因为所有的Java程序都是由<code>public static void main(String[] args)</code>方法开始执行，其中args用来接收命令行传入参数，该数组下表从0开始；</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>任何类都有构造方法，构造方法的作用就是在初始化类实例时，设置实例的状态；</p><p>每个类都有构造方法，如果没有显示的定义任何构造方法，Java编译器将自动为该类提供一个默认构造方法；</p><p>在创建一个对象的时候，至少要调用一个构造方法；构造方法名称必须与类同名，一个类可以有多个不同参数列表的构造方法；</p><p>构造方法使用<code>private</code>修饰时，类无法调用此构造方法进行对象实例化，一般用于单例模式；</p><h3 id="变参方法"><a href="#变参方法" class="headerlink" title="变参方法"></a>变参方法</h3><p>JDK5开始，Java支持传递同类型的可变参数给方法；在方法声明中，指定参数类型后加一个省略号<code>...</code>来定义变长参数；</p><p>一个方法有且仅有一个变长参数，且该参数必须为参数列表中的最后一个参数，普通参数必须在变长参数之前生命；</p><h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize()方法"></a>finalize()方法</h3><p><code>finalize()</code>在对象被垃圾收集器回收之前调用，用来清除回收对象；</p><p><code>finalize</code>在<code>java.lang.Object</code>中定义，所以每个对象都具有该方法；该方法在GC启动，该对象会回收时调用；</p><blockquote><p>应该尽量避免显示调用<code>finalize()</code>方法；其线程会与主线程产生资源竞争，虽然其优先级较低，但仍然可能触发<code>OOM</code>异常；</p></blockquote><h2 id="方法覆写与重载"><a href="#方法覆写与重载" class="headerlink" title="方法覆写与重载"></a>方法覆写与重载</h2><p>覆写（<code>Override</code>）是指子类定义了与父类中同名的方法，但是在方法覆写时必须考虑到访问权限，子类覆写的方法不能拥有比父类更加严格的访问权限；</p><p>子类覆写父类方法时，如果需要访问父类方法，使用<code>super</code>关键字即可；</p><p>重载（<code>Overload</code>）是指方法名相同，但参数列表不同，通过传递不同的参数来完成不同功能的方法调用；</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常就是有异于常态，和正常情况不一样，有错误出现。在Java中，组织当前方法或作用域的情况，称之为异常；</p><h2 id="异常框架"><a href="#异常框架" class="headerlink" title="异常框架"></a>异常框架</h2><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p><code>Throwable</code>是Java语言中所有错误（<code>Error</code>）和异常（<code>Exception</code>）的超类；在Java中只有<code>Throwable</code>类型的实例才可以被抛出或捕获，它是异常处理机制的基本组成类型；</p><p><code>Throwable</code>包含了其线程创建时线程执行堆栈的快照，它提供了<code>printStackTrace()</code>方法用于获取堆栈跟踪数据等信息；</p><p>主要方法：</p><ul><li><code>FillInStackTrace</code>：用当前的调用栈层次填充<code>Throwable</code>对象栈层次，添加到栈层次任何先前信息中；</li><li><code>getMessage</code>：返回关于发生的异常的详细信息；</li><li><code>getCause</code>：返回一个<code>Throwable</code>对象代表异常原因；</li><li><code>getStackTrace</code>：返回一个包含对栈层次的数组；</li><li><code>printStackTrace</code>：打印<code>toString()</code>结果和栈层次到<code>System.err</code>，即错误输出流；</li><li><code>toString</code>：使用<code>getMessage()</code>的结果返回代表<code>Throwable</code>对象的字符串；</li></ul><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p><code>Error</code>是<code>Throwable</code>的一个子类；<code>Error</code>表示正常情况下，不大可能出现的严重问题；编译器不会检查<code>Error</code>；绝大部分的<code>Error</code>都会导致程序处于非正常的、不可恢复状态；</p><p>常见<code>Error</code>：</p><ul><li><code>AssertionError</code>：断言错误；</li><li><code>VirtualMachineError</code>：虚拟机错误；</li><li><code>UnsupportedClassVersionError</code>：Java类版本错误；</li><li><code>StackOverflowError</code>：栈溢出错误；</li><li><code>OutOfMemoryError</code>：内存溢出错误；</li></ul><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p><code>Exception</code>是<code>Throwable</code>的一个子类；<code>Exception</code>表示合理的应用程序可能想要捕获的条件；<code>Exception</code>是程序正常运行过程中，可以预料的以外情况，可能应该被捕获，进行相应处理；</p><p><code>Exception</code>分为可检查（<code>checked</code>）和不可检查（<code>unchecked</code>）异常，可检查异常在源码中必须显示地进行捕获处理，这是编译器检查的一部分；</p><p>常见<code>Exception</code>：</p><ul><li><code>ClassNotFoundException</code>：加载类时，找不到相应的类，抛出该异常；</li><li><code>CloneNotSupportedException</code>：调用<code>Object</code>类中的<code>clone()</code>方法克隆对象，但该类未实现<code>Cloneable</code>接口时，抛出该异常；</li><li><code>IllegalAccessException</code>：拒绝访问一个类时，抛出该异常；</li><li><code>InstantiationException</code>：当试图使用<code>Class</code>类中的<code>newInstance</code>方法创建一个类的实例，而指定的类对象是一个接口或抽象类时，抛出该异常；</li><li><code>InterruptedException</code>：一个线程被另一个线程中断，抛出该异常；</li><li><code>NoSuchFieldException</code>：请求的变量不存在时抛出该异常；</li><li><code>NoSuchMethodException</code>：请求的方法不存在时抛出该异常；</li></ul><h3 id="RuntimeException"><a href="#RuntimeException" class="headerlink" title="RuntimeException"></a>RuntimeException</h3><p><code>RuntimeException</code>是<code>Exception</code>的一个子类，可能在Java虚拟机正常运行期间抛出的异常的超类；</p><p>常见<code>RuntimeException</code>：</p><ul><li><code>ArrayIndexOutOfBoundsException</code>：用非法索引访问数组时抛出的异常，如果索引为负或大于等于数组大小，抛出该异常；</li><li><code>ClassCastException</code>：试图将错误类型的对象存储到一个对象数组时，抛出该异常；</li><li><code>IllegalArgumentException</code>：向方法传递了一个不合法或不正确的参数时，抛出该异常；</li><li><code>IllegalMonitorStateException</code>：某一线程试图等待对象的监视器或试图通知其他正在等待对象的监视器而本身没有指定监视器的线程，抛出该异常；</li><li><code>IllegalStateException</code>：Java环境或应用程序没有处于请求操作所要求的的适当状态时，抛出该异常；</li><li><code>IllegalThreadStateException</code>：线程处于没有请求操作所要求的适当状态时，抛出该异常；</li><li><code>IndexOutOfBoundsException</code>：指示某排序索引超出范围时，抛出该异常；</li><li><code>NegativeArraySizeException</code>：应用程序试图创建大小为负的数组，抛出该异常；</li><li><code>NullPointerException</code>：应用程序试图在需要对象的地方使用null时，抛出该异常；</li><li><code>NumberFormatException</code>：应用程序视图将字符串转换为数值类型，但该字符串不能转换为适当格式时，抛出该异常；</li><li><code>SecurityException</code>：由安全管理器抛出的异常，指示存在安全侵犯；</li><li><code>StringIndexOutOfBoundsException</code>：此异常由<code>String</code>方法抛出，指示索引为负或者超出字符串大小时，抛出该异常；</li><li><code>UnsupportedOperationException</code>：当不支持请求的操作时，抛出该异常；</li></ul><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>自定义一个异常类，只需要继承<code>Exception</code>或<code>RuntimeException</code>即可；</p><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>如果想在程序中明确地抛出异常，需要使用关键字<code>throw</code>或<code>throws</code>；</p><p><code>throw</code>与<code>throws</code>的区别：</p><ul><li><code>throws</code>使用在函数上，<code>throw</code>使用在函数类；</li><li><code>throws</code>后面跟异常类，可以跟多个，用逗号分割；<code>throw</code>后面跟的是异常对象；</li></ul><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>使用<code>try catch</code>关键字可以捕获异常；<code>try catch</code>代码块放在异常可能发生的地方；</p><p>JDK7以后，<code>catch</code>支持通过<code>|</code>一次性处理多个异常；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment">//可能发成异常的代码块</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">Exception1</span> <span class="token operator">|</span> <span class="token class-name">Exception2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//捕获并处理try抛出的异常</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>  <span class="token comment">//无论是否发生异常，豆浆执行的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>异常链是以一个异常对象为参数构造新的异常对象，新的异常对象将包含之前的异常信息；</p><p>通过使用异常链，我们可以提高代码的可理解性，系统的可维护性和友好性；</p><h2 id="异常注意事项"><a href="#异常注意事项" class="headerlink" title="异常注意事项"></a>异常注意事项</h2><h3 id="finally覆盖异常"><a href="#finally覆盖异常" class="headerlink" title="finally覆盖异常"></a>finally覆盖异常</h3><p>Java异常处理中<code>finally</code>中的<code>return</code>会覆盖<code>catch</code>代码块中的<code>return</code>语句和<code>throw</code>语句，所以Java不建议在<code>finally</code>中使用<code>return</code>语句；</p><h3 id="覆盖抛出异常的方法"><a href="#覆盖抛出异常的方法" class="headerlink" title="覆盖抛出异常的方法"></a>覆盖抛出异常的方法</h3><p>当子类重写父类带有<code>throws</code>声明的函数时，其<code>throws</code>声明的异常必须在父类异常的可控范围内–用于处理父类的<code>throws</code>方法的异常处理器，必须也适用于子类的这个带<code>throws</code>方法。这是为了支持多态。</p><h3 id="异常和线程"><a href="#异常和线程" class="headerlink" title="异常和线程"></a>异常和线程</h3><p>如果Java程序只有一个线程，那么没有被任何代码处理的异常就会导致程序终止。如果Java程序是多线程的，那么没有被任何代码处理的异常仅仅会导致异常所在的线程终止。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>对可恢复情况使用检查性异常，对编程错误使用运行时异常</li><li>优先使用Java标准的异常</li><li>抛出与抽象相对应的异常</li><li>在细节消息中包含能捕获失败的信息</li><li>尽可能减少<code>try</code>代码块的大小</li><li>尽量缩小异常范围。不要忽略异常，一旦捕获异常，就应该处理而非丢弃</li><li>异常处理效率很低，所以不要用异常进行业务逻辑处理</li><li>各类异常必须要有单独的日志记录，将异常分级、分类管理。<ul><li>逻辑异常：用于描述业务无法按照预期的情况处理下去，属于用户制造的意外</li><li>代码错误：用于描述开发代码错误，例如NPE、ILLARG等，都属于程序员制造的Bug</li><li>专有异常：用于特定业务场景，表述指定作业出现以外情况无法预先处理</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：字符串</title>
      <link href="/2021/07/30/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-2-zi-fu-chuan/"/>
      <url>/2021/07/30/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-2-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>String</code>类型可能是Java中应用最频繁的引用类型，但它的性能问题却容易被忽略。高效的使用字符串，可以提升系统的整体性能。</p><h1 id="String的不可变性"><a href="#String的不可变性" class="headerlink" title="String的不可变性"></a>String的不可变性</h1><p><code>String</code>类定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码说明：</p><ul><li><code>String</code>类被<code>final</code>修饰，表示该类不可被继承；</li><li><code>String</code>的数据存储于数组中，数组被<code>final</code>修饰，表示<code>String</code>对象不可被修改；</li></ul><p>为什么Java要这么设计？</p><ol><li>保证<code>String</code>对象的安全性，避免<code>String</code>对象被篡改；</li><li>保证对象的哈希值不会频繁变更，可以缓存<code>hashcode</code>,使用更加便利、更加安全等；</li><li>可以实现字符串常量池；</li></ol><h2 id="字符串创建"><a href="#字符串创建" class="headerlink" title="字符串创建"></a>字符串创建</h2><p>字符串创建有以下两种方式：</p><ul><li>通过字符串常量创建</li><li>通过对象初始化创建</li></ul><p><strong>字符串常量创建</strong></p><p>通过常量创建字符串对象时，JVM首先会检查对象是否在字符串常量池中；如果在，则返回该对象引用，否则在常量池中创建新的字符串并返回；这种方式可以减少同一个值的字符串对象的重复创建，节约内存；</p><p><strong>对象初始化创建</strong></p><p>通过对象初始化创建字符串对象，编译类文件时，常量字符串将会放入到常量结构中，在类的加载过程中，常量字符串将会在常量池中创建；JVM调用<code>String</code>的构造函数，在堆内存中创建一个<code>String</code>对象变量，并引用常量池中的常量字符串；</p><blockquote><p>一旦一个<code>String</code>对象在内存中创建出来，就无法再更改；<code>String</code>类的所有方法都没有改变原来的字符串引用的常量池中的值，而是生成了一个新的对象，并返回新的对象的引用值；</p><p>如果需要一个可变的字符串，应该使用<code>StringBuffer</code>或<code>StringBuilder</code>，否则会浪费大量的时间在垃圾回收上，因为针对字符串的每次修改都将创建一个新的对象；</p></blockquote><h2 id="字符串池"><a href="#字符串池" class="headerlink" title="字符串池"></a>字符串池</h2><p>在Java中，为了减少相同字符串的重复创建，达到节省内存的目的，会单独开辟一块内存，用于保存字符串常量，这个内存区域被叫做字符串常量池；</p><p>当通过“字面量”创建字符串对象时，JVM会现在字符串常量池中查找是否已存在相同内容的字符串对象引用，如果存在则直接返回该对象引用，否则创建新的字符串对象，并将该对象放入字符串常量池，并返回该引用，这种机制称为<strong>字符串驻留或池化</strong></p><p>；</p><blockquote><p><code>intern()</code>方法：判断常量池中是否已存在当前字符串对象，如果存在则返回当前字符串引用；如不存在，则将此字符串对象放入常量池后，再返回其引用；</p></blockquote><h3 id="字符串常量池位置"><a href="#字符串常量池位置" class="headerlink" title="字符串常量池位置"></a>字符串常量池位置</h3><p>JDK7以前，字符串常量池放在永久代；</p><p>JDK7中，将字符串常量池从永久代移出，暂时放到了堆内存中；</p><p>JDK7以后，使用元空间替代了永久代，字符串常量池再次从堆内存移动到了元空间（元空间位于本地内存，不在JVM汇总）；</p><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p>字符串拼接是我们在Java代码中的高频操作，但<code>String</code>是Java中的一个不可变类，所以一旦实例化就无法被修改；所谓的字符串拼接，是重新生成了一个新的字符串；</p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><h4 id="使用-拼接字符串"><a href="#使用-拼接字符串" class="headerlink" title="使用+拼接字符串"></a>使用<code>+</code>拼接字符串</h4><p>在java中，拼接字符串最简单的方式就是直接使用符号<code>+</code>来拼接；</p><p><code>+</code>在这里其实是Java提供的一个语法糖；这里不是运算符重载，Java不支持运算符重载；</p><blockquote><ul><li><p><code>+</code>拼接字符串的原理为：将<code>String</code>转换为<code>StringBuilder</code>，然后调用其<code>append</code>方法进行处理；</p></li><li><p>运算符重载：在计算机程序设计中，运算符重载是多态的一种；运算符重载，就是对已有的运算符重新进行定义，并赋予其另一种功能，以适应不同的数据类型；</p></li><li><p>语法糖：指计算机语言中添加的某种语法，这种语法对语言的功能没有影响，但是更方便程序员使用，语法糖让程序更加简洁，易读；</p></li></ul></blockquote><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>原理为创建一个新的字符数组，再把两个字符串复制到新的字符数组中，并使用这个新的字符数组创建一个新的<code>String</code>对象并返回；</p><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p><code>StringBuffer</code>类可以用来定义一个字符串变量对象，该对象可以进行扩充和修改；</p><p>其原理为：封装一个字符数组，通过<code>append</code>方法进行字符串拼接，线程安全；</p><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p><code>StringBuilder</code>用法与<code>StringBuffer</code>类似，原理与<code>StringBuffer</code>基本一致，唯一区别为<code>StringBuilder</code>线程不安全；</p><h4 id="StringUtils-join"><a href="#StringUtils-join" class="headerlink" title="StringUtils.join"></a>StringUtils.join</h4><p>除了JDK内置字符串拼接方法外，还可以使用开源类库中提供的字符串拼接方法，如<code>apache.commons</code>提供的<code>StringUtils</code>类，其中<code>join</code>方法可以拼接字符串；该方法其实是通过<code>StringBuilder</code>实现；</p><h4 id="字符串拼接总结"><a href="#字符串拼接总结" class="headerlink" title="字符串拼接总结"></a>字符串拼接总结</h4><p>以上五种字符串拼接效率排序为：</p><p><code>StringBuilder</code> &lt; <code>StringBuffer</code> &lt; <code>concat</code> &lt; <code>+</code> &lt; <code>StringUtils.join</code></p><p>使用场景推荐：</p><ul><li>非循环体内：推荐使用<code>+</code></li><li>并发场景：使用<code>StringBuffer</code></li><li>循环体内：<code>StringBuilder</code></li></ul><h3 id="字符串剪裁"><a href="#字符串剪裁" class="headerlink" title="字符串剪裁"></a>字符串剪裁</h3><p><code>String</code>类对象包括三个成员变量：<code>char[] value</code>,<code>int offset</code>、<code>int count</code>；它们分别用来存储字符串的实际内容，数组的第一个位置索引以及字符串包含的字符个数；</p><p>字符串剪裁最常用的方法为<code>substring()</code>方法；</p><p>JDK6下<code>substring()</code>实现原理为：</p><ol><li>创建一个新的字符串对象；</li><li>字符串对象中的数组指向原字符串对象中的字符数组；</li><li>根据<code>substring()</code>方法参数计算出剪裁后字符串对象的<code>count</code>及<code>offset</code>；</li></ol><blockquote><p>在JDK6中，如果字符串很大，使用<code>substring</code>进行切割时，可能会导致性能问题；切割后的一个小字符串会导致整个大字符串无法释放；</p></blockquote><p>JDK7下<code>substring()</code>实现原理：</p><p>JDK7通过创建一个新的字符串对象，从而避免对老字符串的引用，解决内存泄露问题；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//check boundary</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> offset <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//check boundary</span>    <span class="token keyword">int</span> subLen <span class="token operator">=</span> endIndex <span class="token operator">-</span> beginIndex<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> beginIndex<span class="token punctuation">,</span> subLen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><h4 id="Integer与String互换"><a href="#Integer与String互换" class="headerlink" title="Integer与String互换"></a>Integer与String互换</h4><ol><li><strong>通过自动转换实现整数转换为字符串</strong></li></ol><p>“小”数据类型+“大”数据类型返回“大”数据类型，本质是使用<code>StringBuilder.append(i).toString()</code>进行转化；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> '' <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token comment">//等价于 String s1 = (new StringBuilder()).append(i).toString()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>调用字符串类静态方法实现整数转换为字符串</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token class-name">String<span class="token punctuation">.</span>ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>调用整数类的静态方法实现整数转换为字符串</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>调用整数类的静态方法实现字符串转换为整数</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字符串长度限制"><a href="#字符串长度限制" class="headerlink" title="字符串长度限制"></a>字符串长度限制</h3><p>字符串长度受常量池及运行期参数限制；</p><h4 id="常量池限制"><a href="#常量池限制" class="headerlink" title="常量池限制"></a>常量池限制</h4><p>在将java文件编译成class文件的过程中，必须遵守一定的格式规范；</p><p><code>CONSTANT_String_info</code> 用于表示<code>java.lang.String</code>类型的常量,格式为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CONSTANT_String_info</span> <span class="token punctuation">{</span>  u1 tag<span class="token punctuation">;</span>  u2 string_index<span class="token punctuation">}</span><span class="token class-name">CONSTANT_utf8_info</span> <span class="token punctuation">{</span>  u1 tag<span class="token punctuation">;</span>  u2 length<span class="token punctuation">;</span>   u1 bytes<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><code>string_index</code>：必须是对常量池有效的索引，结构为<code>CONSTANT_utf8_info</code>；</li><li><code>length</code>：两字节无符号数，最大长度小于65535（2^16 -1）,即字符串常量最大长度小于65535；</li></ul><h4 id="运行期限制"><a href="#运行期限制" class="headerlink" title="运行期限制"></a>运行期限制</h4><p>字符串长度运行期限制为<code>Integer.MAX_VALUE</code>，大小约为4G；</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：数组</title>
      <link href="/2021/07/30/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-3-shu-zu/"/>
      <url>/2021/07/30/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-3-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>几乎所有程序设计语言都支持数组。数组对于每一门编程语言来说都是非常重要的数据结构；</p><p>数组代表一系列引用类型或基本类型，所有相同的类型封装到一起，采用一个统一的标识名称；</p><blockquote><p>Java中，数组是一种引用类型；</p><p>Java中，数组是用来存储相同类型的元素（包括基本类型和引用类型）；</p><p>Java中，数组是一种效率最高的存储和随机访问对象引用的方式；</p></blockquote><h1 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h1><h2 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h2><p>Java使用<code>new</code>关键字来创建数组；创建数组有两种方式：</p><ul><li>指定维度创建<ul><li>维度支持以下类型：<ul><li>整形、字符型；</li><li>整形变量、字符型变量；</li><li>计算结果为整形或字符型的表达式；</li></ul></li><li>为数组开辟指定大小的数组维度；</li><li>为每个维度元素赋予初始值；若元素类型为引用类型，则初始值为<code>null</code>；</li></ul></li><li>不指定维度创建<ul><li>通过具体元素创建并初始化数组，数组大小与元素个数相同；</li></ul></li></ul><blockquote><p>创建数组的维度数值过大，可能会导致编译报错或栈溢出；</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 字符型</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//整形变量</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 整形表达式</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token char">'a'</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//字符型表达式</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h2><p>Java中，可通过方括号<code>[]</code>指定下标来访问数组元素，下标位置从0开始；</p><p>Java中，数组类型是一种引用类型。因此，它可以作为引用，被Java函数作为参数或返回值来使用；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo02</span> <span class="token punctuation">{</span>    <span class="token comment">//数组作为参数</span>  prviate <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//通过下标访问数组</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment">//返回数组引用</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">func1</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其中每一个元素都是一个一维数组类型的引用；Java语言本身是可以支持N维数组，但正常人类的理解能力，一般最多能够理解三维数组；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiArrayDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> stativ <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mulArray <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mulArray: "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span>mulArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>Java中提供了一个很有用的数组工具类：<code>Arrays</code>；</p><p>它提供的主要方法有：</p><ul><li><code>sort</code>：排序</li><li><code>equals</code>：比较</li><li><code>fill</code>：填充</li><li><code>hash</code>：哈希</li><li><code>asList</code>：数组转列表</li><li><code>toString</code>：数组转字符串</li><li><code>binarySearch</code>：二分查找</li></ul><blockquote><p>Java中不允许直接创建泛型数组，如果需要使用泛型，建议使用容器；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：容器</title>
      <link href="/2021/07/30/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-4-rong-qi/"/>
      <url>/2021/07/30/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-4-rong-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="数组与容器"><a href="#数组与容器" class="headerlink" title="数组与容器"></a>数组与容器</h2><p>Java中最常用的存储结构就是数组与容器，二者的区别为：</p><ul><li>存储大小是否固定：<ul><li>数组创建后长度固定；</li><li>容器创建后可自动扩容；</li></ul></li><li>存储元素类型：<ul><li>数组即可存储基本类型，也可存储引用类型；</li><li>元素只能存储引用类型，基本类型需通过包装类转换后才能存入容器；</li></ul></li></ul><h2 id="容器框架"><a href="#容器框架" class="headerlink" title="容器框架"></a>容器框架</h2><p>Java容器框架主要分为<code>Collection</code>和<code>Map</code>两种；其中，<code>Collection</code>又可细分为<code>List</code>、<code>Set</code>和<code>Queue</code>；</p><ul><li><code>Collection</code>：一个独立元素的序列，这些元素需要服从一条或多条规则；<ul><li><code>List</code>：按照插入书序保存元素；</li><li><code>Set</code>：不能保存重复元素；</li><li><code>Queue</code>：按照排序规则来确定对象产生的顺序（默认与插入顺序一致）；</li></ul></li><li><code>Map</code>：一组成对的<code>K-V</code>对象，允许使用键来查找值；</li></ul><h2 id="容器基本机制"><a href="#容器基本机制" class="headerlink" title="容器基本机制"></a>容器基本机制</h2><p>Java容器具有一定的共性，他们全部或部分依赖以下技术：</p><ul><li>泛型</li><li><code>Iterator</code>和<code>Iterable</code></li><li><code>Comparator</code>和<code>Comparable</code></li><li><code>Cloneable</code></li><li><code>fail-fast</code></li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>JDK5开始引入泛型技术；</p><p>Java容器通过泛型技术来保证其内部数据的类型安全；</p><p>什么是类型安全呢？</p><p>举例来说：如果有一个<code>List&lt;Object&gt;</code>容器，Java编译器在编译时不对原始类型进行类型安全检查，但会对带参数的类型进行检查，通过使用<code>Object</code>作为类型，可以告知编译器该方法可以接受任何类型的对象，如<code>Integer</code>、<code>String</code>等；</p><h3 id="Iterator和Iterable"><a href="#Iterator和Iterable" class="headerlink" title="Iterator和Iterable"></a>Iterator和Iterable</h3><p><code>Iterator</code>与<code>Iterable</code>的目的在于支持遍历访问容器内部元素；</p><p><code>Collection</code>接口扩展了<code>Iterable</code>接口；</p><p>迭代可以简单理解为遍历，是一个标准化遍历各类容器里面的所有对象的接口。它是一种经典的设计模式 — 迭代器模式（<code>Iterator</code>）；</p><blockquote><p>迭代器模式：提供一种方法顺序访问一个聚合对象中各个元素，而又无需暴露该对象的内部表示；</p></blockquote><h3 id="Comparator和Comparable"><a href="#Comparator和Comparable" class="headerlink" title="Comparator和Comparable"></a>Comparator和Comparable</h3><p><code>Comparable</code>是排序接口；</p><p>类实现了<code>Comparable</code>接口，该类实例便可以进行比较及排序；</p><p>实现了<code>Comparable</code>接口类对象的容器可通过<code>Collection.sort</code>或<code>Arrays.sort</code>进行自动排序；</p><p><code>Comparator</code>是比较接口；</p><p>对于不支持排序的类,可通过创建该类的比较器来支持排序,比较器需实现<code>Comparator</code>接口；</p><blockquote><p>Java容器中，有些容器默认支持排序，如<code>TreeMap</code>、<code>TreeSet</code>等，可以通过传入<code>Comparator</code>来定义内部元素的排序规则；</p></blockquote><h3 id="Cloneable"><a href="#Cloneable" class="headerlink" title="Cloneable"></a>Cloneable</h3><p>Java中一个类要实现克隆功能，则必须实现<code>Cloneable</code>接口，否则调用<code>clone()</code>方法时会报<code>CloneNotSupportedException</code>异常；</p><p>Java中所有类都继承自<code>java.lang.Object</code>类，<code>java.lang.Object</code>类中有一个方法<code>clone()</code>，该方法返回<code>Object</code>对象的一个浅拷贝；</p><blockquote><p>浅拷贝基本类型返回其属性；浅拷贝引用类型返回其引用地址；</p></blockquote><h3 id="fail-fast"><a href="#fail-fast" class="headerlink" title="fail-fast"></a>fail-fast</h3><p><code>fail-fast</code>是Java容器的一种错误检测机制；当多个线程对容器进行结构上的更改操作时，可能会触发<code>fail-fast</code>机制；</p><p>容器在迭代操作中改变元素个数（添加、删除元素）都可能会导致<code>fail-fast</code>，抛出<code>java.util.ConcurrentModificationException</code>异常；</p><p><strong>fail-fast解决方案：</strong></p><ul><li>遍历过程中对涉及改变容器个数的地方全部添加<code>synchronized</code>或者直接<code>Collections.synchronizedXXX</code>容器，但会因此造成同步锁阻塞遍历操作，影响吞吐量；</li><li>使用并发容器，如：<code>CopyOnWriteArrayList</code>等；</li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p><code>List</code>是一个接口，继承于<code>Collection</code>，代表着有序的队列；</p><p><code>AbstractList</code>是一个抽象类，继承于<code>AbstractCollection</code>，并实现了<code>List</code>接口中除<code>size()</code>、<code>get()</code>之外的所有函数；</p><p><code>AbstractSequentialList</code>是一个抽象类，继承于<code>AbstractList</code>，实现了链表根据索引操作链表的全部函数；</p><h3 id="常用实现类"><a href="#常用实现类" class="headerlink" title="常用实现类"></a>常用实现类</h3><p><code>List</code>的常用实现类有：<code>ArrayList</code>、<code>LinkedList</code>、<code>Vector</code>和<code>Stack</code>：</p><ul><li><code>ArrayList</code>：<ul><li>基于动态数组实现，存在容量限制，但支持自动扩容；</li><li>随机访问速度快，但随机插入、删除元素慢；</li><li>线程不安全；</li></ul></li><li><code>LinkedList</code>：<ul><li>基于双链表实现，不存在容量限制；</li><li>随机插入、删除快，但随机访问慢</li><li>线程不安全</li></ul></li><li><code>Vector</code>：<ul><li>与<code>ArrayList</code>类似，主要方法都是<code>synchronized</code>方法；</li><li>线程安全</li></ul></li><li><code>Stack</code>：<ul><li>继承于<code>Vector</code>类，是同步容器；</li><li>线程安全</li></ul></li></ul><blockquote><p><code>Vector</code>和<code>Stack</code>因效率问题，已基本被废弃，使用对应的并发容器替代；</p></blockquote><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p><code>ArrayList</code>从数据结构来看，可以视为支持动态扩容的线性表；</p><p><code>ArrayList</code>是一个数组队列，相当于动态数组；<code>ArrayList</code>默认初始化容量大小为10；</p><p><code>ArrayList</code>容量达到阈值后，会自动进行扩容，每次自动扩容为当前容量的1.5倍；因此尽量在初始化时指定合适的初始化容量大小，减少自动扩容产生的性能开销；</p><p><code>ArrayList</code>定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span><span class="token class-name">RandomAccess</span><span class="token punctuation">,</span><span class="token class-name">Cloneable</span><span class="token punctuation">,</span><span class="token class-name">Serializable</span> <span class="token punctuation">{</span> <span class="token comment">//默认初始化容量</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//对象数组</span><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span><span class="token comment">//数组长度</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>实现了<code>List</code>接口，并继承<code>AbstractList</code>,支持所有的<code>List</code>操作；</li><li>实现了<code>RandomAccess</code>接口，支持随机访问；</li><li>实现了<code>Cloneable</code>接口，支持深拷贝；</li><li>实现了<code>Serializable</code>接口，支持序列化，能够通过序列化方式传输；</li><li>线程不安全；</li><li>数据结构：<ul><li><code>size</code>：内部动态数组的实际大小；</li><li><code>eleemtnData</code>：保存添加到<code>ArrayList</code>中元素的对象数组；</li></ul></li><li>构造方法：<ul><li>默认构造方法，无参数，创建一个默认大小空数组；</li><li>创建<code>ArrayList</code>对象时，传入数组初始大小参数；</li><li>创建<code>ArrayList</code>对象时，传入一个集合进行初始化；</li></ul></li><li>操作元素：<ul><li>访问元素：直接通过下标访问，时间复杂度为O(1);</li><li>添加元素：调用<code>add()</code>方法添加<ul><li>添加到任意位置：会导致该位置后的所有元素都需要重新排列；</li><li>添加到数组末尾：在没有扩容的前提下，不会有元素复制排序过程；</li></ul></li><li>删除元素：调用<code>remove()</code>方法移除<ul><li>与添加元素到任意位置类似，每次删除操作，都会触发数组重拍；删除元素位置越靠前，数组重排开销越大；具体实现为通过<code>System.arrayCopy()</code>循环向前复制移动；</li></ul></li></ul></li><li>序列化：<code>ArrayList</code>具有动态扩容特性，数组保存的元素不一定都会使用，但实现了序列化接口默认会将数组所有元素进行序列化。为提升性能，<code>ArrayList</code>定制了其序列化方式，具体逻辑为：<ul><li>存储元素的<code>Object</code>数组使用<code>transient</code>修饰，使得它可以被Java序列化忽略；</li><li>重写<code>writeObject()</code>和<code>readObject()</code>来控制序列化数组中有元素填充的部分内容；</li></ul></li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p><code>LinkedList</code>从数据结构角度来看，可以视为双链表；</p><p><code>LinkedList</code>基于双链表实现，因此顺序访问会非常高效，但随机访问效率较低；</p><p><code>LinkedList</code>定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>  <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span><span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">;</span><span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> last<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">E</span> item<span class="token punctuation">;</span>  <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>  <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>实现了<code>List</code>接口，并继承了<code>AbstractSequentialList</code>，支持所有<code>List</code>操作；</li><li>实现了<code>Deque</code>接口，可以被当做队列或双向队列操作，也可以用来实现栈；</li><li>实现了<code>Cloneable</code>接口，支持深拷贝；</li><li>实现了<code>Serializable</code>接口，支持序列化；</li><li>线程不安全；</li><li>数据结构：<ul><li><code>size</code>：表示双链表中节点个数，初始为0；</li><li><code>first</code>：表示双链表的头结点；</li><li><code>last</code>：表示双链表的尾结点；</li><li><code>Node</code>：<code>LinkedList</code>的内部类，表示链表中的元素实例，包含3个元素：<ul><li><code>prev</code>：指向当前节点的上一个节点；</li><li><code>next</code>：指向当前节点的下一个节点；</li><li><code>item</code>：当前节点包含的值；</li></ul></li></ul></li><li>操作元素：<ul><li>访问元素：通过<code>get()</code>方法按照<code>index</code>获取元素；</li><li>添加元素：调用<code>add()</code>方法添加元素<ul><li>新增数据包装为<code>Node</code>；</li><li>如果向头部添加元素，则将头指针指向新的<code>Node</code>，之前的<code>first</code>对象<code>prev</code>指向新的<code>Node</code>；</li><li>如果想维护添加元素，则将尾指针指向新的<code>Node</code>，之前的<code>last</code>对象<code>next</code>指向新的<code>Node</code>；</li></ul></li><li>删除元素：调用<code>remove()</code>方法删除元素<ul><li>遍历找到要删除的元素节点，调用<code>unlink</code>方法删除节点；</li><li><code>unlink</code>删除节点：<ul><li>如果当前节点有前驱节点，则让前驱节点指向当前节点的下个节点，否则让双链表头指针指向下一个节点；</li><li>如果当前节点有后继节点，则让后继节点指向当前节点的上个节点，否则让双链表的尾指针指向上一个节点；</li></ul></li></ul></li><li>序列化：<code>LinkedList</code>也定制化了自身的序列化方式；具体实现为：<ul><li>将<code>size</code>、<code>first</code>、<code>last</code>修饰为<code>transient</code>，使得它们Java序列化所忽略；</li><li>重写<code>writeObject()</code>和<code>readObject()</code>来控制序列化，只处理双链表中能被头结点链式引用的节点元素；</li></ul></li></ul></li></ul><h3 id="List常见问题"><a href="#List常见问题" class="headerlink" title="List常见问题"></a>List常见问题</h3><p><strong>Arrays.asList转换不支持基本类型数组</strong></p><p>通常使用<code>Arrays.asList</code>来将数据转换为列表，但在对基本类型数组进行转换时，<code>Arrays</code>工具类会将整个数组当做一个类型为泛型<code>T</code>的对象进行转换，正确的转换方式为：</p><ul><li>将基础类型数组转换为包装类数组后，在进行转换；</li><li>JDK8可以使用<code>Arrays.stream</code>方法来进行转换；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//M1</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">List</span> list2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// M2</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">List</span> list1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Arrays.asList转换列表不支持增删操作</strong></p><p><code>Arrays.asList</code>返回的<code>List</code>并不是我们期望的<code>java.util.ArrayList</code>，而是<code>Arrays</code>的内部类<code>ArrayList</code>，该内部类继承自<code>AbstractList</code>，但并没有覆写<code>add()</code>和<code>remove()</code>方法。所以通过<code>Arrays.asList</code>转换得到的<code>List</code>不支持增删操作；</p><p><strong>Arrays.asList转换列表受原始数组变更影响</strong></p><p><code>Arrays.asList</code>转换得到的<code>List</code>实际上复用了原始的数组，当原始数组元素发生改变时，<code>List</code>元素也会同步变更；如果希望切断两者之间的联系，可以使用转换后的结果来<code>new</code>一个新的列表；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//lt1受str元素变更影响</span><span class="token class-name">List</span> lt1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//lt2不受str元素变更影响</span><span class="token class-name">List</span> lt2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>List.subList返回队列与原队列共享内存</strong></p><p><code>List.subList</code>直接引用了原始的<code>List</code>，也可以认为是共享“存储”，而且对原始<code>List</code>进行结构性修改会导致<code>SubList</code>出现异常；解决方案如下：</p><ul><li>利用<code>List.subList</code>返回的结果重新<code>new ArrayList</code>，在构造方法中传入<code>SubList</code>来构建一个独立的<code>ArrayList</code>；</li><li>JDK8使用<code>Stream</code>的<code>skip</code>和<code>limit</code>API来跳过流中的元素，以及显示流中的元素个数，同样可以达到<code>SubList</code>切换的目的；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//m1</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> subList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//m2</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> subList2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><code>Map</code>提供了一个通用的元素存储方法。<code>Map</code>容器用于存储元素值对(<code>K-V</code>)，其中每个键映射到一个值；</p><h3 id="常用接口-抽象类"><a href="#常用接口-抽象类" class="headerlink" title="常用接口/抽象类"></a>常用接口/抽象类</h3><h4 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h4><p><code>Map</code>接口定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Map</code>接口提供3种容器视图，允许以键集、值集以及键-值集的方式访问数据；</p><p><code>Map</code>接口的实现类应提供2个标准的构造方法：</p><ul><li>无参构造方法，用于创建空<code>Map</code>；</li><li>单个<code>Map</code>类型参数的构造方法，用于创建一个与参数具有相同键值映射关系的新<code>Map</code>；</li></ul><p>实际上，单参构造方法允许复制任意<code>Map</code>，生成一个所需类的<code>Map</code>；JDK不强制执行此建议，但JDK中所有通用<code>Map</code>实现都遵循它；</p><h4 id="Map-Entry接口"><a href="#Map-Entry接口" class="headerlink" title="Map.Entry接口"></a><code>Map.Entry</code>接口</h4><p><code>Map.Entry</code>接口一般用于通过迭代器访问<code>Map</code>；</p><p><code>Map.Entry</code>是<code>Map</code>接口内部的一个接口，<code>Map.Entry</code>代表了键值对实体，<code>Map</code>通过<code>entrySet()</code>获取<code>Map.Entry</code>集合，从而通过该集合实现对键值对的操作；</p><h4 id="AbstractMap抽象类"><a href="#AbstractMap抽象类" class="headerlink" title="AbstractMap抽象类"></a>AbstractMap抽象类</h4><p><code>AbstractMap</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>实现不可修改的<code>Map</code>，扩展此类并提供<code>entrySet()</code>方法的实现，该方法返回<code>Map</code>的映射关系<code>Set</code>视图；此<code>Set</code>不支持<code>add()</code>和<code>remove()</code>方法；</li><li>实现可修改的<code>Map</code>，程序员需自行实现<code>put()</code>方法；<code>entrySet().iterator()</code>放回的迭代器也必须另外实现<code>remove()</code>方法；</li></ul><p><code>AbstractMap</code>提供了<code>Map</code>接口的核心实现，可最大限度减少实现<code>Map</code>接口所需工作；</p><h4 id="SortedMap接口"><a href="#SortedMap接口" class="headerlink" title="SortedMap接口"></a>SortedMap接口</h4><p><code>SortedMap</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>构造方法：<ul><li>无参构造方法：创建一个空的有序<code>Map</code>，按照自然排序进行排序；</li><li>带有<code>Comparator</code>类型参数的构造方法，创建一个空的有序<code>Map</code>，根据指定比较器进行排序；</li><li>带有<code>Map</code>类型参数的构造方法，创建一个新的有序<code>Map</code>，其键值映射关系与参数相同，按照键的自然排序；</li><li>带有<code>SortedMap</code>类型参数的构造方法，创建一个新的有序<code>Map</code>，其键值映射关系和排序方法与输入的有序<code>Map</code>相同；</li></ul></li></ul><h4 id="NavigableMap接口"><a href="#NavigableMap接口" class="headerlink" title="NavigableMap接口"></a>NavigableMap接口</h4><p><code>NavigableMap</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NavigableMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>NavigableMap</code>提供了获取键、键值对、建集、键值对集的相关方法：</p><ul><li>获取键值对：<ul><li><code>lowerEntry</code>、<code>floorEntry</code>、<code>ceilingEntry</code>、<code>higherEntry</code>，分别返回小于、小于等于、大于等于或大于给定键的建关联<code>Map.Entry</code>对象；</li></ul></li><li>移除键值对：<ul><li><code>pollFirstEntry</code>、<code>pollLastEntry</code>，移除最小、最大映射关系；</li></ul></li><li>获取键：<ul><li><code>lowerKey</code>、<code>floorKey</code>、<code>ceilingKey</code>和<code>higherKey</code>，分别返回小于、小于等于、大于等于、大于给定键的键；</li></ul></li><li>获取键的集合：<ul><li><code>NavigableKeySet</code>、<code>descendingKeySet</code>分别获取正序/倒序的键集；</li></ul></li></ul><h4 id="Dictionary抽象类"><a href="#Dictionary抽象类" class="headerlink" title="Dictionary抽象类"></a>Dictionary抽象类</h4><p><code>Dictionary</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Dictionary</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Dictionary</code>是JDK1.0定义的操作键值对的抽象类，包括了操作键值对的基本方法；</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p><code>HashMap</code>是最常用的<code>Map</code>接口实现类；</p><p><code>HashMap</code>以散列方式存储键值对；</p><p><code>HashMap</code>允许使用空值和空键，其中元素不保序，元素顺序可能会随着时间的推移变化；</p><p><code>HashMap</code>是线程不安全的；</p><p><code>HashMap</code>有两个影响其性能的参数：初始容量和负载因子；</p><ul><li>初始容量：指散列表创建时的初始大小；</li><li>负载因子：指散列表在其容量自动扩容之前被允许的最大饱和量；当哈希表中的<code>entry</code>数量超过负载因子与当前容量的乘积时，散列表会被重新映射，一般散列表是存储桶数量的两倍；</li></ul><p><code>HashMap</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token comment">//该表在初次使用时初始化，分配长度总是2的幂</span>  <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>  <span class="token comment">//保存缓存的entrySet()</span>  <span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet<span class="token punctuation">;</span> <span class="token comment">//map中的键值对数量</span>  <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>  <span class="token comment">//HashMap结构修改次数</span>  <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>  <span class="token comment">//下一个调整大小的值</span>  <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>  <span class="token comment">//散列表的加载因子,默认为0.75</span>  <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//以initCapacity初始化容量,默认加载因子0.75</span>  <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//以initCapacity初始化容量,loadFactor为加载因子</span>  <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//以一个已有map内容、默认负载因子0.75</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><p>数据结构：</p><ul><li><code>table</code>：<code>HashMap</code>使用一个<code>Node&lt;K,V&gt;[]</code>类型的数组<code>table</code>来存储元素；</li><li><code>size</code>：初始容量，默认为16，容量不足时自动扩容，扩容结果为2次幂（即扩展为原来的2倍）；</li><li><code>factor</code>：负载因子，默认为0.75，自动扩容之前允许的最大饱和度；</li></ul></li><li><p>操作元素：</p><ul><li>获取元素：调用<code>get()</code>方法，通过键查找值；</li><li>添加元素：调用<code>put()</code>方法，通过键更新值或插入键；</li></ul></li><li><p><code>hash()</code>方法：</p><p><code>HashMap</code>计算桶下表<code>index</code>的公式为：：<code>(n-1) &amp; key.hashCode() ^ (h&gt;&gt;&gt;16)；</code>其中n为table的长度，默认为16。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210731011455070.png" alt="image-20210731011455070"></li><li><p><code>resize()方法</code></p><p>当散列表容量达到阈值后，自动将<code>bucket</code>扩充为原来的2倍，然后重新计算<code>index</code>，然后将节点重新放回<code>bucket</code>中；扩容后的元素，要么保留在原位置，要么在原位置移动2次幂的位置；</p><p>元素在重新计算<code>hash</code>后，因为N变为原来的2倍，那么N-1的<code>mask</code>范围在高位多1位，因此新的<code>index</code>会发生如下变化：</p></li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210731012002642.png" alt="image-20210731012002642"><p>  因此，在扩充<code>HashMap</code>的时候，不需要重新计算<code>hash</code>，只需要看原来的<code>hash</code>值新增<code>bit</code>是1还是0即可；若为0，则下标不变；若为1则下边变更为“原索引+原容量大小”；如下图所示：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210731012259711.png" alt="image-20210731012259711"><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p><code>LinkedHashMap</code>通过维护一个保存所有条目<code>(Entry)</code>的双向链表，保证了元素迭代的顺序（插入顺序）；</p><p><code>LinkedHashMap</code>允许<code>key</code>和<code>value</code>为<code>null</code>；</p><p><code>LinkedHashMap</code>允许插入重复数据，若<code>key</code>相同则覆盖，<code>value</code>允许重复；</p><p><code>LinkedHashMap</code>默认按照元素插入顺序进行存储；</p><p><code>LinkedHashMap</code>是线程不安全的；</p><p><code>LinkedHashMap</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">transient</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>  head<span class="token punctuation">;</span>  <span class="token keyword">transient</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>  tail<span class="token punctuation">;</span>    <span class="token comment">//排序算法， true -- access method   false -- insert</span>  <span class="token keyword">final</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>通过维护一对<code>LinkedHashMap.Entry&lt;K,V&gt;</code>类型的头尾指针，以双链表形式，保存所有数据；<ul><li>继承<code>HashMap</code>的<code>put</code>方法，但并未实现<code>put</code>方法；</li></ul></li></ul><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p><code>TreeMap</code>基于红黑树实现；</p><p><code>TreeMap</code>是有序的，排序规则为：根据<code>map</code>中<code>key</code>的自然语义顺序或提供的比较器(<code>Comparator</code>)定义的比较顺序；</p><p><code>TreeMap</code>不允许出现重复的<code>key</code>，且不允许<code>key</code>为<code>null</code>；</p><p><code>TreeMap</code>是线程不安全的；</p><h3 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h3><p><code>WeakHashMap</code>是一个散列表，存储内容为键值对，且键值都可以为<code>null</code>；</p><p><code>WeakHashMap</code>是不同步的；可以使用<code>Collections.synchronizedMap</code>方法来构造同步的<code>WeakHashMap</code>；</p><p><code>WeakHashMap</code>的键是弱键，当某个键不再被其它对象引用，会被从<code>WeakHashMap</code>中自动移除；原理为通过<code>WeakReference</code>和<code>ReferenceQueue</code>实现。</p><p><code>WeakHashMap</code>的<code>key</code>是弱键，即<code>WeakReference</code>类型的，<code>ReferenceQueue</code>是一个队列，它是会被GC回收的弱键，实现步骤为：</p><ul><li>创建<code>WeakHashMap</code>，将键值添加到<code>WeakHashMap</code>中，<ul><li><code>WeakHashMap</code>通过<code>table</code>保存<code>Entry</code>；每个<code>Entry</code>实际上是一个单向链表，即<code>Entry</code>是键值对链表；</li></ul></li><li>当弱键不在被其它对象引用，并被GC回收时，该弱键也会同时添加到<code>ReferenceQueue</code>队列中；</li><li>当下次操作<code>WeakHashMap</code>时，会先同步<code>table</code>和<code>queue</code>；<code>table</code>中保存了全部的键值对，而<code>queue</code>中保存被GC回收的键值对；同步它们，即删除<code>table</code>中被GC回收的键值对；</li></ul><p><code>WeakHashMap</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeakHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p><code>Set</code>注重独一无二性质，不能存储重复元素；</p><h3 id="常用接口-抽象类-1"><a href="#常用接口-抽象类-1" class="headerlink" title="常用接口/抽象类"></a>常用接口/抽象类</h3><h4 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h4><p><code>Set</code>继承了<code>Collection</code>接口；实质上就是一个<code>Collection</code>；</p><h4 id="SortedSet接口"><a href="#SortedSet接口" class="headerlink" title="SortedSet接口"></a>SortedSet接口</h4><p><code>SortedSet</code>中的内容是排序的唯一值，排序的方法是通过<code>Comparator</code>完成的；</p><p><code>SortedSet</code>接口扩展了一些新方法：</p><ul><li><code>comparator</code>：返回一个<code>Comparator</code></li><li><code>subSet</code>：返回指定区间的子集</li><li><code>headSet</code>：返回小于指定元素的子集</li><li><code>tailSet</code>：返回大于指定元素的子集</li><li><code>first</code>：返回第一个元素</li><li><code>last</code>：返回最后一个元素</li></ul><h4 id="NavigableSet接口"><a href="#NavigableSet接口" class="headerlink" title="NavigableSet接口"></a>NavigableSet接口</h4><p><code>NavigableSet</code>继承了<code>SortedSet</code>，它丰富了一系列查找方法：</p><ul><li><code>lower</code>：返回小于指定值的元素中最接近的元素</li><li><code>higher</code>：返回大于指定值的元素中最接近的元素</li><li><code>floor</code>：返回小于或等于指定值的元素中最接近的元素</li><li><code>ceiling</code>：返回大于或等于指定元素中最接近的元素</li><li><code>pollFirst</code>：检索并移除第一个(最小的)元素</li><li><code>pollLast</code>：检索并移除最后一个(最大的)元素</li><li><code>descendingSet</code>：返回反序排列的<code>Set</code></li><li><code>descendingIterator</code>：返回反序排列的<code>Set</code>的迭代器</li></ul><h4 id="AbstractSet抽象类"><a href="#AbstractSet抽象类" class="headerlink" title="AbstractSet抽象类"></a>AbstractSet抽象类</h4><p><code>AbstractSet</code>类提供<code>Set</code>接口的核心实现，已最大限度减少实现<code>Set</code>接口所需的工作；</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p><code>HashSet</code>类依赖于<code>HashMap</code>，它实际上是通过<code>HashMap</code>实现的。<code>HashSet</code>中的元素是无序的、散列的；</p><p><code>HashSet</code>通过继承<code>AbstractSet</code>实现了<code>Set</code>接口中的骨干方法；</p><p><code>HashSet</code>实现了<code>Cloneable</code>，支持拷贝；</p><p><code>HashSet</code>实现了<code>Serializable</code>，支持序列化；</p><p><code>HashSet</code>中存储的元素是无序的；</p><p><code>HashSet</code>允许<code>null</code>值的元素；</p><p><code>HashSet</code>线程不安全；</p><p><code>HashSet</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">PRESENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>维护了一个<code>HashMap</code>对象，围绕该对象实现了<code>add()</code>、<code>remove()</code>、<code>Iterator()</code>、<code>clear()</code>、<code>size()</code>方法；</li><li>通过定义<code>readObject()</code>和<code>writeObject()</code>方法确定其序列化机制；</li><li>定义<code>PRESENT</code>用于关联<code>map</code>中当前操作元素；</li></ul><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p><code>TreeSet</code>类依赖于<code>TreeMap</code>，实际上是通过<code>TreeMap</code>实现的。<code>TreeSet</code>中的元素是有序的，它是按自然排序或者用户指定比较器排序的<code>Set</code>；</p><p><code>TreeSet</code>通过继承<code>AbstractSet</code>实现了<code>NavigableSet</code>接口中的骨干方法；</p><p><code>TreeSet</code>实现了<code>Cloneable</code>，支持克隆；</p><p><code>TreeSet</code>实现了<code>Serializable</code>，支持序列化；</p><p><code>TreeSet</code>存储的元素是有序的；排序规则是自然顺序或比较器<code>Comparator</code>中提供的顺序规则；</p><p><code>TreeSet</code>不允许<code>null</code>值元素；</p><p><code>TreeSet</code>线程不安全；</p><p><code>TreeSet</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">NavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span><span class="token class-name">Cloneable</span><span class="token punctuation">,</span><span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">NavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">PRESENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>维护了一个<code>NavigableSet</code>对象（实质上是一个<code>TreeMap</code>），围绕该对象实现了<code>add()</code>、<code>remove()</code>、<code>iterator()</code>、<code>clear()</code>、<code>size()</code>方法；</li><li>定义<code>PRESENT</code>用于关联<code>map</code>中当前元素；</li><li><code>TreeSet</code>中的元素都被当成了<code>TreeMap</code>的<code>key</code>来存储，而<code>value</code>为<code>PRESENT</code>;</li></ul><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p><code>LinkedHashSet</code>是按插入顺序排序的<code>Set</code>；</p><p><code>LinkedHashSet</code>通过继承<code>HashSet</code>实现了<code>Set</code>接口中的骨干方法；</p><p><code>LinkedHashSet</code>实现了<code>Clonebale</code>，支持克隆；</p><p><code>LinkedHashSet</code>实现了<code>Serializable</code>，支持序列化；</p><p><code>LinkedHashSet</code>中存储的元素是按照插入顺序保存的；</p><p><code>LinkedHashSet</code>线程不安全；</p><p><code>LinkedHashSet</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span>loadFactor<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span><span class="token number">.75f</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">.75f</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EnumSet"><a href="#EnumSet" class="headerlink" title="EnumSet"></a>EnumSet</h3><p><code>EnumSet</code>继承了<code>AbstractSet</code>，实现了<code>Set</code>接口中的骨干方法；</p><p><code>EnumSet</code>实现了<code>Cloneable</code>，支持克隆；</p><p><code>EnumSet</code>实现了<code>Serializable</code>，支持序列化；</p><p><code>EnumSet</code>通过<code>&lt;E extends Enum&lt;E&gt;&gt;</code>限定了存储元素必须为枚举型；</p><p><code>EnumSet</code>没有构造方法，只能通过类中的<code>static</code>方法来创建<code>EnumSet</code>对象；</p><p><code>EnumSet</code>是有序的，以枚举值在<code>EnumSet</code>类中的定义顺序来决定集合元素的顺序；</p><p><code>EnumSet</code>线程不安全；</p><p><code>EnumSet</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EnumSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p><code>Queue</code>是一种先进先出的数据结构；</p><h3 id="常用接口-抽象类-2"><a href="#常用接口-抽象类-2" class="headerlink" title="常用接口/抽象类"></a>常用接口/抽象类</h3><h4 id="Queue接口"><a href="#Queue接口" class="headerlink" title="Queue接口"></a>Queue接口</h4><p><code>Queue</code>继承于<code>Collection</code>接口；除了支持集合的基本操作外，还提供了额外的插入、提取和检查操作；</p><h4 id="AbstractQueue抽象类"><a href="#AbstractQueue抽象类" class="headerlink" title="AbstractQueue抽象类"></a>AbstractQueue抽象类</h4><p><code>AbstractQueue</code>类提供<code>Queue</code>接口的核心实现，以最大限度地减少实现<code>Queue</code>接口所需的工作；</p><p><code>AbstractQueue</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>  <span class="token keyword">implements</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Deque接口"><a href="#Deque接口" class="headerlink" title="Deque接口"></a>Deque接口</h4><p><code>Deque</code>是<code>double ended queue</code>的缩写，即双端队列；<code>Deque</code>继承了<code>Queue</code>接口，并扩展支持在队列两端插入和删除元素；</p><p>支持特定方法：</p><ul><li>尾部插入：<code>addLast(e)</code>、<code>offerLast(e)</code></li><li>尾部删除：<code>removeLast()</code>、<code>pollLast(e)</code></li></ul><blockquote><p><code>Deque</code>支持有容量限制，也支持没有固定大小限制；</p></blockquote><h3 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h3><p><code>ArrayDeque</code>是<code>deque</code>的顺序表实现；</p><p><code>ArrayDeque</code>用一个动态数组实现了栈和队列所需的所有操作；</p><h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3><p><code>PriorityQueue</code>是一个优先级队列，是不同于先进先出队列的另一种队列；默认按照自然顺序排列，也就是数字默认小的在队列头，字符串按字典序列排序；</p><p><code>PriorityQueue</code>实现<code>Serializable</code>，支持序列化；</p><p><code>PriorityQueue</code>类是无界优先级队列；</p><p><code>PriorityQueue</code>元素按自然顺序或<code>Comparator</code>提供的顺序排序；</p><p><code>PriorityQueue</code>不接受<code>null</code>值元素；</p><p><code>PriorityQueue</code>线程不安全；</p><p><code>PriorityQueue</code>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程自学之路：数据类型</title>
      <link href="/2021/07/26/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-1-shu-ju-lei-xing/"/>
      <url>/2021/07/26/02-program/java-bian-cheng-zi-xue-zhi-lu/java-bian-cheng-zi-xue-zhi-lu-1-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>Java数据类型可分为两大类：</p><ul><li><p>基本类型：又叫内置数据类型，或值类型；</p><ul><li>变量名指向具体数值；</li><li>变量声明后立刻分配内存空间；</li><li>使用时需要赋值，判等时可使用运算符<code>==</code>;</li></ul></li><li><p>引用类型：除值类型之外，都是引用类型，如数组、字符串、对象引用；</p><ul><li>变量名指向对象的内存地址；</li><li>变量声明后不会分配分配内存，只存储了一个内存地址；</li><li>使用时可以赋值为<code>null</code>，判等需使用<code>equals()</code>方法；</li></ul></li></ul><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="基本类型分类"><a href="#基本类型分类" class="headerlink" title="基本类型分类"></a>基本类型分类</h3><p>Java语言提供了8种基本类型，大致分为4类：</p><table><thead><tr><th>类型名称</th><th>分类</th><th>比特位</th><th>默认值</th><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td>boolean</td><td>布尔型</td><td>8bit</td><td>false</td><td>{false,true}</td><td></td></tr><tr><td>char</td><td>字符型</td><td>16bit</td><td><code>\u0000</code></td><td>[0,2^16-1]</td><td>存储<code>Unicode</code>码，用单引号赋值</td></tr><tr><td>byte</td><td>整形</td><td>8bit</td><td>0</td><td>[-2^7, 2^7]</td><td>-128到127</td></tr><tr><td>short</td><td>整形</td><td>16bit</td><td>0</td><td>[-2^15, 2^15-1]</td><td>-32768到32767</td></tr><tr><td>int</td><td>整形</td><td>32bit</td><td>0</td><td>[-2^31, 2^31-1]</td><td>上限大约为21亿</td></tr><tr><td>long</td><td>整形</td><td>64bit</td><td>0L</td><td>[-2^63, 2^63-1]</td><td>赋值需在数字后面加上<code>l</code>或<code>L</code></td></tr><tr><td>float</td><td>浮点型</td><td>32bit</td><td>+0.0F</td><td>(-2^-126, 2^127)</td><td>赋值需在数字后加上<code>f</code>或<code>F</code></td></tr><tr><td>double</td><td>浮点型</td><td>64bit</td><td>+0.0D</td><td>(2^-1022, 2^1023 )</td><td>赋值需在数字后加上<code>d</code>或<code>D</code></td></tr></tbody></table><blockquote><p>1字节=8比特位，或者说 1byte=8bit</p><p>整形及浮点型都是有符号数据</p><p>各种基础类型默认值显示不一样，但内存中实际都是0</p><p>单精度浮点型取值需去除非规格数<code>-(2-2^-23)*2^127</code>到<code>2^-126</code></p><p>双精度浮点型取值需去除非规格数<code>-2(2-2^-52)* 2^1023</code>到<code>2^-1022</code></p></blockquote><p>Java中的数值类型不存在无符号的，取值范围也是固定的，不会随着硬件改变而变动；</p><p>实际上，Java中还存在另外一种基本类型<code>Void</code>，对应包装类为<code>java.lang.Void</code>，但无法对其进行操作；</p><h3 id="基本类型的好处"><a href="#基本类型的好处" class="headerlink" title="基本类型的好处"></a>基本类型的好处</h3><p>我们都知道在Java语言中，<code>new</code>一个对象是存储在堆里的，我们通过栈中的引用来使用这些对象，对象本身是比较消耗资源的。</p><p>对于经常用到的类型，如<code>int</code>等，如果每次使用这种变量都要<code>new</code>一个<code>Java</code>对象的话，就会比较“笨重”。所以，与<code>C++</code>一样，<code>Java</code>提供了基本数据类型，这种类型的变量不需要使用<code>new</code>来创建，所以它们不会在堆上创建，而是直接在栈内存中存储，因而更加高效。</p><h3 id="什么是浮点型"><a href="#什么是浮点型" class="headerlink" title="什么是浮点型"></a>什么是浮点型</h3><p>计算机的数字存储与运算都是通过二进制进行的；</p><p>其表示形式如下：</p><table><thead><tr><th>类型</th><th>数符(m)</th><th>阶码(E)</th><th>尾数(M)</th><th>指数范围</th><th></th></tr></thead><tbody><tr><td>单精度</td><td>1位</td><td>8位</td><td>23位</td><td>[-126,127]</td><td></td></tr><tr><td>双精度</td><td>1位</td><td>11位</td><td>52位</td><td>[-1022,1023]</td><td></td></tr><tr><td>临时</td><td>1位</td><td>15位</td><td>64位</td><td>[-16382,16383]</td><td></td></tr></tbody></table><p>其中：</p><ul><li>数符：尾数的符号位；1为负，0为正；</li><li>阶码：表示数的幂，基数为2；用移码表示；</li><li>尾数：表示数的小数部分，基为2；用原码表示；</li></ul><h4 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h4><p><strong>除二取余法（整数）</strong></p><ul><li>用2整除十进制数，得到商和余数；</li><li>循环往复，直到商小于2时为止；</li><li>将所有得到的余数按倒序排列即为对应的二进制数；</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">125转换为二进制，计算流程如下：被除数除数商 余数125262  162231  031215  11527  1723  1321  1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后转换的二进制数为：111101；</p><p><strong>乘二取整法（小数）</strong></p><ul><li>用2乘以十进制小数，得到乘积，取出整数部分；</li><li>循环往复，直到得到的乘积小数部分为零为止；</li><li>将所有取出的整数部分按正序排列作为转换后的二进制小数部分；</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">将0.1转换为二进制小数，计算流程如下：被乘数乘数积取整0.120.2 00.220.4 00.420.8 00.821.6 10.621.2 10.220.4 0……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换后二进制小数为：0.000110……</p><blockquote><p>0.1的二进制小数为无限循环小数，所以计算机无法精确表示0.1；</p><p>所以计算机科学中，使用浮点数来表示实数的近似值；</p></blockquote><h4 id="IEEE754标准"><a href="#IEEE754标准" class="headerlink" title="IEEE754标准"></a>IEEE754标准</h4><p>IEEE二进制浮点数算术标准（IEEE 754）是20世纪80年代以来最广泛使用的浮点数运算标准，为许多CPU与浮点运算器所采用。用以解决部分小数无法使用二进制精确表示的问题；</p><p>IEEE 754规定了四种表示浮点数值的方式：单精确度（32位）、双精确度（64位）、延伸单精确度（43比特以上，很少使用）与延伸双精确度（79比特以上，通常以80位实现）；</p><p>其中最常用的就是32位单精度浮点数和64位双精度浮点数；</p><p>IEEE并没有解决小数无法精确表示的问题，只是提出了一种使用近似值表示小数的方式，并且引入了精度的概念；</p><blockquote><p>计算机中保存的小数其实是十进制小数的近似值，并不是精确值；所以业务系统千万不要使用浮点数来表示金额等重要指标；建议使用<code>BigDecimal</code>或<code>Long</code>来表示金额；</p></blockquote><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Java中，数据类型转换有两种方式：</p><ul><li>自动转换</li><li>强制转换</li></ul><h4 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h4><p>一般情况下，定义了某种类型的变量，就不能随意转换。但Java允许用户对基本类型做有限度的类型转换；</p><p>以下情况会自动进行类型转换：</p><ul><li><p>由小数据转换为大数据</p><p>显而易见的，“小”数据类型的数值表示范围小于“大”数据类型的数值表示范围，即精度小于“大”数据类型；</p><p>所以，如果“大”数据类型向“小”数据类型转换，可能会丢失精度，导致结果失真；反之，“小”数据类型向“大”数据类型转换，则不会存在数据丢失风险；这种类型转换也称为<strong>扩大转换</strong>；</p></li><li><p>数值运算</p><p>不同精度的数值进行运算后，结果为“大”数据类型；例如，整形与浮点型计算后结果为浮点型；</p></li><li><p>类型转换兼容</p></li></ul><blockquote><p>上文所说的“小”数据类型和“大”数据类型，指的是表示值的范围与精度大小；</p><p>基础类型的大小顺序为：<code>byte、char、short</code>&lt;<code>int</code>&lt;<code>long</code>&lt;<code>float</code>&lt;<code>double</code></p></blockquote><h4 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h4><p>在不符合自动转换条件或根据用户的需要，可以对数据类型做强制转换；</p><p>通过小括号<code>()</code>来进行类型强制转换，引用类型也可以使用强制类型转换；</p><h4 id="数值溢出"><a href="#数值溢出" class="headerlink" title="数值溢出"></a>数值溢出</h4><p>常用基本类型计算时，都有可能超出表达范围的可能性，且数值溢出时不会抛出任何异常，所以这类问题非常容易被忽略。改进的方法为：</p><ul><li>使用<code>Math</code>类的<code>addExact</code>、<code>subtractExact</code>等方法进行数值运算，这样在产生溢出时主动抛出异常；</li><li>使用大数类<code>BigDecimal</code>和<code>BigInteger</code>。<code>BigDecimal</code>是处理浮点数专家，<code>BigInteger</code>是处理整数专家；</li></ul><h3 id="数据类型判等"><a href="#数据类型判等" class="headerlink" title="数据类型判等"></a>数据类型判等</h3><p>Java中，通常使用<code>equals()</code>方法或者<code>==</code>运算符进行判等操作；</p><ul><li><code>==</code><ul><li>操作符，用于对字面量进行判等，主要适用于基本类型；</li></ul></li><li><code>equals()</code>：<ul><li>方法，可对对象内容进行判等，主要适用于引用类型；</li><li>自定义实现技巧：<ul><li>考虑性能：先进行指针判等，如果相同则直接返回<code>true</code></li><li>控制判断：优先对乙方判空，空对象与自身比较，则直接返回<code>false</code></li><li>类型判断：如果类型不同，则直接返回<code>false</code></li><li>值判断：类型相同的情况下，逐一判断所有字符</li></ul></li></ul></li></ul><blockquote><p>引用类型判定注意事项：</p><ol><li><code>hashCode()</code>和<code>equals()</code>需要配对实现</li><li><code>compareTo</code>和<code>equals()</code>的实现逻辑需一致</li></ol><p><code>Lombok</code>注解避坑：</p><p><code>Lombok</code>的<code>@Data</code>注解会自动实现<code>equals()</code>和<code>hashCode()</code>方法，但存在继承关系时，注解自动生成的方法可能不符合开发者预期；</p><p><code>@EqualAndHashCode</code>默认实现没有使用父类属性，需要手动设置<code>callSuper</code>开关为<code>true</code>来覆盖默认行为；</p></blockquote><h4 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a>开发技巧</h4><ul><li><p>包装类不能使用操作符<code>==</code>进行判等，必须使用<code>equals()</code>进行判等；</p></li><li><p>字符串正确的判定方式是使用<code>equals()</code>方法；但字符串内容存储在常量池中，也可以使用操作符<code>==</code>进行判等；</p></li></ul><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>引用类型是指Java中除了基本类型之外的所有类型（比如通过<code>class</code>定义的类型），它的值是指向内存空间的引用，也就是内存地址；</p><p>Java引用类型分类如下：</p><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>在Java中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用变量就是一个强引用；当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的，即使该对象以后一直不会被使用到，JVM也不会进行回收；</p><p>强引用是造成Java内存泄露的主要原因之一；</p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用需要通过<code>SoftReference</code>类来实现，对于只有软引用的对象来说，当系统内存足够时它不会被回收，当系统内存不足时它就会被回收；</p><p>软引用通常用在对内存敏感的程序中；</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>弱引用需要用<code>WeakReference</code>类来实现，它比软引用的生存期更短，对于只有弱引用的对象来说，只要垃圾回收触发，不管JVM的内存空间是否足够，总会回收该对象占用的内存；</p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>虚引用需要用<code>PhantomReference</code>类来实现，它不能单独使用，必须和引用队列联合使用；</p><p>虚引用的主要作用是跟踪对象被垃圾回收的状态；</p><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p><code>Java</code>语言是一个面向对象的语言，但是<code>Java</code>中的基本数据类型却不是面向对象的，这在实际使用中存在很多的不便，为了解决这个不足，在设计类时为每个基本数据类型设计了一个对应的类进行代表，这样8个和基本数据类型对应的类统称为包装类(Wrapper Class)。</p><p>包装类均位于<code>java.lang</code>包中，包装类与基本类型的对应关系如下：</p><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table><p>在这8个类名中，除了<code>Integer</code>和<code>Character</code>类以后，其他6个类的类名与基本数据类型一致，只是类名的第一个字母大写；</p><h3 id="为什么需要包装类"><a href="#为什么需要包装类" class="headerlink" title="为什么需要包装类"></a>为什么需要包装类</h3><p>既然<code>Java</code>为了提高效率，提供了8种基本数据类型，为什么还要提供包装类？</p><p>因为<code>Java</code>是一种面向对象语言，很多地方都需要使用对象而不是基本数据类型。比如，集合类中，我们无法将<code>int</code>、<code>double</code>等基本类型放进去。因为集合的容器要求元素是<code>Object</code>类型。</p><p>为了让基本类型也具有对象的特征，就出现了包装类型，相当于将基本类型“包装起来”，使得基本类型具备对象的属性，并且为其添加了属性和方法，丰富基本类型的操作。</p><h2 id="拆箱与装箱"><a href="#拆箱与装箱" class="headerlink" title="拆箱与装箱"></a>拆箱与装箱</h2><p>有了基本类型与包装类，就需要在两者之间进行转换。比如把一个基本类型的<code>int</code>转换成一个包装类型<code>Integer</code>对象。</p><p>包装类是对基本类型的包装，所以，把基本类型转换成包装类的过程就是<code>boxing</code>，中文翻译为装箱；反之，把包装类转换为基本类型的过程就是<code>unboxing</code>，中文译为拆箱。</p><h3 id="自动拆箱与自动装箱"><a href="#自动拆箱与自动装箱" class="headerlink" title="自动拆箱与自动装箱"></a>自动拆箱与自动装箱</h3><p><code>Java</code>在<code>Java SE5</code>中为了减少开发人员的工作量，提供了自动拆装箱的能力。</p><p>自动装箱：即将基本类型自动转换为包装类；</p><p>自动拆箱：即将包装类自动转换为基本类型；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">//自动装箱</span><span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token punctuation">;</span>   <span class="token comment">// 自动装箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Integer i =10</code>实际对应的代码应该是<code>Integer i = new Integer(10)</code>,得益于<code>Java</code>自动装箱功能，让开发者可以省略了手动去<code>new</code>一个对象。</p><blockquote><p>自动装箱是通过包装类的<code>valueOf</code>方法来实现的，自动拆箱功能是通过包装类对象的<code>xxxValue()</code>来实现的。</p></blockquote><h3 id="自动拆装箱应用场景"><a href="#自动拆装箱应用场景" class="headerlink" title="自动拆装箱应用场景"></a>自动拆装箱应用场景</h3><p>除了最简单基础的变量初始化与赋值外，以下场景均会进行自动拆装箱：</p><h4 id="场景一：将基本类型放入集合类"><a href="#场景一：将基本类型放入集合类" class="headerlink" title="场景一：将基本类型放入集合类"></a>场景一：将基本类型放入集合类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>  list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="场景二：包装类型与基本类型比较"><a href="#场景二：包装类型与基本类型比较" class="headerlink" title="场景二：包装类型与基本类型比较"></a>场景二：包装类型与基本类型比较</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> i1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bool <span class="token operator">?</span> <span class="token string">"True"</span> <span class="token operator">:</span> <span class="token string">"False"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译后代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token class-name">Boolean</span> bool <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bool<span class="token punctuation">.</span>booleanValue <span class="token operator">?</span> <span class="token string">"True"</span> <span class="token operator">:</span> <span class="token string">"False"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="场景三：包装类运算"><a href="#场景三：包装类运算" class="headerlink" title="场景三：包装类运算"></a>场景三：包装类运算</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> i1 <span class="token operator">+</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>反编译代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="场景四：三目运算符"><a href="#场景四：三目运算符" class="headerlink" title="场景四：三目运算符"></a>场景四：三目运算符</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> flag <span class="token operator">?</span> i <span class="token operator">:</span> j<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码反编译后如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span>  flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> flag <span class="token operator">?</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> j<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在三目运算表达式中，当第二、第三位操作数分别为基本类型与对象时，其中的对象会拆箱为基本类型。</p><h4 id="场景五：函数参数与返回值"><a href="#场景五：函数参数与返回值" class="headerlink" title="场景五：函数参数与返回值"></a>场景五：函数参数与返回值</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自动拆箱</span><span class="token keyword">public</span>  <span class="token keyword">int</span> <span class="token function">getNum1</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//自动装箱</span><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getNum2</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动拆装箱与缓存"><a href="#自动拆装箱与缓存" class="headerlink" title="自动拆装箱与缓存"></a>自动拆装箱与缓存</h3><p><code>Java SE</code>自动拆装箱提供了一个和缓存相关的功能；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Integer</span> int1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token class-name">Integer</span> int2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>int1 <span class="token operator">==</span> int2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int1 == int2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int1 != int2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token class-name">Integer</span> int3 <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>  <span class="token class-name">Integer</span> int4 <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>int3 <span class="token operator">==</span> int4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int3 == int4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int3 != int4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">int1 == int2int3 !=  int4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原因与<code>Integer</code>中的缓存机制有关，在<code>Java SE5</code>中，在<code>Integer</code>的操作上引入了一个新功能来节省内存和提高性能。整型对象通过使用相同的对象引用实现了缓存和重用。</p><blockquote><ol><li>当需要进行自动装箱时，如果数字在 -128 至 127 之间时，会直接使用缓存中的对象，而不是重新创建一个对象。</li><li>只适用于自动装箱，使用构造函数创建对象不适用；</li><li>Javadoc 详细的说明了缓存支持 -128 到 127 之间的自动装箱过程。最大值 127 可以通过 <code>-XX:AutoBoxCacheMax=size</code> 修改。</li><li>在 Java 6 中，可以通过 <code>java.lang.Integer.IntegerCache.high</code> 设置最大值。</li></ol></blockquote><h3 id="自动拆装箱带来的问题"><a href="#自动拆装箱带来的问题" class="headerlink" title="自动拆装箱带来的问题"></a>自动拆装箱带来的问题</h3><p>自动拆箱装是一个很好的功能，大大节省开发人员的精力，但是也会引入一些问题：</p><ol><li>包装对象的数值比较，不能简单的使用<code>==</code>，虽然-128到127之间的整数可以，但这个范围之外还是需要使用<code>equals</code>比较。</li><li>有些场景会进行自动拆装箱，如果包装类对象为<code>null</code>,那么自动拆装箱时就可能抛出NPE。</li><li><code>for</code>循环内部进行大量拆装箱，会浪费大量资源；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yarn NodeLabel简介</title>
      <link href="/2021/06/29/03-hadoop/hdfs-yarn/yarn-nodelabel-jian-jie/"/>
      <url>/2021/06/29/03-hadoop/hdfs-yarn/yarn-nodelabel-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在我们实际的部署环境中，经常会出现不同的机器类型，比如部分节点是计算型，部分节点是内存型；不同阶段采购设备配置也可能存在较大差异；大型集群开通多租户情况下，需要保障特定租户的稳定性及优先级，避免其他用户的任务对其造成影响；</p><p><code>node label</code>节点标签就是此类问题的一种解决方案；运维人员可以根据节点的特性将其划分到不同的分区来满足多维度的使用需求。</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>一个<code>Node Manager</code>节点只能属于一个<code>label</code>，如果节点没有配置<code>label</code>,则其属于一个不存在的<code>DEFAULT</code>分区；</li><li><code>label</code>有两种模式：<code>exclusive</code>和<code>non-exclusive</code>：<ul><li><code>non-exclusive</code>：该模式下节点同时归属于<code>DEFAULT</code>分区，当用户申请<code>DEFAULT</code>分区的资源时，可同时使用<code>non-exclusive</code>的资源；</li></ul></li><li>用户可以为每个队列配置可访问的分区，默认只可以访问<code>DEFAULT</code>分区；</li><li>可以配置每个队列可访问特定分区的资源比例；</li><li>支持配置动态变更及动态生效；</li></ul><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li>查询<code>label</code>：<code>yarn cluster -lnl</code></li><li>添加<code>label</code>：<code>yarn rmadmin -addToClusterNodeLabels [label1,label2]</code></li><li>删除<code>label</code>：<code>yarn rmadmin -removeFromClusterNodeClusters [label1,label2]</code></li><li>为节点配置<code>label</code>：<code>yarn rmadmin -replaceLabelsOnNode [node1:port = laebel1,label2]</code></li><li>查询节点：<code>yarn node -list -all</code></li><li>查询节点状态：<code>yarn node -state &lt;nodeId&gt;</code></li></ul><h1 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h1><p>默认情况下，集群是未开启<code>node label</code>标签功能的，如需启用，需调整<code>yarn-site.xml</code>参数：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.node-labels.fs-store.root-dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hdfs://namenode:port/path/to/store/node-labels/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.node-labels.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.scheduler.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Node Label</code>需与<code>CapacityScheduler</code>调度策略配合使用，配置样例如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--capacity-scheduler.xml--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.capacity.root.queues<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>poc,demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>设置二级子队列 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.capacity.root.capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>定义root队列默认分区容量为100%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.capacity.root.maximum-capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>定义root队列默认分区的资源最大容量为100%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.capacity.root.accessible-node-labels<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>定义root队列可以访问的标签为所有分区，如果为空则只能访问默认分区DEFAULT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.capacity.root.accessible-node-labels.CPU.capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>定义root队列可以访问的CPU分区容量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.capacity.root.accessible-node-labels.GPU.capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.capacity.root.poc.capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>40<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>定义poc队列使用默认分区的容量大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proerpty</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.capacity.root.poc.maximum-capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>定义poc队列可使用默认分区的最大容量为100%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proerpty</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodelabel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark任务提交流程</title>
      <link href="/2021/06/29/03-hadoop/spark/spark-ren-wu-ti-jiao-liu-cheng/"/>
      <url>/2021/06/29/03-hadoop/spark/spark-ren-wu-ti-jiao-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="Spark基本概念"><a href="#Spark基本概念" class="headerlink" title="Spark基本概念"></a>Spark基本概念</h3><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>指用户编写的程序代码；</p><h3 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h3><p>表示main函数，创建SparkContext，并由SC负责与ClusterManager通信，进行资源的申请，任务监控和分配；程序运行结束后，关闭SparkContext；</p><h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>Application运行在Worker或NM节点上的一个进程，负责运行具体的task，并将计算的结果数据存储在内存或硬盘上。Spark on Yarn模式下，其进程名为CoarseGrainedExecutorBackend，一个CoarseGrainedExecutorBackend进程有且仅有一个Executor对象，负责将task包装成taskrunner，并从线程池抽取空闲线程运行task；因此，每个CoarseGrainedExecutorBackend能并发运行的task数量取决于分配的CPU个数；</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>在Executor进程中任务执行的工作单元，多个task组成一个Stage；</p><h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>包含多个task组成的并行计算，由action算子触发；</p><h3 id="Stage"><a href="#Stage" class="headerlink" title="Stage"></a>Stage</h3><p>每个Job任务会被拆分成多个Task，组合成多个TaskSet，每个TaskSet定义为一个Stage；</p><h3 id="DAGScheduler"><a href="#DAGScheduler" class="headerlink" title="DAGScheduler"></a>DAGScheduler</h3><p>根据 Job将DAG划分成不同的Stage，并提交Stage给TaskScheduler，Stage划分依据为RDD的依赖关系；</p><h3 id="TaskScheduler"><a href="#TaskScheduler" class="headerlink" title="TaskScheduler"></a>TaskScheduler</h3><p>将TaskSet提交给worker/NM运行，每个Executor运行什么Task就是在此处分配；</p><h3 id="SchedulerBackend"><a href="#SchedulerBackend" class="headerlink" title="SchedulerBackend"></a>SchedulerBackend</h3><p>是一个trait，作用是分配当前可用资源，具体 就是想当前等待分配计算资源的task分配资源，即Executor，并在分配的Executor中启动task，完成计算调度；</p><h2 id="Spark运行模式"><a href="#Spark运行模式" class="headerlink" title="Spark运行模式"></a>Spark运行模式</h2><p>Spark任务运行可分为四种模式：Local Cluster、Standalone、Spark on Yarn及Spark on Mesos；</p><h3 id="Standalone模式"><a href="#Standalone模式" class="headerlink" title="Standalone模式"></a>Standalone模式</h3><p>即Spark自带的独立模式，自带完整服务，可单独部署到一个集群中，无需依赖其他资源管理系统，但只支持FIFO调度器；用户节点直接与Master交互，由Driver负责资源调度与分配；从一定程度上可以说是Spark on Yarn和Spark on Mesos的基础。</p><h3 id="Local-Cluster模式"><a href="#Local-Cluster模式" class="headerlink" title="Local Cluster模式"></a>Local Cluster模式</h3><p>Standalone模式的单机版，Master与Worker运行在同一台机器的不同进程上，一般用本地测试；</p><h3 id="Spark-on-Yarn"><a href="#Spark-on-Yarn" class="headerlink" title="Spark on Yarn"></a>Spark on Yarn</h3><p>这是一种很有前景的部署模式，目前生产环境大多数都为该模式。限于Yarn自身的发展，目前仅支持粗粒度模式（Coarse-grained Mode）。这是由于Yarn上的container无法动态伸缩，一旦container启动之后，可用资源就不能再变更。Spark on Yarn支持两种任务提交模式：</p><ul><li>cluster：适用于生产环境；</li><li>client：适用于交互、调试模式，可立刻看到任务的输出信息；</li></ul><h3 id="Spark-on-Mesos"><a href="#Spark-on-Mesos" class="headerlink" title="Spark on Mesos"></a>Spark on Mesos</h3><p>官方推荐的模式，Spark开发之初就考虑支持Mesos，因此，目前节点Spark运行在Mesos上会比Yarn更加灵活、自然。Spark on Mesos支持两种调度模式：</p><ul><li>粗粒度模式：类似于APP运行于一个Mesos临时搭建的虚拟Yarn集群上；</li><li>细粒度模式：类似于现在的云计算，思想是按需分配；应用程序启动后，会先启动Executor，但每个Executor占用资源仅仅是自己运行所需的资源，不需要考虑将来要运行的任务，之后，Mesos会为每个Executor动态分配资源，每分配一部分资源，便会启动一个新任务，单个任务运行结束后马上释放对应的资源。每个任务会汇报状态给Mesos Slave和Mesos Master，便于更加细粒度管理与容错，这种调度模式类似于MR模式，每个任务完全独立，优点是便于资源控制和格力，但缺点也明显，短作业运行延迟大；</li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210629205522682.png" alt="image-20210629205522682"><h2 id="Spark任务运行过程"><a href="#Spark任务运行过程" class="headerlink" title="Spark任务运行过程"></a>Spark任务运行过程</h2><h4 id="Yarn-cluster模式"><a href="#Yarn-cluster模式" class="headerlink" title="Yarn-cluster模式"></a>Yarn-cluster模式</h4><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210629211342718.png" alt="image-20210629211342718"><ol><li>Spark Client向Yarn RM提交请求启动ApplicationMaster，上传Jar包到HDFS上；</li><li>RM收到请求后，在集群中选择一个NM节点，为该应用程序分配第一个Container，要求它在这个Container中启用应用程序的ApplicationMaster，由ApplicationMaster进行SparkContext等的初始化；</li><li>ApplicationMaster向RM注册，便于用户直接通过RM查看应用程序的运行状态，AM采用轮询方式通过RPC协议为各个任务申请资源，并监控其运行状态知道运行结束；</li><li>一旦ApplicationMaster申请到资源后，便与对应的NM通信，要求申请到的Container启动CoarseGrainedExecutorBackend，CoarseGrainedExecutorBackend启动后会向ApplicationMaster中的SparkContext注册并申请Task；</li><li>ApplicationMaster中的SparkContext分配Task给CoarseGrainedExecutorBackend执行，CoarseGrainedExecutorBackend运行Task并向ApplicationMaster汇报运行的状态和进度，以便让ApplicationMaster随时掌握各个任务的运行状态，从而可以在任务失败时进行重试；</li><li>Application运行完成后，ApplicationMaster向RM申请注销并关闭自己；</li></ol><h4 id="Yarn-client模式"><a href="#Yarn-client模式" class="headerlink" title="Yarn-client模式"></a>Yarn-client模式</h4><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210629213915168.png" alt="image-20210629213915168"><ol><li>Spark Client在本地启动Driver，并进行应用程序实例化SparkContext，同时在SparkContext中创建DAGScheduler和TaskScheduler等；</li><li>Spark Client向RM提交请求启动ApplicationMaster，上传Jar包到HDFS上；</li><li>RM收到请求后，在集群中选择一个NM节点，并为应用程序分配第一个Container，要求它在这个Container启动应用程序的ApplicationMaster；ApplicationMaster只负责与SparkContext联系进行资源分派；</li><li>SparkContext初始化完毕后，与ApplicationMaster建立通信，由ApplicationMaster向RM注册，并根据任务信息向RM申请资源（Container）；</li><li>ApplicationMaster申请到资源（Container）后，便于对应的NM通信，要求它在获得的Container中启动CoarseGrainedExecutorBackend，CoarseGrainedExecutorBackend启动后向Client中的SparkContext注册并申请Task；</li><li>Client中的SparkContext分配Task给CoarseGrainedExecutorBackend执行，CoarseGrainedExecutorBackend运行Task并向Driver汇报运行的状态和进度，以便Client随时掌握各个任务的运行状态，从而可以在任务失败时重新启动任务；</li><li>应用程序运行完成后，Client的SparkContext向RM申请注销并关闭自己.</li></ol><blockquote><p>Yarn-client与Yarn-cluster区别:</p><ol><li>Cluster模式下,Driver运行在AM中，用户提交作业后就可以关闭Client，作业会继续在Yarn上运行；</li><li>Client模式下，Driver运行在本地，AM仅负责向Yarn请求Executor，Client会和请求的Container通信调度Task运行；</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive存储与压缩</title>
      <link href="/2021/06/26/03-hadoop/hive/hive-cun-chu-wen-jian-ge-shi/"/>
      <url>/2021/06/26/03-hadoop/hive/hive-cun-chu-wen-jian-ge-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="Hive文件存储"><a href="#Hive文件存储" class="headerlink" title="Hive文件存储"></a>Hive文件存储</h2><p>Hive在存储数据时支持通过不同的文件类型来主职，并且为了节省存储资源，也提供了多种压缩算法供用户选择；在创建表时配置正确的文件类型和压缩类型，Hive都可以按照预期读取文件并解析数据，不影响上层HQL语句的使用。Hive默认支持的文件类型有：TextFile、SequenceFile、RCFile、ORC、Parquet及Avro；</p><p>压缩算法的编解码器</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210626010909849.png" alt="image-20210626010909849"><h3 id="TextFile"><a href="#TextFile" class="headerlink" title="TextFile"></a>TextFile</h3><p>TextFile即为文本格式,Hive的默认存储格式,数据不做压缩,磁盘开销大,数据解析开销大;</p><h3 id="SequenceFile"><a href="#SequenceFile" class="headerlink" title="SequenceFile"></a>SequenceFile</h3><p>SequenceFile是Hadoop提供的一种二进制文件格式,是Hadoop支持的标准文件格式,可直接将&lt;key,value&gt;对序列化到文件中,所以SequenceFile文件不能直接查看,但可以通过<code>hadoop fs -text</code>查看文件内容。具有使用方便，可分割、可压缩、可进行切片。支持NONE、RECORD、BLOCK（优先）等格式，可进行切片。</p><h3 id="RCFile"><a href="#RCFile" class="headerlink" title="RCFile"></a>RCFile</h3><p>大多数的Hadoop和Hive存储是行式存储，在大数据环境下比较高效，因为大多数的表具有的字段数量都不会太多，对文件按块压缩对于除妖处理重复数据的情况比较高效，同事处理和调试工具(more、head、awk)都能很好的使用行式存储的数据；但当用于数仓搭建时，需要操作的表字段可能成百上千，而单次操作的只是一小部分字段，这往往会造成很大的浪费；此时采取列式存储只操作需要的列，可以大大提高性能。</p><p>RCFile（Record Columnar File）存储结构遵循的是“先水平划分，再垂直划分”的设计理念，它结合了行存储和列存储的优点：首先，RCFile保证同一行 的数据位于同一节点，因此元组重构的开销很低；其次，像列存储一样，RCFile能够利用列维度的数据压缩，并且能跳过不必要的列读取。</p><h3 id="ORC"><a href="#ORC" class="headerlink" title="ORC"></a>ORC</h3><p>ORC是对RCFile的优化，可以提高Hive的读、写、数据处理性能，提供更高的压缩效率。和RCFile格式相比，ORC具有以下有点：</p><ul><li>每个task只输出单个文件,减轻NN负载；</li><li>支持复杂数据类型，比如：datetime、decimal以及复杂类型（struct、list、map、union）</li><li>文件存储了轻量级索引数据；</li><li>基于数据类型的块模式压缩：integer类型的列使用行程长度编码；string类型的列用字典编码；</li><li>用多个互相独立的RecordReader并行读取相同的文件；</li><li>无需扫描makers就可以分割文件；</li><li>绑定读写所需要的内存；</li><li>metadata的存储是用的Protocol Buffers，支持添加和删除列；</li></ul><h3 id="Parquet"><a href="#Parquet" class="headerlink" title="Parquet"></a>Parquet</h3><p>Parquet格式是一种面向分析型的列式存储格式，由Twitter和Cloudera合作开发，目前为Apache孵化的定级项目；</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>可跳过不符合条件的数据，只读取需要的数据，降低IO数据量；</li><li>压缩编码可以降低磁盘存储空间（由于同一列的数据类型是一样的，可以使用高效的压缩编码进一步节约存储空间）</li><li>只读取需要的列，支持向量运算，能够获取更好的扫描性能</li><li>Spark SQL支持的默认数据源</li><li>支持Schematic合并，可以先定义一个简单的schema，然后主键增加列描述</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive性能调优</title>
      <link href="/2021/06/25/03-hadoop/hive/hive-xing-neng-diao-you/"/>
      <url>/2021/06/25/03-hadoop/hive/hive-xing-neng-diao-you/</url>
      
        <content type="html"><![CDATA[<h2 id="调优须知"><a href="#调优须知" class="headerlink" title="调优须知"></a>调优须知</h2><p>Hive是一个常用的大数据组件，影响它的性能的从来都不是数据量过大问题，而是数据倾斜、MR分配不合理、IO瓶颈等；所以，我们可以从HIve的模型设计、Hive SQL优化、参数调优、MR调优等几个方向进行优化；</p><ol><li>Hive SQL最终会转换为MR进行运行，了解转换逻辑，进行SQL优化，减少生成的Job数量； </li><li>启用mapper阶段的局部聚合和二次聚合优化统计分析函数造成的数据倾斜问题；</li><li>设置合并的MR并行度；</li><li>选择合适的建表设计；</li><li>尽量使用group by替代count(distinct)；</li></ol><h2 id="建表设计优化"><a href="#建表设计优化" class="headerlink" title="建表设计优化"></a>建表设计优化</h2><p>Hive表可以分为内部表、外部表、分区表、分桶表，其中内部表与外部表只是主数据的管理方式不同，在性能上没有区别；</p><h3 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h3><p>分区表就是根据用户指定的维度（分区键）对数据进行分类存储，一个分区对应一个HDFS目录，当按照分区过滤查询时，Hive会直接读取对应分区目录数据，减少处理数据量；所以一张表大部分情况下都是使用某个字段进行过滤的话，建议以改字段为分区键进行模型重构；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> poc<span class="token punctuation">.</span>demo<span class="token punctuation">(</span>  id <span class="token keyword">int</span><span class="token punctuation">,</span>  name string<span class="token punctuation">)</span> partitioned <span class="token keyword">by</span> <span class="token punctuation">(</span>month_id string<span class="token punctuation">)</span>  <span class="token comment">--指定分区键为month_id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h3><p>分桶与分区概念稍微有些不同，它是将数据已制定列的值作为key进行hash到指定目的桶中，每个桶对应一个HDFS上的数据文件，目的也是避免遍历全表数据；分桶表Join优化的前提条件是：</p><ol><li>参与Join的表都是分桶表；</li><li>两表分桶的key为join的关联键；</li><li>两表的分桶数量为倍数关系；</li></ol><p>优点:</p><ol><li>分桶表间join可自动转换为map-side join;</li><li>取样sample操作更高效,不需要扫描完整数据集;</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> poc<span class="token punctuation">.</span>demo_bucket<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token punctuation">,</span>   name string<span class="token punctuation">)</span> <span class="token keyword">clustered</span> <span class="token keyword">by</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> sorted <span class="token keyword">by</span> <span class="token punctuation">(</span>id <span class="token keyword">asc</span><span class="token punctuation">)</span>  <span class="token keyword">into</span> <span class="token number">4</span> buckets<span class="token punctuation">;</span><span class="token comment">--clustered by 指定分桶的键及分桶个数</span><span class="token comment">--sorted by 指定桶内排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合适的存储格式"><a href="#合适的存储格式" class="headerlink" title="合适的存储格式"></a>合适的存储格式</h3><p>Hive建表默认的存储格式为Textfile，当创建宽表(字段特别多)时，尽量使用orc、parquet等列存格式；</p><blockquote><p>行存格式：典型代表为Textfile，每次进行数据读取时，必须读取该行全部数据后再进行剪裁；</p><p>列存格式：代表类型为parquet，自带schema及index信息，可直接读取指定列数据；</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> poc<span class="token punctuation">.</span>demo_parquet<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token punctuation">,</span>name string<span class="token punctuation">)</span> stored <span class="token keyword">as</span> parquet<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合适的压缩格式"><a href="#合适的压缩格式" class="headerlink" title="合适的压缩格式"></a>合适的压缩格式</h3><p>使用压缩算法，本质上是通过牺牲CPU换区减少磁盘及网络IO，所以压缩算法的选择需要判断任务是否为IO密集型任务，决定是否启用压缩算法；</p><p>压缩算法的选择主要从压缩率、压缩速率、是否可拆分来判断。一个文件被压缩之后会变成类似<code>header + body</code>形式，其中<code>header</code>存放元数据信息，记录数据压缩前后的大小及压缩的算法等信息；<code>body</code>存储实际数据；是否可拆分是指<code>header</code>的元数据信息，在原来的真实数据被切分之后，会不会给每个切分的块都保留一个<code>header</code>，避免切分后无法进行解压缩问题；</p><p>常用压缩格式对比如下：</p><table><thead><tr><th align="center">压缩格式</th><th align="center">是否可拆分</th><th align="center">压缩率</th><th align="center">压缩速度</th><th align="center">Hadoop是否内置</th></tr></thead><tbody><tr><td align="center">gzip</td><td align="center">否</td><td align="center">中</td><td align="center">中</td><td align="center">是</td></tr><tr><td align="center">lzo</td><td align="center">是</td><td align="center">低</td><td align="center">高</td><td align="center">是</td></tr><tr><td align="center">snappy</td><td align="center">否</td><td align="center">低</td><td align="center">高</td><td align="center">是</td></tr><tr><td align="center">bzip2</td><td align="center">是</td><td align="center">高</td><td align="center">低</td><td align="center">否</td></tr></tbody></table><h4 id="启用MR临时文件压缩"><a href="#启用MR临时文件压缩" class="headerlink" title="启用MR临时文件压缩"></a>启用MR临时文件压缩</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- mr临时文件启用gzip压缩</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>output<span class="token punctuation">.</span>fileoutputformat<span class="token punctuation">.</span>compress<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">--启用压缩，默认为false</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>output<span class="token punctuation">.</span>fileoutputformat<span class="token punctuation">.</span>compress<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token operator">=</span>BLOCK  <span class="token comment">--按block压缩，默认为record</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>output<span class="token punctuation">.</span>fileoutputformat<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>codec<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>GzipCodec  <span class="token comment">--指定压缩算法，默认为org.apache.hadoop.io.compress.DefaultCodec</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Map端输出结果压缩"><a href="#Map端输出结果压缩" class="headerlink" title="Map端输出结果压缩"></a>Map端输出结果压缩</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>map<span class="token punctuation">.</span>output<span class="token punctuation">.</span>compress<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">--启用map端输出压缩</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>map<span class="token punctuation">.</span>output<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>codec<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>GzipCodec<span class="token punctuation">;</span> <span class="token comment">--指定map端输出结果压缩算法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Hive任务输出压缩"><a href="#Hive任务输出压缩" class="headerlink" title="Hive任务输出压缩"></a>Hive任务输出压缩</h4><p>包括Hive任务生成的临时文件和最终落库的结果文件都启用压缩;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>compress<span class="token punctuation">.</span>output<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">--启用Hive输出文件压缩  默认为false;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>compress<span class="token punctuation">.</span>intermediate<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">--设置转换的mr任务启用压缩,默认为false;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="HQL优化"><a href="#HQL优化" class="headerlink" title="HQL优化"></a>HQL优化</h2><p>HQL可通过执行计划了解其具体的转换过程；</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">explain [extended]  hql  --extended关键字可打印更详细执行计划<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="列剪裁与分区剪裁"><a href="#列剪裁与分区剪裁" class="headerlink" title="列剪裁与分区剪裁"></a>列剪裁与分区剪裁</h3><p>列剪裁是指Hive在进行查询时只读取需要的列，分区剪裁是指读取需要的分区；HQL编写时尽量指定需要查询的列，针对分区表使用分区键进行数据过滤；剪裁的目的是节省数据读取开销：中间表存储开销及数据整合开销；</p><p>在HQL解析阶段对应的是ColumnPruner逻辑优化器；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">optimize</span><span class="token punctuation">.</span>cp<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">--开启列剪裁,默认为true</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">optimize</span><span class="token punctuation">.</span>pruner<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">--开启分区剪裁，默认为true；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>列剪裁配合列式存储文件会有较好的优化效果;</p></blockquote><h3 id="谓词下推"><a href="#谓词下推" class="headerlink" title="谓词下推"></a>谓词下推</h3><p>所谓的谓词下推，是将任务中的数据过滤行为，下发到计算节点进行操作；尽可能将HQL中的<code>where</code>谓词逻辑尽可能提前执行，减少下游处理的数据量。</p><p>在HQL解析阶段对应的是PredicatePushDown；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">optimize</span><span class="token punctuation">.</span>ppd<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">--启用谓词下推；</span><span class="token comment">-- query1  自动谓词下推</span><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> a <span class="token keyword">join</span> b <span class="token keyword">on</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id <span class="token keyword">where</span> b<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">--query2  手动谓词下推</span><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> a <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span>  <span class="token operator">*</span> <span class="token keyword">from</span> b <span class="token keyword">where</span> age<span class="token operator">&gt;</span><span class="token number">20</span> <span class="token punctuation">)</span> c <span class="token keyword">on</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并小文件"><a href="#合并小文件" class="headerlink" title="合并小文件"></a>合并小文件</h3><h4 id="Map端输入合并"><a href="#Map端输入合并" class="headerlink" title="Map端输入合并"></a>Map端输入合并</h4><p>在执行mr程序的时候,一般情况下是一个文件的一个数据分块需要一个MapTask来处理。但如果数据源是大量的小文件，就会启动大量的MapTask，这样将导致大量资源浪费（占用队列大量资源，启动container耗费时间）。可以在输入时将小文件进行合并，从而减少MapTask任务数量。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>input<span class="token punctuation">.</span>format<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ConbineHiveInputFormat<span class="token punctuation">;</span>  <span class="token comment">--启用map端输入合并小文件,默认为TextInputFormat</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Map-Reduce输出合并"><a href="#Map-Reduce输出合并" class="headerlink" title="Map/Reduce输出合并"></a>Map/Reduce输出合并</h4><p>小文件过多将会给HDFS带来极大压力，且影响后续任务执行效率。可以通过合并Map和Reduce的结果文件来消除影响；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">merge</span><span class="token punctuation">.</span>mapfiles<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">--启用map端输出文件合并,默认为true</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">merge</span><span class="token punctuation">.</span>mapredfiles<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">--启用reduce端输出文件合并，默认为false</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>input<span class="token punctuation">.</span>format<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ConbineHiveInputFormat<span class="token punctuation">;</span>  <span class="token comment">--启用map端输入合并小文件,默认为TextInputFormat</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>input<span class="token punctuation">.</span>fileinputformat<span class="token punctuation">.</span>split<span class="token punctuation">.</span>maxsize<span class="token operator">=</span><span class="token number">256000000</span><span class="token punctuation">;</span>  <span class="token comment">--定义每个map处理的最大分片大小，单位为Byte   优先级最低</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>input<span class="token punctuation">.</span>fileinputformat<span class="token punctuation">.</span>split<span class="token punctuation">.</span>minsize<span class="token operator">=</span><span class="token number">256000000</span><span class="token punctuation">;</span>  <span class="token comment">--定义每个map处理的最小分片大小，单位为Byte  优先级低</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>min<span class="token punctuation">.</span>split<span class="token punctuation">.</span>size<span class="token punctuation">.</span>per<span class="token punctuation">.</span>node<span class="token operator">=</span><span class="token number">10000000</span><span class="token punctuation">;</span>  <span class="token comment">--定义节点可以处理的最小分片大小，单位为Byte，小于该参数文件将暂存，用于节点间分片合并   优先级中</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>min<span class="token punctuation">.</span>split<span class="token punctuation">.</span>size<span class="token punctuation">.</span>per<span class="token punctuation">.</span>rack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">--定义机架可以处理的最小分片大小，单位为Byte ，小于该参数文件暂存，用于机架分片合并   优先级高</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">merge</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>per<span class="token punctuation">.</span>task<span class="token operator">=</span><span class="token number">256000000</span><span class="token punctuation">;</span>  <span class="token comment">--定义任务合并文件大小上限,默认256M</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">merge</span><span class="token punctuation">.</span>smallfiles<span class="token punctuation">.</span>avgsize<span class="token operator">=</span><span class="token number">256000000</span><span class="token punctuation">;</span>  <span class="token comment">--当输出文件平均大小小于该值时，启动一个独立的mr进行文件合并；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上限：mapreduce.input.fileinputformat.split.maxsize</p><p>下限：mapreduce.input.fileinputformat.split.minsize</p><p>块大小：dfs.block.size</p><p>splitSize = Math.max(minSize, Math.min(maxSize, blockSize))</p><p>splitSize最好与blockSize一致</p></blockquote><p><code>Map</code>读取文件流程如下:</p><ol><li>根据任务参数计算<code>splitSize</code>大小;</li><li>获取输入目录下每个文件的大小,按照<code>splitSize</code>进行切片,切分剩余部分小于<code>splitSize</code>,但<code>mapred.min.split.size.per.node</code>,则直接生成一个切片,否则暂时保留；</li><li>将不同节点下的保留碎片各自进行合并，长度超过<code>splitSize</code>就合并成一个切片，最后剩下的部分比<code>mapred.min.split.size.per.rack</code>大，则生成一个切片，否则暂时保留；</li><li>将不同rack下的所有保留碎片，长度超过<code>splitSize</code>就合并成一个切片，剩下碎片合并成一个切片；</li></ol><h4 id="合理设置MapTask并行度"><a href="#合理设置MapTask并行度" class="headerlink" title="合理设置MapTask并行度"></a>合理设置MapTask并行度</h4><p>根据业务逻辑增加或减少MapTask的数量，可显著提升任务的执行效率；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--增加map并行度</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>reduce<span class="token punctuation">.</span>tasks<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">--仅适用于增加map数时使用，且需大于默认值时使用（默认值为2）</span><span class="token comment">--降低map并行度</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>max<span class="token punctuation">.</span>split<span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">256000000</span><span class="token punctuation">;</span>        <span class="token comment">-- 决定每个map处理的最大的文件大小，单位为B</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>min<span class="token punctuation">.</span>split<span class="token punctuation">.</span>size<span class="token punctuation">.</span>per<span class="token punctuation">.</span>node<span class="token operator">=</span><span class="token number">256000000</span><span class="token punctuation">;</span>         <span class="token comment">-- 节点中可以处理的最小的文件大小</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>min<span class="token punctuation">.</span>split<span class="token punctuation">.</span>size<span class="token punctuation">.</span>per<span class="token punctuation">.</span>rack<span class="token operator">=</span><span class="token number">256000000</span><span class="token punctuation">;</span>          <span class="token comment">-- 机架中可以处理的最小的文件大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合理设置ReduceTask并行度"><a href="#合理设置ReduceTask并行度" class="headerlink" title="合理设置ReduceTask并行度"></a>合理设置ReduceTask并行度</h4><p>ReduceTask并行度过大将导致产生大量小文件,且初始化容器会耗费大量资源及时间;并行度过小将导致整个查询耗时延长,且容易触发数据倾斜;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--根据数据量设置ReduceTask并发</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>reducers<span class="token punctuation">.</span>max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token comment">--设置ReduceTask上限</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>reducers<span class="token punctuation">.</span>bytes<span class="token punctuation">.</span>per<span class="token punctuation">.</span>reducer<span class="token operator">=</span><span class="token number">256000000</span><span class="token punctuation">;</span>  <span class="token comment">--设置单个reduce数据数据量</span><span class="token comment">--直接指定ReduceTask并行度</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>job<span class="token punctuation">.</span>reduces <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Join优化"><a href="#Join优化" class="headerlink" title="Join优化"></a>Join优化</h3><h4 id="常规优化"><a href="#常规优化" class="headerlink" title="常规优化"></a>常规优化</h4><ol><li><p>先过滤在 进行join操作,最大限度减少参与join的数据量;</p></li><li><p>小表join大表,最好启用mapjoin,hive自动启用mapjoin;(Hive自动启用mapjoin对于限制小表大小不超过25M)</p></li><li><p>多表join时,尽量使用相同字段进行链接,此时会转换为同一个job;</p></li><li><p>尽量避免一个SQL包含复杂逻辑，可通过中间表来实现复杂逻辑；</p></li><li><p>尽量避免数据倾斜；</p><ol><li>空key过滤：当业务场景中存在大量空key且不影响join结果数据时，可直接过滤掉空值后再进行join；</li><li>空key转换：当业务场景中空key数据过多，且需包含在join结果中时，我们可以将key为空的字段赋予一个随机值，使数据随机分散至所有reducer中，避免数据倾斜；</li></ol></li></ol><h4 id="MapJoin"><a href="#MapJoin" class="headerlink" title="MapJoin"></a>MapJoin</h4><p>MapJoin是将join中较小的表直接分发到各个MapTask的内存中，在map中直接进行join，不需要进行reduce，从而提升效率；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--指定启用mapJoin</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>auto<span class="token punctuation">.</span><span class="token keyword">convert</span><span class="token punctuation">.</span><span class="token keyword">join</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapjoin<span class="token punctuation">.</span>smalltable<span class="token punctuation">.</span>filesize<span class="token operator">=</span><span class="token number">25000000</span><span class="token punctuation">;</span><span class="token comment">--根据表大小 common join自动转换为map join，将小表刷入内存</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>auto<span class="token punctuation">.</span><span class="token keyword">convert</span><span class="token punctuation">.</span><span class="token keyword">join</span><span class="token punctuation">.</span>noconditionaltask<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>auto<span class="token punctuation">.</span><span class="token keyword">convert</span><span class="token punctuation">.</span><span class="token keyword">join</span><span class="token punctuation">.</span>noconditionaltask<span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">25000000</span><span class="token punctuation">;</span><span class="token comment">--显示指定mapjoin</span><span class="token keyword">select</span> <span class="token comment">/*MAPJOIN(b)*/</span>  b<span class="token punctuation">.</span><span class="token keyword">key</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token keyword">from</span> a <span class="token keyword">join</span> b <span class="token keyword">on</span> a<span class="token punctuation">.</span><span class="token keyword">key</span><span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token keyword">key</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SMB-Join"><a href="#SMB-Join" class="headerlink" title="SMB Join"></a>SMB Join</h4><p>SMB Join即Sort-Merge-Bucket Map Join,使用前提为所有表均为分桶表且排序;</p><ol><li><p>参与join的表需针对相同key做hash散列,桶内排序;</p></li><li><p>两个桶的个数需为倍数关系;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--smb join不能执行时,自动终止</span><span class="token keyword">set</span>  hive<span class="token punctuation">.</span>enforce<span class="token punctuation">.</span>sortmergebucketmapjoin<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">--是否自动转换为smb join</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>auto<span class="token punctuation">.</span><span class="token keyword">convert</span><span class="token punctuation">.</span>sortmerge<span class="token punctuation">.</span><span class="token keyword">join</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">--关联键是分桶键时,是否启用mapjoin</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">optimize</span><span class="token punctuation">.</span>bucketmapjoin<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">--bucket map join优化启用</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">optimize</span><span class="token punctuation">.</span>bucketmapjoin<span class="token punctuation">.</span>sortedmerge<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="Join数据倾斜优化"><a href="#Join数据倾斜优化" class="headerlink" title="Join数据倾斜优化"></a>Join数据倾斜优化</h4><p>查询语句确认存在数据倾斜时,可以通过参数自动进行二次优化;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--启用自动均衡</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">optimize</span><span class="token punctuation">.</span>skewjoin<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">--关联键值记录数超过阈值启用自动均衡</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>skewjoin<span class="token punctuation">.</span><span class="token keyword">key</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token comment">--配置自动均衡第二个job的mapper数量</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>skewjoin<span class="token punctuation">.</span>mapjoin<span class="token punctuation">.</span>map<span class="token punctuation">.</span>tasks <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CBO优化"><a href="#CBO优化" class="headerlink" title="CBO优化"></a>CBO优化</h4><p>CBO即成本优化器，代价最小的执行计划即为最优的执行计划。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>cbo<span class="token punctuation">.</span><span class="token keyword">enable</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">compute</span><span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token keyword">using</span><span class="token punctuation">.</span>stats<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>stats<span class="token punctuation">.</span><span class="token keyword">fetch</span><span class="token punctuation">.</span><span class="token keyword">column</span><span class="token punctuation">.</span>stats<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>stats<span class="token punctuation">.</span><span class="token keyword">fetch</span><span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token punctuation">.</span>stats<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="笛卡尔积配置"><a href="#笛卡尔积配置" class="headerlink" title="笛卡尔积配置"></a>笛卡尔积配置</h4><p>可默认关闭笛卡尔积,避免错误SQL影响集群稳定，需要使用笛卡尔积时，添加参数显示开启；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span><span class="token keyword">mode</span><span class="token operator">=</span>strict<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Group-By优化"><a href="#Group-By优化" class="headerlink" title="Group By优化"></a>Group By优化</h4><h5 id="Map端聚合"><a href="#Map端聚合" class="headerlink" title="Map端聚合"></a>Map端聚合</h5><p>并不是所有的聚合操作都需要在Reduce中进行，如果支持可在Map端进行部分聚合，然后在Reduce端得出最终结果；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--开启map端聚合</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>map<span class="token punctuation">.</span>aggr<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">--配置map端聚合记录预置,超过就进行拆分</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>groupby<span class="token punctuation">.</span>mapaggr<span class="token punctuation">.</span>checkinterval<span class="token operator">=</span><span class="token number">200000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Groupby负载均衡"><a href="#Groupby负载均衡" class="headerlink" title="Groupby负载均衡"></a>Groupby负载均衡</h5><p>当HQL使用<code>group by</code>出现数据倾斜时，启用参数Hive自动进行负载均衡。策略为将MapReduce任务拆分为两个：预汇总，最终汇总；</p><ol><li>预汇总：在第一个MapReduce中，map的输出结果会随机分布到reduce中，每个reduce做部分聚合操作，并输出结果，这样处理的结果是相同的key可能分布到不同的reduce中，达到负载均衡的目的；</li><li>最终汇总：第二个MapReduce中任务再根据预处理数据按照group by key分布到各个reduce中，完成最终的聚合操作；</li></ol><h5 id="Order-By优化"><a href="#Order-By优化" class="headerlink" title="Order By优化"></a>Order By优化</h5><p><code>order by</code>为全局排序，只能在一个reduce中进行，当对一个大数据集进行<code>order by</code>，会导致一个reduce进程处理大量的数据，造成查询执行缓慢甚至OOM；</p><ol><li><p>在最终结果上进行<code>order by</code>，尽量不在中间数据集上进行排序。最终结果数据较少，能够缓解性能问题；</p></li><li><p>提取<code>Top N</code>结果，可使用<code>distribute by</code> + <code>sort by</code>在各个reduce上排序后，取<code>Top N</code>，然后再合并到一个Reduce中进行全局排序，再取<code>Top N</code>，能够大幅提升效率；</p><blockquote><p>order by：全局排序，缺陷为只能使用一个reduce；</p><p>sort by：单点排序，单个reduce中结果有序；</p><p>cluster by：对同一字段分桶并排序，不能与sort by连用；</p><p>distribute by：分桶，保证同一字段只存在同一个结果文件中，可结合sort by保证每个reduceTask内结果有序；</p></blockquote></li></ol><h5 id="Count-Distinct优化"><a href="#Count-Distinct优化" class="headerlink" title="Count Distinct优化"></a>Count Distinct优化</h5><p>当需要统计某一列去重数据时，如果数据量大，<code>count(distinct)</code>会非常慢，原理与<code>order by</code>类似，建议通过<code>group by</code>进行改写；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--优化前</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> id<span class="token punctuation">)</span> <span class="token keyword">from</span> demo<span class="token punctuation">;</span>  <span class="token comment">--只有一个reduce</span><span class="token comment">--优化后</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> demo <span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Left-semi-join"><a href="#Left-semi-join" class="headerlink" title="Left semi join"></a>Left semi join</h5><p>使用left semi join替代exists/in语法；</p><h5 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h5><p>可根据业务需要启用map输出压缩、中间数据压缩及结果数据压缩等；</p><ol><li><p>map输出压缩</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>map<span class="token punctuation">.</span>output<span class="token punctuation">.</span>compress<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>map<span class="token punctuation">.</span>output<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>codec<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>SnappyCodec<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>中间数据压缩（HIve查询多个job间输出数据）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>compress<span class="token punctuation">.</span>intermediate<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>intermediate<span class="token punctuation">.</span>compression<span class="token punctuation">.</span>codec<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>SnappyCodec<span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>intermediate<span class="token punctuation">.</span>compression<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token operator">=</span>BLOCK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>结果数据压缩</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>compress<span class="token punctuation">.</span>output<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>output<span class="token punctuation">.</span>fileoutputformat<span class="token punctuation">.</span>compress<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>output<span class="token punctuation">.</span>fileoutputformat<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>codec<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>GzipCodec<span class="token punctuation">;</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>output<span class="token punctuation">.</span>fileoutputformat<span class="token punctuation">.</span>compress<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token operator">=</span>BLOCK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Hadoop默认支持的压缩算法：</p><p>org.apache.hadoop.io.compress.DefaultCodec</p><p>org.apache.hadoop.io.compress.GzipCodec</p><p>org.apache.hadoop.io.compress.BZip2Codec</p><p>org.apache.hadoop.io.compress.DeflateCodec</p><p>org.apache.hadoop.io.compress.SnappyCodec</p><p>org.apache.hadoop.io.compress.Lz4Codec</p><p>com.hadoop.compression.lzo.LzoCodec</p><p>com.hadoop.compression.lzo.LzopCodec</p></blockquote></li></ol><h2 id="Hive架构优化"><a href="#Hive架构优化" class="headerlink" title="Hive架构优化"></a>Hive架构优化</h2><h3 id="启用本地抽样"><a href="#启用本地抽样" class="headerlink" title="启用本地抽样"></a>启用本地抽样</h3><ol><li><p>部分HQL在转换过程中会进行优化，不用转换成MR任务；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--只有select * 的语句</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> demo<span class="token comment">--针对分区过滤筛选</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  demo <span class="token keyword">where</span> dt<span class="token operator">=</span><span class="token string">'202106'</span><span class="token comment">--带有limit分支语句</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> demo <span class="token keyword">limit</span> <span class="token number">10</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Hive读取HDFS数据有两种模式：MR读取和直接抓取。直接抓取比MR读取性能要高很多，但只有少数操作支持直接抓取。可通过参数配置启用情况；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- minimal：至于场景1情况的三种情况启用直接抓取；</span><span class="token comment">-- more: 在select、where筛选及limit场景时，都启用直接抓取；</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">fetch</span><span class="token punctuation">.</span>task<span class="token punctuation">.</span>conversion<span class="token operator">=</span>minimal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="本地执行优化"><a href="#本地执行优化" class="headerlink" title="本地执行优化"></a>本地执行优化</h3><p>Hive在集群上查询时,默认在集群的多个节点运行,需要在多个节点进行协调运行.但在HIve查询处理的数据量比较小的时候,其实没有必要启动分布式执行,可通过本地模式,在单节点处理所有任务,执行时间会明显缩短.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--自动判断是否启用本地模式</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span><span class="token keyword">mode</span><span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">-- map任务最大值,超过则启用分布式</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span><span class="token keyword">mode</span><span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token punctuation">.</span>input<span class="token punctuation">.</span>files<span class="token punctuation">.</span>max<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">-- map输入文件最大大小,超过则启用分布式</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span><span class="token keyword">mode</span><span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token punctuation">.</span>inputbytes<span class="token punctuation">.</span>max<span class="token operator">=</span><span class="token number">128000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上参数即task数量小于6,单个文件大小小于128M则启用本地模式执行；</p><h3 id="JVM重用"><a href="#JVM重用" class="headerlink" title="JVM重用"></a>JVM重用</h3><p>HQL语句最终会转换为一系列的MR任务，每个Task都会启动一个JVM进程，Task执行结束，JVM就会推出。下一个MR又需要花费大量时间启用JVM，而JVM的启动与销毁会变成一个非常大的消耗，可以通过JVM重用来解决；</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">set mapred.job.reuse.jvm.num.tasks=10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>开启JVM重用会一直占用使用到的Task插槽，一遍进行重用，知道任务完成后才会释放。如果某个Job存在数据倾斜，将导致大量JVM空闲无法被其他Job使用，直到所有task都结束才会释放；</p></blockquote><h3 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h3><p>部分查询语句，Hive会将其转化为一个或多个阶段，包括：MR、抽样、合并、limit等。默认情况下，一次只执行一个阶段，如果某些阶段不存在依赖，则可以并行执行，但多阶段并行将导致资源消耗明显增加；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--启用并行</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>parallel<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">--定义sql最大并行度</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>parallel<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="推测执行"><a href="#推测执行" class="headerlink" title="推测执行"></a>推测执行</h3><p>分布式环境下,因为程序Bug、负载不均衡、资源分布不均等情况，都会造成同一个作业的多个任务之间运行速度不一致，部分任务可能会拖慢整体执行进度。为避免这种情况，Hadoop采用了推测执行机制，根据一定的算法推测出“拖后腿”任务，并为这样的任务启用一个备份任务，让该任务与原始任务同时执行，并最终选中最先成功运行完成任务的计算结果作为最终结果。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- mapper阶段启用推测执行</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>map<span class="token punctuation">.</span>speculative<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">--reducer阶段启用推测执行</span><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>reduce<span class="token punctuation">.</span>speculative<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当任务处理的数据量非常大时,推测执行将早场严重的资源浪费;</p></blockquote><h3 id="Hive严格模式"><a href="#Hive严格模式" class="headerlink" title="Hive严格模式"></a>Hive严格模式</h3><p>所谓严格模式,就是强制不允许用户执行有风险的HQL语句，一旦执行直接失败；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--启用严格模式</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span><span class="token keyword">mode</span><span class="token operator">=</span>strict<span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token punctuation">.</span><span class="token keyword">mode</span><span class="token operator">=</span>nostrict<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>启用严格模式后,存在以下限制:</p><ol><li>对于分区表必须添加<code>where</code>分区字段条件过滤;</li><li><code>order by</code>语句必须与<code>limit</code>组合使用，限制输出；</li><li>限制笛卡尔积查询；</li><li>动态分区模式下，必须制定一个分区列为静态分区；</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparkCore性能调优</title>
      <link href="/2021/06/25/03-hadoop/spark/sparkcore-xing-neng-diao-you/"/>
      <url>/2021/06/25/03-hadoop/spark/sparkcore-xing-neng-diao-you/</url>
      
        <content type="html"><![CDATA[<h2 id="SparkCore十大开发原则"><a href="#SparkCore十大开发原则" class="headerlink" title="SparkCore十大开发原则"></a>SparkCore十大开发原则</h2><h3 id="避免创建重复的RDD"><a href="#避免创建重复的RDD" class="headerlink" title="避免创建重复的RDD"></a>避免创建重复的RDD</h3><p>对于同一份数据，只应该创建一个RDD，避免Spark作业多次重复计算来创建多个代表相同数据的RDD，增加作业的性能开销；</p><h3 id="尽可能复用同一个RDD"><a href="#尽可能复用同一个RDD" class="headerlink" title="尽可能复用同一个RDD"></a>尽可能复用同一个RDD</h3><p>多个RDD的数据有重叠或包含关系时，应该尽量复用一个RDD，这样能够尽可能的减少RDD的数量，从而减少算子执行的次数。因为RDD如果不进行缓存，每次都会从头开始计算；</p><h3 id="对多次使用的RDD进行持久化"><a href="#对多次使用的RDD进行持久化" class="headerlink" title="对多次使用的RDD进行持久化"></a>对多次使用的RDD进行持久化</h3><p>对于持久化的RDD，spark会根据持久化策略，将RDD的数据保存到内存或磁盘中，后续对这个RDD进行算子操作时，直接从内存或磁盘中提取持久化的数据，然后执行算子，而不会从头重新计算；</p><table><thead><tr><th>持久化策略</th><th>策略说明</th></tr></thead><tbody><tr><td>MEMORY_ONLY</td><td>使用未序列化的Java对象格式，将数据保存至内存中，如内存不足，则可能不进行持久化，对应cache()；</td></tr><tr><td>MEMORY_AND_DISK</td><td>使用为序列化的Java对象格式，优先将数据保存至内存中，如内存不足，则保存至硬盘中；</td></tr><tr><td>MEMORR_ONLY_SER</td><td>与MEMORY_ONLY基本一致，区别在于持久化时会对RDD中的数据进行序列化，每个partition会被序列化成一个字节数组；节省内存</td></tr><tr><td>MEMORY_AND_DISK_SER</td><td>与MEMORY_DISK_ONLY基本一致，区别在于持久化时会对RDD中的数据进行序列化，每个partition会被序列化成一个字节数组；节省内存</td></tr><tr><td>DISK_ONLY</td><td>使用为序列化的Java对象格式，将数据保存至硬盘中</td></tr><tr><td>MEMORY_ONLY_2,MEMORY_AND_DISK_2……</td><td>添加后缀<code>_2</code>, 表示将持久化的数据，都复制一份到其他节点，提升容错能力，其他与不带后缀策略一致；</td></tr></tbody></table><h3 id="尽量避免使用shuffle类算子"><a href="#尽量避免使用shuffle类算子" class="headerlink" title="尽量避免使用shuffle类算子"></a>尽量避免使用shuffle类算子</h3><p>spark作业最小号性能的地方就是shuffle过程。shuffle过程简单来讲，就是将分赛在集群不同节点上的相同key值，拉取到某一个节点上进行聚合或者join等操作；shuffle过程中，各节点上相同key数据都会先写入本地磁盘文件中，通过shuffle service服务开放给其他节点通过网络传输拉取对应key至本节点，同时shuffle操作也可能因为数据倾斜导致内存不足而溢写至本地磁盘；因此，shuffle操作会引发大量的磁盘及网络IO操作，而磁盘与网络IO正式目前大数据集群的瓶颈所在；</p><h3 id="尽量使用map-side预聚合"><a href="#尽量使用map-side预聚合" class="headerlink" title="尽量使用map-side预聚合"></a>尽量使用map-side预聚合</h3><p>所谓的map-side预聚合，是指在每个节点对相同key进行一次聚合操作，然后在进行shuffle；map-side预聚合之后，每个节点上相同key只会有一条记录，大大减少shuffle过程的性能开销；典型例子为reduceByKey与groupByKey；</p><h3 id="使用高性能算子"><a href="#使用高性能算子" class="headerlink" title="使用高性能算子"></a>使用高性能算子</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token number">1.</span> 使用reduceByKey、aggregateByKey代替groupByKey<span class="token number">2.</span> 使用mapPartitions替代map<span class="token number">3.</span> 使用foreachPartitions替代foreach<span class="token number">4.</span> 使用repartitionAndSortWithinPartitions替代repartition与sort类操作<span class="token number">5.</span> filter后在进行coalesce <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="广播大变量"><a href="#广播大变量" class="headerlink" title="广播大变量"></a>广播大变量</h3><p>使用外部变量时，默认情况下，spark会将该变量复制多个副本，通过网络传输到task中，此时每个task都会有一个变量副本。如果变量本身比较大的话，那么变量在网络传输中将产生大量开销，甚至Executor也会因为变量使用过多内存导致频繁GC，严重影响性能；</p><p>鉴于此类情况，通过spark的广播变量功能，对该变量进行广播后，保证每个Executor的内存中，只驻留一份变量副本，同一个Executor中的task共享该变量，大大减少变量副本，减少Executor内存开销及网络开销；</p><p>简单来说，就是将每个task一份的变量副本通过广播变量功能缩减为每个Executor一份变量副本；</p><h3 id="使用Kryo优化序列化性能"><a href="#使用Kryo优化序列化性能" class="headerlink" title="使用Kryo优化序列化性能"></a>使用Kryo优化序列化性能</h3><p>spark中主要有三个地方设计到了序列化：</p><ol><li>使用外部变量时，变量会被序列化后进行网络传输；</li><li>自定义类型作为RDD的泛型类型时，所有自定义类型对象，都会进行序列化；故要求所有自定义类都必须实现Serializable接口；</li><li>使用可序列化的持久化策略时，spark会将RDD中每个partition都序列化为一个大的字节数组；</li></ol><p>通过使用kryo序列化类型，可提升序列化性能10倍左右；</p><h3 id="优化数据结构"><a href="#优化数据结构" class="headerlink" title="优化数据结构"></a>优化数据结构</h3><p>Java中，有三种类型比较耗费内存：</p><ol><li>对象，每个Java对象都有对象头、引用等额外信息，因此比较占用内存空间；</li><li>字符串，每个字符串内部都有一个字符数组以及长度等额外信息；</li><li>集合类型，比如HashMap、LinkedList等，因为集合内部通常会使用一些内部类封装集合元素，比如Map.Entry；</li></ol><p>spark官方建议，在spark编码实现中，特别是对于算子函数中的代码，尽量不要使用以上三种数据类型，尽量使用字符串替代对象，使用原始类型（如int、long等）替代字符串，使用属组替代集合类型，尽可能减少内存占用，从而降低GC频率，提升性能；</p><p>优化建议：</p><ol><li>使用json替代对象，因为对象头额外消耗16个字节；</li><li>使用原始类型替代字符串，因为字符串额外消耗40个字节，比如能用1就不要用“1”；</li><li>尽量用数组代替集合类型；</li><li>优化需兼顾代码可读性与开发效率；</li></ol><h3 id="尽可能数据本地化"><a href="#尽可能数据本地化" class="headerlink" title="尽可能数据本地化"></a>尽可能数据本地化</h3><p>数据本地化是指数据离计算他的代码尽量缩短距离；基于数据距离代码的距离，可以分为以下几种数据本地化级别（由高至低）：</p><ol><li>PROCESS_LOCAL：数据与代码在同一个JVM进程中；</li><li>NODE_LOCAL：数据与代码在同一个节点，但不在同一个进程，如同一节点不同Executor中或在HDFS的block中；</li><li>NO_PREF：不关心数据位置，任何位置访问数据速度都一样；</li><li>RACK_LOCAL：数据与代码在同一个机架上；</li><li>ANY：数据可能在任何地方，如网络环境内，或其他机架上；</li></ol><p>对应超时参数为：</p><table><thead><tr><th>参数名</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>spark.locality.wait</td><td>3s</td><td>定义放弃高级别本地化任务等待超时时间</td></tr><tr><td>spark.locality.wait.node</td><td>spark.locality.wait</td><td>自定义本地节点任务等待时间，配置为0时，跳过节点位置立即搜索机架位置；</td></tr><tr><td>spark.locality.wait.process</td><td>spark.locality.wait</td><td>自定义本地进程任务等待时间</td></tr><tr><td>spark.locality.wait.rack</td><td>spark.locality.wait</td><td>自定义本地机架启动任务等待时间</td></tr></tbody></table><h2 id="内存模型调优"><a href="#内存模型调优" class="headerlink" title="内存模型调优"></a>内存模型调优</h2><h3 id="静态内存模型"><a href="#静态内存模型" class="headerlink" title="静态内存模型"></a>静态内存模型</h3><p>spark1.6之前使用静态内存模型，spark1.6开始，多增加了一个统一内存模型。通过<code>spark.memory.useLegacyMode</code>参数配置，默认值为<code>false</code>，即使用新型动态内存模型；使用静态内存模型，则调整参数值为<code>true</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 静态内存控制参数</span>spark.storage.memoryFraction:  <span class="token comment"># 默认0.6</span>spark.shuffle.memoryFraction:  <span class="token comment"># 默认0.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210628213216361.png" alt="image-20210628213216361"><p>静态内存模型的缺点：</p><p>当配置好了Storage和execution区域内存比例后，假设任务execution内存不足，但是storage内存区域存在空闲，但两者之间不能互相借用，不够灵活，所以才开发出新的统一内存模型；</p><h3 id="统一内存模型"><a href="#统一内存模型" class="headerlink" title="统一内存模型"></a>统一内存模型</h3><p>统一内存模型与静态内存管理模型的区别在于存储内存和执行内存共享同一块空间，可以动态占用对方的空闲区域，如图：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210628213731118.png" alt="image-20210628213731118"><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210628213936506.png" alt="image-20210628213936506"><p>其中最重要的优化在于动态占用机制，其规则如下：</p><ol><li>设定基本的存储内存和执行内存区域（spark.storage.storageFraction参数控制），该设定定义双方各自拥有的空间范围；</li><li>双方空间都不足时，则将数据存储到硬盘；若己方内存不足而对方空间空闲时，可借用对方空间；</li><li>执行内存的空间被对方占用后，可让对方将占用的部分数据转存至硬盘，然后“归还”借用的空间；</li><li>存储内存的空间被对方占用后，无法让对方“归还”，只能等待对方使用完毕后释放；</li></ol><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210628214611509.png" alt="image-20210628214611509"><p>统一内存管理机制，在 一定程度上提高了堆内核堆外内存资源的使用率，降低了开发者维护spark内存的难度。但存储内存空间过大将会导致频繁的FullGC，降低任务执行性能。</p><h2 id="资源调优"><a href="#资源调优" class="headerlink" title="资源调优"></a>资源调优</h2><h3 id="num-executors"><a href="#num-executors" class="headerlink" title="num-executors"></a>num-executors</h3><p>该参数用于设置spark作业总共要用多少个Executor进程来执行。</p><p>调优建议：配置为集群节点数量的1/10比较合适；</p><h3 id="executor-memory"><a href="#executor-memory" class="headerlink" title="executor-memory"></a>executor-memory</h3><p>该参数用于设置spark作业中每个Executor进程的内存。</p><p>调优建议：每个Executor进程内存设置为4G~8G较为合适；但是还需要考虑整个可用队列的资源情况；任务使用内存总大小最好不要超过队列的1/2，避免单个任务占用过多资源影响其他作业调度；</p><h3 id="executor-cores"><a href="#executor-cores" class="headerlink" title="executor-cores"></a>executor-cores</h3><p>该参数用于配置spark作业中每个Executor进程可用的CPU core数量。该参数决定了每个Executor进程并行执行task能力；每个CPU core同一时间只能执行一个task进程；</p><p>调优建议：Executor的CPU core数量设置为2~4个比较合适。单个任务申请的CPU core不要超过队列的1/2比较合适；另外，任务申请的CPU core与task数量比例保持在1:3较为 合适；</p><h3 id="driver-memory"><a href="#driver-memory" class="headerlink" title="driver-memory"></a>driver-memory</h3><p>该参数用于配置spark任务driver进程的内存大小；</p><p>调优建议：Driver内存一般不需要配置过大，1G到2G左右即可，但需注意不要使用collect算子将RDD数据拉取到driver上进行处理；</p><h3 id="spark-default-parallelism"><a href="#spark-default-parallelism" class="headerlink" title="spark.default.parallelism"></a>spark.default.parallelism</h3><p>该参数用于设置每个stage的默认task数量。该参数或直接影响spark作业性能；</p><p>调优建议：spark作业的默认task数量设置为500~1000个较为合适；如果不配置该参数，则会根据HDFS文件的block数量来设置task数量，一般task数量会偏少；</p><h3 id="spark-storage-memoryFraction"><a href="#spark-storage-memoryFraction" class="headerlink" title="spark.storage.memoryFraction"></a>spark.storage.memoryFraction</h3><p>该参数用于设置RDD持久化数据在Executor内存中的占比，默认为0.6；</p><p>调优建议：根据作业情况，如果有较多的RDD持久化操作，则该参数的值可以适当提高，保证持久化的数据能够容纳在内存中；如果作业shuffle类操作较多，而持久化操作较少，或者作业频繁GC，则建议调低该参数；</p><h3 id="spark-shuffle-memoryFraction"><a href="#spark-shuffle-memoryFraction" class="headerlink" title="spark.shuffle.memoryFraction"></a>spark.shuffle.memoryFraction</h3><p>该参数用于设置shuffle过程中一个task拉取到上个stage的task的输出，进行聚合操作时能够使用的Executor内存的比例，默认为0.2；即shuffle操作在进行聚合时，内存使用超出参数配置阈值，则将对于的数据溢写到磁盘文件中，会极大的降低性能；</p><p>调优建议：根据作业情况，如果RDD持久化操作较少，shuffle操作较多，建议降低持久化操作的内存占比，提高shuffle操作的内存占比，避免shuffle过程中数据过多时内存不足，作业频繁GC同样需要调低该参数；</p><h2 id="数据倾斜调优"><a href="#数据倾斜调优" class="headerlink" title="数据倾斜调优"></a>数据倾斜调优</h2><h3 id="数据倾斜症状"><a href="#数据倾斜症状" class="headerlink" title="数据倾斜症状"></a>数据倾斜症状</h3><ol><li>绝大多数的task执行非常快，个别task执行极慢；例如，一个作业总共1000个task，其中990+个task都在快速执行结束，剩余几个task持续运行；</li><li>原本能够正常执行的任务，某次运行突然爆出OOM异常，且重复运行仍然爆出OOM；</li></ol><h3 id="数据倾斜原理"><a href="#数据倾斜原理" class="headerlink" title="数据倾斜原理"></a>数据倾斜原理</h3><p>数据倾斜原理很简单：在进行shuffle的时候，将各个节点上相同的key拉取到各自节点上的一个task来进行处理，比如按照key进行聚合或join等操作，当某个key的数量特别大的话，就会发生数据倾斜；因此出现数据倾斜时，spark作业看起来会运行特别慢，甚至个别task会因处理的数据过大导致OOM；</p><h3 id="数据倾斜代码定位"><a href="#数据倾斜代码定位" class="headerlink" title="数据倾斜代码定位"></a>数据倾斜代码定位</h3><p>数据倾斜只会发生在shuffle过程中。常用且可能触发数据倾斜的算子主要有：distinct、groupByKey、reduceByKey、aggregateByKey、join、cogroup、repartition等；出现数据倾斜时，可能就是代码中使用了这些算子中的某一个所导致；</p><p>一个Application会生成多个Job，job根据action算子分割，每个job由多个stage组成，stage根据shuffle类算子界定，通过异常的task（处理数据量大、执行时间长）归属job及stage对应代码中的action及shuffle算子，定位触发数据倾斜的具体算子；</p><h3 id="数据倾斜的解决方案"><a href="#数据倾斜的解决方案" class="headerlink" title="数据倾斜的解决方案"></a>数据倾斜的解决方案</h3><h4 id="1-Hive-ETL预处理"><a href="#1-Hive-ETL预处理" class="headerlink" title="1. Hive ETL预处理"></a>1. Hive ETL预处理</h4><p>适用于HIve表中的数据本身不均匀，且业务场景需要频繁使用Spark对Hive表进行统计分析；可以将费时或需要进行多表join的操作在凌晨提前进行处理，这样在业务场景的spark作业中就可以避免原来的shuffle类操作，提升作业效率；</p><h4 id="2-过滤少数导致倾斜的key"><a href="#2-过滤少数导致倾斜的key" class="headerlink" title="2. 过滤少数导致倾斜的key"></a>2. 过滤少数导致倾斜的key</h4><p>如果可以判断作业中存在少数几个数据量特别多的key，且不影响最终计算结果的话，那么可以先进行数据过滤；但无法作为通用逻辑应用于所有任务；</p><h4 id="3-提高shuffle并行度"><a href="#3-提高shuffle并行度" class="headerlink" title="3. 提高shuffle并行度"></a>3. 提高shuffle并行度</h4><p>增加shuffle read task的数量，可以让原本分配给一个task的key分配给多个task，从而让每个task处理的数据量减少，但如果出现极端情况，数据大量倾斜至一个key，提高并行度仍然无法解决数据倾斜问题；</p><h4 id="4-两阶段聚合"><a href="#4-两阶段聚合" class="headerlink" title="4. 两阶段聚合"></a>4. 两阶段聚合</h4><p>对rdd执行reduceByKey等聚合类shuffle算子或Spark SQL使用group by语句进行分组聚合时，比较使用此方案；</p><p>实现思路为进行两阶段聚合：</p><ol><li>第一次是局部聚合，先给每个key拼接一个随机数，将原来可能存在倾斜的key重新进行分布；比如(hello,1)(hello,1)(hello,1)变成(1_hello,1)(2_hello,1)(2_hello,1)</li><li>对重新生成的key进行reduceByKey等聚合操作，进行局部聚合，结果为(1_hello,1)(2_hello,2)</li><li>对生成结果剔除拼接随机数，结果为(hello,1)(hello,2)</li><li>再次进行全局聚合，即可获取最终结果(hello,3)</li></ol><p>此方案仅适用于聚合类shuffle操作，使用范围相对较窄，对于join类的shuffle操作，需使用其他方案；</p><h4 id="5-reduce-join转换为map-join"><a href="#5-reduce-join转换为map-join" class="headerlink" title="5. reduce join转换为map join"></a>5. reduce join转换为map join</h4><p>在对RDD使用join类操作，或者是Spark SQL中使用join语句时，而且join操作中一个RDD或者表的数据量比较小，使用此方案；</p><p>普通join是会走shuffle过程的，而一旦shuffle，相当于会将相同的key的数据拉取到一个shuffle read task中在进行join，此时就是reduce join。如果是一个RDD比较小，则可以采用广播小RDD全量数据+map算子来实现与join相同的效果，也就是map join，此时就不会发生shuffle操作，也就不会出现数据倾斜；</p><p>优点：对join操作导致的数据倾斜，通过转换成map操作，规避了shuffle，也就不会发生数据倾斜；</p><p>缺点：使用场景较少，只适用于一个大表与一个小表的情况；且小表广播会消耗大量内存；</p><h4 id="6-采样倾斜key并分拆join"><a href="#6-采样倾斜key并分拆join" class="headerlink" title="6. 采样倾斜key并分拆join"></a>6. 采样倾斜key并分拆join</h4><p>两个RDD/Hive表进行join，如果数据量都很大，且其中一个RDD/Hive表中的少数几个key的数据量过大，而另一个RDD/Hive表key分布比较均匀，则可以采用此方案；</p><ol><li>通过抽样将存在数据倾斜的key抽取出来并拼接随机数形成单独的RDD，并将相同key从另一个RDD/Hive表中抽取同样拼接随机数生成新的RDD；</li><li>将新生成的两个RDD按照方案5进行处理，步骤1剩余的两个RDD正常join；</li><li>将步骤3的生成结果RDD进行UNION即可；</li></ol><p>优点：对于join导致的数据倾斜，如果只有几个key导致了倾斜，则该方案可以有效的打散倾斜key，而且只需针对少数倾斜key进行拼接随机数扩容，避免大量内存浪费；</p><p>缺点：如果导致倾斜的key比较多，那么通过拼接随机数将导致数据量大量膨胀，可能导致OOM；</p><h4 id="使用随机前缀扩容RDD"><a href="#使用随机前缀扩容RDD" class="headerlink" title="使用随机前缀扩容RDD"></a>使用随机前缀扩容RDD</h4><ol><li>如果RDD中有大量的key导致数据倾斜，通过存在倾斜key的RDD/Hive，并对其所有key拼接一个n以内的随机数；</li><li>对正常RDD的每条数据都打上一个0~n的前缀；</li><li>将两个处理后的RDD进行join即可；</li></ol><p>此方案需对整个RDD扩容，对内存要求较高；</p><h2 id="shuffle调优"><a href="#shuffle调优" class="headerlink" title="shuffle调优"></a>shuffle调优</h2><h4 id="1-spark-shuffle-file-buffer"><a href="#1-spark-shuffle-file-buffer" class="headerlink" title="1. spark.shuffle.file.buffer"></a>1. spark.shuffle.file.buffer</h4><p>作用：提升性能</p><p>默认值：32k</p><p>说明：该参数用于设置shuffle write task的BufferedOutputStream的buffer缓冲大小；将数据写入磁盘前，会先写入buffer缓冲中，待缓冲写满之后，才会溢写到磁盘；</p><p>建议：如果可用内存资源较充足，可适当增加这个参数到64k，减少shuffle write过程中溢写磁盘文件的次数，减少磁盘IO次数；</p><h4 id="2-spark-reduce-maxSizeFlight"><a href="#2-spark-reduce-maxSizeFlight" class="headerlink" title="2. spark.reduce.maxSizeFlight"></a>2. spark.reduce.maxSizeFlight</h4><p>作用：提升性能</p><p>默认值：48m</p><p>说明：该参数用于设置shuffle read task的buffer缓冲大小，该buffer大小决定了每次能够拉取多少数据；</p><p>建议：如果可用内存资源充足，可适当增加这个参数到96m，从而减少拉取数据的次数，也可以减少网络传输的次数；</p><h4 id="3-spark-shuffle-io-maxRetries"><a href="#3-spark-shuffle-io-maxRetries" class="headerlink" title="3. spark.shuffle.io.maxRetries"></a>3. spark.shuffle.io.maxRetries</h4><p>作用：提升稳定性</p><p>默认值：3</p><p>说明：shuffle read task从shuffle write task坐在节点拉取属于本节点的数据时，如果因为网络异常导致拉取失败，会自动进行重试；该参数配置自动重试最大次数；超出最大重试次数，任务则已失败退出；</p><p>建议：对于包含了特别耗时的shuffle操作作业，建议增大重试次数，以避免因JVM的full gc或网络不稳定导致的数据拉取失败，对于超大数据集的shuffle过程，调节该参数可以大幅提升任务稳定性；</p><h4 id="4-spark-shuffle-io-retryWait"><a href="#4-spark-shuffle-io-retryWait" class="headerlink" title="4. spark.shuffle.io.retryWait"></a>4. spark.shuffle.io.retryWait</h4><p>作用：提升稳定性</p><p>默认值：5s</p><p>说明：与参数3配合使用，设置重试时间间隔；</p><p>建议：增加重试时间间隔，提升shuffle操作稳定性；</p><h4 id="5-spark-memory-fraction"><a href="#5-spark-memory-fraction" class="headerlink" title="5. spark.memory.fraction"></a>5. spark.memory.fraction</h4><p>作用：内存优化</p><p>默认值：0.2</p><p>说明：该参数代表了Executor内存中，分配给shuffle read task进行聚合操作的内存比例。</p><p>建议：参考统一内存模型；</p><h4 id="6-spark-shuffle-manager"><a href="#6-spark-shuffle-manager" class="headerlink" title="6. spark.shuffle.manager"></a>6. spark.shuffle.manager</h4><p>作用：</p><p>默认值：sort</p><p>说明：该参数用于设置ShuffleManager的类型，可选项为sort和tungsten-sort；tungsten-sort与sort类型，但使用tungsten-sort计划中的对外内存管理机制，内存使用效率更高；</p><p>建议：SortShuffleManager默认会对数据进行排序，如果业务逻辑中需要该排序机制，则使用默认的SortShuffleManager即可；如果业务逻辑不需要对数据进行排序，那么建议考虑后面的几个参数调优，通过bypass机制或优化的HashShuffleManager来避免排序操作，同事提供较好的磁盘读写性能，但tungsten-sort容易触发bug，需慎用；</p><h4 id="7-spark-shuffle-fort-bypassMergeThreshold"><a href="#7-spark-shuffle-fort-bypassMergeThreshold" class="headerlink" title="7. spark.shuffle.fort.bypassMergeThreshold"></a>7. spark.shuffle.fort.bypassMergeThreshold</h4><p>作用：</p><p>默认值：200</p><p>说明：当ShuffleManager为SortShuffleManager时，如果shuffle read task的数量小于这个阈值时，则shuffle write过程中不会进行排序操作，而是直接按照未经优化的HashShuffleManager的方式去写数据，但最后会将每个task产生的所有临时磁盘文件都合并成一个文件，并创建单独的索引文件。</p><p>建议：当使用SortShuffleManager时，如果不需要操作排序，那么建议将参数调大，大于shuffle read task的数量。那么此时启用bypass机制，map-side就不会进行排序，减少排序的性能开销；但此时会产生大量的磁盘文件，因此shuffle write性能有待提高。</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink入门</title>
      <link href="/2021/06/23/03-hadoop/flink/flink-ru-men/"/>
      <url>/2021/06/23/03-hadoop/flink/flink-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Flink入门–任务提交"><a href="#Flink入门–任务提交" class="headerlink" title="Flink入门–任务提交"></a>Flink入门–任务提交</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#cdh集群后台提交任务需先引入环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_CLASSPATH</span><span class="token operator">=</span>hadoop classpath<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink四大核心组件</title>
      <link href="/2021/06/23/03-hadoop/flink/flink-chu-xue/"/>
      <url>/2021/06/23/03-hadoop/flink/flink-chu-xue/</url>
      
        <content type="html"><![CDATA[<h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><p>Flink四大核心组件为：State、Checkpoint、Window及Time；</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>State即状态管理，一般有两种存在形式，RawState及ManageState；</p><h3 id="RawState"><a href="#RawState" class="headerlink" title="RawState"></a>RawState</h3><p>原始状态，由用户自行管理状态具体的数据结构及序列化，框架在进行checkpoint时，使用byte[]来读写内容，对其内部数据结构一无所知，常用于自定义operator时使用；</p><h3 id="ManageState"><a href="#ManageState" class="headerlink" title="ManageState"></a>ManageState</h3><p>托管状态，由flink框架管理状态，自动存储、自动恢复，且在内存管理上存在一定的优化，能够在大多数场景下使用，非自定义operator时推荐使用托管状态；</p><h2 id="Checkpoint"><a href="#Checkpoint" class="headerlink" title="Checkpoint"></a>Checkpoint</h2><h3 id="状态保存与恢复"><a href="#状态保存与恢复" class="headerlink" title="状态保存与恢复"></a>状态保存与恢复</h3><p>Checkpoint定时制作分布式快照，对程序中的状态进行备份；发生故障时，将整个作业的所有task都回滚到最后一次成功Checkpoint中的状态，然后从该点重新开始处理（需数据源支持重发）；</p><h3 id="状态存储方式"><a href="#状态存储方式" class="headerlink" title="状态存储方式"></a>状态存储方式</h3><p>State的store和Checkpoint的位置取决于stateBackend的配置</p><ul><li>MemoryStateBackend：state的数据保存在taskManager的内存中，执行Checkpoint时，将state快照保存到JobManager的内存中；基于内存存储方式，一旦停机或程序崩溃，状态数据将丢失且无法恢复，生产环境不建议使用；单个state大小默认为5M，推荐用于本地测试；</li><li>FsStateBackend：state的数据保存在taskManager的内存中，执行Checkpoint时，将state快照保存到配置的文件系统中，常用文件系统为HDFS；推荐用于常规状态作业；</li><li>RocksDBStateBackend：在本地文件系统中维护一个状态，state直接写入本地RockDB，同时需要配置一个源端FS URI(一般为HDFS)，执行Checkpoint时，将本地数据复制到远端FS中，Failover时从远端FS中恢复至本地；单key状态最大不超过2G，推荐用于超大状态的作业，可用于对状态读写性能不高的生产场景；</li></ul><h3 id="Checkpoint与savePoint"><a href="#Checkpoint与savePoint" class="headerlink" title="Checkpoint与savePoint"></a>Checkpoint与savePoint</h3><h4 id="Checkpoint-1"><a href="#Checkpoint-1" class="headerlink" title="Checkpoint"></a>Checkpoint</h4><ul><li>Flink自动出发并管理，主要用于Task异常时快速恢复；</li><li>轻量级，作业停止后默认清除；</li></ul><h4 id="savePoint"><a href="#savePoint" class="headerlink" title="savePoint"></a>savePoint</h4><ul><li>用户手动触发并管理，主要用户升级备份等，作业能够停止后恢复；</li><li>持久化，以标准格式存储，允许代码或配置发生变更，手动触发从savePoint的恢复；</li></ul><h3 id="作业重启策略"><a href="#作业重启策略" class="headerlink" title="作业重启策略"></a>作业重启策略</h3><p>Flink支持不同的重启策略，以便在顾上发生时快速恢复；集群启动时会伴随一个默认的重启策略，在作业没有定义具体重启策略时会使用集群的默认重启策略；当作业配置了重启策略时，该策略会覆盖集群默认重启策略；常用的重启策略有：固定间隔、失败率及无重启；</p><ul><li>如果没有启用Checkpointing，则使用无重启策略；</li><li>如果启用了Checkpointing，但未配置重启策略，则默认使用固定间隔策略，其中Integer.MAX_VALUE参数是尝试重启次数；</li></ul><h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p>Window按照触发方式可分为Time Window、Count Window及自定义Window；按照窗口类型可分为滑动窗口（tumbling window）与滚动窗口（sliding window）；</p><h3 id="Time-Window"><a href="#Time-Window" class="headerlink" title="Time Window"></a>Time Window</h3><p>最简单常用的窗口形式是基于时间触发的窗口；时间可分为EventTime、IngestTime及ProcessTime；</p><ol><li><p>EventTime 事件时间、日志时间</p></li><li><p>IngestTime 进入 Flink 的时间（进入datasource的时间）</p></li><li><p>ProcessingTime Flink 处理的时间</p></li></ol>  <img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210624104736496.png" alt="image-20210624104736496"><h3 id="Count-Window"><a href="#Count-Window" class="headerlink" title="Count Window"></a>Count Window</h3><p>基于事件数量触发的窗口；</p><h3 id="Tumbling-Window"><a href="#Tumbling-Window" class="headerlink" title="Tumbling Window"></a>Tumbling Window</h3><p>将数据根据固定敞口大小进行切割计算；</p><p>特点：时间对齐，窗口大小固定，适合进行BI统计等场景；</p><h3 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h3><p>窗口间元素可能存在重叠，由窗口大小及滑动步长组成；</p><p>特点：窗口大小固定，不同窗口间可能存在重叠，适合进行监控报警等场景；</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java工厂模式浅析</title>
      <link href="/2021/06/22/02-program/java-bian-cheng-zi-xue-zhi-lu/java-gong-han-mo-shi/"/>
      <url>/2021/06/22/02-program/java-bian-cheng-zi-xue-zhi-lu/java-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java工厂模式浅析"><a href="#Java工厂模式浅析" class="headerlink" title="Java工厂模式浅析"></a>Java工厂模式浅析</h1><h2 id="传统工厂类"><a href="#传统工厂类" class="headerlink" title="传统工厂类"></a>传统工厂类</h2><p>传统工厂类最大的弊端：使用关键字<code>new</code>，导致每新增一个类都要修改工厂类；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>demo</span><span class="token keyword">interface</span>  <span class="token class-name">IFruit</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">implements</span> <span class="token class-name">IFruit</span>  <span class="token punctuation">{</span>  <span class="token annotation punctuation">@override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Apple] 吃苹果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Factory</span>  <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IFruit</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span>  <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">{</span>    <span class="token class-name">IFruit</span> fruit <span class="token operator">=</span> <span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fruit<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射工厂类"><a href="#反射工厂类" class="headerlink" title="反射工厂类"></a>反射工厂类</h2><p>通过反射对工厂模式进行改进，起最大特征在于可以方便动态进行子类的扩充操作，但存在性能问题；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>demo</span>  <span class="token keyword">interface</span> <span class="token class-name">IFruit</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">implements</span> <span class="token class-name">IFruit</span>  <span class="token punctuation">{</span>  <span class="token annotation punctuation">@override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Apple] 吃苹果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cherry</span> <span class="token keyword">implements</span> <span class="token class-name">IFruit</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Cherry] 吃樱桃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IFruit</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">IFruit</span> fruit <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      fruit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IFruit</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fruit<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">IFruit</span> fruit1 <span class="token operator">=</span> <span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"org.demo.Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IFruit</span> fruit2 <span class="token operator">=</span> <span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"org.demo.Cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fruit1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fruit2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型反射工厂类"><a href="#泛型反射工厂类" class="headerlink" title="泛型反射工厂类"></a>泛型反射工厂类</h2><p>通过泛型避免重复创建工厂类，使代码应用于实际开发；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>demo</span>  <span class="token keyword">interface</span> <span class="token class-name">IFruit</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IAnimal</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">howl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">implements</span> <span class="token class-name">IFruit</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Apple] 吃苹果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">IAnimal</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">howl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Dog] 汪汪叫"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">T</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">IFruit</span> fruit <span class="token operator">=</span> <span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"org.demo.Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IAnimal</span> animal <span class="token operator">=</span> <span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"org.demo.Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fruit<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    animal<span class="token punctuation">.</span><span class="token function">howl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kerberos安装</title>
      <link href="/2021/06/21/03-hadoop/kerberos-bu-shu/"/>
      <url>/2021/06/21/03-hadoop/kerberos-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Kerberos部署"><a href="#Kerberos部署" class="headerlink" title="Kerberos部署"></a>Kerberos部署</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停用服务</span>systemctl stop krb5kdc<span class="token punctuation">;</span> systemctl disable krb5kdc<span class="token punctuation">;</span>systemctl stop kadmin<span class="token punctuation">;</span> systemctl disable kadmin<span class="token punctuation">;</span><span class="token comment"># 卸载已安装软件包</span>yum <span class="token parameter variable">-y</span> remove krb5-server   krb5-libs    krb5-workstation<span class="token comment"># 删除配置文件</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/kerberos<span class="token punctuation">;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/krb5.keytab <span class="token punctuation">;</span><span class="token comment"># 安装软件包</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> krb5-server krb5-libs krb5-workstation<span class="token comment"># 停用服务</span>systemctl stop krb5kdc <span class="token operator">&amp;&amp;</span> systemctl stop kadmin<span class="token comment"># 配置/var/kerberos/krb5kdc/kdc.conf</span><span class="token punctuation">[</span>kdcdefaults<span class="token punctuation">]</span>kdc_ports <span class="token operator">=</span> <span class="token number">750,88</span><span class="token punctuation">[</span>realms<span class="token punctuation">]</span>DEMO.163.COM <span class="token operator">=</span> <span class="token punctuation">{</span>database_name <span class="token operator">=</span> /var/kerberos/krb5kdc/principaladmin_keytab <span class="token operator">=</span> FILE:/etc/kadm5.keytabacl_file <span class="token operator">=</span> /var/kerberos/krb5kdc/kadm5.aclkey_stash_file <span class="token operator">=</span> /var/kerberos/krb5kdc/stashkdc_ports <span class="token operator">=</span> <span class="token number">750,88</span>max_life <span class="token operator">=</span> 10h 0m 0smax_renewable_life <span class="token operator">=</span> 7d 0h 0m 0smaster_key_type <span class="token operator">=</span> des3-hmac-sha1supported_enctypes <span class="token operator">=</span> arcfour-hmac:normal des3-hmac-sha1:normal des-cbc-crc:normal des:normal des:v4 des:norealm des:onlyrealm des:afs3default_principal_flags <span class="token operator">=</span> +preauth<span class="token punctuation">}</span><span class="token punctuation">[</span>logging<span class="token punctuation">]</span>kdc <span class="token operator">=</span> FILE:/var/log/krb5kdc.logadmin_server <span class="token operator">=</span> FILE:/var/log/kadmin.logdefault <span class="token operator">=</span> FILE:/var/log/krb5lib.log<span class="token comment"># 配置/var/kerberos/krb5kdc/kadm5.acl</span>hadoop/admin ** i<span class="token comment"># 初始化数据库</span>kdb5_util create <span class="token parameter variable">-r</span> DEMO.163.COM <span class="token parameter variable">-s</span><span class="token operator">&lt;</span> LazSxNqFkg<span class="token comment"># 配置/etc/krb5.conf</span><span class="token punctuation">[</span>libdefaults<span class="token punctuation">]</span>renew_lifetime <span class="token operator">=</span> 7dforwardable <span class="token operator">=</span> <span class="token boolean">true</span>default_realm <span class="token operator">=</span> DEMO.163.COMticket_lifetime <span class="token operator">=</span> 24hdns_lookup_realm <span class="token operator">=</span> <span class="token boolean">false</span>dns_lookup_kdc <span class="token operator">=</span> <span class="token boolean">false</span>default_ccache_name <span class="token operator">=</span> /tmp/krb5cc_%<span class="token punctuation">{</span>uid<span class="token punctuation">}</span>default_tgs_enctypes <span class="token operator">=</span> aes des3-cbc-sha1 rc4 des-cbc-md5default_tkt_enctypes <span class="token operator">=</span> aes des3-cbc-sha1 rc4 des-cbc-md5<span class="token punctuation">[</span>domain_realm<span class="token punctuation">]</span><span class="token number">163</span>.com <span class="token operator">=</span> DEMO.163.COM.163.com <span class="token operator">=</span> DEMO.163.COM<span class="token punctuation">[</span>logging<span class="token punctuation">]</span>default <span class="token operator">=</span> FILE:/var/log/krb5kdc.logadmin_server <span class="token operator">=</span> FILE:/var/log/kadmind.logkdc <span class="token operator">=</span> FILE:/var/log/krb5kdc.log<span class="token punctuation">[</span>realms<span class="token punctuation">]</span>DEMO.163.COM <span class="token operator">=</span> <span class="token punctuation">{</span>admin_server <span class="token operator">=</span> demo01.bigdata.163.comkdc <span class="token operator">=</span> demo01.bigdata.163.comkdc <span class="token operator">=</span> demo02.bigdata.163.com<span class="token punctuation">}</span><span class="token comment"># 添加krb管理员</span>kadmin.local<span class="token operator">&gt;</span> addprinc hadoop/admin@DEMO.163.COM<span class="token operator">&lt;</span> ek72djNnES<span class="token operator">&lt;</span> ek72djNnES<span class="token operator">&gt;</span> <span class="token builtin class-name">exit</span><span class="token comment"># 重启服务</span>systemctl start krb5kdc.service <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> krb5kdc.service<span class="token punctuation">;</span>systemctl start kadmin.service <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> kadmin.service<span class="token punctuation">;</span>systemctl status krb5kdc.servicesystemctl status kadmin.service<span class="token comment">## HA master节点</span><span class="token comment"># 生成主从节点principal及keytab</span>kadmin.local<span class="token operator">&gt;</span> addprinc <span class="token parameter variable">-randkey</span> host/demo01.bigdata.163.com@DEMO.163.COM<span class="token operator">&gt;</span> addprinc <span class="token parameter variable">-randkey</span> host/demo02.bigdata.163.com@DEMO.163.COM<span class="token operator">&gt;</span> ktadd host/demo01.bigdata.163.com@DEMO.163.COM<span class="token operator">&gt;</span> ktadd host/demo02.bigdata.163.com@DEMO.163.COM<span class="token comment">## HA slave节点</span><span class="token comment">#停用服务</span>systemctl stop krb5kdc<span class="token punctuation">;</span> systemctl disable krb5kdc<span class="token punctuation">;</span>systemctl stop kadmin<span class="token punctuation">;</span> systemctl disable kadmin<span class="token punctuation">;</span><span class="token comment"># 卸载已安装软件包</span>yum <span class="token parameter variable">-y</span> remove krb5-server  remove krb5-libs   remove krb5-workstation<span class="token comment"># 删除配置文件</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/kerberos<span class="token punctuation">;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/krb5.keytab<span class="token punctuation">;</span><span class="token comment"># 安装软件包</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> krb5-server<span class="token comment"># 删除默认配置</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/krb5.conf<span class="token comment"># 停用服务</span>systemctl stop krb5kdc<span class="token comment"># 创建/var/kerberos/krb5kdc/kpropd.acl</span>host/demo01.bigdata.163.com@DEMO.163.COMhost/demo02.bigdata.163.com@DEMO.163.COM<span class="token comment">## HA master节点</span><span class="token comment"># 从主节点拷贝配置文件 kdc.conf、kadm5.acl及krb5.keytab</span><span class="token builtin class-name">cd</span> /var/kerberos/krb5kdc<span class="token function">scp</span> kdc.conf  demo02:/var/kerberos/krb5kdc<span class="token function">scp</span> kadm5.acl  demo02:/var/kerberos/krb5kdc<span class="token function">scp</span> /etc/krb5.keytab  demo02:/etc<span class="token function">scp</span> /etc/krb5.conf  demo02:/etc<span class="token comment">## HA slave节点</span><span class="token comment"># 初始化从库数据库</span>kdb5_util create <span class="token parameter variable">-r</span> DEMO.163.COM <span class="token parameter variable">-s</span><span class="token operator">&lt;</span> LazSxNqFkg<span class="token comment"># 启动kpropd服务</span>systemctl start kprop.service <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> kprop.service<span class="token comment">## HA master节点</span><span class="token comment"># 数据dump及同步</span>kdb5_util dump /var/kerberos/krb5kdc/slave_datatranskprop <span class="token parameter variable">-f</span> /var/kerberos/krb5kdc/slave_datatrans demo02.bigdata.163.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kerberos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH权限管理-Sentry</title>
      <link href="/2021/06/21/03-hadoop/cdh/cdh-quan-xian-guan-li/"/>
      <url>/2021/06/21/03-hadoop/cdh/cdh-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="CDH集群权限管理"><a href="#CDH集群权限管理" class="headerlink" title="CDH集群权限管理"></a>CDH集群权限管理</h1><h2 id="Apache-Sentry介绍"><a href="#Apache-Sentry介绍" class="headerlink" title="Apache Sentry介绍"></a>Apache Sentry介绍</h2><p><code>Apache Sentry</code>是<code>Cloudera</code>公司发布的一个<code>Hadoop</code>开源组件，它提供了细粒度级、基于角色的授权及多租户管理模式。<code>Sentry</code>当前支持<code>Hive/HCatalog</code>、<code>Apache Solr</code>、<code>Impala</code>、<code>HDFS</code>及<code>Hbase</code>权限管理；</p><h2 id="Apache-Sentry组件"><a href="#Apache-Sentry组件" class="headerlink" title="Apache Sentry组件"></a>Apache Sentry组件</h2><p>Sentry的体系结构中有三个重要组件：<code>Binding</code>、<code>Policy Engine</code>及<code>Policy Provider</code>；</p><h3 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a><code>Binding</code></h3><p><code>Binding</code>实现对不同的查询引擎授权，<code>Sentry</code>将自己的<code>Hook</code>函数插入到各<code>SQL</code>引擎的编译、执行阶段，这些<code>Hook</code>函数的作用为：</p><ol><li>过滤器：只放行具有相应数据对象访问权限的<code>SQL</code>查询；</li><li>授权接管：通过执行引擎进行<code>grant/revoke</code>管理权限时，实际在<code>Sentry</code>中实现；</li></ol><p>对于所有引擎的授权信息存储在<code>Sentry</code>设定的统一数据库中，实现权限的集中管理；</p><h3 id="Policy-Engine"><a href="#Policy-Engine" class="headerlink" title="Policy Engine"></a><code>Policy Engine</code></h3><p>这是<code>Sentry</code>授权的核心组件，<code>Policy Engine</code>判断从<code>Binding</code>层获取的输入权限要求与服务体提供层以保存的权限描述是否匹配；</p><h3 id="Policy-Provider"><a href="#Policy-Provider" class="headerlink" title="Policy Provider"></a><code>Policy Provider</code></h3><p><code>Policy Provider</code>负责从文件或数据库中读取设定的访问权限，提供给<code>Policy Engine</code>进行鉴权匹配；</p><h2 id="CDH集群启用Sentry"><a href="#CDH集群启用Sentry" class="headerlink" title="CDH集群启用Sentry"></a>CDH集群启用Sentry</h2><h3 id="安装Sentry组件"><a href="#安装Sentry组件" class="headerlink" title="安装Sentry组件"></a>安装<code>Sentry</code>组件</h3><p>通过<code>CM</code>直接添加<code>Sentry</code>即可；（需提前创建<code>sentry</code>数据库）；</p><p>配置<code>Sentry</code>服务，搜索<code>sentry.service.admin.group</code>及<code>sentry.service.allow.connect</code>， 添加各服务同名用户至管理员列表（CDH默认以服务同名用户启动服务），</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621173202208.png" alt="image-20210621173202208"><h3 id="Sentry集成"><a href="#Sentry集成" class="headerlink" title="Sentry集成"></a><code>Sentry</code>集成</h3><ol><li>在<code>Hive</code>配置中搜索<code>hive.server2.enable.doAs</code>，取消该配置勾选；</li></ol><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621155829187.png" alt="image-20210621155829187"><ol start="2"><li><p>在<code>Hive</code>配置中搜索<code>Enable Stored Notifications in Database</code>，启用该配置项；</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621160340622.png" alt="image-20210621160340622"></li><li><p>在<code>Hive</code>配置中搜索<code>sentry</code>，启用<code>Hive</code>集成<code>Sentry</code>；</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621160649210.png" alt="image-20210621160649210"></li><li><p>如需开启<code>Hive</code>列级权限控制，搜索<code>sentry-site.xml</code>，添加截图中K-V配置；</p></li></ol> <img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621173814173.png" alt="image-20210621173814173"><ol start="5"><li><p>在<code>Impala</code>配置中搜索<code>Sentry</code>，启用<code>Impala</code>集成<code>Sentry</code>;</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621161133818.png" alt="image-20210621161133818"></li><li><p>在<code>HDFS</code>中搜索<code>dfs.namenode.acls.enabled</code>,启用<code>acls</code>控制；</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621161721244.png" alt="image-20210621161721244"></li><li><p>在<code>HDFS</code>中搜索<code>sentry</code>，启用<code>sentry</code>同步；</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621161828535.png" alt="image-20210621161828535"></li><li><p>配置<code>YARN</code>服务，搜索<code>allowed.system.users</code>允许各服务同名账号提交任务至<code>YARN</code>上；</p></li></ol>  <img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621172609148.png" alt="image-20210621172609148"><ol start="8"><li><p>配置<code>HUE</code>集成<code>Sentry</code>，搜索<code>Sentry</code>并勾选；</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621172804088.png" alt="image-20210621172804088"></li></ol><h2 id="基于Hue使用Sentry授权"><a href="#基于Hue使用Sentry授权" class="headerlink" title="基于Hue使用Sentry授权"></a>基于Hue使用Sentry授权</h2><ol><li><p>待授权用户需在集群所有节点存在，如不存在，则需手动创建；</p></li><li><p>在<code>Hue</code>中右上角选择管理用户，创建用户及组；</p></li><li><p>点击左上角下拉菜单中<code>Security</code>创建<code>Role</code>并进行权限授予；</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210621174417601.png" alt="image-20210621174417601"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sentry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux headless模式配置</title>
      <link href="/2021/06/17/01-linux/linux-headless-mo-shi/"/>
      <url>/2021/06/17/01-linux/linux-headless-mo-shi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装xfce ，默认选all</span>pacman <span class="token parameter variable">-S</span> xfce4 startxfce4 <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> headless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习入门</title>
      <link href="/2021/06/03/02-program/java-bian-cheng-zi-xue-zhi-lu/mybatis-xue-xi-ru-men/"/>
      <url>/2021/06/03/02-program/java-bian-cheng-zi-xue-zhi-lu/mybatis-xue-xi-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis学习入门"><a href="#Mybatis学习入门" class="headerlink" title="Mybatis学习入门"></a>Mybatis学习入门</h1><h2 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h2><p>Mybatis是支持定制化SQL、存储过程以及高级映射的优秀的持久层框架。Mybatis避免了几乎所有的JDBC代码和手动设置参数。Mybatis可以对配置和原生Map使用简单的XML或者注解，将接口和Java的POJOs（Plain Old Java Objects）映射成数据库中的记录。</p><h2 id="Mybatis如何配置依赖"><a href="#Mybatis如何配置依赖" class="headerlink" title="Mybatis如何配置依赖"></a>Mybatis如何配置依赖</h2><ol><li>直接将mybatis-x.x.x.jar添加到classpath中；</li><li>通过依赖工具配置：</li></ol><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation group<span class="token punctuation">:</span> <span class="token string">'org.mybatis'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'mybatis'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'3.5.7'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Mybatis功能架构"><a href="#Mybatis功能架构" class="headerlink" title="Mybatis功能架构"></a>Mybatis功能架构</h3><p>Mybatis的功能架构一般分为三层：</p><ol><li>API接口层：提供外部使用的接口API，开发人员通过API来操纵数据库完成具体的数据处理；</li><li>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。主要目的是根据调用请求完成一次数据库操作；</li><li>基础支撑层：负责最基础的功能支撑，包括连接管理、事务处理、配置加载及缓存处理，将通用的东西抽象为最基础的组件，为数据处理层提供基础支撑；</li></ol><h2 id="Mybatis优缺点"><a href="#Mybatis优缺点" class="headerlink" title="Mybatis优缺点"></a>Mybatis优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>易学：框架本身很小且简单，没有任何第三方依赖，易于学习，易于使用，通过文档和源码，可以完全的掌握设计思路和实现；</li><li>灵活：Mybatis不会对应用程序或者数据库的现有设计产生任何影响。通过xml保存sql，便于统一管理和优化；</li><li>解耦：通过提供DAL层，将业务逻辑与数据访问逻辑分离，使系统设计更清晰，易维护，易单元测试，提高可维护性；</li><li>映射：支持对象与数据库的orm字段关系映射；</li><li>标签：提供xml标签，支持编写动态sql；</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>编写SQL语句工作量大，尤其字段多、关联表多时；</li><li>SQL强依赖数据库，可移植性差；</li><li>框架简陋，虽然简化了数据绑定代码，但整个底层数据库查询代码需要自行开发，工作量大；</li><li>二级缓存机制不佳；</li></ul><h2 id="Mybatis注解"><a href="#Mybatis注解" class="headerlink" title="Mybatis注解"></a>Mybatis注解</h2><p>注解可以实现SQL与实体映射，<code>SQL</code>查询出来的结果集，可以通过<code>@Result</code>注解将数据库字段与实体属性关联起来，并将查询结果集进行命名供后续其它<code>SQL</code>引用，如以下示例中，<code>offsets</code>即为映射结果集名称，<code>value</code>即为定义实体集映射关系；</p><p><code>@Select</code>为定义select语句注解，<code>#{id}</code>为<code>SQL</code>语句中传入参数，<code>@Param("id")</code>定义方法传入参数与<code>SQL</code>参数的映射关系，同时可进行参数进行重命名；<code>SQL</code>引用中直接使用对象属性进行查询；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span><span class="token string">"offsets"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"groupId"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"group_id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"topicName"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"topic_name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"partitionId"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"partition_id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"offsetValue"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"offset_value"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"createDate"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"create_date"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"updateDate"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"update_date"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from kafka_offset where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token class-name">OffsetEntity</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from kafka_offset where group_id = #{offsetEntity.groupId} and topic_name = #{offsetEntity.topicName} and "</span> <span class="token operator">+</span>            <span class="token string">"partition_id = "</span> <span class="token operator">+</span>            <span class="token string">"#{offsetEntity.partitionId}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"offsets"</span><span class="token punctuation">)</span><span class="token class-name">OffsetEntity</span> <span class="token function">queryByEntity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"offsetEntity"</span><span class="token punctuation">)</span> <span class="token class-name">OffsetEntity</span> offsetEntity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible之ad-hoc（二）</title>
      <link href="/2021/05/22/05-dev/ansible-zhi-ad-hoc/"/>
      <url>/2021/05/22/05-dev/ansible-zhi-ad-hoc/</url>
      
        <content type="html"><![CDATA[<h1 id="Ansible之ad-hoc"><a href="#Ansible之ad-hoc" class="headerlink" title="Ansible之ad-hoc"></a><code>Ansible之ad-hoc</code></h1><p><code>ad-hoc</code>是<code>ansible</code>临时命令，就像我们执行的shell命令一样，执行完即结束，ad-hoc模式的命令格式如下：<code>ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</code></p><blockquote><p><code>-a MODULE_ARGS</code>　　　#模块的参数，如果执行默认COMMAND的模块，即是命令参数，如： “date”，“pwd”等等<br><code>-k</code>，<code>--ask-pass</code> #ask for SSH password。登录密码，提示输入SSH密码而不是假设基于密钥的验证<br><code>--ask-su-pass</code> #ask for su password。su切换密码<br><code>-K</code>，<code>--ask-sudo-pass</code> #ask for sudo password。提示密码使用sudo，sudo表示提权操作<br><code>--ask-vault-pass</code> #ask for vault password。假设我们设定了加密的密码，则用该选项进行访问<br><code>-B SECONDS</code> #后台运行超时时间<br><code>-C</code> #模拟运行环境并进行预运行，可以进行查错测试<br><code>-c CONNECTION</code> #连接类型使用<br><code>-f FORKS</code> #并行任务数，默认为5<br><code>-i INVENTORY</code> #指定主机清单的路径，默认为<code>/etc/ansible/hosts</code><br><code>--list-hosts</code> #查看有哪些主机组<br><code>-m MODULE_NAME</code> #执行模块的名字，默认使用 command 模块，所以如果是只执行单一命令可以不用 -m参数<br><code>-o</code> #压缩输出，尝试将所有结果在一行输出，一般针对收集工具使用<br><code>-S</code> #用 su 命令<br><code>-R SU_USER</code> #指定 su 的用户，默认为 root 用户<br><code>-s</code> #用 sudo 命令<br><code>-U SUDO_USER</code> #指定 sudo 到哪个用户，默认为 root 用户<br><code>-T TIMEOUT</code> #指定 ssh 默认超时时间，默认为10s，也可在配置文件中修改<br><code>-u REMOTE_USER</code> #远程用户，默认为 root 用户<br><code>-v</code> #查看详细信息，同时支持<code>-vvv</code>，<code>-vvvv</code>可查看更详细信息</p><p>执行命令返回的结果颜色代表的含义：<br>绿色：被管理端没有被修改<br>黄色：被管理端发生变更<br>红色：执行出现故障</p></blockquote><h2 id="ansible常用模块"><a href="#ansible常用模块" class="headerlink" title="ansible常用模块"></a><code>ansible</code>常用模块</h2><ol><li><p><code>ping</code>模块</p><p>主要用于主机连通性测试：<code>ansible db -m ping</code></p></li><li><p><code>command</code>模块</p><p>主要用户直接在远程主机上执行命令，并将结果返回本机；（默认模块，可省略）：<code>ansible db -m command -a 'ss -ntl'</code></p><p>命令模块接受命令名称，后面是空格分隔的列表参数。给定的命令将在所有选定的节点上执行。它不会通过<code>shell</code>进行处理；该命令不支持<code>|</code> 管道命令。<br>下面来看一看该模块下常用的几个命令：</p><blockquote><p>chdir　　　   # 在执行命令之前，先切换到该目录<br>executable    # 切换shell来执行命令，需要使用命令的绝对路径<br>free_form 　 # 要执行的Linux指令，一般使用Ansible的-a参数代替。<br>creates 　    # 一个文件名，当这个文件存在，则该命令不执行,可以用来做判断<br>removes      # 一个文件名，这个文件不存在，则该命令不执行</p></blockquote></li><li><p><code>shell</code>模块</p><p>支持远程主机上调用<code>shell</code>解释器运行命令，支持<code>shell</code>的各种功能，例如管道等；<code>ansible db -m shell -a 'cat /etc/passwd |grep root'</code></p></li><li><p><code>copy</code>模块</p><p>主要用于将文件复制到远程主机，同时支持给定内容生成文件和修改权限等； <code>ansible db -m copy -a 'src=~/hello  dest=/data/hello mode=755'</code></p><p>相关选项如下：</p><blockquote><p><code>src</code>　　　　            #被复制到远程主机的本地文件。可以是绝对路径，也可以是相对路径。如果路径是一个目录，则会递归复制，用法类似于”rsync”<br><code>content</code>　　　         #用于替换”src”，可以直接指定文件的值<br><code>dest</code>　　　　          #必选项，将源文件复制到的远程主机的<strong>绝对路径</strong><br><code>backup</code>　　　         #当文件内容发生改变后，在覆盖之前把源文件备份，备份文件包含时间信息<br><code>directory_mode</code>　　#递归设定目录的权限，默认为系统默认权限<br><code>force</code>　　　　        #当目标主机包含该文件，但内容不同时，设为”yes”，表示强制覆盖；设为”no”，表示目标主机的目标位置不存在该文件才复制。默认为”yes”<br><code>others</code>　　　　      #所有的 file 模块中的选项可以在这里使用</p></blockquote></li><li><p><code>file</code>模块</p><p>主要用于设置文件属性，如创建文件、创建软链、删除文件等；<code>ansible db -m file -a 'path=/data/hello  state=directory'</code></p><p>常用命令如下：</p><blockquote><p><code>force</code>　　   #需要在两种情况下强制创建软链接，一种是源文件不存在，但之后会建立的情况下；另一种是目标软链接已存在，需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no<br><code>group</code>　　  #定义文件/目录的属组。后面可以加上<code>mode</code>：定义文件/目录的权限<br><code>owner</code>　　  #定义文件/目录的属主。后面必须跟上<code>path</code>：定义文件/目录的路径<br><code>recurse</code>　　#递归设置文件的属性，只对目录有效，后面跟上<code>src</code>：被链接的源文件路径，只应用于<code>state=link</code>的情况<br><code>dest</code>　　     #被链接到的路径，只应用于<code>state=link</code>的情况<br><code>state</code>　　   #状态，有以下选项：</p><blockquote><p><code>directory</code>：如果目录不存在，就创建目录<br><code>file</code>：即使文件不存在，也不会被创建<br><code>link</code>：创建软链接<br><code>hard</code>：创建硬链接<br><code>touch</code>：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间<br><code>absent</code>：删除目录、文件或者取消链接文件</p></blockquote></blockquote></li><li><p><code>fetch</code>模块</p><p>主要用于从远程主机获取/复制文件到本地； <code>ansible db -m fetch -a 'src=/data/hello'</code></p><p>常用选项如下：</p><blockquote><p><code>dest</code>：用来存放文件的目录<br><code>src</code>：在远程拉取的文件，并且必须是一个<strong>file</strong>，不能是<strong>目录</strong></p></blockquote></li><li><p><code>cron</code>模块</p><p>主要用于管理远程主机<code>cron</code>计划任务，语法与本地<code>crontab</code>一致; <code>ansible db -m -a ' name="ntp update every 10 min" minute=*/10 job="/sbin/ntpdate 10.0.0.2 &amp;&gt;/dev/null"'</code></p><p>常用选项如下：</p><blockquote><p><code>day=</code>     #日应该运行的工作( 1-31, *, */2, )<br><code>hour=</code>    # 小时 ( 0-23, *, */2, )<br><code>minute=</code> #分钟( 0-59, *, */2, )<br><code>month=</code> # 月( 1-12, *, /2, )<br><code>weekday=</code> # 周 ( 0-6 for Sunday-Saturday,, )<br><code>job=</code>     #指明运行的命令是什么<br><code>name=</code> #定时任务描述<br><code>reboot</code> # 任务在重启时运行，不建议使用，建议使用special_time<br><code>special_time</code> #特殊的时间范围，参数：reboot（重启时），annually（每年），monthly（每月），weekly（每周），daily（每天），hourly（每小时）<br><code>state</code>   #指定状态，present表示添加定时任务，也是默认设置，absent表示删除定时任务<br><code>user</code>    # 以哪个用户的身份执行</p></blockquote></li><li><p><code>yum</code>模块</p><p>主要用于受控主机软件安装；<code>ansible -m yum -a 'name=httpd state=present'</code></p><blockquote><p><code>name=</code>　　#所安装的包的名称<br><code>state=</code>　　#<code>present</code>—&gt;安装， <code>latest</code>—&gt;安装最新的, <code>absent</code>—&gt; 卸载软件。<br><code>update_cache</code>　　#强制更新yum的缓存<br><code>conf_file</code>　　#指定远程yum安装时所依赖的配置文件（安装本地已有的包）。<br><code>disable_pgp_check</code>　　#是否禁止GPG checking，只用于<code>present</code>or <code>latest</code>。<br><code>disablerepo</code>　　#临时禁止使用yum库。 只用于安装或更新时。<br><code>enablerepo</code>　　#临时使用的yum库。只用于安装或更新时。</p></blockquote></li><li><p><code>service</code>模块</p><p>主要用于服务程序管理；<code>ansible -m service -a 'name=nginx state=started enabled=true'</code></p><p>常用选项如下：</p><blockquote><p><code>arguments</code> #命令行提供额外的参数<br><code>enabled</code> #设置开机启动。<br><code>name=</code> #服务名称<br><code>runlevel</code> #开机启动的级别，一般不用指定。<br><code>sleep</code> #在重启服务的过程中，是否等待。如在服务关闭以后等待2秒再启动。(定义在剧本中。)<br><code>state</code> #有四种状态，分别为：<code>started</code>—&gt;启动服务， <code>stopped</code>—&gt;停止服务， <code>restarted</code>—&gt;重启服务， <code>reloaded</code>—&gt;重载配置</p></blockquote></li><li><p><code>user</code>模块</p><p>主要用于管理受控主机用户账号；<code>ansible -m user -a 'name=semon uid=12345'</code></p><p>主要选项如下：</p><blockquote><p><code>comment</code>　　# 用户的描述信息<br><code>createhome</code>　　# 是否创建家目录<br><code>force</code>　　# 在使用state=absent时, 行为与userdel –force一致.<br><code>group</code>　　# 指定基本组<br><code>groups</code>　　# 指定附加组，如果指定为(groups=)表示删除所有组<br><code>home</code>　　# 指定用户家目录<br><code>move_home</code>　　# 如果设置为home=时, 试图将用户主目录移动到指定的目录<br><code>name</code>　　# 指定用户名<br><code>non_unique</code>　　# 该选项允许改变非唯一的用户ID值<br><code>password</code>　　# 指定用户密码<br><code>remove</code>　　# 在使用state=absent时, 行为是与userdel –remove一致<br><code>shell</code>　　# 指定默认shell<br><code>state</code>　　# 设置帐号状态，不指定为创建，指定值为absent表示删除<br><code>system</code>　　# 当创建一个用户，设置这个用户是系统用户。这个设置不能更改现有用户<br><code>uid</code>　　# 指定用户的uid</p></blockquote></li><li><p><code>group</code>模块</p><p>主要用于管理受控主机用户组信息；<code>ansible -m group -a 'name=semon gid=12345'</code></p><p>常用选项如下：</p><blockquote><p><code>gid=</code>　　#设置组的GID号<br><code>name=</code>　　#指定组的名称<br><code>state=</code>　　#指定组的状态，默认为创建，设置值为<code>absent</code>为删除<br><code>system=</code>　　#设置值为<code>yes</code>，表示创建为系统组</p></blockquote></li><li><p><code>script</code>模块</p><p>主要用于将本地脚本在受控主机上执行；<code>ansible -m script -a '/data/env.sh'</code></p></li><li><p><code>setup</code>模块</p><p>主要用于手机信息，通过调用<code>facts</code>组件来实现；<code>ansible db -m setup -a 'filter=”*mem*“'</code></p><blockquote><p>facts组件是Ansible用于采集被管机器设备信息的一个功能，我们可以使用setup模块查机器的所有facts信息，可以使用filter来查看指定信息。整个facts信息被包装在一个JSON格式的数据结构中，ansible_facts是最上层的值。<br>facts就是变量，内建变量 。每个主机的各种信息，cpu颗数、内存大小等。会存在facts中的某个变量中。调用后返回很多对应主机的信息，在后面的操作中可以根据不同的信息来做不同的操作。如redhat系列用yum安装，而debian系列用apt来安装软件。</p></blockquote></li><li><p><code>get_url</code>模块</p><p>主要用于从指定url下载文件； <code>ansible db -m get_url -a 'url=http://easydata-demo.163yun.com dest=/home/demo.txt mode=750'</code></p><p>常用选项如下：</p><blockquote><p><code>url=</code>       #地址 </p><p><code>dest=</code>    #目标文件 </p><p><code>mode=</code>  #文件权限</p></blockquote></li><li><p><code>git</code>模块</p><p>主要用于管理git仓库；<code>ansible db -m git -a 'repo=https://gitee.com/jasonminghao/dubbo-demo-service.git dest=/data/git_repo/dubbo-demo-service version=78d5d96 accept_hostkey=yes'</code></p><p>常用选项如下：</p><blockquote><p><code>- repo    # git仓库地址(https/ssh)</code></p><p><code>- dest    # 将代码克隆到指定路径</code></p><p><code>- version # 克隆指定版本分支/commit id</code></p><p><code>- accept_hostkey # 类似于-o StrictHostKeyChecking=no</code></p><p>​    <code> yes</code></p><p>​    <code>no</code></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible之playbook（三）</title>
      <link href="/2021/05/22/05-dev/ansible-zhi-playbook/"/>
      <url>/2021/05/22/05-dev/ansible-zhi-playbook/</url>
      
        <content type="html"><![CDATA[<h1 id="Ansible之playbook"><a href="#Ansible之playbook" class="headerlink" title="Ansible之playbook"></a><code>Ansible之playbook</code></h1><p><code>Playbook</code>与<code>ad-hoc</code>相比,是一种完全不同的运用ansible的方式，类似与<code>saltstack</code>的<code>state</code>状态文件。<code>ad-hoc</code>无法持久使用，<code>playbook</code>可以持久使用。<br><code>playbook</code>是由一个或多个<code>play</code>组成的列表，<code>play</code>的主要功能在于将事先归并为一组的主机装扮成事先通过<code>ansible</code>中的<code>task</code>定义好的角色。从根本上来讲，所谓的<code>task</code>无非是调用<code>ansible</code>的一个<code>module</code>。将多个<code>play</code>组织在一个<code>playbook</code>中，即可以让它们联合起来按事先编排的机制完成某一任务；</p><h2 id="playbook核心元素"><a href="#playbook核心元素" class="headerlink" title="playbook核心元素"></a><code>playbook核心元素</code></h2><ul><li><code>Hosts</code> 执行的远程主机列表</li><li><code>Tasks</code> 任务集</li><li><code>Varniables</code> 内置变量或自定义变量在<code>playbook</code>中调用</li><li><code>Templates</code> 模板，即使用模板语法的文件，比如配置文件等</li><li><code>Handlers</code> 和<code>notity</code>结合使用，由特定条件触发的操作，满足条件方才执行，否则不执行</li><li><code>tags</code> 标签，指定某条任务执行，用于选择运行<code>playbook</code>中的部分代码。</li></ul><h2 id="playbook语法"><a href="#playbook语法" class="headerlink" title="playbook语法"></a><code>playbook</code>语法</h2><p><code>playbook</code>使用<code>yaml</code>语法格式，后缀可以是<code>yaml</code>,也可以是<code>yml</code>。</p><ul><li>在单一一个<code>playbook</code>文件中，可以连续三个连子号(<code>---</code>)区分多个<code>play</code>。还有选择性的连续三个点好(<code>...</code>)用来表示<code>play</code>的结尾，也可省略。</li><li>次行开始正常写<code>playbook</code>的内容，一般都会写上描述该<code>playbook</code>的功能。</li><li>使用#号注释代码。</li><li>缩进必须统一，不能空格和<code>tab</code>混用。</li><li>缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行实现的。</li><li><code>YAML</code>文件内容和<code>Linux</code>系统大小写判断方式保持一致，是区分大小写的，<code>k/v</code>的值均需大小写敏感</li><li><code>k/v</code>的值可同行写也可以换行写。同行使用:分隔。</li><li><code>v</code>可以是个字符串，也可以是一个列表</li><li>一个完整的代码块功能需要最少元素包括 <code>name: task</code></li></ul><h2 id="playbook执行"><a href="#playbook执行" class="headerlink" title="playbook执行"></a><code>playbook</code>执行</h2><p>通过<code>ansible-playbook</code>命令运行格式为：<code>ansible-playbook &lt;filename.yml&gt; ... [options]</code></p><p>常用选项如下：</p><blockquote><p>–check  or -C    #只检测可能会发生的改变，但不真正执行操作<br>–list-hosts      #列出运行任务的主机<br>–list-tags       #列出playbook文件中定义所有的tags<br>–list-tasks      #列出playbook文件中定义的所以任务集<br>–limit           #主机列表 只针对主机列表中的某个主机或者某个组执行<br>-f                #指定并发数，默认为5个<br>-t                #指定tags运行，运行某一个或者多个tags。（前提playbook中有定义tags）<br>-v                #显示过程  -vv  -vvv更详细</p></blockquote><h2 id="playbook元素"><a href="#playbook元素" class="headerlink" title="playbook元素"></a><code>playbook</code>元素</h2><ul><li><p>主机与用户</p><p>在一个<code>playbook</code>开始时，最先定义的是要操作的主机和用户；</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> run df <span class="token punctuation">-</span>h    <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> test    <span class="token key atrule">shell</span><span class="token punctuation">:</span> name=df <span class="token punctuation">-</span>h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>tasks</code></p><p>每一个<code>task</code>必须有一个名称<code>name</code>,这样在运行<code>playbook</code>时，从其输出的任务执行信息中可以很清楚的辨别是属于哪一个<code>task</code>的，如果没有定义 <code>name</code>，<code>action</code>的值将会用作输出信息中标记特定的<code>task</code>。<br>每一个<code>playbook</code>中可以包含一个或者多个<code>tasks</code>任务列表，每一个<code>tasks</code>完成具体的一件事，（任务模块）比如创建一个用户或者安装一个软件等，在<code>hosts</code>中定义的主机或者主机组都将会执行这个被定义的<code>tasks</code>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create new file    <span class="token key atrule">file</span><span class="token punctuation">:</span> path=/tmp/test01.txt state=touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create new user    <span class="token key atrule">user</span><span class="token punctuation">:</span> name=test001 state=present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>handler</code>与<code>notify</code></p><p>当配置发生变更时，<code>notify actions</code>会在<code>playbook</code>的每一个task结束时被触发，而且即使有多个不同task通知改动的发生，<code>notify actions</code>知会被触发一次；比如多个<code>resources</code>指出因为一个配置文件被改动，所以<code>apache</code>需要重启，但是重新启动的操作知会被执行一次。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># cat httpd.yml </span><span class="token comment">#用于安装httpd并配置启动</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> 192.168.1.31  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install httpd    <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=httpd state=installed  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config httpd    <span class="token key atrule">template</span><span class="token punctuation">:</span> src=/root/httpd.conf dest=/etc/httpd/conf/httpd.conf    <span class="token key atrule">notify</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> restart httpd  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start httpd    <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=started  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart httpd      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=restarted<span class="token comment">#这里只要对httpd.conf配置文件作出了修改，修改后需要重启生效，在tasks中定义了restart httpd这个action，然后在handlers中引用上面tasks中定义的notify。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>变量使用</p><ol><li>配置文件定义变量；</li><li>命令行指定变量：执行<code>playbook</code>时候通过参数<code>-e</code>传入变量，这样传入的变量在整个<code>playbook</code>中都可以被调用，属于全局变量；</li><li>编写<code>playbook</code>时，直接在里面定义变量，然后直接引用，可以定义多个变量；注意：如果在执行<code>playbook</code>时，又通过<code>-e</code>参数指定变量的值，那么会以<code>-e</code>参数指定的为准。</li><li><code>setup</code>模块默认是获取主机信息的，有时候在<code>playbook</code>中需要用到，所以可以直接调用；</li><li>将所有的变量统一放在一个独立的变量<code>YAML</code>文件中，<code>playbook</code>文件直接引用文件调用变量即可。</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@ansible PlayBook<span class="token punctuation">]</span><span class="token comment"># cat variables.yml </span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install pkg      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=<span class="token punctuation">{</span><span class="token punctuation">{</span> pkg <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#执行playbook 指定pkg</span><span class="token punctuation">[</span>root@ansible PlayBook<span class="token punctuation">]</span><span class="token comment"># ansible-playbook -e "pkg=httpd" variables.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>tags</code></p><p>一个<code>playbook</code>文件中，执行时如果想执行某一个任务，那么可以给每个任务集进行打标签，这样在执行的时候可以通过<code>-t</code>选择指定标签执行，还可以通过<code>--skip-tags</code>选择除了某个标签外全部执行等。</p><pre class="line-numbers language-none"><code class="language-none"># 通过-t选项指定tags进行执行ansible-playbook -t rshttpd httpd.yml 通过--skip-tags选项排除不执行的tagsansible-playbook --skip-tags inhttpd httpd.yml <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>template</code></p><p><code>template</code>模板为我们提供了动态配置服务，使用<code>jinja2</code>语言，里面支持多种条件判断、循环、逻辑运算、比较操作等。其实说白了也就是一个文件，和之前配置文件使用<code>copy</code>一样，只是使用<code>copy</code>，不能根据服务器配置不一样进行不同动态的配置。这样就不利于管理。<br>说明：<br>1、多数情况下都将<code>template</code>文件放在和<code>playbook</code>文件同级的<code>templates</code>目录下（手动创建），这样<code>playbook</code>文件中可以直接引用，会自动去找这个文件。如果放在别的地方，也可以通过绝对路径去指定。<br>2、模板文件后缀名为<code>.j2</code>。</p></li></ul><h2 id="playbook模板"><a href="#playbook模板" class="headerlink" title="playbook模板"></a><code>playbook</code>模板</h2><h3 id="template之when"><a href="#template之when" class="headerlink" title="template之when"></a><code>template</code>之<code>when</code></h3><p>条件测试：如果需要根据变量、<code>facts</code>或此前任务的执行结果来做为某<code>task</code>执行与否的前提时要用到条件测试，通过<code>when</code>语句执行，在<code>task</code>中使用<code>jinja2</code>的语法格式、<br>when语句：<br>在<code>task</code>后添加<code>when</code>子句即可使用条件测试；<code>when</code>语句支持<code>jinja2</code>表达式语法。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@ansible PlayBook<span class="token punctuation">]</span><span class="token comment"># cat testtmp.yml </span><span class="token comment">#when示例</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">listen_port</span><span class="token punctuation">:</span> <span class="token number">88</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Httpd      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=httpd state=installed    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Config System6 Httpd      <span class="token key atrule">template</span><span class="token punctuation">:</span> src=httpd6.conf.j2 dest=/etc/httpd/conf/httpd.conf      <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution_major_version == "6"   <span class="token comment">#判断系统版本，为6便执行上面的template配置6的配置文件</span>      <span class="token key atrule">notify</span><span class="token punctuation">:</span> Restart Httpd    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Config System7 Httpd      <span class="token key atrule">template</span><span class="token punctuation">:</span> src=httpd7.conf.j2 dest=/etc/httpd/conf/httpd.conf      <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution_major_version == "7"   <span class="token comment">#判断系统版本，为7便执行上面的template配置7的配置文件</span>      <span class="token key atrule">notify</span><span class="token punctuation">:</span> Restart Httpd    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Start Httpd      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=started  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Restart Httpd      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="template之items"><a href="#template之items" class="headerlink" title="template之items"></a><code>template</code>之<code>items</code></h3><p><code>with_items</code>迭代，当有需要重复性执行的任务时，可以使用迭代机制。<br>对迭代项的引用，固定变量名为<code>“item”</code>，要在task中使用with_items给定要迭代的元素列表。<br>列表格式：<br>  字符串<br>  字典</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@ansible PlayBook<span class="token punctuation">]</span><span class="token comment"># cat testwith.yml </span><span class="token comment"># 示例with_items</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Package      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=<span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span> state=installed   <span class="token comment">#引用item获取值</span>      <span class="token key atrule">with_items</span><span class="token punctuation">:</span>     <span class="token comment">#定义with_items</span>        <span class="token punctuation">-</span> httpd        <span class="token punctuation">-</span> vsftpd        <span class="token punctuation">-</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="template之if"><a href="#template之if" class="headerlink" title="template之if"></a><code>template</code>之<code>if</code></h3><p>通过使用<code>for</code>，<code>if</code>可以更加灵活的生成配置文件等需求，还可以在里面根据各种条件进行判断，然后生成不同的配置文件、或者服务器配置相关等。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 循环playbook文件中定义的变量，依次赋值给port</span><span class="token punctuation">[</span>root@ansible PlayBook<span class="token punctuation">]</span><span class="token comment"># cat templates/nginx.conf.j2 </span><span class="token punctuation">{</span>% for port in nginx_vhost_port %<span class="token punctuation">}</span>server<span class="token punctuation">{</span>     <span class="token key atrule">listen</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> port <span class="token punctuation">}</span><span class="token punctuation">}</span>;     <span class="token key atrule">server_name</span><span class="token punctuation">:</span> localhost;<span class="token punctuation">}</span><span class="token punctuation">{</span>% endfor %<span class="token punctuation">}</span><span class="token comment"># 说明：这里添加了判断，如果listen没有定义的话，默认端口使用8888，如果server_name有定义，那么生成的配置文件中才有这一项。</span><span class="token punctuation">[</span>root@ansible PlayBook<span class="token punctuation">]</span><span class="token comment"># cat templates/nginx.conf.j2 </span><span class="token punctuation">{</span>% for vhost in nginx_vhosts %<span class="token punctuation">}</span>server<span class="token punctuation">{</span>     <span class="token punctuation">{</span>% if vhost.listen is defined %<span class="token punctuation">}</span>     <span class="token key atrule">listen</span><span class="token punctuation">:</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> vhost.listen <span class="token punctuation">}</span><span class="token punctuation">}</span>;     <span class="token punctuation">{</span>% else %<span class="token punctuation">}</span>     <span class="token key atrule">listen</span><span class="token punctuation">:</span> 8888;     <span class="token punctuation">{</span>% endif %<span class="token punctuation">}</span>     <span class="token punctuation">{</span>% if vhost.server_name is defined %<span class="token punctuation">}</span>     <span class="token key atrule">server_name</span><span class="token punctuation">:</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> vhost.server_name <span class="token punctuation">}</span><span class="token punctuation">}</span>;     <span class="token punctuation">{</span>% endif %<span class="token punctuation">}</span>     <span class="token key atrule">root</span><span class="token punctuation">:</span>   <span class="token punctuation">{</span><span class="token punctuation">{</span> vhost.root <span class="token punctuation">}</span><span class="token punctuation">}</span>; <span class="token punctuation">}</span><span class="token punctuation">{</span>% endfor %<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible简介（一）</title>
      <link href="/2021/05/22/05-dev/ansible-jian-jie/"/>
      <url>/2021/05/22/05-dev/ansible-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="自动化运维工具之Ansible"><a href="#自动化运维工具之Ansible" class="headerlink" title="自动化运维工具之Ansible"></a>自动化运维工具之<code>Ansible</code></h1><h2 id="Ansible简介"><a href="#Ansible简介" class="headerlink" title="Ansible简介"></a><code>Ansible</code>简介</h2><h3 id="Ansible是什么"><a href="#Ansible是什么" class="headerlink" title="Ansible是什么"></a><code>Ansible</code>是什么</h3><p><code>ansible</code>是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（<code>puppet</code>、<code>chef</code>、<code>func</code>、<code>fabric</code>）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。</p><p><code>ansible</code>是基于 <code>paramiko</code> 开发的,并且基于模块化工作，本身没有批量部署的能力。真正具有批量部署的是<code>ansible</code>所运行的模块，<code>ansible</code>只是提供一种框架。<code>ansible</code>不需要在远程主机上安装<code>client/agents</code>，因为它们是基于ssh来和远程主机通讯的。ansible目前已经已经被红帽官方收购，是自动化运维工具中大家认可度最高的，并且上手容易，学习简单</p><h3 id="Ansible特点"><a href="#Ansible特点" class="headerlink" title="Ansible特点"></a><code>Ansible</code>特点</h3><ol><li>部署简单，只需在主控端部署<code>Ansible</code>环境，被控端无需做任何操作；</li><li>默认使用<code>SSH</code>协议对设备进行管理；</li><li>有大量常规运维操作模块，可实现日常绝大部分操作；</li><li>配置简单、功能强大、扩展性强；</li><li>支持<code>API</code>及自定义模块，可通过Python轻松扩展；</li><li>通过<code>Playbooks</code>来定制强大的配置、状态管理；</li><li>轻量级，无需在客户端安装<code>agent</code>，更新时，只需在操作机上进行一次更新即可；</li><li>提供一个功能强大、操作性强的Web管理界面和<code>REST API</code>接口——AWX平台。</li></ol><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210521212738243.png" alt="image-20210521212738243"><p>​        上图中主要模块如下：</p><p>​        <code>Ansible</code>：<code>Ansible</code>核心程序;</p><p>​        <code>HostInventory</code>：<code>Ansible</code>管理主机信息列表，包括主机地址、端口、密码等信息以及针对主机/组定义的变量；</p><p>​        <code>Playbooks</code>：剧本/任务集，编排定义任务集的配置文件，通常为<code>json</code>或<code>YML</code>文件；</p><p>​        <code>CoreMoudles</code>：核心模块，实现各项功能的基础模块，供任务调用执行；</p><p>​        <code>CustomModules</code>：自定义模块，主要由用户自行开发核心模块无法支持的功能，支持多种语言；</p><p>​        <code>ConnectionPlugins</code>：链接插件，<code>Ansible</code>与主机通信时使用；</p><h2 id="Ansible安装配置"><a href="#Ansible安装配置" class="headerlink" title="Ansible安装配置"></a><code>Ansible</code>安装配置</h2><h3 id="Ansible安装"><a href="#Ansible安装" class="headerlink" title="Ansible安装"></a><code>Ansible</code>安装</h3><ul><li><p><code>pip</code>安装</p><p>如果主机当前没有安装<code>pip</code>模块，可通过<code>yum</code>先进行<code>pip</code>模块安装；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  <span class="token comment"># 方案一</span>yum <span class="token function">install</span> python-pip<span class="token comment"># 方案二</span><span class="token function">wget</span> https://bootstrap.pypa.io/pip/2.7/get-pip.pypython get-pip.pypip <span class="token function">install</span> ansible<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>yum</code>安装</p><p>通过Linux常用包管理工具安装；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> epel-release <span class="token parameter variable">-y</span>yum <span class="token function">install</span> ansible <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="Ansible配置"><a href="#Ansible配置" class="headerlink" title="Ansible配置"></a><code>Ansible</code>配置</h3><h4 id="服务配置文件"><a href="#服务配置文件" class="headerlink" title="服务配置文件"></a>服务配置文件</h4><p>配置文件名为<code>ansible.cfg</code>，主要定义主机的默认配置参数，如主机组位置、默认端口、秘钥文件路径等；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#inventory = /etc/ansible/hosts 该参数表示资源清单inventory文件的位置，资源清单就是一些Ansible需要连接管理的主机列表</span><span class="token comment">#library = /usr/share/my_modules/ Ansible的操作动作，无论是本地或远程，都使用一小段代码来执行，这小段代码称为模块，这个library参数就是指向存放Ansible模块的目录</span><span class="token comment">#module_utils= /usr/share/my_module_utils/</span><span class="token comment">#remote_tmp= ~/.ansible/tmp指定远程执行的路径</span><span class="token comment">#local_tmp= ~/.ansible/tmpansible管理节点的执行路径</span><span class="token comment">#forks = 5 forks 设置默认情况下Ansible最多能有多少个进程同时工作，默认设置最多5个进程并行处理。具体需要设置多少个，可以根据控制主机的性能和被管理节点的数量来确定。</span><span class="token comment">#poll_interval= 15 轮询间隔</span><span class="token comment">#sudo_user= root sudo使用的默认用户，默认是root</span><span class="token comment">#ask_sudo_pass= True 是否需要用户输入sudo密码</span><span class="token comment">#ask_pass= True 是否需要用户输入连接密码</span><span class="token comment">#remote_port= 22 这是指定连接对端节点的管理端口，默认是22，除非设置了特殊的SSH端口，不然这个参数一般是不需要修改的</span><span class="token comment">#module_lang= C 这是默认模块和系统之间通信的计算机语言,默认为'C'语言.</span><span class="token comment">#host_key_checking= False 跳过ssh首次连接提示验证部分，False表示跳过。</span><span class="token comment">#timeout = 10 连接超时时间</span><span class="token comment">#module_name= command 指定ansible默认的执行模块</span><span class="token comment">#nocolor= 1 默认ansible会为输出结果加上颜色,用来更好的区分状态信息和失败信息.如果你想关闭这一功能,可以把'nocolor'设置为'1':</span><span class="token comment">#private_key_file=/path/to/file.pem在使用ssh公钥私钥登录系统时候，使用的密钥路径。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置文件加载顺序：</p><ol><li>环境变量定义路径：<code>ANSIBLE_CONFIG</code>;</li><li>当前执行目录下配置文件：<code>ansible.cfg</code></li><li>当前用户家目录下配置文件：<code>~/.ansible.cfg</code></li><li>系统默认配置文件：<code>/etc/ansible/ansible.cfg</code></li></ol></blockquote><h4 id="Inventory配置文件"><a href="#Inventory配置文件" class="headerlink" title="Inventory配置文件"></a><code>Inventory</code>配置文件</h4><ul><li><p>主机/组列表配置文件，默认配置文件为<code>/etc/ansible/hosts</code>；</p><pre class="line-numbers language-none"><code class="language-none"># 主机/组配置列表，主机列表需在主机组上方# 主机配置## IP地址 + 端口10.0.0.1:22## 主机名 + 端口 + 变量定义bigdata-demo1.jd.163.org:22 ansible_ssh_user = root# 主机组配置，支持通配符[db]bigdata-demo2.jd.163.org:22bigdata-demo3.jd.163.org:22ansible_ssh_user=root# 主机组继承[cluster:children]bigdata-demo[4-6].jd.163.orgdb# 主机/组变量配置，也可创建独立配置文件[db:vars]ansible_ssh_user=rootansible_ssh_pass=123456# ansible包含两个默认组# all ： 包含所有主机# ungrouped：除了all组之外没有其他组的主机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>变量配置文件，默认配置文件路径为<code>/etc/ansible/</code></p><ul><li><p>主机变量配置文件，配置文件与主机名或IP地址一致，格式为<code>yml</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 主机变量：在/etc/ansible/目录下创建目录host_vars，然后创建配置文件bigdata-demo1.jd.163.org.yml  （配置文件名与主机名保持一致）</span><span class="token function">vim</span> /etc/ansible/hosts_vars/bigdata-demo1.jd.163.org.yml <span class="token assign-left variable">ansible_ssh_user</span><span class="token operator">=</span>root<span class="token assign-left variable">ansible_ssh_pass</span><span class="token operator">=</span><span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主机组变量配置文件，配置文件名与主机组一致，格式为<code>yml</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 主机组变量：在/etc/ansible目录下创建目录group_vars，然后再创建文件web.yml，以组名命名的yml文件</span><span class="token function">vim</span> /etc/ansible/group_vars/db.yml<span class="token assign-left variable">ansible_ssh_user</span><span class="token operator">=</span>root<span class="token assign-left variable">ansible_ssh_pass</span><span class="token operator">=</span><span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>常用配置参数</p><table><thead><tr><th>ansible_ssh_host</th><th>将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置</th></tr></thead><tbody><tr><td>ansible_ssh_port</td><td>ssh端口号。如果不是默认的端口号，通过此变量设置</td></tr><tr><td>ansible_ssh_user</td><td>默认的 ssh 用户名</td></tr><tr><td>ansible_ssh_pass</td><td>ssh 密码(这种方式并不安全,我们强烈建议使用 –ask-pass 或 SSH 密钥)</td></tr><tr><td>ansible_sudo_pass</td><td>sudo 密码(这种方式并不安全,我们强烈建议使用 –ask-sudo-pass)</td></tr><tr><td>ansible_sudo_exe</td><td>sudo 命令路径(适用于1.8及以上版本)</td></tr><tr><td>ansible_connection</td><td>与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 ‘smart’,’smart’ 方式会根据是否支持 ControlPersist, 来判断’ssh’ 方式是否可行.</td></tr><tr><td>ansible_ssh_private_key_file</td><td>ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.</td></tr><tr><td>ansible_shell_type</td><td>目标系统的shell类型.默认情况下,命令的执行使用 ‘sh’ 语法,可设置为 ‘csh’ 或 ‘fish’.</td></tr><tr><td>ansible_python_interpreter</td><td>目标主机的 python 路径。适用于的情况: 系统中有多个 Python, 或者命令路径不是”/usr/bin/python”，比如 *BSD， 或者 /usr/bin/python 不是 2.X 版本的 Python。我们不使用 “/usr/bin/env” 机制,因为这要求远程用户的路径设置正确，且要求 “python” 可执行程序名不可为 python以外的名字(实际有可能名为python26)。与 ansible_python_interpreter 的工作方式相同，可设定如 ruby 或 perl 的路径….</td></tr></tbody></table></li></ul></li></ul><h3 id="Ansible常用命令"><a href="#Ansible常用命令" class="headerlink" title="Ansible常用命令"></a><code>Ansible</code>常用命令</h3><h4 id="ansible命令集"><a href="#ansible命令集" class="headerlink" title="ansible命令集"></a><code>ansible</code>命令集</h4><blockquote><p>**<code>ansible</code>**：<code>ad-hoc</code>临时命令执行工具; （常用）</p><p><code>ansible-doc</code>：模块功能查看命令集;</p><p><code>ansible-galaxy</code>：上传/下载优秀代码或Roles的官网平台，基于互联网；</p><p>**<code>ansible-playbook</code>**：定制自动化任务集编排工具；（常用）</p><p><code>ansible-pull</code>：远程执行命令工具，常用于海量机器拉取配置；</p><p><code>ansible-vault</code>：文件加密工具；</p><p><code>ansible-console</code>：基于<code>linux consoble</code>界面与用户交互的命令执行工具；</p></blockquote><h2 id="Ansible任务执行"><a href="#Ansible任务执行" class="headerlink" title="Ansible任务执行"></a><code>Ansible</code>任务执行</h2><ul><li><p><strong><code>Ansible</code>执行模式</strong></p><p><code>Ansible</code>由控制主机对被控主机的操作方式分为两类，<code>ad-hoc</code>及<code>playbook</code>：</p><ul><li><code>ad-hoc</code>：点对点模式，使用单个模块，支持多主机批量执行单条命令；<code>ad-hoc</code>操作主机类似通过终端操作Linux主机，一条<code>ad-hoc</code>命令相当于在终端中对Linux进行一次简单操作；</li><li><code>playbook</code>：剧本模式，是<code>Ansible</code>的主要管理方式，也是<code>Ansible</code>的强大的关键所在；<code>playbook</code>通过组合多个任务完成一类功能，如服务安装部署、数据库备份等；可以简单理解为<code>playbook</code>是多多条<code>ad-hoc</code>命令进行的封装；</li></ul></li><li><p><strong><code>Ansible</code>执行流程</strong></p><ol><li>加载配置文件，默认配置文件路径为<code>/etc/ansible/ansible.cfg</code>;</li><li>根据<code>inventory</code>配置文件找到对应主机/组，并加载相关变量；</li><li>加载任务对应模块文件；</li><li>通过<code>ansible</code>将模块或命令转化为对应的临时<code>python</code>文件，并推送至受控主机/组;</li><li>对推送至受控主机/组的python文件授予执行权限;(<code>python</code>文件保存在受控主机/组执行用户家目录下<code>.ansible/tmp/xxx/xxx.py</code>)；</li><li>执行<code>python</code>文件，并返回结果至主控端；</li><li>删除临时文件并退出；</li></ol></li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210521213842013.png" alt="image-20210521213842013">]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac使用小技巧</title>
      <link href="/2021/05/17/06-skill/mac-shi-yong-ji-qiao/"/>
      <url>/2021/05/17/06-skill/mac-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac系统使用小技巧"><a href="#Mac系统使用小技巧" class="headerlink" title="Mac系统使用小技巧"></a>Mac系统使用小技巧</h1><h2 id="日历增强"><a href="#日历增强" class="headerlink" title="日历增强"></a>日历增强</h2><p>法定节假日日历源地址：<code>https://mtjo.net/icalendar/holidays.ics</code></p><h2 id="命令行分卷压缩"><a href="#命令行分卷压缩" class="headerlink" title="命令行分卷压缩"></a>命令行分卷压缩</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -b 指定单个分卷大小  -a 指定分卷序号位数  demo.zip为文件通配前缀</span><span class="token comment"># 压缩后生成文件需手动修改后缀为demo.zip.001格式才能解压</span><span class="token function">zip</span> - demo.txt <span class="token operator">|</span><span class="token function">split</span>  <span class="token parameter variable">-b</span>  20mb <span class="token parameter variable">-a</span> <span class="token number">3</span> - demo.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="常见问题处理"><a href="#常见问题处理" class="headerlink" title="常见问题处理"></a>常见问题处理</h2><ul><li><p>远程登陆告警</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-bash: warning: setlocale: LC_CTYPE: cannot change locale <span class="token punctuation">(</span>UTF-8<span class="token punctuation">)</span>: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该问题是因为通过本地ssh客户端登陆远程服务器时，客户端会将本地<code>LC_*</code>环境变量发发送到远程服务器上，当本地环境变量内容在远程服务器不存在时，就会导致远程服务器告警；</p><p>解决方案：</p><p>修改本地ssh客户端配置文件<code>/etc/ssh/ssh_config</code>，注释其中<code> SendEnv LANG LC_*</code>即可；</p></li><li><p><code>vi</code>编辑文本异常</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error detected <span class="token keyword">while</span> processing BufNewFile Autocommands <span class="token keyword">for</span> <span class="token string">"*.gradle"</span><span class="token punctuation">..</span>FileType Autocommands <span class="token keyword">for</span> <span class="token string">"*"</span><span class="token punctuation">..</span>Syntax Autocommands <span class="token keyword">for</span> <span class="token string">"*"</span><span class="token punctuation">..</span>function <span class="token operator">&lt;</span>SNR<span class="token operator">&gt;</span>6_SynSet<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">..</span>script /opt/local/share/vim/vim82/syntax/groovy.vim:line  <span class="token number">256</span>:E945: Range too large <span class="token keyword">in</span> character classPress ENTER or <span class="token builtin class-name">type</span> <span class="token builtin class-name">command</span> to <span class="token builtin class-name">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>该报错可能与设置<code>vim</code>主题有关，可通过在配置文件<code>~/.vimrc</code>中添加配置规避；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/.vimrc<span class="token builtin class-name">set</span> <span class="token assign-left variable">re</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>iterm2</code>全屏顶部闪动白条</p><p>目前怀疑为<code>Big Sur</code>的Bug,可通过iTerm2的配置解决，配置路径为：<code>Advanced &gt; General &gt; Work around Big Sur bug where a white line flashes at the top of the screen in full screen mode</code>，修改配置项为Yes即可；</p></li><li><p>启动软件报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">you <span class="token keyword">do</span> not have permission to <span class="token function">open</span> the application<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该问题出现在OSX 11系统上，可尝试通过以下代码重新签名尝试修复</p><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">codesign --force --deep --sign -  /Applications/DBeaver.app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Knox简介及部署</title>
      <link href="/2021/05/13/03-hadoop/knox-jian-jie-ji-bu-shu/"/>
      <url>/2021/05/13/03-hadoop/knox-jian-jie-ji-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Knox-介绍"><a href="#Apache-Knox-介绍" class="headerlink" title="Apache Knox 介绍"></a>Apache Knox 介绍</h1><p>Apache Knox Gateway是用于与Apache Hadoop部署的RESTAPI和UI交互的应用程序网关。Knox Gateway为与Apache Hadoop集群的所有REST和HTTP交互提供一个单一的访问点。KNOX提供三组面向用户的服务：</p><ul><li>代理服务：Apache Knox项目的主要目标是通过代理HTTP资源提供对Apache Hadoop的访问。</li><li>认证服务：认证USTAPI访问以及UIS的WebSSO流进行身份验证。LDAP/AD，基于头的PROAUTH、Kerberos、SAML、Oauth都是可选项；</li><li>客户服务：可以通过DSL编写脚本或直接将Knox Shell类作为SDK来完成客户端开发；</li></ul><p>简单的说，Apache Knox Gateway是一款用于保护Hadoop生态体系安全的代理网关系统，为Hadoop集群提供唯一的代理入口。Knox以类似反向单例的形式挡在用户前面，隐藏部署细节，接管所有用户的HTTP请求，以此来保护集群的安全。</p><p>Knox网管本质上是一款基于Jetty实现的高性能反向代理服务器，通过内置的过滤器链来处理URL请求，支持使用LDAP进行用户身份认证。Knox网管在架构设计上具有良好的可扩展性，这种扩展性主要通过Service和Provider这两个扩展性框架来实现。Server扩展性框架还提供了一种网关新增的HTTP或RESTful服务端点的途径。例如WebHDFS就是以新建的Service 的形式加入Knox网管的；而Provider扩展性框架则是用来定义并实现相应Service所提供的功能，例如端点的用户认证或WebHDFS的文件上传等功能。</p><p>Knox的官方文档地址为<a href="https://knox.apache.org/books/knox-1-4-0/user-guide.html">https://knox.apache.org/books/knox-1-4-0/user-guide.html</a></p><h1 id="Apache-Knox-配置"><a href="#Apache-Knox-配置" class="headerlink" title="Apache Knox 配置"></a>Apache Knox 配置</h1><p>Knox的配置文件位于<code>$KNOX_HOME/conf</code>目录下，主要包含以下配置文件：</p><ul><li>gateway-site.xml：用于配置knox服务访问相关属性；</li><li>krb5JAASLogin.conf：配置keytab路径及对应principal；</li><li>users.ldif：配置ldap相关层级，一般不做修改；</li><li>topologies：配置代理服务拓扑；</li></ul><p>knox已预置了部分服务的路由配置信息，主要位于<code>$KNOX_HOME/data/services</code>下面</p><ul><li>service.xml：配置预置服务role及转发规则；需自定义服务，可在此参考预置配置文件进行配置；</li></ul><blockquote><p>knox服务最终的URL地址生成规则为：协议 + 主机名 + 端口 + knox根目录 + topology + 服务</p><p>协议：一般为http</p><p>主机名：FQDN</p><p>端口：gateway-site.xml配置文件gateway.port参数配置</p><p>knox根目录：gateway-site.xml配置文件gateway.path参数配置</p><p>topology：由$KNOX_HOME/conf/topology/下文件名决定，例如配置文件名为demo.xml，则topology值则为demo</p><p>服务：为$KNOX_HOME/data/services/xxx/versions/service.xml中role对应name值</p><p>按照以下样例说明配置文件，最终的代理访问地址为：<a href="http://hostname:8443/gateway/demo/yarn">http://hostname:8443/gateway/demo/yarn</a></p></blockquote><h2 id="样例配置说明"><a href="#样例配置说明" class="headerlink" title="样例配置说明"></a>样例配置说明</h2><h3 id="conf-gateway-site-xml"><a href="#conf-gateway-site-xml" class="headerlink" title="conf/gateway-site.xml"></a>conf/gateway-site.xml</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token comment">&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements.  See the NOTICE filedistributed with this work for additional informationregarding copyright ownership.  The ASF licenses this fileto you under the Apache License, Version 2.0 (the"License"); you may not use this file except in compliancewith the License.  You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>gateway.backlog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>128<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>配置挂起队列最大长度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>gateway.port<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>8443<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>配置knox服务端口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>gateway.path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>配置knox服务根目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>gateway.gateway.conf.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>deployments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>The directory within GATEWAY_HOME that contains gateway topology files and deployments.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>gateway.hadoop.kerberos.secured<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>配置是否启用Kerberos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>java.security.krb5.conf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/data/disk2/knox/krb5.conf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>配置集群Kerberos配置文件路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>java.security.auth.login.config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/data/disk2/knox/conf/krb5JAASLogin.conf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>配置keytab相关信息文件路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>sun.security.krb5.debug<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>配置是否启用Kerberos debug模式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- @since 0.10 Websocket configs --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>gateway.websocket.feature.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Enable/Disable websocket feature.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>gateway.scope.cookies.feature.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>ssl.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="krb5JAASLogin-conf"><a href="#krb5JAASLogin-conf" class="headerlink" title="krb5JAASLogin.conf"></a>krb5JAASLogin.conf</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">com.sun.security.jgss.initiate <span class="token punctuation">{</span>    com.sun.security.auth.module.Krb5LoginModule required    <span class="token assign-left variable">renewTGT</span><span class="token operator">=</span>true        <span class="token assign-left variable">doNotPrompt</span><span class="token operator">=</span>true      <span class="token assign-left variable">useKeyTab</span><span class="token operator">=</span>true    <span class="token assign-left variable">keyTab</span><span class="token operator">=</span><span class="token string">"/data/disk2/knox/conf/yarn.keytab"</span>  <span class="token comment">#配置keytab文件绝对路径</span>    <span class="token assign-left variable">principal</span><span class="token operator">=</span><span class="token string">"nm/bigdata006.demo.com.cn@BIGDATA.DEMO.COM.CN"</span>  <span class="token comment"># 配置keytab文件对应principal</span>    <span class="token assign-left variable">isInitiator</span><span class="token operator">=</span>true    <span class="token assign-left variable">storeKey</span><span class="token operator">=</span>true    <span class="token assign-left variable">useTicketCache</span><span class="token operator">=</span>true    <span class="token assign-left variable">client</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="topologies"><a href="#topologies" class="headerlink" title="topologies"></a>topologies</h3><p>该目录保存具体应用配置文件，配置文件名会作为最终knox应用路径的一部分；</p><p>以下为一个简单demo供参考；</p><p>文件名：demo.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>topology</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--&gt;gateway部分一般保持不变，不做修改&lt;--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gateway</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span><span class="token punctuation">&gt;</span></span>webappsec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>WebAppSec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>cors.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span><span class="token punctuation">&gt;</span></span>identity-assertion<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span><span class="token punctuation">&gt;</span></span>ha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>HaProvider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>WEBHDFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>maxFailoverAttempts=3;failoverSleep=1000;maxRetryAttempts=300;retrySleep=1000;enabled=true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>YARNUI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>maxFailoverAttempts=3;failoverSleep=1000;maxRetryAttempts=300;retrySleep=1000;enabled=true                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gateway</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--&gt;role属性值knox已提供常用服务预置，详细参考$KNOX_HOME/data/services/xxx/versions/service.xml文件中role,多个服务可添加多个service配置&lt;--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span><span class="token punctuation">&gt;</span></span>NAMENODE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>hdfs://bigdata015.demo.com.cn:8020/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>hdfs://bigdata016.demo.com.cn:8020/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span><span class="token punctuation">&gt;</span></span>HDFSUI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://bigdata015.demo.com.cn:50070/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://bigdata016.demo.com.cn:50070/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span><span class="token punctuation">&gt;</span></span>YARNUI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://bigdata015.demo.com.cn:8088/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://bigdata016.demo.com.cn:8088/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span><span class="token punctuation">&gt;</span></span>JOBHISTORYUI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://bigdata016.demo.com.cn:19888/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span><span class="token punctuation">&gt;</span></span>AMBARIUI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://bigdata015.demo.com.cn:8080/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>topology</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Knox启动"><a href="#Knox启动" class="headerlink" title="Knox启动"></a>Knox启动</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$KNONX_HOME</span>/bin/knoxcli.sh create-master <span class="token punctuation">[</span>--force<span class="token punctuation">]</span><span class="token variable">$KNONX_HOME</span>/bin/gateway.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：</p><p>当knox启动kerberos时，0.8-1.2之间版本会存在认证问题导致转发失败；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> knox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker架构原理及使用</title>
      <link href="/2021/05/13/05-dev/docker-jia-gou-yuan-li-ji-shi-yong/"/>
      <url>/2021/05/13/05-dev/docker-jia-gou-yuan-li-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装与配置"><a href="#Docker安装与配置" class="headerlink" title="Docker安装与配置"></a>Docker安装与配置</h1><p>从2017年3月开始，docker分裂为两个分支版本docker CE与docker EE。</p><p>Docker CE即社区免费版；</p><p>Docker EE即企业版，强调安全，但需付费使用；</p><p>Docker采用Linux内核技术，所以docker只能运行在Linux系统上，官网说明要求Linux kernel至少3.8以上版本；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 移除自带旧版本docker</span>yum remove <span class="token function">docker</span> docker-client  docker-client-latest docker-common  docker-latest docker-latest-logrotate  docker-logrotate docker-selinux  docker-engine-selinux docker-engine<span class="token comment"># 安装yum工具包</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils<span class="token comment"># 配置aliyun yum源地址后通过yum安装docker</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment"># 添加centos原生源信息</span><span class="token punctuation">[</span>centos-extras<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Centos extras - <span class="token variable">$basearch</span><span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirror.centos.org/centos/7/extras/x86_64<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>http://centos.org/keys/RPM-GPG-KEY-CentOS-7yum makecache fast<span class="token comment"># 安装指定版本docker-ce</span>yum <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker默认安装路径为/var/lib/docker，如果/var没有单独挂载至数据盘，容器出现磁盘空间问题，可将/var/lib/docker目录软链至数据盘规避磁盘空间问题；</p></blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">错误1：安装时提示 Error: Package: docker-ce-rootless-extras-20.10.17-3.el7.x86_64 <span class="token punctuation">(</span>docker-ce-stable<span class="token punctuation">)</span> Requires: fuse-overlayfs <span class="token operator">&gt;=</span> <span class="token number">0.7</span>；解决方案：添加centos原生源地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><p>Docker默认支持四中网络模式</p><table><thead><tr><th>网络模式</th><th align="left">说明</th></tr></thead><tbody><tr><td>host</td><td align="left">容器和宿主机共享Network namespace。</td></tr><tr><td>container</td><td align="left">创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围。</td></tr><tr><td>none</td><td align="left">容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等。</td></tr><tr><td>bridge</td><td align="left">（默认为该模式）此模式会为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，通过docker0网桥以及Iptables nat表配置与宿主机通信</td></tr></tbody></table><h2 id="默认网络"><a href="#默认网络" class="headerlink" title="默认网络"></a>默认网络</h2><p>当安装Docker时，它会自动创建三个网络，即bridge、host和none，通过<code>docker network ls</code>可以查看；docker运行容器时，可以通过<code>—net</code>标志来指定容器网络模式，默认模式为bridge；</p><h2 id="Host模式"><a href="#Host模式" class="headerlink" title="Host模式"></a>Host模式</h2><p>Host模式相当于vmware虚拟机中的桥接模式，容器与宿主机在同一个网络中，但容器没有独立的IP地址；容器与宿主机共用同一个Network Namespace。容器内部不会虚拟网卡，而是直接使用宿主机的IP和端口。</p><p>Host模式可以直接使用宿主机的IP地址与外界进行通信，容器内部服务端口也可以直接使用宿主机端口，不需要进行NAT转发，host网络模式的最大优势是网络性能较好，但网络隔离性较差；</p><h2 id="Container模式"><a href="#Container模式" class="headerlink" title="Container模式"></a>Container模式</h2><p>Container网络模式指定一个新创建的容器与一个已有容器进行Network Namespace进行共享，而不是与宿主机共享。新创建的容器不会创建自己的网卡，而是与一个已存在的容器进行共享，两个容器的进程可以通过lo网卡设备进行通信；</p><h2 id="None模式"><a href="#None模式" class="headerlink" title="None模式"></a>None模式</h2><p>None模式下，容器拥有自己的Network Namespace，但是并不会对容器进行任何网络 配置，即容器没有网卡、IP、路由等信息。用户可自行为容器添加网卡、配置IP路由等；</p><p>None网络模式下容器仅具有lo回环网络，容器无法联网，但是封闭的网络环境能够很好的保证容器的安全性；</p><h2 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h2><p>Bridge模式相当于vmware虚拟机中的nat模式，容器使用独立的Network Namespace，并链接到docker0虚拟网桥上；虚拟网桥的工作模式与物理交换机类似，相当于Bridge模式的容器通过bridge0链接在一个二层网络中。</p><p>Bridge网络模式下，容器启动后会在宿主机上创建一堆虚拟网卡veth pair设备，veth pair设配一端位于容器中，作为容器的网卡设备，一般命名为eth0；另一端位于宿主机中，作为网卡设备加入到docker0网桥中，一般以vethxxxx形式命名；</p><h1 id="Docker镜像管理"><a href="#Docker镜像管理" class="headerlink" title="Docker镜像管理"></a>Docker镜像管理</h1><p>docker官方镜像库地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>可在官方镜像仓库按照需要拉取对应仓库基础镜像，启动docker加载镜像后，在官方基础镜像基础上安装所需依赖软件；所有基础环境安装完毕后，可重新保存为新的镜像进行分享或个人存档；</p><h2 id="镜像加载"><a href="#镜像加载" class="headerlink" title="镜像加载"></a>镜像加载</h2><p>docker默认从hub.docker拉取镜像，如主机环境不通公网，也可自定搭建私有镜像库或直接使用离线文件加载镜像至本地；</p><ul><li><strong>官方镜像</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> image pull ubuntu:v1<span class="token comment"># ubuntu为仓库名</span><span class="token comment"># v1为标签名，当标签名为latest时可省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>本地镜像</strong></li></ul><p>docker import：加载镜像文件时，可自定义镜像名称及标签；</p><p>docker load：无法自定义镜像名称及标签；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">import</span> - ubuntu:20.0.4 <span class="token operator">&lt;</span> alibaba-ubuntu-20.0.4.tar.gz<span class="token comment"># ubuntu为导入后自定义的镜像名</span><span class="token comment"># 20.0.4为导入后的自定义标签名</span><span class="token function">docker</span> load <span class="token operator">&lt;</span> alibaba-ubuntu-20.0.4.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>镜像文件必须为tar.gz格式</p></blockquote><h2 id="镜像保存"><a href="#镜像保存" class="headerlink" title="镜像保存"></a>镜像保存</h2><p>docker支持基于容器创建新的镜像，用于备份或分享；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit <span class="token parameter variable">-a</span> <span class="token string">"semon"</span> <span class="token parameter variable">-m</span> <span class="token string">"remark"</span>  ubuntu_vm ubuntu_dev:v2<span class="token comment"># ubuntu_vm为容器名 </span><span class="token comment"># ubuntu_dev为镜像名</span><span class="token comment"># v2为标签名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="镜像导出"><a href="#镜像导出" class="headerlink" title="镜像导出"></a>镜像导出</h2><p>docker支持用户将容器导出或保存为镜像，也支持将镜像导出为本地镜像文件；</p><ul><li><strong>容器导出</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">export</span> ubuntu_vm <span class="token operator">&gt;</span> ubuntu_vm.tar.gz<span class="token comment"># ubuntu_vm为容器名，支持容器名或容器ID</span><span class="token comment"># 仅导出当前容器的文件目录</span><span class="token function">docker</span> save <span class="token parameter variable">-o</span> docker_con.tar.gz ubuntu_vm<span class="token comment"># -o 指定导出本地镜像文件名</span><span class="token comment"># ubuntu_vm为容器名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker save 保存容器实际上保存的是容器所加载的镜像，与直接保存镜像结果一致；</p></blockquote><ul><li><strong>镜像导出</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> save <span class="token parameter variable">-o</span> docker_img.tar.gz ubuntu:latest 6fc15b302f3a<span class="token comment"># -o指定导出本地镜像文件名</span><span class="token comment"># 支持通过镜像ID或镜像仓库:标签名指定要导出的镜像</span><span class="token comment"># 支持一次性导出多个镜像至同一个文件，多个镜像通过空格分隔</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="镜像删除"><a href="#镜像删除" class="headerlink" title="镜像删除"></a>镜像删除</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="镜像查看"><a href="#镜像查看" class="headerlink" title="镜像查看"></a>镜像查看</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><code>docker export</code> 与<code>docker import</code>配套使用，<code>docker save</code>与<code>docker load</code>配套使用；</li><li><code>docker export</code>将容器导出为本地文件，实际为linux系统的文件目录，故文件较小，无法回滚历史操作，常用于制作通用环境镜像；</li><li><code>docker import</code>仅支持将<code>docker export</code>导出的文件加载为镜像，加载时可自定义镜像名称及标签，如指定的镜像名及标签与已有镜像冲突，则抢占镜像名与标签，已有镜像被抹除镜像名及标签，但镜像仍然存在，可通过镜像ID进行操作；</li><li><code>docker save</code>将镜像或指定容器所加载的镜像导出为本地文件，导出的本地文件实际为一个多层文件目录，重新加载后，可回滚历史操作，故文件较大；</li><li><code>docker load</code>仅支持将<code>docker save</code>导出的文件加载为镜像，加载后镜像名称与导出镜像保持一致；</li></ul><h1 id="Docker常用操作"><a href="#Docker常用操作" class="headerlink" title="Docker常用操作"></a>Docker常用操作</h1><p>容器相当于一个小型的虚拟机，而镜像就相当于这个虚拟机的操作系统；</p><h2 id="启停容器"><a href="#启停容器" class="headerlink" title="启停容器"></a>启停容器</h2><p>启动容器有两种情况，一种是基于镜像新建一个容器并启动，另一种是将终止状态的容器重新启动；</p><ul><li><strong>新建容器并启动</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> ubuntu-dev <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-v</span> /opt/wks/versions/app:/opt/wks/app <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true  <span class="token parameter variable">--net</span> net-udf <span class="token parameter variable">--ip</span> <span class="token number">172.10</span>.0.10 ubuntu:latest /bin/bash<span class="token comment"># --name指定启动的容器名称</span><span class="token comment"># -i 打开标准输入，用于控制台交互</span><span class="token comment"># -t 分配tty，支持命令行登陆</span><span class="token comment"># -p 用于指定本地端口与容器端口映射，可用多个-p指定多个端口映射</span><span class="token comment"># -v 指定本地与容器目录映射</span><span class="token comment"># --privileged 指定容器内root真正拥有root权限，否则容器内root仅相当于本地系统的普通用于，无法完整拥有映射目录权限；</span><span class="token comment"># --restart 指定容器终止后的重启策略 always-总是重启 on-failure-故障退出重启  no-不重启</span><span class="token comment"># ubuntu:latest 指定容器加载的镜像</span><span class="token comment"># /bin/bash 指定以/bin/bash登陆容器</span><span class="token comment"># 容器启动后无法再更改宿主机与容器的映射关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> -d, –detach=false， 指定容器运行于前台还是后台，默认为false<br> -i, –interactive=false， 打开STDIN，用于控制台交互<br> -t, –tty=false， 分配tty设备，该可以支持终端登录，默认为false<br> -u, –user=””， 指定容器的用户<br> -a, –attach=[]， 登录容器（必须是以docker run -d启动的容器）<br> -w, –workdir=””， 指定容器的工作目录<br> -c, –cpu-shares=0， 设置容器CPU权重，在CPU共享场景使用<br> -e, –env=[]， 指定环境变量，容器中可以使用该环境变量<br> -m, –memory=””， 指定容器的内存上限<br> -P, –publish-all=false， 指定容器暴露的端口<br> -p, –publish=[]， 指定容器暴露的端口<br> -h, –hostname=””， 指定容器的主机名<br> -v, –volume=[]， 给容器挂载存储卷，挂载到容器的某个目录<br> –volumes-from=[]， 给容器挂载其他容器上的卷，挂载到容器的某个目录<br> –cap-add=[]， 添加权限，权限清单详见：<a href="http://linux.die.net/man/7/capabilities">http://linux.die.net/man/7/capabilities</a><br> –cap-drop=[]， 删除权限，权限清单详见：<a href="http://linux.die.net/man/7/capabilities">http://linux.die.net/man/7/capabilities</a><br> –cidfile=””， 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法<br> –cpuset=””， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU<br> –device=[]， 添加主机设备给容器，相当于设备直通<br> –dns=[]， 指定容器的dns服务器<br> –dns-search=[]， 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件<br> –entrypoint=””， 覆盖image的入口点<br> –env-file=[]， 指定环境变量文件，文件格式为每行一个环境变量<br> –expose=[]， 指定容器暴露的端口，即修改镜像的暴露端口<br> –link=[]， 指定容器间的关联，使用其他容器的IP、env等信息<br> –lxc-conf=[]， 指定容器的配置文件，只有在指定–exec-driver=lxc时使用<br> –name=””， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字<br> –net=“bridge”，指定容器网络设置:</p><p>​                bridge 使用docker daemon指定的网桥</p><p>​                host //容器使用主机的网络</p><p>​                container:NAME_or_ID &gt;//使用其他容器的网路，共享IP和PORT等网络资源</p><p>​                none 容器使用自己的网络（类似–net=bridge），但是不进行配置</p><p>–rm=false， 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)<br>–sig-proxy=true， 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</p></blockquote><ul><li><strong>启动已有容器</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start ubuntu-dev<span class="token comment"># ubuntu-dev为容器名，也可指定容器ID来启动容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>停止容器</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop ubuntu-dev<span class="token comment"># ubuntu-dev为容器名，也可指定容器ID来启动容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="登陆容器"><a href="#登陆容器" class="headerlink" title="登陆容器"></a>登陆容器</h2><ul><li><strong>attach</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> attach ubuntu-dev<span class="token comment"># ubuntu-dev为容器名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>exec</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> ubuntu-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>以上两种方式均可登陆容器，但通过<code>attach</code>登陆容器，通过<code>exit</code>退出登陆时，会导致容器停止，建议使用<code>exec</code>进行容器登陆</p></blockquote><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前运行中容器</span><span class="token function">docker</span> <span class="token function">ps</span><span class="token comment"># 查看所有状态容器</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span class="token comment"># 仅查看容器id</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token comment"># 查看容器或镜像元数据</span><span class="token function">docker</span> inspect ubuntu-dev<span class="token comment"># 可指定容器名/容器ID/镜像名/镜像ID</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> ubuntu-dev<span class="token comment"># 指定容器名或容器ID均可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>小技巧</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#批量停止容器</span><span class="token function">docker</span> stop <span class="token variable">${docker ps -a -q}</span><span class="token comment"># 批量删除容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable">${docker ps -a -q}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h2><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 不指定类型默认为bridge模式网络;docker network create  --subnet=172.10.0.0/16  net_udf;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><p>Compose是定义和运行多容器Docker应用程序的工具。 使用Compose，您可以使用YAML文件来配置应用程序的服务。 然后，使用单个命令，您可以创建并启动配置中的所有服务。</p><p>使用Compose 基本上分为三步：</p><ol><li>Dockerfile 定义应用的运行环境</li><li>docker-compose.yml 定义组成应用的各服务</li><li>docker-compose up 启动整个应用</li></ol><p>Docker有很多优势，但对于运维或开发者来说，Docker最大的有点在于它提供了一种全新的发布机制。这种发布机制，指的是我们使用Docker镜像作为统一的软件制品载体，使用Docker容器提供独立的软件运行上下文环境，使用Docker Hub提供镜像统一协作，最重要的是该机制使用Dockerfile定义容器内部行为和容器关键属性来支撑软件运行。</p><p> Dockerfile作为整个机制的核心。这是一个非常了不起的创新，因为在Dockerfile中，不但能够定义使用者在容器中需要进行的操作，而且能够定义容器中运行软件需要的配置，于是软件开发和运维终于能够在一个配置文件上达成统一。运维人员使用同一个Dockerfile能在不同的场合下“重现”与开发者环境中一模一样的运行单元（Docker容器）出来。</p><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><p>直接从github下载即可，需依赖docker 1.9.1以上；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.8.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose<span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span class="token comment"># 验证</span><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>Docker-compose用法</strong></p><blockquote><p>Usage:<br>docker-compose [-f <arg>…] [options] [COMMAND] [ARGS…]</arg></p></blockquote><p><strong>docker-compose常用命令：</strong><br>build  构建或重建服务<br>kill   杀掉容器<br>logs  显示容器的输出内容<br>port  打印绑定的开放端口<br>ps   显示容器<br>pull  拉取服务镜像<br>restart 重启服务<br>rm  删除停止的容器<br>run  运行一个一次性命令<br>scale 设置服务的容器数目<br>exec 在容器里搪行命令<br>start 开启服务<br>stop 停止服务<br>up  创建并启动容器</p><p>其实这些常用命令用docker的命令功能是一样的。</p><h2 id="Docker-compose配置"><a href="#Docker-compose配置" class="headerlink" title="Docker-compose配置"></a>Docker-compose配置</h2><p>Compose允许用户通过一个docker-compose.yml模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。<br>Compose模板文件是一个定义服务、网络和卷的YAML文件。Compose模板文件默认路径是当前目录下的docker-compose.yml，可以使用.yml或.yaml作为文件扩展名。<br>Docker-Compose标准模板文件应该包含version、services、networks 三大部分，最关键的是services和networks两个部分。</p><p><strong>举例说明：</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./nginx      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile      <span class="token key atrule">args</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> password=secret    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> front    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./wwwroot<span class="token punctuation">:</span>/usr/local/nginx/html    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> <span class="token string">"nginx"</span>    <span class="token key atrule">links</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> mysql    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> mysql1    <span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"nginx 10.0.0.2"</span>    <span class="token punctuation">-</span> <span class="token string">"mysql 10.0.0.3"</span>    <span class="token key atrule">dns</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> 8.8.8.8    <span class="token punctuation">-</span> 9.9.9.9  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.6</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 3306<span class="token punctuation">:</span><span class="token number">3306</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> back    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./mysql/conf<span class="token punctuation">:</span>/etc/mysql/conf.d      <span class="token punctuation">-</span> ./mysql/data<span class="token punctuation">:</span>/var/lib/mysql    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8    <span class="token key atrule">env_file</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ./common.env    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> bookstack      <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> bookstack      <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> passWD <span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">front</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge  <span class="token key atrule">back</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到一份标准配置文件应该包含 version、services、networks 三大部分，共有三级标签，每一级都是缩进两个空格。下面来详细说明一下里面的内容：</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>定义compose的版本号为version 3，可以参考官方文档详细了解具体有哪些版本 <a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><h3 id="services"><a href="#services" class="headerlink" title="services"></a>services</h3><ul><li><p><strong>nginx</strong>：这是services下面的二级标签，名字用户自己定义，它将是服务运行后的名称；</p><ul><li>hostname:  这是定义容器的主机名，将写入到/etc/hostname中；</li><li>image：指定容器启动加载镜像；</li><li>build：指定基于dockerfile自动构建镜像并使用该镜像启动容器<ul><li>context：指定基于当前命令执行时的相对路径；</li><li>dockerfile：指定通过上面指定路径中的Dockerilfe来构建；context拼接dockerfile后可定位dockerfile文件；</li><li>args：指定构建过程中的环境变量，构建成功后销毁；等价于dockerfile中ARG指定</li></ul></li><li>depends_on：指定当前容器需要依赖与其他容器间的依赖关系；</li><li>environment：指定容器加载环境变量；</li><li>command：指定命令覆盖容器启动后默认指定的命令；</li><li>ports：指定宿主机与容器端口映射；</li><li>networks：指定容器加入网络，与一级标签networks配合使用；</li><li>volumes：指定宿主机与容器目录映射；</li><li>container_name：指定容器名称；</li><li>links：指定链接容器，相当于``docker client –link<code>并将自动将关联容器主机名映射添加至当前容器的</code>/etc/hosts`中；</li><li>external_links：指定链接非当前Docker-compose编排的容器；</li><li>extra_hosts：指定容器内<code>/etc/hosts</code>追加主机名映射；</li><li>dns： 指定容器内域名解析DNS地址；</li><li>env_file：指定环境变量配置文件（可配置多个文件），与environment冲突时，以environment为准；</li></ul><h3 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h3><ul><li>front：networks下面的二级标签，由用户自定义，宿主机会根据Docker-compose运行目录名及标签名拼接生成对应的网络名称，拼接格式为：目录名__标签名<ul><li>driver：指定网络模式，如host、none、bridge等；</li></ul></li></ul></li></ul><h1 id="Docker-swarm集群"><a href="#Docker-swarm集群" class="headerlink" title="Docker swarm集群"></a>Docker swarm集群</h1><p>　Swarm是Docker公司推出的用来管理docker集群的平台，几乎全部用GO语言来完成的开发的，代码开源在<a href="https://github.com/docker/swarm%EF%BC%8C">https://github.com/docker/swarm，</a> 它是将一群Docker宿主机变成一个单一的虚拟主机，Swarm使用标准的Docker API接口作为其前端的访问入口，换言之，各种形式的Docker</p><p>Client(compose,docker-py等)均可以直接与Swarm通信，甚至Docker本身都可以很容易的与Swarm集成，这大大方便了用户将原本基于单节点的系统移植到Swarm上，同时Swarm内置了对Docker网络插件的支持，用户也很容易的部署跨主机的容器集群服务。</p><p>　　Docker Swarm 和 Docker Compose 一样，都是 Docker 官方容器编排项目，但不同的是，Docker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务，对于微服务的部署，显然 Docker Swarm 会更加适合。</p><p>从 Docker 1.12.0 版本开始，Docker Swarm 已经包含在 Docker 引擎中（docker swarm），并且已经内置了服务发现工具，我们就不需要像之前一样，再配置 Etcd 或者 Consul 来进行服务发现配置了。</p><p>　　Swarm deamon只是一个调度器(Scheduler)加路由器(router),Swarm自己不运行容器，它只是接受Docker客户端发来的请求，调度适合的节点来运行容器，这就意味着，即使Swarm由于某些原因挂掉了，集群中的节点也会照常运行，放Swarm重新恢复运行之后，他会收集重建集群信息。</p><h2 id="Docker-Swarm架构"><a href="#Docker-Swarm架构" class="headerlink" title="Docker Swarm架构"></a>Docker Swarm架构</h2><p><img src="/2021/05/13/05-dev/docker-jia-gou-yuan-li-ji-shi-yong/image-20210223114006497.png" alt="Docker Swarm架构"></p><p>Swarm是典型的master-slave结构，通过发现服务来选举manager。manager是中心管理节点，各个node上运行agent接受manager的统一管理，集群会自动通过Raft协议分布式选举出manager节点，无需额外的发现服务支持，避免了单点的瓶颈问题，同时也内置了DNS的负载均衡和对外部负载均衡机制的集成支持；</p><p><strong>Docker API</strong>：用于管理镜像的生命周期；</p><p><strong>Swarm Cli</strong>：提供用户进行Swarm集群管理入口；</p><p><strong>LeaderShip</strong>：提供集群Manager角色HA，防止单点故障；</p><p><strong>Discovery Service</strong>：Swarm集群的发现服务，它会在所有的Node上注册Agent，通过Agent将Node信息上报给Manager；发现服务的常用实现方式有以下集中：</p><ol><li><p>Hosted Discovery with Docker Hub</p><p>通过Docker Hub提供发现服务，需联通公网环境；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>manager_port<span class="token operator">&gt;</span>:2375 token://<span class="token operator">&lt;</span>cluster_id<span class="token operator">&gt;</span><span class="token comment"># token在创建Swarm集群时生成，全球唯一</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>基于KV分布式存储系统</p><p>支持的分布式系统有etcd、consul、zookeeper等；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">swarm <span class="token function">join</span> <span class="token parameter variable">--advertise</span><span class="token operator">=</span><span class="token operator">&lt;</span>node_ip:237<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span> consul://<span class="token operator">&lt;</span>consul_addr<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>optional path prefix<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>静态描述文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">swarm manage <span class="token parameter variable">-H</span> tcp://<span class="token operator">&lt;</span>Swarm_ip:swarm_port<span class="token operator">&gt;</span> file:///opt/mycluster<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>静态IP列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">swarm manage <span class="token parameter variable">-H</span> <span class="token operator">&lt;</span>swarm_ip:swarm_port<span class="token operator">&gt;</span> nodes://<span class="token operator">&lt;</span>node_ip1:237<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>,<span class="token operator">&lt;</span>node_ip2:237<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>Schedule</strong>：用于容器调度时选择最优节点：</p><ol><li><p>Filter（过滤）</p><p>当创建或运行容器时，filter会告诉调度器哪些节点是符合要求的。按照类型可分为节点过滤与容器过滤</p><ul><li>节点过滤<ul><li>Constraints：约束过滤器，可根据当前操作系统、内核版本、存储类型等条件进行过滤，当然也可以自定义约束，在启动Daemon的时候，通过Label来指定当前主机所具有的特点；</li><li>Health filter：根据节点状态进行过滤，移除故障节点；</li></ul></li><li>容器过滤<ul><li>Affnity：亲和性过滤器，支持容器亲和性和镜像亲和性，如部署应用时，想将前端容器和数据库容器放在一起，即可通过亲和性过滤器实现；</li><li>Dependency：依赖过滤器，如创建容器时指定了目录映射、链接某个容器时，则创建的容器或和依赖的容器部署在同一个节点上；</li><li>Ports filter：根据端口使用情况进行过滤；</li></ul></li></ul></li><li><p>Strategy（策略）</p><p>Swarm在scheduler节点（Leader节点）运行容器的时候，会根据指定的策略来计算最适合运行容器的节点，目前支持的策略有：spread，binpack及random；</p><ul><li>Spread：选择运行容器最少的的宿主机来创建新的容器，Spread策略会使容器均衡的分布在集群的各个节点上，节点宕机损失较小；</li><li>Binpack：尽可能的在当前容器比较集中且资源足够的节点上创建新的容器，最大可能避免容器碎片化，但一旦该节点宕机随时可能比较大；</li><li>Random：顾名思义，就是随机选择一个节点来创建新的容器，一般用于调试；</li></ul></li></ol><h2 id="Swarm关键概念"><a href="#Swarm关键概念" class="headerlink" title="Swarm关键概念"></a>Swarm关键概念</h2><ul><li>Swarm</li></ul><p>集群的管理和编排是使用嵌入docker引擎的SwarmKit，可以在docker初始化时启动swarm模式或者加入已存在的swarm；</p><ul><li>Node（节点）</li></ul><p>Node是加入到swarm集群的Docker引擎实例；按照功能可分为Manager(管理节点)与Worker(工作节点)：</p><ol><li>Manager：接收客户端服务定义，将任务发送到worker节点；维护集群期望状态和集群管理功能及Leader选举。默认情况下manager节点也会运行任务，也可以配置只做管理任务。提供对外的接口，部署我们的应用；Manager是整个Swarm集群的大脑，为避免单点故障，Manager至少有两个节点，通过raft协议进行状态同步；</li><li>Worker：接收并执行从管理节点分配的任务，并报告任务当前状态，以便管理节点维护每个服务期望状态。</li></ol><ul><li>Service（服务）</li></ul><p>Service是要在Worker上执行的Task的定义，它运行于Worker上；Service在创建时，需为对应Worker指定镜像；</p><ul><li>Task（任务）</li></ul><p>Task是Service的执行实体，一个Task包含了一个容器及其运行的命令；Manager根据指定数量的Task副本分配至对应Worker上；</p><h2 id="Swarm-Cluster特性"><a href="#Swarm-Cluster特性" class="headerlink" title="Swarm Cluster特性"></a>Swarm Cluster特性</h2><ol><li><p>Dcoker Engine集成集群管理</p><p>使用Docker Engine CLI创建一个Docker Engine的Swarm模式，在集群中部署应用程序服务；</p></li><li><p>去中心化设计</p><p>Swarm按角色分为Manager与Worker，Manager故障不影响应用使用；</p></li><li><p>动态扩容缩容</p><p>可以声明每个服务运行的容器数量，通过添加或删除容器数量自动调整期望的状态；</p></li><li><p>期望状态协调</p><p>Swarm Manager监控集群状态，并调整当前状态与期望状态之间的差异。例如，配置一个服务运行副本为5，当某个副本所在服务器宕机后，Manager将自动创建1个新的副本，并根据调度策略分配至可用的Worker；</p></li><li><p>多主机网络</p><p>可以为服务制定overlay网络。当初始化或更新应用程序时，Swarm Manager会自动为overlay网络上的容器分配IP地址；</p></li><li><p>服务发现</p><p>Swarm Manager节点为集群中的每个服务分配唯一的DNS记录和负载均衡VIP。可以通过Swarm内置的DNS服务器查询集群中每个运行的容器；</p></li><li><p>负载均衡</p><p>实现服务副本间负载均衡，提供入口访问。也可将服务入口暴露给外部负载均衡器再次进行负载均衡；</p></li><li><p>安全传输</p><p>Swarm中每个节点使用TLS相互验证和加密，确保安全的节点间通信；</p></li><li><p>滚动更新</p><p>集群容器内应用进行更新/升级时，可逐步将应用服务更新至节点，出现问题回滚至历史版本即可；</p></li></ol><h2 id="Swarm-Cluster管理"><a href="#Swarm-Cluster管理" class="headerlink" title="Swarm Cluster管理"></a>Swarm Cluster管理</h2><p><strong>集群管理</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建swarm集群</span><span class="token function">docker</span> swarm init --advertise-addr <span class="token number">10.0</span>.0.10<span class="token comment"># 加入集群</span><span class="token function">docker</span> swarm <span class="token function">join</span> <span class="token parameter variable">--token</span> <span class="token string">"token_id"</span> <span class="token number">10.0</span>.0.10:2377<span class="token comment"># 离开集群</span><span class="token function">docker</span> swarm leave<span class="token comment"># 更新集群配置</span><span class="token function">docker</span> swarm update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>堆栈管理</strong></p><p>创建编排文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># helloworld.yml</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mynginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> hub.test.com<span class="token punctuation">:</span>5000/almi/nginx<span class="token punctuation">:</span><span class="token number">0.1</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token string">"8081:80"</span>    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">busybox</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> hub.test.com<span class="token punctuation">:</span>5000/busybox<span class="token punctuation">:</span>latest    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"/var/run/docker.sock:/var/run/docker.sock"</span>    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 部署堆栈并创建任务</span><span class="token function">docker</span> stack <span class="token parameter variable">-c</span> helloworld.yml helloworld<span class="token comment"># 查看堆栈中的任务</span><span class="token function">docker</span> stack <span class="token function">ps</span> helloworld<span class="token comment"># 查看现有堆栈</span><span class="token function">docker</span> stack <span class="token function">ls</span><span class="token comment"># 删除堆栈</span><span class="token function">docker</span> stack <span class="token function">rm</span> helloworld<span class="token comment"># 查看堆栈中服务</span><span class="token function">docker</span> stack services helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>服务管理</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建服务 </span><span class="token function">docker</span> <span class="token function">service</span>  <span class="token comment"># 创建一个服务</span>  - <span class="token function">docker</span> <span class="token function">service</span> create    <span class="token comment"># 创建的副本数</span>    - <span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--replicas</span> 副本数    <span class="token comment"># 指定容器名称</span>    - <span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--name</span> 名字    <span class="token comment"># 每次容器与容器之间的更新时间间隔。</span>    - <span class="token function">docker</span> <span class="token function">service</span> create --update-delay s秒    <span class="token comment"># 更新时同时并行更新数量，默认1</span>    - <span class="token function">docker</span> <span class="token function">service</span> create --update-parallelism 个数    <span class="token comment"># 任务容器更新失败时的模式，（“pause”停止|”continue“继续），默认pause。</span>    - <span class="token function">docker</span> <span class="token function">service</span> create --update-failure-action 类型    <span class="token comment"># 每次容器与容器之间的回滚时间间隔。</span>    - <span class="token function">docker</span> <span class="token function">service</span> create --rollback-monitor 20s    <span class="token comment"># 回滚故障率如果小于百分比允许运行</span>    - <span class="token function">docker</span> <span class="token function">service</span> create --rollback-max-failure-ratio .数值（列“.2”为%20）    <span class="token comment"># 添加网络</span>    - <span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--network</span> 网络名    <span class="token comment"># 创建volume类型数据卷</span>    - <span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>volume,src<span class="token operator">=</span>volume名称,dst<span class="token operator">=</span>容器目录    <span class="token comment"># 创建bind读写目录挂载</span>    - <span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,src<span class="token operator">=</span>宿主目录,dst<span class="token operator">=</span>容器目录    <span class="token comment"># 创建bind只读目录挂载</span>    - <span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,src<span class="token operator">=</span>宿主目录,dst<span class="token operator">=</span>容器目录,readonly    <span class="token comment"># 创建dnsrr负载均衡模式</span>    - <span class="token function">docker</span> <span class="token function">service</span> create --endpoint-mode dnsrr 服务名    <span class="token comment"># 创建docker配置文件到容器本地目录</span>    - <span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--config</span> <span class="token assign-left variable">source</span><span class="token operator">=</span>docker配置文件,target<span class="token operator">=</span>配置文件路径    <span class="token comment"># 创建添加端口</span>    - <span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--publish</span> 暴露端口:容器端口 服务名  <span class="token comment"># 查看服务详细信息，默认json格式</span>  - <span class="token function">docker</span> <span class="token function">service</span> inspect      <span class="token comment"># 查看服务信息平铺形式</span>      - <span class="token function">docker</span> <span class="token function">service</span> inspect <span class="token parameter variable">--pretty</span> 服务名  <span class="token comment"># 查看服务内输出</span>  - <span class="token function">docker</span> <span class="token function">service</span> logs  <span class="token comment"># 列出服务</span>  - <span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ls</span>  <span class="token comment"># 列出服务任务信息</span>  - <span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ps</span>　　　　      <span class="token comment"># 查看服务启动信息</span>      - <span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ps</span> 服务名      <span class="token comment"># 过滤只运行的任务信息</span>      - <span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ps</span> <span class="token parameter variable">-f</span> <span class="token string">"desired-state=running"</span> 服务名  <span class="token comment"># 删除服务</span>  - <span class="token function">docker</span> <span class="token function">service</span> <span class="token function">rm</span>  <span class="token comment"># 缩容扩容服务</span>  - <span class="token function">docker</span> <span class="token function">service</span> scale      <span class="token comment"># 扩展服务容器副本数量</span>      - <span class="token function">docker</span> <span class="token function">service</span> scale 服务名<span class="token operator">=</span>副本数  <span class="token comment"># 更新服务相关配置</span>  - <span class="token function">docker</span> <span class="token function">service</span> update      <span class="token comment"># 容器加入指令</span>      - <span class="token function">docker</span> <span class="token function">service</span> update <span class="token parameter variable">--args</span> “指令” 服务名      <span class="token comment"># 更新服务容器版本</span>      - <span class="token function">docker</span> <span class="token function">service</span> update <span class="token parameter variable">--image</span> 更新版本 服务名                回滚服务容器版本       <span class="token function">docker</span> <span class="token function">service</span> update <span class="token parameter variable">--rollback</span> 回滚服务名      <span class="token comment"># 添加容器网络</span>      - <span class="token function">docker</span> <span class="token function">service</span> update --network-add 网络名 服务名      <span class="token comment"># 删除容器网络</span>      - <span class="token function">docker</span> <span class="token function">service</span> update --network-rm 网络名 服务名      <span class="token comment"># 服务添加暴露端口</span>      - <span class="token function">docker</span> <span class="token function">service</span> update --publish-add 暴露端口:容器端口 服务名      <span class="token comment"># 移除暴露端口</span>      - <span class="token function">docker</span> <span class="token function">service</span> update --publish-rm 暴露端口:容器端口 服务名      <span class="token comment"># 修改负载均衡模式为dnsrr</span>      - <span class="token function">docker</span> <span class="token function">service</span> update --endpoint-mode dnsrr 服务名<span class="token comment"># 更新服务动态命令设置</span>      <span class="token function">docker</span> <span class="token function">service</span> update --env-add      <span class="token function">docker</span> <span class="token function">service</span> update --env-rm        <span class="token function">docker</span> <span class="token function">service</span> update --host-add       <span class="token function">docker</span> <span class="token function">service</span> update --host-rm      <span class="token function">docker</span> <span class="token function">service</span> update <span class="token parameter variable">--hostname</span>      <span class="token function">docker</span> <span class="token function">service</span> update --mount-add <span class="token assign-left variable">type</span><span class="token operator">=</span>volume,source<span class="token operator">=</span>/data,target<span class="token operator">=</span>/data      <span class="token function">docker</span> <span class="token function">service</span> update --mount-rm  <span class="token assign-left variable">type</span><span class="token operator">=</span>volume,source<span class="token operator">=</span>/data,target<span class="token operator">=</span>/data      <span class="token function">docker</span> <span class="token function">service</span> update --network-add <span class="token assign-left variable">name</span><span class="token operator">=</span>my-network,alias<span class="token operator">=</span>web1   <span class="token comment"># Add a network</span>      <span class="token function">docker</span> <span class="token function">service</span> update --network-rm  <span class="token assign-left variable">name</span><span class="token operator">=</span>my-network,alias<span class="token operator">=</span>web1      <span class="token function">docker</span> <span class="token function">service</span> update --publish-add <span class="token assign-left variable">published</span><span class="token operator">=</span><span class="token number">8080</span>,target<span class="token operator">=</span><span class="token number">80</span> <span class="token comment"># Add or update a published port</span>      <span class="token function">docker</span> <span class="token function">service</span> update --publish-rm  <span class="token assign-left variable">published</span><span class="token operator">=</span><span class="token number">8080</span>,target<span class="token operator">=</span><span class="token number">80</span>  <span class="token comment"># Remove a published port by its target port</span><span class="token comment"># 查看swarm集群中服务对应IP</span><span class="token function">docker</span> <span class="token function">service</span> inspect <span class="token parameter variable">--format</span> <span class="token string">'{{ .Endpoint.VirtualIPs }}'</span>  服务名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>节点管理</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看集群所有节点</span><span class="token function">docker</span> <span class="token function">node</span> <span class="token function">ls</span><span class="token comment"># 删除节点</span><span class="token function">docker</span> <span class="token function">node</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>node_id<span class="token operator">&gt;</span><span class="token comment"># 查看节点详情，[--pretty]显示格式化后信息</span><span class="token function">docker</span> <span class="token function">node</span> inspect <span class="token operator">&lt;</span>node_id<span class="token operator">&gt;</span> <span class="token punctuation">[</span>--pretty<span class="token punctuation">]</span><span class="token comment"># 节点降级，由管理节点降级为工作节点</span><span class="token function">docker</span> <span class="token function">node</span> demote <span class="token operator">&lt;</span>node_id<span class="token operator">&gt;</span><span class="token comment"># 节点升级，由工作节点升级为管理节点，</span><span class="token function">docker</span> <span class="token function">node</span> premote <span class="token operator">&lt;</span>node_id<span class="token operator">&gt;</span> <span class="token punctuation">[</span>node_id2<span class="token punctuation">]</span><span class="token comment"># 查看节点中task</span><span class="token function">docker</span> <span class="token function">node</span> <span class="token function">ps</span> <span class="token operator">&lt;</span>node_id<span class="token operator">&gt;</span><span class="token comment"># 节点更新 可用状态有 active pause drain</span><span class="token comment">## 排除节点node01</span><span class="token function">docker</span> <span class="token function">node</span> update <span class="token parameter variable">--availability</span> drain node01<span class="token comment">## 恢复排除的节点node01</span><span class="token function">docker</span> <span class="token function">node</span> update <span class="token parameter variable">--availability</span> active node01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程入门</title>
      <link href="/2021/05/12/02-program/python/python-bian-cheng-ru-men/"/>
      <url>/2021/05/12/02-program/python/python-bian-cheng-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Python编程入门"><a href="#Python编程入门" class="headerlink" title="Python编程入门"></a>Python编程入门</h1><h2 id="python模块"><a href="#python模块" class="headerlink" title="python模块"></a>python模块</h2><h3 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h3><h3 id="all-变量"><a href="#all-变量" class="headerlink" title="__all__ 变量"></a><code>__all__</code> 变量</h3><p>该变量的值是一个列表，存储的是当前模块中一些成员（变量、函数或者类）的名称。通过在模块文件中设置<code>__all__</code> 变量，当其它文件以“from 模块名 import *”的形式导入该模块时，该文件中只能使用 <code>__all__</code>  列表中指定的成员，未指定的成员是无法导入的。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop功能架构(二)</title>
      <link href="/2021/05/06/03-hadoop/hdfs-yarn/hadoop-gong-neng-jia-gou/"/>
      <url>/2021/05/06/03-hadoop/hdfs-yarn/hadoop-gong-neng-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop功能架构"><a href="#Hadoop功能架构" class="headerlink" title="Hadoop功能架构"></a>Hadoop功能架构</h1><h2 id="Hadoop构成"><a href="#Hadoop构成" class="headerlink" title="Hadoop构成"></a>Hadoop构成</h2><p>Hadoop主要由三个功能模块组成，分布式文件存储系统HDFS，分布式计算框架MapReduce以及资源调度框架Yarn。</p><blockquote><p>Hadoop 2.x 时代，将JobTracker 从MapReduce中分离出来，重新设计后专门用于资源调度，即Yarn资源调度框架；</p></blockquote><h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><p>HDFS(Hadoop Distributed File System)是分布式存储系统，对客户端而言，HDFS与传统的分级文件系统没有区别，可以按照Linux文件系统一样进行创建、删除、移动文件/文件夹等操作；</p><h3 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h3><p>Namenode简称NN，作为集群中的主节点，主要负责三个功能：</p><ol><li><p>管理元数据：负责管理维护整个HDFS文件系统命令空间；</p></li><li><p>维护目录树：维护文件系统树和树内所有的文件及目录，这些信息以检查点镜像(FsImage)及操作日志(Editslog)形式持久化至NN节点本地磁盘中；</p></li><li><p>响应客户端请求：负责处理客户端与HDFS交互；</p></li></ol><h4 id="Fsimage"><a href="#Fsimage" class="headerlink" title="Fsimage"></a>Fsimage</h4><p>NN会定期对当前HDFS元数据信息进行序列化后快照，快照文件有两种状态，finalized和checkpoint， finalized表示已经持久化磁盘的文件，文件名形式: fsimage_[end-txid], 同时会生成一个同名md5校验文件；checkpoint表示合并中的fsimage；Fsimage文件一般包含以下内容：</p><ul><li><p>Image head：</p><ul><li> imgVersion(int)：当前image的版本信息；</li><li> namespaceID(int)：用来确保别的HDFS instance中的datanode不会误连上当前NN</li><li>numFiles(long)：整个文件系统中包含有多少文件和目录</li><li>genStamp(long)：生成该image时的时间戳信息。</li></ul></li><li><p>Resource Info：</p><ul><li><p>path(String)：该目录的路径（该路径为HDFS路径），如”/user/build/build-index”</p></li><li><p>replications(short)：副本数（目录虽然没有副本，但这里记录的目录副本数也为3)</p></li><li><p>mtime(long)：该目录的修改时间的时间戳信息</p></li><li><p>atime(long)：该目录的访问时间的时间戳信息</p></li><li><p>blocksize(long)：目录的blocksize都为0</p></li><li><p>numBlocks(int)：实际有多少个文件块，目录的该值都为-1，表示该item为目录</p></li><li><p>nsQuota(long)：namespace Quota值，若没加Quota限制则为-1</p></li><li><p>dsQuota(long)：disk Quota值，若没加限制则也为-1</p></li><li><p>username(String)：该目录的所属用户名</p></li><li><p>group(String)：该目录的所属组</p></li><li><p>permission(short)：该目录的permission信息，如644等，有一个short来记录。</p></li></ul><!--以下属性为文件独有--><ul><li> blockid(long)：block的blockid  </li><li>numBytes(long)：该block的大小</li><li> genStamp(long)：该block的时间戳</li></ul> <img src="/2021/05/06/03-hadoop/hdfs-yarn/hadoop-gong-neng-jia-gou/image-20210507234832905.png" alt="NN元数据结构" style="zoom:40%;"></li></ul><h4 id="EditLog"><a href="#EditLog" class="headerlink" title="EditLog"></a>EditLog</h4><p>操作日志文件，操作日志文件分为两类：</p><ul><li>finalized：已完成写入并滚动的日志文件，命名规则为edits_[start-txid]-[end-txid]，该文件中记录了start-txid到end-txid之间的HDFS元数据变更记录；</li><li>inprogress：正在写入的日志文件，命名规则为edits_inprogress_start-txid，该文件记录了从start-txid开始的HDFS元数据变更记录；</li><li>标记文件：文件名为seen_txid，保存的是一个事务ID，这个事务ID是EditsLog最新的一个结束事务id，当NameNode重启时，会顺序遍历所有Fsimage对应事务ID后EditLog以及edits_inprogress_start-txid到seen_txid所记录的txid所在的日志文件，进行元数据恢复，如果该文件丢失或记录的事务ID有问题，会造成数据块信息的丢失；</li></ul><blockquote><p>Namenode一条元数据信息大小大概为150 Byte。</p></blockquote><h4 id="NameNode-HA"><a href="#NameNode-HA" class="headerlink" title="NameNode HA"></a>NameNode HA</h4><p>NameNode在HDFS中是一个非常重要的组件，相当于HDFS文件系统的心脏，在分布式集群环境中，还是会有可能出现NameNode的崩溃或各种意外，将导致整个集群不可用。所以，Hadoop演进至2.x阶段实现了NameNode HA（High Availability）架构：</p><ul><li><p>Active NN：</p><ul><li>响应客户端请求；</li><li>记录EditLog并同步至JN；</li><li>接收DN的heartbeat及Block Report；</li></ul></li><li><p>Standby NN：</p><ul><li>读取JN上EditLog信息；</li><li>接收DN的heartbeat及Block Report；</li><li>合并Fsimage及EditLog，生成新的Fsimage；</li></ul></li><li><p>JounalNode：</p><ul><li>日志同步：保障Active NN与Standby NN元数据一致；</li><li>双写隔离：避免多个NN同时写入EditLog；</li><li>日志恢复：当出现故障时，完成节点上不一致日志的恢复，避免操作记录丢失；</li></ul></li><li><p>ZKFC：</p><ul><li>监控NN健康状态；</li><li>定期发送心跳至ZK；</li><li>自动故障转移；</li></ul></li><li><p>Zookeeper：</p><ul><li>失败保护：NN与Zookeeper会维护一个长连接session，一旦服务异常，session将会过期，触发故障迁移；</li><li>服务选举：当Active NN的session过期后，Standby NN将会向NN申请排他切换为Active NN节点；</li><li>防脑裂：通过ZK本身的强一致和高可用特性，保证同一时刻只有一个活动节点，即Active NN节点；</li></ul><blockquote><p>Checkpoint触发的条件有两个：</p><ol><li>时间间隔：由参数dfs.namenode.checkpoint.period控制，默认为3600s；</li><li>处理事务数：由参数dfs.namenode.checkpoint.txns控制，默认为1000000；</li></ol><p>Fsimage滚动条件：</p><ol><li>每次checkpoint会生成一个新的Fsimage；</li><li>每次NN重启会生成一个新的Fsimage；</li><li>由参数dfs.namenode.num.checkpoints.retained控制Fsimage保留数量，默认为2；</li></ol><p>EditLog滚动条件：</p><ol><li>时间间隔：由参数dfs.namenode.edit.log.autoroll.check.interval.ms控制，默认为300000ms；</li><li>处理事务数：由参数dfs.namenode.edit.log.autoroll.multiplier.threshold * dfs.namenode.checkpoint.txns 控制，dfs.namenode.edit.log.autoroll.multiplier.threshold默认值为2.0f；</li></ol><p>HA模式滚动条件：</p><ol><li>EditLog滚动周期：由参数dfs.ha.log-roll.period控制，默认为120s，Standby NN按照周期让Active NN进行EditLog滚动；</li><li>EditLog合并周期：由参数dfs.ha.tail-edits.period控制，默认为60s，Standby NN按照周期去检测已完成的EditLog，并抓取文件通过JN读取到内存中更新Fsimage状态；</li><li>EditLog存储事务数：由参数dfs.namenode.num.extra.edits.retained控制，默认为1000000；</li></ol><p>常见触发NN主备切换场景：</p><ol><li>Active NN JVM崩溃：ANN上HealthMonitor状态上报会有连接超时异常，HealthMonitor会触发状态迁移至SERVICE_NOT_RESPONDING, 然后ANN上的ZKFC会退出选举，SNN上的ZKFC会获得Active Lock, 作相应隔离后成为Active结点。</li><li>Active NN GC超时：当GC时间超出健康检查时长时，同样会触发自动切换；</li><li>Active NN 宕机：此时ActiveStandbyElector会失去同ZK的心跳，会话超时，SNN上的ZKFC会通知ZK删除ANN的活动锁，作相应隔离后完成主备切换。</li><li>Active NN健康状态异常：此时HealthMonitor会收到一个HealthCheckFailedException，并触发自动切换。</li><li>Active NN节点ZKFC崩溃：一旦ZKFC进程挂掉，虽然此时NameNode是OK的，但系统也认为需要切换，此时SNN会发一个请求到ANN要求ANN放弃主结点位置，ANN收到请求后，会触发完成自动切换。</li><li>Zookeeper崩溃：如果ZK奔溃了，主备NN上的ZKFC都会感知断连，此时主备NN会进入一个NeutralMode模式，同时不改变主备NN的状态，继续发挥作用，只不过此时，如果ANN也故障了，那集群无法发挥Failover, 也就不可用了，所以对于此种场景，ZK至少要有N/2+1台保持服务才算是安全的。</li></ol></blockquote></li></ul><img src="/2021/05/06/03-hadoop/hdfs-yarn/hadoop-gong-neng-jia-gou/image-20210508000333134.png" alt="NameNode HA架构" style="zoom:40%;"><p>Hadoop高可用详细解析可参考：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/">https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/</a></p><h3 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h3><p>DataNode简称DN，主要负责以下工作：</p><ol><li>以Block形式存储HDFS文件；</li><li>响应HDFS客户端读写请求；</li><li>周期性向NN汇报heartbeat及Block Report信息，缓存Block信息；</li></ol><h3 id="HDFS-Federation"><a href="#HDFS-Federation" class="headerlink" title="HDFS Federation"></a>HDFS Federation</h3><p><strong>什么是Federation机制</strong></p><p>HDFS Federation 是解决 namenode 内存瓶颈问题的水平横向扩展方案；通过使用多个独立的NameSpace(NameNode节点管理)各自管理一部分元数据，且共享所有DataNode存储资源；</p><ul><li>NameNode：相互独立且不需要互相协调，各自独立分工。</li><li>DataNode：向集群中所有NameNode注册，周期性向所有NameNode发送心跳和BlockReport并响应所有NameNode的请求；</li></ul><h4 id="Federation-架构设计"><a href="#Federation-架构设计" class="headerlink" title="Federation 架构设计"></a>Federation 架构设计</h4><p>HDFS 1.x时代主要由NameSpace和Block Storage两层组成，通过NameNode进行元数据存储与管理，DataNode进行Block的读写与存储。结构如下图：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210508000531123.png" alt="image-20210508000531123"><p>HDFS 1.x的存在以下局限性：</p><ol><li>NameSpace限制：namenode把所有元数据存储在内存中，单个NameNode所能存储的对象（文件+块）有限制；</li><li>性能瓶颈：整个hdfs文件系统的吞吐量受限于单个NameNode的吞吐量；</li><li>隔离问题：无法隔离应用程序，一个实验程序，可能影响整个集群；</li><li>单点故障：一旦NameNode故障将导致整个集群不可用；</li></ol><blockquote><p>Q：单机NameNode的瓶颈是多少呢？</p><p>A：大约是在4000台集群。</p><p>Q：为什么不考虑进行纵向扩展呢？</p><ol><li>纵向扩展将导致NN启动时间线性增加；</li><li>FullGC异常可能导致整个集群不可用；</li><li>大JVMHeap调试困难；</li></ol></blockquote><p>HDFS 2.x时代逐步演进为NameSpaces、Block Pools和Common Storeage三层Federation架构，NameSpace之间相互独立，各自分工管理自己的Block Pool，且不需要互相协调；Block Pool内部自制，不需要与其他Block Pool交流；Federation架构的优势体现在：</p><ol><li>HDFS集群扩展性：每个NameNode分管一部分namespace，相当于NameNode是一个分布式的。</li><li>性能更高效：多个NameNode同时对外提供服务，提供更高的读写吞吐率。</li><li>良好的隔离性：用户可根据需要将不同业务数据交由不同NameNode管理，这样不同业务之间影响很小。</li><li>Federation良好的向后兼容性：已有的单NameNode的部署配置不需要任何改变就可以继续工作。</li></ol><blockquote><p>Federation不足：</p><p>【单点故障问题】</p><p>HDFS Federation并没有完全解决单点故障问题。虽然NameNode/namespace存在多个，但是从单个NameNode/namespace看，仍然存在单点故障：如果某个NameNode挂掉了，其管理的相应的文件便不可以访问。Federation中每个NameNode仍然像之前HDFS上实现一样，配有一个Secondary NameNode，以便主namenode挂掉一下，用于还原元数据信息。</p><p>【负载均衡问题】</p><p>HDFS Federation采用了Client Side Mount Table分摊文件和负载，该方法更多的需要人工介入已达到理想的负载均衡。</p></blockquote><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210508002315009.png" alt="image-20210508002315009"><h4 id="Federation关键技术点"><a href="#Federation关键技术点" class="headerlink" title="Federation关键技术点"></a>Federation关键技术点</h4><p><strong>命名空间管理</strong></p><p>Federation中存在多个命名空间，如何划分和管理这些命名空间非常关键。在Federation中并采用“文件名hash”的方法，因为该方法的locality非常差，比如：查看某个目录下面的文件，如果采用文件名hash的方法存放文件，则这些文件可能被放到不同namespace中，HDFS需要访问所有namespace，代价过大。为了方便管理多个命名空间，HDFS Federation采用了经典的Client Side Mount Table。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210508002415887.png" alt="image-20210508002415887"><p>如上图所示，下面四个深色三角形代表一个独立的命名空间，上方浅色的三角形代表从客户角度去访问的子命名空间。各个深色的命名空间Mount到浅色的表中，客户可以访问不同的挂载点来访问不同的命名空间，这就如同在Linux系统中访问不同挂载点一样。这就是HDFS Federation中命名空间管理的基本原理：将各个命名空间挂载到全局mount-table中，就可以做将数据到全局共享；同样的命名空间挂载到个人的mount-table中，这就成为应用程序可见的命名空间视图。</p><h4 id="Federation配置"><a href="#Federation配置" class="headerlink" title="Federation配置"></a>Federation配置</h4><p>假设你的集群中有三个namenode，分别是namenode1，namenode2和namenode3，其中，namenode1管理/usr和/tmp两个目录，namenode2管理/projects/foo目录，namenode3管理/projects/bar目录，则可以创建一个名为“cmt”的client-side mount table，并在mountTable.xml中进行如下配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.viewfs.mounttable.cmt.link./user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span> hdfs://namenode1:9000/user <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.viewfs.mounttable.cmt.link./tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span> hdfs:/ namenode1:9000/tmp <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.viewfs.mounttable.cmt.link./projects/foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span> hdfs://namenode2:9000/projects/foo <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.viewfs.mounttable.cmt.link./projects/bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span> hdfs://namenode3:9000/projects/bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Client-side mount table的引入为用户使用HDFS带来极大的方便，尤其是跨namenode的数据访问。</p></blockquote><h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2><h3 id="Yarn调度策略"><a href="#Yarn调度策略" class="headerlink" title="Yarn调度策略"></a>Yarn调度策略</h3><h3 id="Yarn-Label"><a href="#Yarn-Label" class="headerlink" title="Yarn Label"></a>Yarn Label</h3>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop简介(一)</title>
      <link href="/2021/05/06/03-hadoop/hdfs-yarn/hadoop-jian-jie/"/>
      <url>/2021/05/06/03-hadoop/hdfs-yarn/hadoop-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop简介"><a href="#Hadoop简介" class="headerlink" title="Hadoop简介"></a>Hadoop简介</h1><h2 id="Hadoop是什么"><a href="#Hadoop是什么" class="headerlink" title="Hadoop是什么"></a>Hadoop是什么</h2><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构，实现在大量计算机组成的集群中对海量数据进行分布式计算。适合大数据的分布式存储和计算平台。</p><p>Hadoop1.x中包括两个核心组件：MR(MapReduce)和HDFS(Hadoop Distributed File System)。</p><ul><li>HDFS负责将海量数据进行分布式存储；</li><li>MR负责提供对数据的计算结果的汇总；</li></ul><h2 id="Hadoop起源"><a href="#Hadoop起源" class="headerlink" title="Hadoop起源"></a>Hadoop起源</h2><p>2002~2004 年，第一轮互联网泡沫刚刚破灭，很多互联网从业人员都失业了。我们的“主角” Doug Cutting 也不例外，他只能写点技术文章赚点稿费来养家糊口。但是 Doug Cutting 不甘寂寞，怀着对梦想和未来的渴望，与他的好朋友 Mike Cafarella 一起开发出一个开源的搜索引擎 Nutch，并历时一年把这个系统做到能支持亿级网页的搜索。但是当时的网页数量远远不止这个规模，所以两人不断改进，想让支持的网页量再多一个数量级。</p><p>在 2003 年和 2004 年， Googles 分別公布了 GFS 和 Mapreduce 两篇论文。 Doug Cutting 和 Mike Cafarella 发现这与他们的想法不尽相同，且更加完美，完全脱离了人工运维的状态，实现了自动化。</p><p>在经过一系列周密考虑和详细总结后，2006 年， Dog Cutting 放奔创业，随后几经周折加入了 yahoo 公司(Nutch 的部分也被正式引入)，机绿巧合下，他以自己儿子的一个玩具大象的名字 Hadoop 命名了该项。</p><p>当系统进入 Yahoo 以后，项目逐渐发展并成熟了起来。首先是集群规模，从最开始几十台机器的规模发展到能支持上千个节点的机器，中间做了很多工程性质的工作；然后是除搜索以外的业务开发， Yahoo 逐步将自己广告系统的数据挖掘相关工作也迁移到了 Hadoop 上，使 Hadoop 系统进一步成熟化了。</p><p>2007 年，纽约时报在 100 个亚马逊的虚拟机服务器上使用 Hadoop 转换了 4TB 的图片数据更加加深了人们对 Hadoope 的印象。</p><p>在 2008 年的时侯，一位 Google 的工程师发现要把当时的 Hadoop 放到任意一个集群中去运是一件很困难的事情，所以就与几个好朋友成立了ー个专门商业化 Hadoop 的公司 Cloudera。同年， Facebook 团队发现他们很多人不会写 Hadoop 的程序，而对 SQL 的一套东西很熟，所以他们就在 Hadoop 上构建了一个叫作 Hive 的软件，专把 SQL 转换为 Hadoop 的 Mapreduce 程序。</p><p>2011年， Yahoo 将 Hadoop 团队独立出来，成立了ー个子公司 Hortonworks，专门提供 Hadoop 相关的服务。</p><p>Hadoop的发展历史如下图：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210506223607978.png" alt="image-20210506223607978"><h2 id="Hadoop特性"><a href="#Hadoop特性" class="headerlink" title="Hadoop特性"></a>Hadoop特性</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>错误检测与自动恢复</p></li><li><p>大规模数据集</p></li><li><p>流式数据访问</p></li><li><p>简单一致性模型</p></li><li><p>移动计算</p></li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><p>Rellable：高可靠性，能够自动维护数据的多副本，并在任务执行失败时自动重新分配；</p></li><li><p>Scalabel：高扩展性，Hadoop是在可用的计算机集群间分配数据并完成计算任务的，这些集群可以方便的进行横向扩展；</p></li><li><p>Efficient：高效率，Hadoop能够在集群节点之间动态地移动数据，保证各个节点的动态平衡，提升处理速度；</p></li><li><p>Economical：Hadoop是开源的，并且Hadoop可以运行于普通X86主机上，能大大降低项目成本；</p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>不适合低延迟业务场景；</p></li><li><p>不适合大量小文件存储；</p></li><li><p>不支持随机修改，仅支持文件末尾追加；</p></li><li><p>不支持并发写入；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Systemd Systemctl详解</title>
      <link href="/2021/04/30/01-linux/systemd-systemctl-xiang-jie/"/>
      <url>/2021/04/30/01-linux/systemd-systemctl-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="Systemd简介"><a href="#Systemd简介" class="headerlink" title="Systemd简介"></a>Systemd简介</h3><p>历史上，Linux 的启动一直采用<code>init</code>进程。这种方法有两个缺点：</p><p>一是启动时间长。<code>init</code>进程是串行启动，只有前一个进程启动完，才会启动下一个进程。</p><p>二是启动脚本复杂。<code>init</code>进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。</p><p>Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。根据 Linux 惯例，字母<code>d</code>是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。使用了 Systemd，就不需要再用<code>init</code>了。Systemd 取代了<code>initd</code>，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。</p><p>Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p><h3 id="Systemd主命令-systemctl"><a href="#Systemd主命令-systemctl" class="headerlink" title="Systemd主命令-systemctl"></a>Systemd主命令-systemctl</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重启系统</span>$ <span class="token function">sudo</span> systemctl <span class="token function">reboot</span><span class="token comment"># 关闭系统，切断电源</span>$ <span class="token function">sudo</span> systemctl poweroff<span class="token comment"># CPU停止工作</span>$ <span class="token function">sudo</span> systemctl <span class="token function">halt</span><span class="token comment"># 暂停系统</span>$ <span class="token function">sudo</span> systemctl <span class="token function">suspend</span><span class="token comment"># 让系统进入冬眠状态</span>$ <span class="token function">sudo</span> systemctl hibernate<span class="token comment"># 让系统进入交互式休眠状态</span>$ <span class="token function">sudo</span> systemctl hybrid-sleep<span class="token comment"># 启动进入救援状态（单用户状态）</span>$ <span class="token function">sudo</span> systemctl rescue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Systemd资源管理-Unit"><a href="#Systemd资源管理-Unit" class="headerlink" title="Systemd资源管理-Unit"></a>Systemd资源管理-Unit</h3><h4 id="Unit介绍"><a href="#Unit介绍" class="headerlink" title="Unit介绍"></a>Unit介绍</h4><p>Systemd 可以管理所有系统资源。不同的资源统称为 Unit（单位）。</p><p>Unit 一共分成12种。</p><blockquote><p> Service unit：系统服务<br>Target unit：多个 Unit 构成的一个组<br>Device Unit：硬件设备<br>Mount Unit：文件系统的挂载点<br>Automount Unit：自动挂载点<br>Path Unit：文件或路径<br>Scope Unit：不是由 Systemd 启动的外部进程<br>Slice Unit：进程组<br>Snapshot Unit：Systemd 快照，可以切回某个快照<br>Socket Unit：进程间通信的 socket<br>Swap Unit：swap 文件<br>Timer Unit：定时器</p></blockquote><p><code>systemctl list-units</code>命令可以查看当前系统的所有 Unit 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出正在运行的 Unit</span>$ systemctl list-units<span class="token comment"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span>$ systemctl list-units <span class="token parameter variable">--all</span><span class="token comment"># 列出所有没有运行的 Unit</span>$ systemctl list-units <span class="token parameter variable">--all</span> <span class="token parameter variable">--state</span><span class="token operator">=</span>inactive<span class="token comment"># 列出所有加载失败的 Unit</span>$ systemctl list-units <span class="token parameter variable">--failed</span><span class="token comment"># 列出所有正在运行的、类型为 service 的 Unit</span>$ systemctl list-units <span class="token parameter variable">--type</span><span class="token operator">=</span>service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Target介绍"><a href="#Target介绍" class="headerlink" title="Target介绍"></a>Target介绍</h4><p>启动计算机的时候，需要启动大量的 Unit。如果每一次启动，都要一一写明本次启动需要哪些 Unit，显然非常不方便。Systemd 的解决方案就是 Target。</p><p>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。</p><p>传统的<code>init</code>启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前系统的所有 Target</span>$ systemctl list-unit-files <span class="token parameter variable">--type</span><span class="token operator">=</span>target<span class="token comment"># 查看一个 Target 包含的所有 Unit</span>$ systemctl list-dependencies multi-user.target<span class="token comment"># 查看启动时的默认 Target</span>$ systemctl get-default<span class="token comment"># 设置启动时的默认 Target</span>$ <span class="token function">sudo</span> systemctl set-default multi-user.target<span class="token comment"># 切换 Target 时，默认不关闭前一个 Target 启动的进程，</span><span class="token comment"># systemctl isolate 命令改变这种行为，</span><span class="token comment"># 关闭前一个 Target 里面所有不属于后一个 Target 的进程</span>$ <span class="token function">sudo</span> systemctl isolate multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Target 与 传统 RunLevel 的对应关系如下：</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Traditional runlevel      New target name     Symbolically linked to<span class="token punctuation">..</span>.Runlevel <span class="token number">0</span>           <span class="token operator">|</span>    runlevel0.target -<span class="token operator">&gt;</span> poweroff.targetRunlevel <span class="token number">1</span>           <span class="token operator">|</span>    runlevel1.target -<span class="token operator">&gt;</span> rescue.targetRunlevel <span class="token number">2</span>           <span class="token operator">|</span>    runlevel2.target -<span class="token operator">&gt;</span> multi-user.targetRunlevel <span class="token number">3</span>           <span class="token operator">|</span>    runlevel3.target -<span class="token operator">&gt;</span> multi-user.targetRunlevel <span class="token number">4</span>           <span class="token operator">|</span>    runlevel4.target -<span class="token operator">&gt;</span> multi-user.targetRunlevel <span class="token number">5</span>           <span class="token operator">|</span>    runlevel5.target -<span class="token operator">&gt;</span> graphical.targetRunlevel <span class="token number">6</span>           <span class="token operator">|</span>    runlevel6.target -<span class="token operator">&gt;</span> reboot.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>它与<code>init</code>进程的主要差别如下：</p><blockquote><ol><li>默认的 <code>RunLevel</code>（在<code>/etc/inittab</code>文件设置）现在被默认的 Target 取代，位置是<code>/etc/systemd/system/default.target</code>，通常符号链接到<code>graphical.target</code>（图形界面）或者<code>multi-user.target</code>（多用户命令行）</li><li>启动脚本的位置，以前是<code>/etc/init.d</code>目录，符号链接到不同的 RunLevel 目录 （比如<code>/etc/rc3.d</code>、<code>/etc/rc5.d</code>等），现在则存放在<code>/lib/systemd/system</code>和<code>/etc/systemd/system</code>目录。</li><li>配置文件的位置，以前<code>init</code>进程的配置文件是<code>/etc/inittab</code>，各种服务的配置文件存放在<code>/etc/sysconfig</code>目录。现在的配置文件主要存放在<code>/lib/systemd</code>目录，在<code>/etc/systemd</code>目录里面的修改可以覆盖原始设置。</li></ol></blockquote><h4 id="Unit状态"><a href="#Unit状态" class="headerlink" title="Unit状态"></a>Unit状态</h4><p><code>systemctl status</code>命令用于查看系统状态和单个 Unit 的状态。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示系统状态</span>$ systemctl status<span class="token comment"># 显示单个 Unit 的状态</span>$ sysystemctl status bluetooth.service<span class="token comment"># 显示远程主机的某个 Unit 的状态</span>$ systemctl <span class="token parameter variable">-H</span> root@demo.example.com status httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了<code>status</code>命令，<code>systemctl</code>还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示某个 Unit 是否正在运行</span>$ systemctl is-active application.service<span class="token comment"># 显示某个 Unit 是否处于启动失败状态</span>$ systemctl is-failed application.service<span class="token comment"># 显示某个 Unit 服务是否建立了启动链接</span>$ systemctl is-enabled application.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Unit管理"><a href="#Unit管理" class="headerlink" title="Unit管理"></a>Unit管理</h4><p>对于用户来说，最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 立即启动一个服务</span>$ <span class="token function">sudo</span> systemctl start apache.service<span class="token comment"># 立即停止一个服务</span>$ <span class="token function">sudo</span> systemctl stop apache.service<span class="token comment"># 重启一个服务</span>$ <span class="token function">sudo</span> systemctl restart apache.service<span class="token comment"># 杀死一个服务的所有子进程</span>$ <span class="token function">sudo</span> systemctl <span class="token function">kill</span> apache.service<span class="token comment"># 重新加载一个服务的配置文件</span>$ <span class="token function">sudo</span> systemctl reload apache.service<span class="token comment"># 重载所有修改过的配置文件</span>$ <span class="token function">sudo</span> systemctl daemon-reload<span class="token comment"># 显示某个 Unit 的所有底层参数</span>$ systemctl show httpd.service<span class="token comment"># 显示某个 Unit 的指定属性的值</span>$ systemctl show <span class="token parameter variable">-p</span> CPUShares httpd.service<span class="token comment"># 设置某个 Unit 的指定属性</span>$ <span class="token function">sudo</span> systemctl set-property httpd.service <span class="token assign-left variable">CPUShares</span><span class="token operator">=</span><span class="token number">500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Unit依赖"><a href="#Unit依赖" class="headerlink" title="Unit依赖"></a>Unit依赖</h4><p>Unit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B。</p><p><code>systemctl list-dependencies sshd.service</code>命令列出一个 Unit 的所有依赖。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210430204855765.png" alt="image-20210430204855765"><p><code>systemctl list-dependencies --all sshd.service</code>命令列出一个 Unit 的所有依赖。(展开所有依赖子项)</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210430204831222.png" alt="image-20210430204831222"><h4 id="Unit配置文件"><a href="#Unit配置文件" class="headerlink" title="Unit配置文件"></a>Unit配置文件</h4><p>每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。</p><p>Systemd 默认从目录<code>/etc/systemd/system/</code>读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录<code>/usr/lib/systemd/system/</code>，真正的配置文件存放在那个目录。</p><p><code>systemctl enable</code>命令用于在上面两个目录之间，建立符号链接关系。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> clamd@scan.service<span class="token comment"># 等同于</span>$ <span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token string">'/usr/lib/systemd/system/clamd@scan.service'</span> <span class="token string">'/etc/systemd/system/multi-user.target.wants/clamd@scan.service'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果配置文件里面设置了开机启动，<code>systemctl enable</code>命令相当于激活开机启动。</p><p>与之对应的，<code>systemctl disable</code>命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl disable clamd@scan.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件的后缀名，就是该 Unit 的种类，比如<code>sshd.socket</code>。如果省略，Systemd 默认后缀名为<code>.service</code>，所以<code>sshd</code>会被理解成<code>sshd.service</code>。</p><p>可通过系统命令查看所有或分类型配置文件列表。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有配置文件</span>$ systemctl list-unit-files<span class="token comment"># 列出指定类型的配置文件</span>$ systemctl list-unit-files <span class="token parameter variable">--type</span><span class="token operator">=</span>service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个配置文件的状态，一共有四种。</p><blockquote><ul><li>enabled：已建立启动链接</li><li>disabled：没建立启动链接</li><li>static：该配置文件没有<code>[Install]</code>部分（无法执行），只能作为其他配置文件的依赖</li><li>masked：该配置文件被禁止建立启动链接</li></ul></blockquote><p>一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl daemon-reload$ <span class="token function">sudo</span> systemctl restart httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置文件就是普通的文本文件，可以用文本编辑器打开。</p><p><code>systemctl cat</code>命令可以查看配置文件的内容。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ systemctl <span class="token function">cat</span> sshd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置文件区块"><a href="#配置文件区块" class="headerlink" title="配置文件区块"></a>配置文件区块</h4><p><code>[Unit]</code>区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下。</p><blockquote><ul><li><code>Description</code>：简短描述</li><li><code>Documentation</code>：文档地址</li><li><code>Requires</code>：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</li><li><code>Wants</code>：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</li><li><code>BindsTo</code>：与<code>Requires</code>类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</li><li><code>Before</code>：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</li><li><code>After</code>：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</li><li><code>Conflicts</code>：这里指定的 Unit 不能与当前 Unit 同时运行</li><li><code>Condition...</code>：当前 Unit 运行必须满足的条件，否则不会运行</li><li><code>Assert...</code>：当前 Unit 运行必须满足的条件，否则会报启动失败</li></ul></blockquote><p><code>[Install]</code>通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。</p><blockquote><ul><li><code>WantedBy</code>：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入<code>/etc/systemd/system</code>目录下面以 Target 名 + <code>.wants</code>后缀构成的子目录中</li><li><code>RequiredBy</code>：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入<code>/etc/systemd/system</code>目录下面以 Target 名 + <code>.required</code>后缀构成的子目录中</li><li><code>Alias</code>：当前 Unit 可用于启动的别名</li><li><code>Also</code>：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</li></ul></blockquote><p><code>[Service]</code>区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。</p><blockquote><ul><li><code>Type</code>：定义启动时的进程行为。它有以下几种值。</li><li><code>Type=simple</code>：默认值，执行<code>ExecStart</code>指定的命令，启动主进程</li><li><code>Type=forking</code>：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</li><li><code>Type=oneshot</code>：一次性进程，Systemd 会等当前服务退出，再继续往下执行</li><li><code>Type=dbus</code>：当前服务通过D-Bus启动</li><li><code>Type=notify</code>：当前服务启动完毕，会通知<code>Systemd</code>，再继续往下执行</li><li><code>Type=idle</code>：若有其他任务执行完毕，当前服务才会运行</li><li><code>ExecStart</code>：启动当前服务的命令</li><li><code>ExecStartPre</code>：启动当前服务之前执行的命令</li><li><code>ExecStartPost</code>：启动当前服务之后执行的命令</li><li><code>ExecReload</code>：重启当前服务时执行的命令</li><li><code>ExecStop</code>：停止当前服务时执行的命令</li><li><code>ExecStopPost</code>：停止当其服务之后执行的命令</li><li><code>RestartSec</code>：自动重启当前服务间隔的秒数</li><li><code>Restart</code>：定义何种情况 Systemd 会自动重启当前服务，可能的值包括<code>always</code>（总是重启）、<code>on-success</code>、<code>on-failure</code>、<code>on-abnormal</code>、<code>on-abort</code>、<code>on-watchdog</code></li><li><code>TimeoutSec</code>：定义 Systemd 停止当前服务之前等待的秒数</li><li><code>Environment</code>：指定环境变量</li></ul></blockquote><p>Unit 配置文件的完整字段清单，请参考<a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html">官方文档</a>。</p><h3 id="Systemd日志管理"><a href="#Systemd日志管理" class="headerlink" title="Systemd日志管理"></a>Systemd日志管理</h3><p>Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用<code>journalctl</code>一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是<code>/etc/systemd/journald.conf</code>。</p><p><code>journalctl</code>功能强大，用法非常多。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span>$ <span class="token function">sudo</span> journalctl<span class="token comment"># 查看内核日志（不显示应用日志）</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-k</span><span class="token comment"># 查看系统本次启动的日志</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-b</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-b</span> <span class="token parameter variable">-0</span><span class="token comment"># 查看上一次启动的日志（需更改设置）</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-b</span> <span class="token parameter variable">-1</span><span class="token comment"># 查看指定时间的日志</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">"2012-10-30 18:17:16"</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">--since</span> <span class="token string">"20 min ago"</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">--since</span> yesterday$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">--since</span> <span class="token string">"2015-01-10"</span> <span class="token parameter variable">--until</span> <span class="token string">"2015-01-11 03:00"</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">--since</span> 09:00 <span class="token parameter variable">--until</span> <span class="token string">"1 hour ago"</span><span class="token comment"># 显示尾部的最新10行日志</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-n</span><span class="token comment"># 显示尾部指定行数的日志</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-n</span> <span class="token number">20</span><span class="token comment"># 实时滚动显示最新日志</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-f</span><span class="token comment"># 查看指定服务的日志</span>$ <span class="token function">sudo</span> journalctl /usr/lib/systemd/systemd<span class="token comment"># 查看指定进程的日志</span>$ <span class="token function">sudo</span> journalctl <span class="token assign-left variable">_PID</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 查看某个路径的脚本的日志</span>$ <span class="token function">sudo</span> journalctl /usr/bin/bash<span class="token comment"># 查看指定用户的日志</span>$ <span class="token function">sudo</span> journalctl <span class="token assign-left variable">_UID</span><span class="token operator">=</span><span class="token number">33</span> <span class="token parameter variable">--since</span> today<span class="token comment"># 查看某个 Unit 的日志</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-u</span> nginx.service$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-u</span> nginx.service <span class="token parameter variable">--since</span> today<span class="token comment"># 实时滚动显示某个 Unit 的最新日志</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-u</span> nginx.service <span class="token parameter variable">-f</span><span class="token comment"># 合并显示多个 Unit 的日志</span>$ journalctl <span class="token parameter variable">-u</span> nginx.service <span class="token parameter variable">-u</span> php-fpm.service <span class="token parameter variable">--since</span> today<span class="token comment"># 查看指定优先级（及其以上级别）的日志，共有8级</span><span class="token comment"># 0: emerg</span><span class="token comment"># 1: alert</span><span class="token comment"># 2: crit</span><span class="token comment"># 3: err</span><span class="token comment"># 4: warning</span><span class="token comment"># 5: notice</span><span class="token comment"># 6: info</span><span class="token comment"># 7: debug</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-p</span> err <span class="token parameter variable">-b</span><span class="token comment"># 日志默认分页输出，--no-pager 改为正常的标准输出</span>$ <span class="token function">sudo</span> journalctl --no-pager<span class="token comment"># 以 JSON 格式（单行）输出</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-b</span> <span class="token parameter variable">-u</span> nginx.service <span class="token parameter variable">-o</span> json<span class="token comment"># 以 JSON 格式（多行）输出，可读性更好</span>$ <span class="token function">sudo</span> journalctl <span class="token parameter variable">-b</span> <span class="token parameter variable">-u</span> nginx.serviceqq <span class="token parameter variable">-o</span> json-pretty<span class="token comment"># 显示日志占据的硬盘空间</span>$ <span class="token function">sudo</span> journalctl --disk-usage<span class="token comment"># 指定日志文件占据的最大空间</span>$ <span class="token function">sudo</span> journalctl --vacuum-size<span class="token operator">=</span>1G<span class="token comment"># 指定日志文件保存多久</span>$ <span class="token function">sudo</span> journalctl --vacuum-time<span class="token operator">=</span>1years<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> systemctl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNC服务配置</title>
      <link href="/2021/04/30/01-linux/vnc-pei-zhi/"/>
      <url>/2021/04/30/01-linux/vnc-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="VNC服务配置"><a href="#VNC服务配置" class="headerlink" title="VNC服务配置"></a>VNC服务配置</h1><h2 id="Manjaro系统初始化"><a href="#Manjaro系统初始化" class="headerlink" title="Manjaro系统初始化"></a>Manjaro系统初始化</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更换系统源地址</span><span class="token function">sudo</span> pacman-mirrors <span class="token parameter variable">-i</span> <span class="token parameter variable">-c</span> China <span class="token parameter variable">-m</span> rank<span class="token function">sudo</span> pacman-mirrors <span class="token parameter variable">-g</span><span class="token comment"># 安装yay并添加社区源</span><span class="token function">sudo</span> pacman <span class="token parameter variable">-Sy</span> yayyay <span class="token parameter variable">--aururl</span> “https://aur.tuna.tsinghua.edu.cn” <span class="token parameter variable">--save</span><span class="token comment">#更新源列表</span>yay <span class="token parameter variable">-Sy</span><span class="token comment"># 同步源并更新至系统</span>yay <span class="token parameter variable">-Syu</span><span class="token comment"># 更新系统</span><span class="token comment"># 解决 breaks dependency 'libcanberra=0.30+2+gc0620e4-3</span>pacman <span class="token parameter variable">-S</span> pamacpamac update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装VNC服务及启动"><a href="#安装VNC服务及启动" class="headerlink" title="安装VNC服务及启动"></a>安装VNC服务及启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># x11vnc</span>pacman <span class="token parameter variable">-Sy</span> x11vnc<span class="token comment"># tigervnc</span><span class="token function">nohup</span> x0vncserver <span class="token parameter variable">-rfbport</span> <span class="token number">5901</span> <span class="token parameter variable">-display</span> :0   <span class="token parameter variable">-geometry</span> 2560x1440  <span class="token parameter variable">-PasswordFile</span> ~/.vnc/passwd <span class="token operator">&gt;</span>~/.vnc/vnc.log <span class="token operator">&amp;</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想1</p><h2 id="VNC桌面启动"><a href="#VNC桌面启动" class="headerlink" title="VNC桌面启动"></a>VNC桌面启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> x11vnc <span class="token parameter variable">-xkb</span> <span class="token parameter variable">-forever</span> <span class="token parameter variable">-passwd</span> semon@123 <span class="token parameter variable">-display</span> :0  <span class="token parameter variable">-rfbport</span> <span class="token number">5901</span> <span class="token parameter variable">-forever</span> <span class="token parameter variable">-o</span> /var/log/x11vnc.log <span class="token parameter variable">-bg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://wiki.archlinux.org/title/x11vnc_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/x11vnc_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p><p><a href="https://man.archlinux.org/man/x11vnc.1">https://man.archlinux.org/man/x11vnc.1</a></p><h2 id="安装virtualbox"><a href="#安装virtualbox" class="headerlink" title="安装virtualbox"></a>安装virtualbox</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman-mirrors <span class="token parameter variable">-f5</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> pacman <span class="token parameter variable">-Scc</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> pacman <span class="token parameter variable">-Syyu</span> virtualbox virtualbox-guest-iso linux54-virtualbox-host-modules<span class="token comment"># 重启系统</span><span class="token function">reboot</span><span class="token comment"># 加载</span><span class="token function">sudo</span> modprobe vboxdrv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vnc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LDAP简介</title>
      <link href="/2021/04/28/03-hadoop/ldap-jian-jie-ji-bu-shu/"/>
      <url>/2021/04/28/03-hadoop/ldap-jian-jie-ji-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="LDAP简介"><a href="#LDAP简介" class="headerlink" title="LDAP简介"></a>LDAP简介</h1><p>LDAP是轻量目录访问协议，英文全称是Lightweight Directory Access Protocol，简称LDAP。LDAP的目录服务其实也是一种数据库系统（Berkeley DB），只是这种数据库是一种树形结构（B Tree），对于数据的读取、浏览、搜索有很好的效果，但不适合频繁写，不支持事务不能回滚。</p><p>LDAP是一个协议，而不是一款软件，基于LDAP协议的产品已经有很多，各大软件公司都在他们的产品中集成了LDAP服务，如Microsoft的ActiveDirectory、Lotus的Domino Directory、IBM的WebSphere中也集成了LDAP服务。LDAP的开源实现是OpenLDAP，它比商业产品一点也不差，而且源码开放。这些软件提供了目录服务的所有功能，包括目录搜索、身份认证、安全通道、过滤器等等。</p><p>LDAP数据操作访问可分为四类10种操作：</p><ul><li>查询类操作，如搜索、比较；</li><li>更新类操作，如添加条目、删除条目、修改条目、修改条目名；</li><li>认证类操作，如绑定、解绑定；</li><li>其它操作，如放弃和扩展操作；</li></ul><p>我们用LDAP实现多个组件的用户管理，比如把gitlab和harbor等组件的用户放在LDAP一起管理，组件只负责权限管理。用户在这些组件登录时都走LDAP的认证，让用户可以用一套用户名密码即可登录所有组件。</p><h2 id="LDAP-关键字"><a href="#LDAP-关键字" class="headerlink" title="LDAP 关键字"></a>LDAP 关键字</h2><p>Schema：用来指定一个目录中所包含的对象(Object)的类型(ObjectClass)，以及每一个类型中必须提供的属性和可选属性；</p><ul><li><p>Object：用来表示一个具体的条目</p></li><li><p>ObjectClass：用于规范条目值的属性类型</p></li><li><p>DN（Distinguished Name）：唯一标识</p></li><li><p>RDN（Relative DN）：相对标识（CN、SN、UID均可作为RDN）</p></li><li><p>DC（Domain Component）：域名的一部分，每一层为一个DC</p></li><li><p>OU（Organization Unit）：组织单元</p></li><li><p>CN（Common Name）：用户名字</p></li><li><p>SN（Surname）：用户姓氏</p></li><li><p>UID（UserID）：用户登陆ID</p></li></ul><p>举个栗子：A公司B部门经理王小二登陆ID <a href="mailto:wangxiaoer@demo.com">wangxiaoer@demo.com</a></p><p>Schema用来定义Object的格式为 公司-部门-姓名-登陆ID</p><p>Object为王小二这个条目</p><p>ObjectClass用来定义公司、部门、姓名、登陆ID的约束，如登陆ID必须符合邮箱格式</p><p>DN：”DC=A公司,DC=B部门,OU=经理,UID=<a href="mailto:wangxiaoer@demo.com">wangxiaoer@demo.com</a>“</p><p>RDN：UID=<a href="mailto:wangxiaoer@demo.com">wangxiaoer@demo.com</a> 或SN=王或CN=小二</p><p>DC：DC=A公司，DC=B部门</p><p>OU：OU=经理</p><p>CN：CN=小二</p><p>SN：SN=王</p><p>UID：UID=<a href="mailto:wangxiaoer@demo.com">wangxiaoer@demo.com</a></p><h1 id="LDAP部署"><a href="#LDAP部署" class="headerlink" title="LDAP部署"></a>LDAP部署</h1><h2 id="安装软件及依赖包"><a href="#安装软件及依赖包" class="headerlink" title="安装软件及依赖包"></a>安装软件及依赖包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> openldap compat-openldap openldap-clients openldap-servers openldap-servers-sql openldap-devel<span class="token comment"># 启动服务</span>systemctl start slapd.service <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> slapd.service<span class="token comment"># 初始化DB数据</span><span class="token function">cp</span> /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG<span class="token function">chown</span> <span class="token parameter variable">-R</span> ldap:ldap /var/lib/ldap/systemctl restart slapd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置LDAP管理员密码"><a href="#设置LDAP管理员密码" class="headerlink" title="设置LDAP管理员密码"></a>设置LDAP管理员密码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">slappasswd<span class="token operator">&lt;</span> UnAZe2xGI5<span class="token operator">&lt;</span> UnAZe2xGI5<span class="token operator">&gt;</span>密文密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建ch-domain-ldif"><a href="#创建ch-domain-ldif" class="headerlink" title="创建ch-domain.ldif"></a>创建ch-domain.ldif</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dc需根据实际情况进行更改</span><span class="token comment"># olcRootPW值修改为设置密码时返回的密文密码</span><span class="token comment"># /etc/openldap/ch-domain.ldif</span>dn: <span class="token assign-left variable">olcDatabase</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>monitor,cn<span class="token operator">=</span>configchangetype: modifyreplace: olcAccessolcAccess: <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>to * by <span class="token assign-left variable">dn.base</span><span class="token operator">=</span><span class="token string">"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth"</span> <span class="token builtin class-name">read</span> by <span class="token assign-left variable">dn.base</span><span class="token operator">=</span><span class="token string">"cn=admin,dc=demo,dc=163,dc=com"</span> <span class="token builtin class-name">read</span> by * nonedn: <span class="token assign-left variable">olcDatabase</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>hdb,cn<span class="token operator">=</span>configchangetype: modifyreplace: olcSuffixolcSuffix: <span class="token assign-left variable">dc</span><span class="token operator">=</span>demo,dc<span class="token operator">=</span><span class="token number">163</span>,dc<span class="token operator">=</span>comdn: <span class="token assign-left variable">olcDatabase</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>hdb,cn<span class="token operator">=</span>configchangetype: modifyreplace: olcRootDNolcRootDN: <span class="token assign-left variable">cn</span><span class="token operator">=</span>admin,dc<span class="token operator">=</span>demo,dc<span class="token operator">=</span><span class="token number">163</span>,dc<span class="token operator">=</span>comdn: <span class="token assign-left variable">olcDatabase</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>hdb,cn<span class="token operator">=</span>configchangetype: modifyreplace: olcRootPWolcRootPW: <span class="token punctuation">{</span>SSHA<span class="token punctuation">}</span>Sx34vYufqmmghi0idoXgwHnRLgr+qCuGdn: <span class="token assign-left variable">olcDatabase</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>hdb,cn<span class="token operator">=</span>configchangetype: modifyreplace: olcAccessolcAccess: <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>to <span class="token assign-left variable">attrs</span><span class="token operator">=</span>userPassword,shadowLastChange by <span class="token assign-left variable">dn</span><span class="token operator">=</span><span class="token string">"cn=admin,dc=demo,dc=163,dc=com"</span> <span class="token function">write</span> by anonymous auth by self <span class="token function">write</span> by * noneolcAccess: <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>to <span class="token assign-left variable">dn.base</span><span class="token operator">=</span><span class="token string">""</span> by * <span class="token builtin class-name">read</span>olcAccess: <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>to * by <span class="token assign-left variable">dn</span><span class="token operator">=</span><span class="token string">"cn=admin,dc=demo,dc=163,dc=com"</span> <span class="token function">write</span> by * <span class="token builtin class-name">read</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建init-ldif"><a href="#创建init-ldif" class="headerlink" title="创建init.ldif"></a>创建init.ldif</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改dn、dc及cn信息</span><span class="token comment"># /etc/openldap/init.ldif</span>dn: <span class="token assign-left variable">dc</span><span class="token operator">=</span>demo,dc<span class="token operator">=</span><span class="token number">163</span>,dc<span class="token operator">=</span>comobjectclass: <span class="token function">top</span>objectclass: dcObjectobjectclass: organizationo: demo.163.comdc: demodn: <span class="token assign-left variable">cn</span><span class="token operator">=</span>admin,dc<span class="token operator">=</span>demo,dc<span class="token operator">=</span><span class="token number">163</span>,dc<span class="token operator">=</span>comobjectclass: organizationalRolecn: admindn: <span class="token assign-left variable">ou</span><span class="token operator">=</span>groups,dc<span class="token operator">=</span>demo,dc<span class="token operator">=</span><span class="token number">163</span>,dc<span class="token operator">=</span>comobjectclass: organizationalUnitobjectclass: <span class="token function">top</span>ou: <span class="token function">groups</span>dn: <span class="token assign-left variable">cn</span><span class="token operator">=</span>demo_default_group,ou<span class="token operator">=</span>groups,dc<span class="token operator">=</span>demo,dc<span class="token operator">=</span><span class="token number">163</span>,dc<span class="token operator">=</span>comcn: demo_default_groupgidnumber: <span class="token number">6000</span>objectclass: posixGroupobjectclass: <span class="token function">top</span>dn: <span class="token assign-left variable">ou</span><span class="token operator">=</span>people,dc<span class="token operator">=</span>demo,dc<span class="token operator">=</span><span class="token number">163</span>,dc<span class="token operator">=</span>comobjectclass: organizationalUnitobjectclass: <span class="token function">top</span>ou: peopledn: <span class="token assign-left variable">cn</span><span class="token operator">=</span>anonymous,ou<span class="token operator">=</span>people,dc<span class="token operator">=</span>demo,dc<span class="token operator">=</span><span class="token number">163</span>,dc<span class="token operator">=</span>comcn: anonymousgidnumber: <span class="token number">6000</span>homedirectory: /home/anonymousloginshell: /bin/bashobjectclass: inetOrgPersonobjectclass: posixAccountobjectclass: <span class="token function">top</span>sn: anonymousuid: anonymousuidnumber: <span class="token number">10000</span>userpassword: anonymous<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置加载至LDAP"><a href="#配置加载至LDAP" class="headerlink" title="配置加载至LDAP"></a>配置加载至LDAP</h2><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 将初始配置添加至ldapldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldifldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldifldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif# 将ch-domain.ldif配置添加至ldapldapmodify -Y EXTERNAL -H ldapi:/// -f ch-domain.ldif#目录授权chown -R ldap:ldap /etc/openldap#重启服务systemctl restart slapd.service &amp;&amp; systemctl enable slapd#将init.ldif添加至ldapldapadd -x -D 'cn=admin,dc=demo,dc=163,dc=com' -w 'UnAZe2xGI5' -f ./init.ldif#验证ldapsearch -x -b "dc=demo,dc=163,dc=com" '(objectclass=*)'ldapwhoami -x -D 'cn=admin,dc=demo,dc=163,dc=com' -w 'UnAZe2xGI5'ldapwhoami -x -D 'cn=anonymous,ou=people,dc=demo,dc=163,dc=com' -w 'anonymous'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LDAP-HA配置"><a href="#LDAP-HA配置" class="headerlink" title="LDAP HA配置"></a>LDAP HA配置</h2><h3 id="创建syncprov-ldif"><a href="#创建syncprov-ldif" class="headerlink" title="创建syncprov.ldif"></a>创建syncprov.ldif</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 文件内容不需要修改</span><span class="token comment"># /etc/openldap/syncprov.ldif</span>dn: <span class="token assign-left variable">cn</span><span class="token operator">=</span>module,cn<span class="token operator">=</span>configobjectClass: olcModuleListcn: moduleolcModulePath: /usr/lib64/openldapolcModuleLoad: syncprov.ladn: <span class="token assign-left variable">olcOverlay</span><span class="token operator">=</span>syncprov,olcDatabase<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>hdb,cn<span class="token operator">=</span>configobjectClass: olcOverlayConfigobjectClass: olcSyncProvConfigolcOverlay: syncprovolcSpSessionLog: <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># MASTERldapadd -Y EXTERNAL -H ldapi:/// -f syncprov.ldif# SLAVEldapadd -Y EXTERNAL -H ldapi:/// -f syncprov.ldif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建master-ldif"><a href="#创建master-ldif" class="headerlink" title="创建master.ldif"></a>创建master.ldif</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># olcServerID 为唯一标识，master与slave需区分</span><span class="token comment"># provider 指定ha节点，master指定slave主机名，slave指定master主机名</span><span class="token comment"># dc需根据实际进行修改</span><span class="token comment"># 保留文件缩进格式</span><span class="token comment"># /etc/openldap/master01.ldif</span>dn: <span class="token assign-left variable">cn</span><span class="token operator">=</span>configchangetype: modifyreplace: olcServerID<span class="token comment"># specify uniq ID number on each server</span>olcServerID: <span class="token number">1</span>dn: <span class="token assign-left variable">olcDatabase</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>hdb,cn<span class="token operator">=</span>configchangetype: modifyadd: olcSyncReplolcSyncRepl: <span class="token assign-left variable">rid</span><span class="token operator">=</span>001  <span class="token assign-left variable">provider</span><span class="token operator">=</span>ldap://demo02.bigdata.163.com:389/  <span class="token assign-left variable">bindmethod</span><span class="token operator">=</span>simple  <span class="token assign-left variable">binddn</span><span class="token operator">=</span><span class="token string">"cn=admin,dc=demo,dc=163,dc=com"</span>  <span class="token assign-left variable">credentials</span><span class="token operator">=</span>UnAZe2xGI5  <span class="token assign-left variable">searchbase</span><span class="token operator">=</span><span class="token string">"dc=demo,dc=163,dc=com"</span>  <span class="token assign-left variable">scope</span><span class="token operator">=</span>sub  <span class="token assign-left variable">schemachecking</span><span class="token operator">=</span>on  <span class="token assign-left variable">type</span><span class="token operator">=</span>refreshAndPersist  <span class="token assign-left variable">retry</span><span class="token operator">=</span><span class="token string">"30 5 300 +"</span>  <span class="token assign-left variable">interval</span><span class="token operator">=</span>00:00:00:10-add: olcMirrorModeolcMirrorMode: TRUE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># MASTERldapmodify -Y EXTERNAL -H ldapi:/// -f master01.ldif# 重启服务systemctl restart slapd.service#SLAVEldapmodify -Y EXTERNAL -H ldapi:/// -f master02.ldif# 重启服务systemctl restart slapd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="验证HA"><a href="#验证HA" class="headerlink" title="验证HA"></a>验证HA</h2><h3 id="创建user1-ldif"><a href="#创建user1-ldif" class="headerlink" title="创建user1.ldif"></a>创建user1.ldif</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># user1.ldif</span>dn: <span class="token assign-left variable">cn</span><span class="token operator">=</span>user1,ou<span class="token operator">=</span>people,dc<span class="token operator">=</span>demo,dc<span class="token operator">=</span><span class="token number">163</span>,dc<span class="token operator">=</span>comcn: user1gidnumber: <span class="token number">6000</span>homedirectory: /home/user1loginshell: /bin/bashobjectclass: inetOrgPersonobjectclass: posixAccountobjectclass: <span class="token function">top</span>sn: user1uid: user1uidnumber: <span class="token number">9999</span>userpassword: user1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># master</span><span class="token comment">## 添加user1</span>ldapadd <span class="token parameter variable">-x</span> <span class="token parameter variable">-D</span> <span class="token string">'cn=admin,dc=demo,dc=163,dc=com'</span> <span class="token parameter variable">-w</span> <span class="token string">'UnAZe2xGI5'</span> <span class="token parameter variable">-f</span> ./user1.ldif<span class="token comment"># slave</span><span class="token comment">## 查询user1</span>ldapwhoami <span class="token parameter variable">-x</span> <span class="token parameter variable">-D</span> <span class="token string">'cn=user1,ou=people,dc=demo,dc=163,dc=com'</span> <span class="token parameter variable">-w</span> <span class="token string">'user1'</span><span class="token comment">## 删除user1</span>ldapdelete <span class="token parameter variable">-x</span> <span class="token parameter variable">-D</span> <span class="token string">'cn=admin,dc=demo,dc=163,dc=com'</span> <span class="token parameter variable">-w</span> <span class="token string">'UnAZe2xGI5'</span> <span class="token string">'cn=user1,ou=people,dc=demo,dc=163,dc=com'</span><span class="token comment"># master</span><span class="token comment">## 查询user1</span>ldapwhoami <span class="token parameter variable">-x</span> <span class="token parameter variable">-D</span> <span class="token string">'cn=user1,ou=people,dc=demo,dc=163,dc=com'</span> <span class="token parameter variable">-w</span> <span class="token string">'user1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="卸载LDAP"><a href="#卸载LDAP" class="headerlink" title="卸载LDAP"></a>卸载LDAP</h2><pre class="line-numbers language-none"><code class="language-none">systemctl stop slapd &amp;&amp; systemctl disable slapd yum -y remove openldap-servers openldap-clients rm -rf /var/lib/ldap /etc/openldap/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="No-such-user"><a href="#No-such-user" class="headerlink" title="No such user"></a>No such user</h3><p>该问题一般为nslcd服务异常导致，排查步骤如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#核查ldap server及base dn配置是否正常</span>authconfig <span class="token parameter variable">--test</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token parameter variable">-i</span> <span class="token string">'ldap|sss'</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-iE</span> <span class="token string">'server|base'</span><span class="token comment"># 修改配置</span>authconfig <span class="token parameter variable">--ldapbasedn</span><span class="token operator">=</span>dc<span class="token operator">=</span>bigdata,dc<span class="token operator">=</span>demo,dc<span class="token operator">=</span>com,dc<span class="token operator">=</span>cn <span class="token parameter variable">--update</span><span class="token comment"># 修改配置文件</span><span class="token comment"># vi /etc/nslcd.conf 注释以下两行</span><span class="token comment"># ssl start_tls</span><span class="token comment"># tls_cacertdir /etc/openldap/cacerts</span><span class="token comment"># vi /etc/nsswitch.conf 追加行尾ldap</span>passwd: files sss ldapshadow: files sss ldapgroup: files sss ldap<span class="token comment"># 重启nslcd服务</span>systemctl status nslcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ldap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程小技巧</title>
      <link href="/2021/04/27/01-linux/shell-xiao-ji-qiao/"/>
      <url>/2021/04/27/01-linux/shell-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><h2 id="系统函数调用"><a href="#系统函数调用" class="headerlink" title="系统函数调用"></a>系统函数调用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通用脚本执行后显示成功或失败</span><span class="token builtin class-name">source</span> /etc/init.d/functionsaction /bin/true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日志筛选重定向"><a href="#日志筛选重定向" class="headerlink" title="日志筛选重定向"></a>日志筛选重定向</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-f</span> /usr/aa.log <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{ print $0 ;fflush()}'</span> <span class="token operator">&gt;&gt;</span>out.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>tail -f会产生一个未关闭的输出流，输出流向标准输出打印与写入文件的流程是不一致的，数据写入文件需先写出到pipe缓冲区，等待输出流关闭后，数据才会自动写到缓冲区中，完成文件写入；故需要调用ffush强制刷新数据到缓冲区中；</p></blockquote><h2 id="强制拷贝"><a href="#强制拷贝" class="headerlink" title="强制拷贝"></a>强制拷贝</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>cp <span class="token parameter variable">-f</span> file1  file2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>操作系统环境变量默认配置了cp alias = cp -i，故使用cp -f 拷贝覆盖一个已存在文件时仍然会出现提示，反斜线\ 强制系统不读取alias别名，直接使用环境变量中真实cp命令进行文件拷贝；</p></blockquote><h2 id="搜索增强"><a href="#搜索增强" class="headerlink" title="搜索增强"></a>搜索增强</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 递归搜索包含软链</span><span class="token function">find</span> <span class="token parameter variable">-rL</span> path <span class="token parameter variable">-name</span> <span class="token string">'keyword'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="非交互式操作crontab"><a href="#非交互式操作crontab" class="headerlink" title="非交互式操作crontab"></a>非交互式操作crontab</h2><p>方案一：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-l</span>  <span class="token operator">&gt;</span>crontab.conf  <span class="token comment"># 导出现有定时任务</span><span class="token builtin class-name">echo</span> <span class="token string">"* * * * * /bin/bash /home/user/demo.sh"</span> <span class="token operator">&gt;&gt;</span> crontab.conf  <span class="token comment"># 追加新增定时任务至任务列表</span><span class="token function">crontab</span> crontab.conf  <span class="token comment"># 将列表配置项生效至定时任务（覆盖模式）</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> crontab.conf   <span class="token comment"># 删除导出生成列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方案二：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 直接编辑定时任务列表文件  /var/spool/cron/目录下以用户名命名文件为对应用户下定时任务列表</span><span class="token builtin class-name">echo</span> <span class="token string">"* * * * * /bin/bash demo.sh"</span> <span class="token operator">&gt;&gt;</span> /var/spool/cron/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><p><code>$0</code>：表示当前执行的脚本名；</p><p><code>$?</code>：获取上一条命名执行返回的状态，0为成成功，其他为失败；</p><p><code>$*</code>：表示传递给脚本或函数的所有参数，多个参数以空格分隔；</p><p><code>"$*"</code>：表示传递给脚本或函数的所有参数组合成的一个整体，无法分割；</p><p><code>$@</code>：表示传递给脚本或函数的所有参数，多个参数以空格分隔；(不带引号时与<code>$*</code>可互相替换使用)</p><p><code>"$@"</code>：表示传递给脚本或函数的所有参数，多个参数以空格分隔；（与不带引号时无差别）</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK套件介绍及部署</title>
      <link href="/2021/04/27/03-hadoop/elk-tao-jian-bu-shu/"/>
      <url>/2021/04/27/03-hadoop/elk-tao-jian-bu-shu/</url>
      
        <content type="html"><![CDATA[<p>EKL是三个开源软件的缩写，分别表示Elasticsearch、Logstash及Kibana，他们都是开源软件，后来新增了Filebeat，它是一个轻量级的日志手机处理工具，Filebeat占用资源少，适合在各个服务器上手机日志后传输给Logstash；</p><p>Filebeat用于采集服务器上指定日志文件，并将采集结果发送至output中；有点在于资源消耗非常小，单个采集进程仅占用10多M内存资源；</p><p>Elasticsearch是开源分布式搜索引擎，提供搜集、分析、存储数据三大功能；它的特点是：分布式、零配置、自动发现，索引自动分片、索引副本、restful风格API、多数据源、自动搜索负载等；</p><p>Logstash主要用于日志搜集、分析、过滤，支持大量的数据获取方式；一般为C/S架构，client端部署在需要搜集日志的主机上，server段负责接收各个client收集的日志并进行过滤、修改等操作，并将结果推送至elasticsearch；</p><p>Kibana用于为Logstash和elasticsearch提供可视化界面，帮助汇总、分析和搜索重要数据日志；</p><h1 id="Filebeat"><a href="#Filebeat" class="headerlink" title="Filebeat"></a>Filebeat</h1><p>Filebeat由orospector和harvesters组成：</p><p>harvesters负责读取单个文件内容并发送至output中，harvesters读取文件为逐行读取；每个文件都将启动一个harvesters，这意味着每个harvesters运行时都会保持文件的打开状态直至harvesters关闭后才会释放文件句柄；</p><p>Prospector负责管理Harvsters，并且找到所有需要进行读取的数据源，且prospector会为每个找到的文件保持状态信息，避免因移动或重命名导致重复采集；</p><h2 id="软件包下载"><a href="#软件包下载" class="headerlink" title="软件包下载"></a>软件包下载</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.0-linux-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">cd $FILEBEAT_HOMEtar -zxvf filebeat-7.4.0-linux-x86_64.tar.gz # 配置filebeat  vi filebeat.ymlfilebeat.inputs:# 定义input类型，常用类型为log和stdin# - 表示一个input- type: log    # enable选项配置是否启用该inputenable: true #指定监控目录及模糊匹配文件paths:- /var/logs/*.log# 排除日志文件中符合规则的记录行exclude_lines: ['^ABC']  # 排除以ABC开头的记录行exclude_files: ['.gz$']  # 排除以.gz结尾的文件# 在输出数据中新增一个额外字段信息# 默认情况下，会在输出信息的fields子目录下以指定的新增fields建立子目录，例如fields.level  # 这个得意思就是会在es中多添加一个字段，格式为 "filelds":{"level":"debug"}fields:level: debugreview: 1# 如果该选项设置为true，则新增fields成为顶级目录，而不是将其放在fields目录下。  # 自定义的field会覆盖filebeat默认的field  # 如果设置为true，则在es中新增的字段格式为："level":"debug"fields_under_root: false# 可以指定Filebeat忽略指定时间段以外修改的日志内容，比如2h（两个小时）或者5m(5分钟)。ignore_older: 2h    # 指定超时(指定时间段内文件内容未进行更新)关闭文件handle，默认1h  colse_older: 1h    # 指定es输出的document类型，默认为log  document_type: log    # 指定filebeat检测文件变更的频率，0s为尽可能快的进行检测，默认为10s  scan_frequency: 10s    # 指定harvester 监控文件使用的buffer大小  harvester_buffer_size: 16384    # 配置单行记录最大值,超出最大值部分会被截断  max_bytes: 10485760    # 配置一条日志占用多行情况,比如java 报错信息调用栈等  multiline:  pattern: ^\[   # 配置多行日志开始行的匹配模式  negate: false  # 配置是否否定多行合并，需与match参数结合使用  match: before  # 配置匹配模式后，多行日志合并方式，当negate为true时，before表示匹配行是结尾，与前面不匹配的行进行合并，after表示匹配行是开头，与后面不匹配的行进行合并；当negate为false时，before表示匹配行是开头，与后面不匹配的行进行合并，after表示匹配行是结尾，与前面不匹配的行进行合并  max_lines: 500 # 配置最大合并行数  timeout: 5s    # 配置多行日志合并超时时间，即到达超时时间后，即认为当前事件(行)已合并完成    # 配置文件读取位置，为true则从当前文件结尾开始监控文件新增内容  tail_files: false    # 配置检测到文件结尾(EOF)后再次检测等待时长，默认1s  backoff: 1s    # 配置检测到文件结尾(EOF)后再次检测等待最大时长，该参数与backoff冲突时，以本参数为准，默认10s  max_backoff: 10s    # 定义backoff更新频率，即连续backoff指定次数无更新后，backoff将重置为max_backoff，直至检测到更新，再次重置回原backoff  backoff_factor: 2    # 文件名发生变更时，关闭harvester，建议在windows启用  force_close_files: false    # 引入moudle配置filebeat.config.moudles:path: ${path.config}/moudles.d/*.yml#是否允许重新加载reload.enabled: false  # 定义输出类型output：elasticsearch:hosts:["localhost:9200"]protocol: "https"username: "es"password: "passwd"index: "filebeat-%{[beat.version]}-%{+yyyy.MM.dd}"logstash:hosts: ["localhost:5044"]# 默认不启用ssl# 配置https证书目录ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]# 配置客户端证书ssl.certificate: "/etc/pki/client/cert.pem"# 配置客户端keyssl.key: "/etc/pki/client/cert.key"processors:# 配置主机元数据采集- add_host_metadata: -# 配置云主机元数据采集- add_cloud_metadata: -# 配置k8s元数据采集- add_kubernetes_metadata: -# 配置docker元数据采集- add_docker_metadata: -# 配置执行进程相关数据- add_process_metadata: -logging.level: debuglogging.selectors: ["*"]# general# 设置filebeat名称，默认为主机名name:demo# 添加额外标签tags: ["tagsA","demo"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES部署"><a href="#ES部署" class="headerlink" title="ES部署"></a>ES部署</h1><h2 id="软件包下载-1"><a href="#软件包下载-1" class="headerlink" title="软件包下载"></a>软件包下载</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># es软件包</span><span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.0-linux-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="系统环境调整"><a href="#系统环境调整" class="headerlink" title="系统环境调整"></a>系统环境调整</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 预置JDK及NODE.js至环境变量</span><span class="token comment">#添加es用户并修改句柄数限制 vi  /etc/security/limits.conf</span><span class="token function">useradd</span> elasticsearchelasticsearchsoftnproc<span class="token number">65536</span>elasticsearchhardnproc<span class="token number">65536</span>elasticsearchsoftnofile<span class="token number">1048576</span>elasticsearchhardnofile<span class="token number">1048576</span><span class="token comment"># 修改虚拟内存大小 vi /etc/sysctl.conf</span><span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">262144</span>/sbin/sysctl <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h2><p>规划ES目录及配置文件修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable">$ES_HOME</span><span class="token function">mkdir</span> data logs<span class="token comment"># 修改配置文件 config/elasticsearch.yaml</span>cluster.name: my-application   <span class="token comment"># 配置Elasticsearch的集群名称，默认是elasticsearch，Elasticsearch会自动发现在同一网段下的es集群，如果在同一个网段下有多个集群，可以利用这个属性来区分不同的集群。</span>node.name: node-1  <span class="token comment">#集群的节点名称，Elasticsearch启动的时候会自动创建节点名称，但是你也可以进行配置。</span>path.data: /usr/local/elastic/data  <span class="token comment"># 设置索引数据的存储路径，默认是Elasticsearch根目录下的data文件夹，可以设置多个存储路径，用逗号隔开，是的数据在文件级别跨域位置，这样在创建时就有更多的自由路径，如：path.data: /path/to/data1,/path/to/data2</span>path.logs: /usr/local/elastic/logs  <span class="token comment">#设置日志文件的存储路径，默认是Elasticsearch根目录下的logs文件夹 </span>network.host: <span class="token number">192.168</span>.1.20 <span class="token comment"># 设置绑定的IP地址，可以是ipv4或者ipv5，默认使用0.0.0.0地址，并为http传输开启9200、9300端口，为节点到节点的通信开启9300-9400端口，也可以自行设置IP地址。</span>http.port: <span class="token number">9200</span> <span class="token comment"># 设置对外服务的Http端口，默认是9200</span>discovery.zen.ping.unicast.hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.11"</span><span class="token punctuation">]</span>  <span class="token comment">#设置集群中master节点的初始化列表，可以通过这些节点来自动发现新加入集群的节点(主要用于不同网段机器连接)。</span>discovery.zen.minimum_master_nodes: <span class="token number">1</span>  <span class="token comment">#设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点，默认为1，当集群多余三个节点时，可以设置大一点的值(2-4)</span>gateway.recover_after_nodes: <span class="token number">3</span> <span class="token comment"># 设置集群中启动N个节点启动时进行数据恢复，默认是1</span>node.rack: r1 <span class="token comment"># 每个节点都可以定义一些与之关联的通用属性，用于后期集群进行碎片分配时的过滤。</span>bootstrap.mlockall: <span class="token boolean">true</span> <span class="token comment"># 设置为true来锁住内存，因为当JVM开始swapping的时候Elasticsearch的效率会降低，所以要保证他不被swap，可以吧ES_MIN_MEN和ES_MAX_MEN两个环境变量设置为同一个值，并且保证机器有足够的内存分配给Elasticsearch，同时也要允许Elasticsearch的进程可以锁住内存，Linux下可以通过`ulimit -l unlimited`命令</span><span class="token comment"># 修改JVM相关参数   config/jvm.options</span><span class="token parameter variable">-Xms2g</span><span class="token parameter variable">-Xmx2g</span><span class="token comment">#启动服务</span>bin/elasticsearch <span class="token parameter variable">-d</span>  <span class="token comment">#-d：后台启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><h3 id="elasticsearch-head"><a href="#elasticsearch-head" class="headerlink" title="elasticsearch-head"></a>elasticsearch-head</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/mobz/elasticsearch-head/archive/master.zip<span class="token function">unzip</span> master.zip <span class="token parameter variable">-d</span> <span class="token variable">$ES_HOME</span>/modules/<span class="token builtin class-name">cd</span> <span class="token variable">$ES_HOME</span>/modules/elasticsearch-head-master<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> grunt <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org<span class="token function">npm</span> <span class="token function">install</span><span class="token comment"># 修改head插件配置</span><span class="token comment">## vi  elasticsearch-head-master/Gruntfile.js connect节点配置信息，添加hostname属性</span>connect: <span class="token punctuation">{</span>    server: <span class="token punctuation">{</span>        options: <span class="token punctuation">{</span>            port: <span class="token number">9100</span>,            hostname: <span class="token string">'0.0.0.0'</span>,            base: <span class="token string">'.'</span>,            keepalive: <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">##  elasticsearch-head-master/_site/app.js </span><span class="token comment">## this.base_uri = this.config.base_uri || this.prefs.get("app-base_uri") || "http://localhost:9200"; 修改localhost为当前节点主机名或IP</span>this.base_uri <span class="token operator">=</span> this.config.base_uri <span class="token operator">||</span> this.prefs.get<span class="token punctuation">(</span><span class="token string">"app-base_uri"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"http://demo06.bigdata.163.com:9200"</span><span class="token punctuation">;</span><span class="token comment">## 启动head插件</span>elasticsearch-head-master/node_modules/grunt/bin/grunt server <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ik分词插件"><a href="#ik分词插件" class="headerlink" title="ik分词插件"></a>ik分词插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 分词插件版本需与es版本保持一致</span><span class="token function">wget</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.0/elasticsearch-analysis-ik-7.4.0.zip<span class="token comment"># 停止es服务</span>jps <span class="token operator">|</span><span class="token function">grep</span> Elasticsearch<span class="token operator">|</span><span class="token function">awk</span> <span class="token punctuation">{</span><span class="token string">'print $1'</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">kill</span><span class="token comment"># 安装IK分词插件</span><span class="token variable">$ES_HOME</span>/bin/elasticsearch-plugin <span class="token function">install</span> file:///root/elasticsearch-analysis-ik-7.4.0.zip<span class="token comment"># 查看已安装插件</span><span class="token variable">$ES_HOME</span>/bin/elasticsearch-plugin list<span class="token comment"># 创建一个自定义扩展词文件</span><span class="token function">touch</span> <span class="token variable">$ES_HOME</span>/config/analysis-ik/my_extra.dic<span class="token comment"># 创建一个停用词文件</span><span class="token function">touch</span> <span class="token variable">$ES_HOME</span>/config/analysis-ik/my_stopword.dic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 编辑ik分词器配置文件 vim $ES_HOME/config/analysis-ik/IKAnalyzer.cfg.xml --&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">properties</span> <span class="token name">SYSTEM</span> <span class="token string">"http://java.sun.com/dtd/properties.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">&gt;</span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>my_extra.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>my_stopword.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remote_ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>http://192.168.1.14/ik/my_extra.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remote_ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>http://192.168.1.14/ik/my_stopword.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h1><h2 id="软件包下载-2"><a href="#软件包下载-2" class="headerlink" title="软件包下载"></a>软件包下载</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://artifacts.elastic.co/downloads/kibana/kibana-7.4.0-linux-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="部署-2"><a href="#部署-2" class="headerlink" title="部署"></a>部署</h2><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">tar -zxvf kibana-7.4.0-linux-x86_64.tar.gz C $KINIBA_HOME/# 创建目录cd  $KINABA_HOMEmkdir data logs# 修改配置文件 vi config/kibana.yml#可通过 http://192.168.46.132:5601 在浏览器访问server.name: "MyKibana"server.host: "192.168.100.200"server.port: 5601#指定elasticsearch节点elasticsearch.url: "http://192.168.46.132:9200"pid.file: /var/run/kibana.pid# 日志目录logging.dest: /opt/data/logs/kibana/kibana.log# 间隔多少毫秒，最小是100ms，默认是5000ms即5秒ops.interval: 5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZK介绍及使用</title>
      <link href="/2021/04/27/03-hadoop/zookeeper-bu-shu/"/>
      <url>/2021/04/27/03-hadoop/zookeeper-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="ZK介绍"><a href="#ZK介绍" class="headerlink" title="ZK介绍"></a>ZK介绍</h1><p>ZooKeeper诞生于Yahoo，后转入Apache孵化，最终孵化成Apache的顶级项目，是Hadoop和Hbase的重要组件。ZooKeeper是一种集中式服务，用于维护配置信息、命名、提供分布式同步和提供组服务。所有这些类型的服务都以分布式应用程序的某种形式使用。由于实现上述需求都需要做很多工作来修复不可避免的错误和竞争条件。因此，这些服务的实现变得非常困难，即使这些服务顺利完成，管理和运维的成本也非常高，所以zookeeper以救世主的身份出现，解决上述技术难题，降低了分布式应用程序的开发难度和工作量，让程序员专注于分布式架构的设计。</p><h1 id="ZK部署的三种模式"><a href="#ZK部署的三种模式" class="headerlink" title="ZK部署的三种模式"></a>ZK部署的三种模式</h1><ul><li>独立部署模式：在单机上部署一个zookeeper服务，适用于学习、了解ZK基础功能；</li><li>伪分布式模式：在单机上部署多个zookeeper服务，形成虚拟的分布式zk集群，适用于学习、开发及测试，不适用于生产环境；</li><li>分布式模式：在多台主机上部署多个zookeeper服务，形成真正的分布式zk集群，可投入到生产环境使用；</li></ul><h1 id="ZK应用场景"><a href="#ZK应用场景" class="headerlink" title="ZK应用场景"></a>ZK应用场景</h1><h2 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h2><ul><li>节点监控：集群环境下，服务不属于多个节点之上，当因为网络或节点主机故障导致服务无法工作时，为保证集群能够正常提供服务，就需要将异常节点从集群中屏蔽，这时候使用zk的短暂节点与watcher机制，即可很好的实现集群的管理；</li><li>Leader选举：集群多节点协同工作，需要一个总览全局的领导者来承担对外交互及内部任务分发等职责，zk可实现集群leader节点的选举及当前leader故障后及时重新选举；</li></ul><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>应用可通过配置文件实现灵活变更，但在分布式环境下，配置文件修改及同步也开始变得复杂繁琐，此时可通过zk进行配置文件管理，分布式应用统一从zk上读取配置信息；此外，利用zk的watcher机制，当检测到zk上配置发生变更后，zk可通知各个节点配置信息已修改，各节点可通过刷新获取最新配置信息；</p><h1 id="ZK下载及部署"><a href="#ZK下载及部署" class="headerlink" title="ZK下载及部署"></a>ZK下载及部署</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载软件包</span><span class="token function">wget</span> https://downloads.apache.org/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz<span class="token comment"># 创建zk数据目录</span><span class="token function">mkdir</span> zk_data<span class="token builtin class-name">cd</span> <span class="token variable">$ZOOKEEPER_HOME</span>/conf<span class="token comment">#配置zk  vi  zoo.cfg</span><span class="token comment"># 定义访问ZK端口</span><span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token comment"># 定义zk 主从心跳检活限制次数</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token comment"># zk自动清理日志，单位为小时</span><span class="token assign-left variable">autopurge.purgeInterval</span><span class="token operator">=</span><span class="token number">24</span><span class="token comment"># zk自动清理保留文件数，默认为3</span><span class="token assign-left variable">autopurge.snapRetainCount</span><span class="token operator">=</span><span class="token number">3</span> <span class="token comment"># 定义单客户端与单服务器最大连接数</span><span class="token assign-left variable">maxClientCnxns</span><span class="token operator">=</span><span class="token number">500</span><span class="token comment"># 定义zk数据文件存储目录</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/mnt/data01/hadoop/zookeeper<span class="token comment"># 服务启动时，从节点从主节点同步数据限制心跳次数</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token comment"># 定义zk中最小时间单元，单位为毫秒</span><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token comment"># 定义zk服务器及通信、选举端口</span><span class="token comment"># server.A=B:C:D   A为zk节点标签，由myid文件定义，B为主机名或IP，需与A保持一一对应，C为ZK节点间通讯端口  D为ZK选举端口</span><span class="token assign-left variable">server.1</span><span class="token operator">=</span>demo03.bigdata.163.com:2888:3888<span class="token assign-left variable">server.2</span><span class="token operator">=</span>demo04.bigdata.163.com:2888:3888<span class="token assign-left variable">server.3</span><span class="token operator">=</span>demo05.bigdata.163.com:2888:3888<span class="token comment"># 定义ZK ACL检查类</span><span class="token assign-left variable">authProvider.1</span><span class="token operator">=</span>org.apache.zookeeper.server.auth.SASLAuthenticationProvider<span class="token comment"># 定义验证授权刷新时间间隔</span><span class="token assign-left variable">jaasLoginRenew</span><span class="token operator">=</span><span class="token number">3600000</span><span class="token comment">#定义kerberos认证相关</span><span class="token assign-left variable">kerberos.removeHostFromPrincipal</span><span class="token operator">=</span>true<span class="token assign-left variable">kerberos.removeRealmFromPrincipal</span><span class="token operator">=</span>true<span class="token builtin class-name">cd</span> <span class="token variable">$dataDir</span><span class="token comment"># 根据配置文件定义服务器与IP关系配置myid</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token operator">&gt;</span>myid<span class="token comment"># 启动服务</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin/zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ZK常用命令"><a href="#ZK常用命令" class="headerlink" title="ZK常用命令"></a>ZK常用命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 链接指定zk服务器</span>bin/zkCli.sh <span class="token parameter variable">-server</span> ip:port<span class="token comment"># 创建节点，-s表示顺序，-e表示临时，默认是持久节点，acl缺省表示不做任何权限限制</span>create <span class="token parameter variable">-s</span> <span class="token parameter variable">-e</span> path data <span class="token punctuation">[</span>acl<span class="token punctuation">]</span>    <span class="token comment"># 查看节点目录</span><span class="token function">ls</span> /<span class="token comment"># 查看当前节点下的节点及当前节点的信息</span>ls2 /<span class="token comment"># 删除节点，不能递归删除，只可以删除叶子节点</span>delete path<span class="token comment"># 递归删除节点</span>rmr path<span class="token comment"># 设置acl</span>setacl path auth:username:password:acl<span class="token comment"># 查看acl</span>getacl path<span class="token comment"># 退出</span>quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java日志配置</title>
      <link href="/2021/04/27/02-program/java-bian-cheng-zi-xue-zhi-lu/java-ri-zhi-pei-zhi/"/>
      <url>/2021/04/27/02-program/java-bian-cheng-zi-xue-zhi-lu/java-ri-zhi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java日志配置"><a href="#Java日志配置" class="headerlink" title="Java日志配置"></a>Java日志配置</h1><h2 id="常用日志类"><a href="#常用日志类" class="headerlink" title="常用日志类"></a>常用日志类</h2><ul><li>logger：Jdk内置，基本不用于生产环境</li><li>log4j：apache提供，已于2015年停止更新，历史遗留项目仍在使用，最后版本为1.2.17</li><li>log4j2：apache提供，log4j升级版本，性能较log4j提升10倍(官方说明)</li><li>logback：log4j作者出走后重新开发，性能相对log4j有很大提升</li></ul><h3 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h3><p>log4j2使用基本与log4j一致，通过xml配置文件来定义</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><span class="token comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span><span class="token comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR<span class="token punctuation">"</span></span> <span class="token attr-name">monitorInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--定义全局变量--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>highlight_pattern<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>[%d{HH:mm:ss:SSS}]  %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Yellow, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} %style{[%t]}{bright,magenta} %style{%c{1.}.%M(%L)}{cyan}: %msg%n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--        定义全局Filter，需要定制过滤条件时,尽量使用全局Filter，因为全局Filter会作用到每条日志，无论打印日志级别，全局Filter过滤逻辑应尽可能简单，避免影响业务        当只有一个Filter时，外面Filters标签可省略    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Filters</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--            LevelRangeFilter中minLevel与maxLevel定义参数不能颠倒，否则会导致无日志输出            minLevel与maxLevel可以简单理解为定义的intLevel与打印日志数量正相关，即打印日志越多，intLevel值越大            onMatch：匹配定义级别及以上范围            onMismatch：匹配定义级别以下范围            ACCEPT:接受匹配范围内日志            DENY:拒绝匹配范围内日志            NEUTRAL:中立，不对匹配范围内日志操作，转交下游判断实际测试情况：全局filter配置会导致root及logger配置的日志级别失效        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LevelRangeFilter</span> <span class="token attr-name">minLevel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span> <span class="token attr-name">maxLevel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NEUTRAL<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LevelRangeFilter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Filters</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--先定义所有的appender--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appenders</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--控制台 SYSTEM_OUT 日志输出格式配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console_out<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--输出日志的格式--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${highlight_pattern}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!-- appender 级别Filter 针对该输出源有效 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>console</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 控制台 SYSTEM_ERR 日志输出在控制台显示为红色 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console_err<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_ERR<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${highlight_pattern}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>console</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--文件输出 文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logs/test.log<span class="token punctuation">"</span></span> <span class="token attr-name">append</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${highlight_pattern}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logs/info.log<span class="token punctuation">"</span></span>                     <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>${highlight_pattern}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span>  <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileError<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${sys:user.home}/logs/error.log<span class="token punctuation">"</span></span>                     <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>${highlight_pattern}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--                    interval:指定日志按照时间滚动的频率，默认为1，滚动的时间单位由filePattern中最小时间单位决定，如本配置中最小时间单位为D，故日志滚动周期为每天一次                    modulate：指定是否对滚动时间进行调制，即是否以当天0点为起始点开始计算下次滚动时间                    size：指定触发文件滚动大小，支持KB，MB，GB等                --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">modulate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appenders</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 配置日志的根节点 --&gt;</span>        <span class="token comment">&lt;!-- 定义logger，只有定义了logger并引入了appender，appender才会生效 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--logger级别Filter，仅当前Logger有效--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MapFilter</span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">operator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eventId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eventId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logout<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MapFilter</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console_out<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 指定自定义appender时，logger中name属性应配置为完成包路径（不含类名）            additivity默认为true，日志信息继承至root logger中，即符合自定义appender的日志会被打印两次            如果appender中已指定level，则logger中指定的无效        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.demo<span class="token punctuation">"</span></span>  <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token comment">&lt;!--append-ref Filter，仅当前引用有效--&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BurstFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token attr-name">rate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">maxBurst</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--配置异步日志--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AsyncRoot</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span>  <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AsyncRoot</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 第三方日志系统 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.core<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.beans<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.context<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.jboss.netty<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.http<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PatternLayout参数说明"><a href="#PatternLayout参数说明" class="headerlink" title="PatternLayout参数说明"></a>PatternLayout参数说明</h4><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>charset</td><td>指定日志字符集</td></tr><tr><td>pattern</td><td>指定日志输出格式</td></tr><tr><td>alwaysWriteExceptions</td><td>输出异常，默认为true</td></tr><tr><td>header</td><td>可选项，包含在每个日志文件的顶部</td></tr><tr><td>footer</td><td>可选项，包含在每个日志文件的底部</td></tr></tbody></table><h4 id="Pattern-Layouts属性说明"><a href="#Pattern-Layouts属性说明" class="headerlink" title="Pattern Layouts属性说明"></a>Pattern Layouts属性说明</h4><p>Pattern Layouts是一个灵活的布局，<br> 是最常用的日志格式配置。<br> 该类的目标是格式化一个日志事件并返回结果，<br> 结果的格式取决于转换模式。<br> 转换模式与c语言中printf函数的转换模式密切相关。<br> 转换模式由称为转换说明符的文字文本和格式控制表达式组成。<br> 注意，任何文字文本，包括特殊字符，都可能包含在转换模式中。<br> 特殊字符包括\t、\n、\r、\f，使用\输出一个反斜杠。<br> 每个转换说明符以百分号(%)开头，<br> 后面是可选的格式修饰符和必填的转换字符。<br> 格式修饰符控制字段宽度、填充、左对齐和右对齐等内容。<br> 转换字符指定数据的类型，例如日期、线程名、日志级别、日志名称等等。</p><table><thead><tr><th>数据类型</th><th>参数</th><th>样例</th><th>备注</th></tr></thead><tbody><tr><td>日期</td><td>%d{HH:mm:ss:SSS}</td><td>20:03:22:625</td><td></td></tr><tr><td>线程名</td><td>%t</td><td>main</td><td></td></tr><tr><td>日志级别</td><td>%-5level</td><td>INFO</td><td></td></tr><tr><td>日志名称</td><td>%c{1.}   {}定义精度</td><td>c.z.h.HikariDataSource</td><td>{1.} 表示最右侧完成显示，其他位仅打印一个字母;  {-2}表示仅打印最右侧两级名称</td></tr><tr><td>Java类名</td><td>%C</td><td>DaoHikariUtils</td><td>慎用，影响性能</td></tr><tr><td>方法名</td><td>%M</td><td><init></init></td><td></td></tr><tr><td>错误行号</td><td>%L</td><td>80</td><td></td></tr><tr><td>错误信息</td><td>%m</td><td>HikariPool-1 - Starting…</td><td></td></tr><tr><td>完整错误位置</td><td>%l</td><td>org.apache.logging.log4j.Log4j2Test.logAll(Log4j2Test.java:18)</td><td></td></tr><tr><td>换行</td><td>%n</td><td></td><td></td></tr><tr><td>特殊符号-&amp;</td><td>&amp;amp   &amp;#38</td><td>&amp;</td><td>特殊符号需要使用实体名称或编号打印</td></tr><tr><td>特殊符号-&lt;</td><td>&amp;lt    &amp;#60</td><td>&lt;</td><td>特殊符号需要使用实体名称或编号打印</td></tr><tr><td>特殊符号-&gt;</td><td>&amp;gt   &amp;#62</td><td>&gt;</td><td>特殊符号需要使用实体名称或编号打印</td></tr><tr><td>特殊符号-“</td><td>&amp;quot  &amp;#34</td><td>“</td><td>特殊符号需要使用实体名称或编号打印</td></tr><tr><td>特殊符号-‘</td><td>&amp;apos  &amp;#39</td><td>‘</td><td>特殊符号需要使用实体名称或编号打印</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 样例PatternLayout及日志对应</span><span class="token punctuation">[</span>%d<span class="token punctuation">{</span>HH:mm:ss.SSS<span class="token punctuation">}</span><span class="token punctuation">]</span>  %-5level  %t %c<span class="token punctuation">{</span><span class="token number">1</span>.<span class="token punctuation">}</span> %M.<span class="token punctuation">(</span>%L<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> %m %n <span class="token punctuation">[</span><span class="token number">20</span>:03:22:625 <span class="token punctuation">]</span>  INFO  <span class="token punctuation">[</span>main<span class="token punctuation">]</span> c.z.h.HikariDataSource.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span>: HikariPool-1 - Starting<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Filters说明"><a href="#Filters说明" class="headerlink" title="Filters说明"></a>Filters说明</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>对输出日志进行过滤。过滤器将返回ACCEPT, DENY 或者NEUTRAL其中一个， 以确定日志如何输出。<br>过滤器可以配置在4个地方：<br>1、上下文范围的过滤器直接在configuration中配置（如果配置中存在 properties，则filter必须位于properties下方）。<br>2、日志记录器过滤器是在指定的Logger中配置。<br>3、Appender过滤器用于确定特定的Appender是否应该处理事件的格式和输出。<br>4、Appender引用过滤器用于确定日志记录器是否应该将事件路由到Appender。</p><h5 id="BurstFilter"><a href="#BurstFilter" class="headerlink" title="BurstFilter"></a>BurstFilter</h5><p>BurstFilter提供了一种机制，通过在达到最大限制后静默地丢弃事件来控制处理logevent的速度。<br>配置参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>level</td><td>String</td><td>要筛选的消息级别。如果超过maxBurst，则将过滤掉此级别或以下的任何内容。默认值是WARN，这意味着任何高于WARN的消息都将被记录，无论Burst的大小如何。</td></tr><tr><td>rate</td><td>float</td><td>每秒可以执行的事件平均数量。</td></tr><tr><td>maxBurst</td><td>integer</td><td>最大的处理事件，默认是rate的10倍。</td></tr><tr><td>onMatch</td><td>String</td><td>过滤器匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是NEUTRAL。</td></tr><tr><td>onMismatch</td><td>String</td><td>当过滤器不匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是DENY。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BurstFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token attr-name">rate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16<span class="token punctuation">"</span></span> <span class="token attr-name">maxBurst</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="CompositeFilter"><a href="#CompositeFilter" class="headerlink" title="CompositeFilter"></a>CompositeFilter</h5><p>复合过滤器提供了一种指定多个过滤器的方法。他以Filters元素加入到配置中，元素里面可以配置多个过滤器。该元素不支持添加参数。<br>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Filters</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MarkerFilter</span> <span class="token attr-name">marker</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EVENT<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NEUTRAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DynamicThresholdFilter</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginId<span class="token punctuation">"</span></span> <span class="token attr-name">defaultThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR<span class="token punctuation">"</span></span><span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NEUTRAL<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DynamicThresholdFilter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Filters</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="DynamicThresholdFilter"><a href="#DynamicThresholdFilter" class="headerlink" title="DynamicThresholdFilter"></a>DynamicThresholdFilter</h5><p>可以通过明确的属性对不同的日志级别进行拦截。例如，可以通过ThreadContext对指定用户输出不同的日志级别。如果日志事件不包含指定的ThreadContext项，那么默认使用NEUTRAL。</p><p>配置参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>key</td><td>String</td><td>去ThreadContext中比较的key</td></tr><tr><td>defaultThreshold</td><td>String</td><td>需要被过滤的消息等级。当指定的key不在ThreadContext中时，使用该配置。</td></tr><tr><td>keyValuePair</td><td>KeyValuePair[]</td><td>可以定义多个KeyValuePair属性。通过该属性可以对指定用户设置日志级别。KeyValuePair的key为ThreadContext中获取的value值，KeyValuePair的value为日志的级别，如<keyvaluepair key="User1" value="DEBUG"></keyvaluepair></td></tr><tr><td>onMatch</td><td>String</td><td>过滤器匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是NEUTRAL。</td></tr><tr><td>onMismatch</td><td>String</td><td>当过滤器不匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是DENY。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DynamicThresholdFilter</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginId<span class="token punctuation">"</span></span> <span class="token attr-name">defaultThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR<span class="token punctuation">"</span></span>                          <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NEUTRAL<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DynamicThresholdFilter</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="MapFilter"><a href="#MapFilter" class="headerlink" title="MapFilter"></a>MapFilter</h5><p>MapFilter允许对MapMessage中的数据元素进行过滤。<br>配置参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>operator</td><td>String</td><td>如果配置为or，那么只要有一个匹配就可以了。否则所有的key/value都要匹配。</td></tr><tr><td>keyValuePair</td><td>KeyValuePair[]</td><td>可以定义一个或多个KeyValuePair元素，这些元素定义映射中的键和要匹配的值。如果同一个key被多次指定，那么对该key的检查将自动成为“or”，因为映射只能包含一个值。</td></tr><tr><td>onMatch</td><td>String</td><td>过滤器匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是NEUTRAL。</td></tr><tr><td>onMismatch</td><td>String</td><td>当过滤器不匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是DENY。</td></tr></tbody></table><p>示例1：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MapFilter</span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NEUTRAL<span class="token punctuation">"</span></span> <span class="token attr-name">operator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eventId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eventId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Logout<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MapFilter</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="MarkerFilter"><a href="#MarkerFilter" class="headerlink" title="MarkerFilter"></a>MarkerFilter</h5><p>MarkerFilter将配置的标记值与LogEvent中包含的标记进行比较。当标记名称与日志事件的标记匹配，或者与其任一父标记匹配时，则将进行匹配。<br>配置参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>marker</td><td>String</td><td>要比较的标记名称。</td></tr><tr><td>onMatch</td><td>String</td><td>过滤器匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是NEUTRAL。</td></tr><tr><td>onMismatch</td><td>String</td><td>当过滤器不匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是DENY。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFile<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logs/app.log<span class="token punctuation">"</span></span> <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logs/app-%d{MM-dd-yyyy}.log.gz<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MarkerFilter</span> <span class="token attr-name">marker</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FLOW<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d %p %c{1.} [%t] %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PatternLayout</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="RegexFilter"><a href="#RegexFilter" class="headerlink" title="RegexFilter"></a>RegexFilter</h5><p>RegexFilter将格式化或未格式化的消息与正则表达式进行比较。<br>配置参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>regex</td><td>String</td><td>正则表达式</td></tr><tr><td>useRawMsg</td><td>boolean</td><td>如果为true，将使用未格式化的消息，否则将使用格式化的消息。默认值为false。</td></tr><tr><td>onMatch</td><td>String</td><td>过滤器匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是NEUTRAL。</td></tr><tr><td>onMismatch</td><td>String</td><td>当过滤器不匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是DENY。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFile<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logs/app.log<span class="token punctuation">"</span></span> <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logs/app-%d{MM-dd-yyyy}.log.gz<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RegexFilter</span> <span class="token attr-name">regex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.* test .*<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d %p %c{1.} [%t] %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PatternLayout</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ScriptFilter"><a href="#ScriptFilter" class="headerlink" title="ScriptFilter"></a>ScriptFilter</h5><p>ScriptFilter执行一个返回true或false的脚本。<br>配置参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>script</td><td>Script, ScriptFile or ScriptRef</td><td>指定需要执行的脚本</td></tr><tr><td>onMatch</td><td>String</td><td>过滤器匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是NEUTRAL。</td></tr><tr><td>onMismatch</td><td>String</td><td>当过滤器不匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是DENY。</td></tr></tbody></table><p>Script参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>configuration</td><td>Configuration</td><td>拥有此ScriptFilter的配置。</td></tr><tr><td>level</td><td>Level</td><td>事件关联的日志级别。仅在配置为全局过滤器时显示。</td></tr><tr><td>loggerName</td><td>String</td><td>日志记录器的名称。仅在配置为全局过滤器时显示。</td></tr><tr><td>logEvent</td><td>LogEvent</td><td>正在处理的日志事件。全局过滤器配置不存在时使用。</td></tr><tr><td>marker</td><td>Marker</td><td>如果有日志调用，则将标记传递给日志调用。仅在配置为全局过滤器时显示。</td></tr><tr><td>message</td><td>Message</td><td>与日志调用关联的消息。仅在配置为全局过滤器时显示。</td></tr><tr><td>parameters</td><td>Object[]</td><td>传递给日志调用的参数。仅在配置为全局过滤器时显示。有些消息将参数作为消息的一部分。</td></tr><tr><td>throwable</td><td>Throwable</td><td>如果有日志调用，则将Throwable传递给日志调用。仅在配置为全局过滤器时显示。</td></tr><tr><td>substitutor</td><td>StrSubstitutor</td><td>用于替换查找变量。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Scripts</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScriptFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filter.js<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JavaScript<span class="token punctuation">"</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/test/resources/scripts/filter.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScriptFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filter.groovy<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>groovy<span class="token punctuation">"</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/test/resources/scripts/filter.groovy<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Scripts</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TestJavaScriptFilter<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>List<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScriptFilter</span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMisMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScriptRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filter.js<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ScriptFilter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppenderRef</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Logger</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="StructuredDataFilter"><a href="#StructuredDataFilter" class="headerlink" title="StructuredDataFilter"></a>StructuredDataFilter</h5><p>StructuredDataFilter是一个MapFilter，它还允许过滤事件id、类型和消息。<br>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StructuredDataFilter</span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NEUTRAL<span class="token punctuation">"</span></span> <span class="token attr-name">operator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Logout<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StructuredDataFilter</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ThreadContextMapFilter-or-ContextMapFilter"><a href="#ThreadContextMapFilter-or-ContextMapFilter" class="headerlink" title="ThreadContextMapFilter (or ContextMapFilter)"></a>ThreadContextMapFilter (or ContextMapFilter)</h5><p>ThreadContextMapFilter或ContextMapFilter允许对当前上下文中的数据元素进行过滤。默认情况下，这是ThreadContext映射。<br>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ContextMapFilter</span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NEUTRAL<span class="token punctuation">"</span></span> <span class="token attr-name">operator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ContextMapFilter</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFile<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ContextMapFilter</span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NEUTRAL<span class="token punctuation">"</span></span> <span class="token attr-name">operator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeyValuePair</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ContextMapFilter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ThresholdFilter"><a href="#ThresholdFilter" class="headerlink" title="ThresholdFilter"></a>ThresholdFilter</h5><p>如果配置的level与日志记录器中一样或者高于日志级别，那么使用onMatch的配置，否则使用onMismatch的配置。例如，如果ThresholdFilter配置的日志级别为ERROR，日志记录器配置了DEBUG，那么onMismatch将被返回。因为ERROR比DEBUG更加明确。<br>配置参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>level</td><td>String</td><td>要匹配的有效级别名称</td></tr><tr><td>onMatch</td><td>String</td><td>过滤器匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是NEUTRAL。</td></tr><tr><td>onMismatch</td><td>String</td><td>当过滤器不匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是DENY。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TRACE<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="TimeFilter"><a href="#TimeFilter" class="headerlink" title="TimeFilter"></a>TimeFilter</h5><p>时间过滤器可用于将过滤限制在一天的特定部分<br>配置参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>String</td><td>开始时间，格式为：HH🇲🇲ss。</td></tr><tr><td>end</td><td>String</td><td>结束时间，格式为：HH🇲🇲ss。如果结束时间小于开始时间，那么将没有日志输出。</td></tr><tr><td>timezone</td><td>String</td><td>比较时使用的时区。</td></tr><tr><td>onMatch</td><td>String</td><td>过滤器匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是NEUTRAL。</td></tr><tr><td>onMismatch</td><td>String</td><td>当过滤器不匹配时要采取的操作。可以是ACCEPT、DENY、NEUTRAL，默认是DENY。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeFilter</span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>05:00:00<span class="token punctuation">"</span></span> <span class="token attr-name">end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>05:30:00<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="异步日志"><a href="#异步日志" class="headerlink" title="异步日志"></a>异步日志</h4><p>异步Logger通过使用LMAX Disruptor环形队列和单独的处理线程，避免了锁的竞争，从而实现更高的吞吐量。队列大小默认4096；</p><h5 id="全局异步"><a href="#全局异步" class="headerlink" title="全局异步"></a>全局异步</h5><ol><li>在代码中添加环境变量</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"log4j2.contextSelector, "</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>async<span class="token punctuation">.</span></span>AsyncLoggerContextSelector</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>启动进程时添加参数</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-Dog4j2.contextSelector</span><span class="token operator">=</span>org.apache.logging.log4j.core.async.AsyncLoggerContextSelector<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="混合异步"><a href="#混合异步" class="headerlink" title="混合异步"></a>混合异步</h4><p>在一个应用中同时使用同步与异步日志；如审计日志，推荐使用同步日志；</p><p>通过在配置文件中使用AsyncRoot/AsyncLogger替代Root/Logger；</p><blockquote><ol><li>不要同时在appender和logger中使用Async标记；</li><li>不要在开启了全局异步的情况下使用Async标记；</li><li>禁用immediateFlush功能；（设置为false）</li></ol></blockquote><h4 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h4><h5 id="默认路径"><a href="#默认路径" class="headerlink" title="默认路径"></a>默认路径</h5><p>系统选择配置文件的优先级(从先到后)如下：</p><ol><li><p>classpath下的名为log4j2-test.json 或者log4j2-test.jsn的文件.</p></li><li><p>classpath下的名为log4j2-test.xml的文件.</p></li><li><p>classpath下名为log4j2.json 或者log4j2.jsn的文件.</p></li><li><p>classpath下名为log4j2.xml的文件.</p></li></ol><h5 id="自定义路径"><a href="#自定义路径" class="headerlink" title="自定义路径"></a>自定义路径</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span>  <span class="token parameter variable">-Dlog4j.configurationFile</span><span class="token operator">=</span>/opt/wks/log4j2.xml <span class="token parameter variable">-jar</span>  demo.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h3><p>logback有三个核心模块logback-access、logback-core及logback-classic；其中logback-classic是log4j的升级版；可通过xml文件进行配置；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token comment">&lt;!--scan=true ：自动加载xml配置文件，每隔scanPeriod进行一次扫描debug=true ：是否打印logback内部日志--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3 seconds<span class="token punctuation">"</span></span> <span class="token attr-name">DEBUG</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--statusListener：监听logback内部信息--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>statusListener</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.status.OnConsoleStatusListener<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--name="stdout" 指定appender名称--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--指定日志格式--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>file.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>append</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>append</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%-4relative [%thread] %-5level %logger{35} - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ROLLINGFILE<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>mylog.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- rollover daily --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>mylog-%d{yyyy-MM-dd}.%i.log.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 每个日志文件大小不超过100MB，在日志文件总大小不超过20GB的情况下保存60天，超出则清楚部分日志 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">&gt;</span></span>20GB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--appender-ref 指定启用附加器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h3><p>log4j主要通过log4j.properties配置文件进行定义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#跟日志</span><span class="token comment">#info：配置日志输出级别</span><span class="token comment">#console：日志附加器，配置日志输出方式，可同时配置多个附加器名称，如不配置，则不生效</span><span class="token assign-left variable">log4j.rootLogger</span><span class="token operator">=</span>info,console<span class="token comment">#附加器可自定义名称，如log4j.appender.xxx中，xxx即为附加器名称，默认控制台为console、文件为file、滚动为rollfile</span><span class="token comment">#控制台附加器</span>log4j.appender.console <span class="token operator">=</span> org.apache.log4j.ConsoleAppender<span class="token comment">#Target可配置System.out及System.error，error显示文字为红色</span>log4j.appender.console.Target <span class="token operator">=</span> System.out<span class="token comment">#layout可分为：</span><span class="token comment"># HTMLLayrout--网页表格形式布局</span><span class="token comment"># SimpleLayout--简单布局，包含日志信息级别及日志信息字符串</span><span class="token comment"># PatternLayout--匹配器布局</span>log4j.appender.console.layout <span class="token operator">=</span> org.apache.log4j.PatternLayout<span class="token comment"># ConversionPattern结合PatternLayout使用，配置PatternLayout布局格式</span>log4j.appender.console.layout.ConversionPattern <span class="token operator">=</span> <span class="token punctuation">[</span>%-5p<span class="token punctuation">]</span><span class="token punctuation">[</span>%d<span class="token punctuation">{</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">}</span><span class="token punctuation">]</span> %m%n<span class="token comment">#文件附加器</span>log4j.appender.file <span class="token operator">=</span> org.apache.log4j.ConsoleAppenderlog4j.appender.file.Target <span class="token operator">=</span> /Users/semon/IdeaProjects/helloworld/jakartaee/log4j.loglog4j.appender.file.layout <span class="token operator">=</span> org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern <span class="token operator">=</span> <span class="token punctuation">[</span>%-5p<span class="token punctuation">]</span><span class="token punctuation">[</span>%d<span class="token punctuation">{</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">}</span><span class="token punctuation">]</span> %m%n<span class="token comment">#滚动附加器</span>log4j.appender.rollfile <span class="token operator">=</span> org.apache.log4j.ConsoleAppenderlog4j.appender.rollfile.Target <span class="token operator">=</span> System.outlog4j.appender.rollfile.layout <span class="token operator">=</span> org.apache.log4j.PatternLayout<span class="token assign-left variable">log4j.appender.rollfile.MaxFileSize</span><span class="token operator">=</span> 10kblog4j.appender.rollfile.layout.ConversionPattern <span class="token operator">=</span> <span class="token punctuation">[</span>%-5p<span class="token punctuation">]</span><span class="token punctuation">[</span>%d<span class="token punctuation">{</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">}</span><span class="token punctuation">]</span> %m%n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sl4j规范"><a href="#sl4j规范" class="headerlink" title="sl4j规范"></a>sl4j规范</h2><p>代表Simple Logging Facade for Java。它提供了Java中所有日志框架的简单抽象。因此，它使用户能够使用单个依赖项处理任何日志框架；</p><ul><li>使用SLF4J框架，可以在部署时迁移到所需的日志记录框架。</li><li>Slf4J提供了对所有流行的日志框架的绑定，例如log4j，JUL，Simple logging和NOP。因此可以在部署时切换到任何这些流行的框架。</li><li>无论使用哪种绑定，SLF4J都支持参数化日志记录消息。</li><li>由于SLF4J将应用程序和日志记录框架分离，因此可以轻松编写独立于日志记录框架的应用程序。而无需担心用于编写应用程序的日志记录框架。</li><li>SLF4J提供了一个简单的Java工具，称为迁移器。使用此工具，可以迁移现有项目，这些项目使用日志框架(如Jakarta Commons Logging(JCL)或log4j或Java.util.logging(JUL))到SLF4J。</li></ul><p>sl4j使用demo：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 创建记录日志的对象</span> <span class="token comment">//当需要更换日志实现jar时，仅需调整具体日志实现jar包及配置文件，代码不需要做变更</span>        <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Test01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"warn信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive存储过程</title>
      <link href="/2021/04/27/03-hadoop/hive/hive-cun-chu-guo-cheng/"/>
      <url>/2021/04/27/03-hadoop/hive/hive-cun-chu-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Hive存储过程"><a href="#Hive存储过程" class="headerlink" title="Hive存储过程"></a>Hive存储过程</h1><p>Hive能够提供将简单SQL转换成MR任务进行运行，极大的降低了其入门成本，通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，但相比于Oracle、MySQL等关系型数据库，Hive中没有提供类似存储过程的功能，使用Hive做数据开发时候，一般是将一段一段的HQL语句封装在Shell或者其他脚本中，然后以命令行的方式调用，对于从关系型数据库迁移过来的程序员不够友好；</p><p>HQL/SQL(HPL/SQL –Procedural SQL on Hadoop)作为Hive存储过程的解决方案，不仅支持Hive，还支持在SparkSQL，其他NoSQL，甚至是RDBMS中使用类似于Oracle PL/SQL的功能，这将极大的方便数据开发者的工作，Hive中很多之前比较难实现的功能，现在可以很方便的实现，比如自定义变量、基于一个结果集的游标、循环等等。</p><h2 id="hpl-sql部署"><a href="#hpl-sql部署" class="headerlink" title="hpl/sql部署"></a>hpl/sql部署</h2><p>通过官网从<a href="http://www.hplsql.org/download">http://www.hplsql.org/download</a> 下载hpl/sql，建议下载最新版本；<br>该压缩包解压后结构如下：<br>.<br>|– antlr-runtime-4.5.jar<br>|– hplsql——————–<em>环境变量配置</em><br>|– hplsql-0.3.31.jar<br>|– hplsql.cmd<br>|– hplsql-site.xml———-<em>hive链接地址配置</em><br>|– LICENSE.txt<br>`– README.txt</p><h3 id="hplsql配置修改如下："><a href="#hplsql配置修改如下：" class="headerlink" title="hplsql配置修改如下："></a>hplsql配置修改如下：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置Hive客户端路径</span><span class="token builtin class-name">export</span> <span class="token string">"HIVE_HOME=/usr/ndp/current/hive_client"</span><span class="token comment">#配置Hadoop客户端路径</span><span class="token builtin class-name">export</span> <span class="token string">"HADOOP_HOME=/usr/ndp/current/yarn_client"</span><span class="token builtin class-name">export</span> <span class="token string">"HADOOP_CLASSPATH=<span class="token variable">$HADOOP_CLASSPATH</span>:<span class="token variable">$HIVE_HOME</span>/lib/*"</span><span class="token builtin class-name">export</span> <span class="token string">"HADOOP_CLASSPATH=<span class="token variable">$HADOOP_CLASSPATH</span>:<span class="token variable">$HIVE_HOME</span>/conf"</span><span class="token builtin class-name">export</span> <span class="token string">"HADOOP_CLASSPATH=<span class="token variable">$HADOOP_CLASSPATH</span>:<span class="token variable">$HADOOP_HOME</span>/conf:<span class="token variable">$HADOOP_HOME</span>/share/hadoop/common/lib/*:<span class="token variable">$HADOOP_HOME</span>/share/hadoop/common/*:<span class="token variable">$HADOOP_HOME</span>/share/hadoop/hdfs:<span class="token variable">$HADOOP_HOME</span>/share/hadoop/hdfs/lib/*:<span class="token variable">$HADOOP_HOME</span>/share/hadoop/hdfs/*:<span class="token variable">$HADOOP_HOME</span>/share/hadoop/yarn/lib/*:<span class="token variable">$HADOOP_HOME</span>/share/hadoop/yarn/*;<span class="token variable">$HADOOP_HOME</span>/share/hadoop/mapreduce/lib/*:<span class="token variable">$HADOOP_HOME</span>/share/hadoop/mapreduce/*:<span class="token variable">$HIVE_HOME</span>/lib/hive-metastore-*.jar:<span class="token variable">$HIVE_HOME</span>/lib/libthrift-*.jar:<span class="token variable">$HIVE_HOME</span>/lib/libfb*.jar:<span class="token variable">$HIVE_HOME</span>/lib/hive-exec-*.jar:<span class="token variable">$HIVE_HOME</span>/conf:"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_OPTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$HADOOP_OPTS</span> -Djava.library.path=<span class="token variable">$HADOOP_HOME</span>/lib/native"</span><span class="token assign-left variable">SCRIPTPATH</span><span class="token operator">=</span><span class="token variable">${0<span class="token operator">%</span><span class="token operator">/</span>*}</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token variable">$SCRIPTPATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_CLASSPATH</span><span class="token builtin class-name">:</span><span class="token variable">$SCRIPTPATH</span>/hplsql-0.3.31.jar:<span class="token variable">$SCRIPTPATH</span>/antlr-runtime-4.5.jar <span class="token variable">$HADOOP_OPTS</span> org.apache.hive.hplsql.Hplsql <span class="token string">"<span class="token variable">$@</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hplsql-site-xml配置"><a href="#hplsql-site-xml配置" class="headerlink" title="hplsql-site.xml配置"></a>hplsql-site.xml配置</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置hplsql链接Hive--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hplsql.conn.hive2conn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>org.apache.hive.jdbc.HiveDriver;jdbc:hive2://hadoop283.lt.163.org:2181,hadoop284.lt.163.org:2181,hadoop285.lt.163.org:2181/;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2;principal=hive/_HOST@BDMS.163.COM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>HiveServer2 JDBC connection，支持zk模式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--配置hplsql链接mysql--&gt;</span><span class="token comment">&lt;!--如需链接mysql，需在HIVE_HOME/lib下添加mysql-jdbc链接架包--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hplsql.conn.mysqlconn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>com.mysql.jdbc.Driver;jdbc:mysql://hadoop290.lt.163.org/demo;semon;semon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>MySQL connection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hplsql常用参数"><a href="#hplsql常用参数" class="headerlink" title="hplsql常用参数"></a>hplsql常用参数</h3><pre><code>+ -d：用于定义变量，多个变量需多个参数指定+ -hiveconf：用于定义变量，多个变量需多个参数指定+ -hivevar：用于定义变量，多个变量需多个参数指定+ -e：启用命令行执行后接命令+ -f：启用命令行执行后接文件内容+ -main：仅执行指定存储过程+ -trace：打印debug信息</code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#定义变量范例</span>root@hadoop283:/usr/ndp/current/hive_client/hplsql<span class="token comment"># ./hplsql -e "print a||','||b" -d a='hello' -d b='jack'</span>hello,jack<span class="token comment">#执行文件范例</span>root@hadoop283:/usr/ndp/current/hive_client/hplsql<span class="token comment"># cat demo.sql</span>print a<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>b<span class="token punctuation">;</span>root@hadoop283:/usr/ndp/current/hive_client/hplsql<span class="token comment"># ./hplsql -f demo.sql -d a='hello' -d b='jack'</span>hello,jack<span class="token comment">#执行存储过程范例</span>root@hadoop283:/usr/ndp/current/hive_client/hplsql<span class="token comment"># cat demo_main.sql</span>create procedure welcome<span class="token punctuation">(</span>in arg string<span class="token punctuation">)</span>begin<span class="token builtin class-name">set</span> result <span class="token operator">=</span> <span class="token string">'Hello,hplsql!'</span>print result <span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>arg<span class="token punctuation">;</span>end<span class="token punctuation">;</span>print <span class="token string">"this is a test sentense."</span>call welcome<span class="token punctuation">(</span><span class="token string">"by call..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> * from wangbin.demo<span class="token punctuation">;</span>root@hadoop283:/usr/ndp/current/hive_client/hplsql<span class="token comment"># ./hplsql -f demo_main.sql -main welcome</span>Hello,hplsql<span class="token operator">!</span><span class="token comment">#未指定main参数范例</span>root@hadoop283:/usr/ndp/current/hive_client/hplsql<span class="token comment"># ./hplsql -f demo_main.sql</span><span class="token string">"this is a test sentense."</span>Hello,hplsql<span class="token operator">!</span>SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/mnt/dfs/0/ndp/5.4.0/hive_client/lib/log4j-slf4j-impl-2.8.2.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/mnt/dfs/0/ndp/5.4.0/yarn_client/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: See http://www.slf4j.org/codes.html<span class="token comment">#multiple_bindings for an explanation.</span>SLF4J: Actual binding is of <span class="token builtin class-name">type</span> <span class="token punctuation">[</span>org.apache.logging.slf4j.Log4jLoggerFactory<span class="token punctuation">]</span>Open connection: jdbc:hive2://hadoop283.lt.163.org:2181,hadoop284.lt.163.org:2181,hadoop285.lt.163.org:2181/<span class="token punctuation">;</span><span class="token assign-left variable">serviceDiscoveryMode</span><span class="token operator">=</span>zooKeeper<span class="token punctuation">;</span><span class="token assign-left variable">zooKeeperNamespace</span><span class="token operator">=</span>hiveserver2<span class="token punctuation">;</span><span class="token assign-left variable">principal</span><span class="token operator">=</span>hive/_HOST@BDMS.163.COM <span class="token punctuation">(</span><span class="token number">857</span> ms<span class="token punctuation">)</span>Starting queryQuery executed successfully <span class="token punctuation">(</span><span class="token number">4.38</span> sec<span class="token punctuation">)</span><span class="token number">2</span>john<span class="token number">1</span>jack<span class="token comment">#打印debug日志</span>root@hadoop283:/usr/ndp/current/hive_client/hplsql<span class="token comment"># ./hplsql -f f_hello.sql -trace</span>Configuration file: file:/mnt/dfs/0/ndp/5.4.0/hive_client/hplsql/hplsql-site.xmlParser tree: <span class="token punctuation">(</span>program <span class="token punctuation">(</span>block <span class="token punctuation">(</span>stmt <span class="token punctuation">(</span>create_function_stmt create <span class="token keyword">function</span> <span class="token punctuation">(</span>ident hello<span class="token punctuation">)</span> <span class="token punctuation">(</span>create_routine_params <span class="token punctuation">(</span> <span class="token punctuation">(</span>create_routine_param_item <span class="token punctuation">(</span>ident text<span class="token punctuation">)</span> <span class="token punctuation">(</span>dtype string<span class="token punctuation">))</span> <span class="token punctuation">))</span> <span class="token punctuation">(</span>create_function_return returns <span class="token punctuation">(</span>dtype string<span class="token punctuation">))</span> <span class="token punctuation">(</span>single_block_stmt begin <span class="token punctuation">(</span>block <span class="token punctuation">(</span>stmt <span class="token punctuation">(</span>return_stmt <span class="token builtin class-name">return</span> <span class="token punctuation">(</span>expr <span class="token punctuation">(</span>expr_concat <span class="token punctuation">(</span>expr_concat_item <span class="token punctuation">(</span>expr_atom <span class="token punctuation">(</span>string <span class="token string">'hello, '</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>expr_concat_item <span class="token punctuation">(</span>expr_atom <span class="token punctuation">(</span>ident text<span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>expr_concat_item <span class="token punctuation">(</span>expr_atom <span class="token punctuation">(</span>string <span class="token string">'!'</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>stmt <span class="token punctuation">(</span>semicolon_stmt <span class="token punctuation">;</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>block_end end<span class="token punctuation">))</span><span class="token punctuation">))</span> <span class="token punctuation">(</span>stmt <span class="token punctuation">(</span>semicolon_stmt <span class="token punctuation">;</span><span class="token punctuation">))</span> <span class="token punctuation">(</span>stmt <span class="token punctuation">(</span>for_cursor_stmt <span class="token keyword">for</span> <span class="token for-or-select variable">item</span> <span class="token keyword">in</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>select_stmt <span class="token punctuation">(</span>fullselect_stmt <span class="token punctuation">(</span>fullselect_stmt_item <span class="token punctuation">(</span>subselect_stmt <span class="token keyword">select</span> <span class="token punctuation">(</span>select_list <span class="token punctuation">(</span>select_list_item <span class="token punctuation">(</span>expr <span class="token punctuation">(</span>expr_atom <span class="token punctuation">(</span>ident <span class="token function">id</span><span class="token punctuation">))</span><span class="token punctuation">))</span> , <span class="token punctuation">(</span>select_list_item <span class="token punctuation">(</span>expr <span class="token punctuation">(</span>expr_atom <span class="token punctuation">(</span>ident name<span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>from_clause from <span class="token punctuation">(</span>from_table_clause <span class="token punctuation">(</span>from_table_name_clause <span class="token punctuation">(</span>table_name <span class="token punctuation">(</span>ident wangbin <span class="token builtin class-name">.</span> demo<span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> loop <span class="token punctuation">(</span>block <span class="token punctuation">(</span>stmt <span class="token punctuation">(</span>print_stmt print <span class="token punctuation">(</span>expr <span class="token punctuation">(</span>expr_concat <span class="token punctuation">(</span>expr_concat_item <span class="token punctuation">(</span>expr_atom <span class="token punctuation">(</span>ident item <span class="token builtin class-name">.</span> <span class="token function">id</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>expr_concat_item <span class="token punctuation">(</span>expr_atom <span class="token punctuation">(</span>string <span class="token string">'|'</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>expr_concat_item <span class="token punctuation">(</span>expr_atom <span class="token punctuation">(</span>ident item <span class="token builtin class-name">.</span> name<span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>expr_concat_item <span class="token punctuation">(</span>expr_atom <span class="token punctuation">(</span>string <span class="token string">'|'</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>expr_concat_item <span class="token punctuation">(</span>expr_func <span class="token punctuation">(</span>ident hello<span class="token punctuation">)</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>expr_func_params <span class="token punctuation">(</span>func_param <span class="token punctuation">(</span>expr <span class="token punctuation">(</span>expr_atom <span class="token punctuation">(</span>ident item <span class="token builtin class-name">.</span> name<span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>stmt <span class="token punctuation">(</span>semicolon_stmt <span class="token punctuation">;</span><span class="token punctuation">))</span><span class="token punctuation">)</span> end loop<span class="token punctuation">))</span> <span class="token punctuation">(</span>stmt <span class="token punctuation">(</span>semicolon_stmt <span class="token punctuation">;</span><span class="token punctuation">))</span><span class="token punctuation">))</span>Ln:1 CREATE FUNCTION helloLn:8 FOR CURSOR - ENTEREDLn:8 <span class="token keyword">select</span> id, name from wangbin.demoSLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/mnt/dfs/0/ndp/5.4.0/hive_client/lib/log4j-slf4j-impl-2.8.2.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/mnt/dfs/0/ndp/5.4.0/yarn_client/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: See http://www.slf4j.org/codes.html<span class="token comment">#multiple_bindings for an explanation.</span>SLF4J: Actual binding is of <span class="token builtin class-name">type</span> <span class="token punctuation">[</span>org.apache.logging.slf4j.Log4jLoggerFactory<span class="token punctuation">]</span>Open connection: jdbc:hive2://hadoop283.lt.163.org:2181,hadoop284.lt.163.org:2181,hadoop285.lt.163.org:2181/<span class="token punctuation">;</span><span class="token assign-left variable">serviceDiscoveryMode</span><span class="token operator">=</span>zooKeeper<span class="token punctuation">;</span><span class="token assign-left variable">zooKeeperNamespace</span><span class="token operator">=</span>hiveserver2<span class="token punctuation">;</span><span class="token assign-left variable">principal</span><span class="token operator">=</span>hive/_HOST@BDMS.163.COM <span class="token punctuation">(</span><span class="token number">914</span> ms<span class="token punctuation">)</span>Starting queryQuery executed successfully <span class="token punctuation">(</span><span class="token number">2.06</span> sec<span class="token punctuation">)</span>Ln:8 SELECT completed successfullyLn:8 COLUMN: id, intLn:8 SET <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">2</span>Ln:8 COLUMN: name, stringLn:8 SET name <span class="token operator">=</span> johnLn:10 PRINTLn:10 EXEC FUNCTION helloLn:10 SET PARAM text <span class="token operator">=</span> johnLn:5 RETURN<span class="token number">2</span><span class="token operator">|</span>john<span class="token operator">|</span>hello, john<span class="token operator">!</span>Ln:8 COLUMN: id, intLn:8 SET <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span>Ln:8 COLUMN: name, stringLn:8 SET name <span class="token operator">=</span> jackLn:10 PRINTLn:10 EXEC FUNCTION helloLn:10 SET PARAM text <span class="token operator">=</span> jackLn:5 RETURN<span class="token number">1</span><span class="token operator">|</span>jack<span class="token operator">|</span>hello, jack<span class="token operator">!</span>Ln:8 FOR CURSOR - LEFT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hplsql操作mysql"><a href="#hplsql操作mysql" class="headerlink" title="hplsql操作mysql"></a>hplsql操作mysql</h3><p>在hplsql中操作mysql数据库表，需先将mysql目标表映射到mysql连接器对象上，映射语法为：<code>map object obj_xxx to db.tablename at mysql.conn;</code></p><p>以下为一个hive存储过程执行并将日志记录到mysql库范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#映射mysql表</span>map object obj_log to demo.demo at mysql.conn<span class="token punctuation">;</span><span class="token comment">#定义存储过程</span><span class="token builtin class-name">declare</span> start_time varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end_time varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ret_code varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beginstart_time <span class="token operator">=</span> SYSDATE<span class="token operator">||</span><span class="token string">''</span><span class="token punctuation">;</span>use wangbin<span class="token punctuation">;</span>insert into wangbin.demovalues<span class="token punctuation">(</span><span class="token number">3</span>,<span class="token string">'wangbin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end_time <span class="token operator">=</span> SYSDATE<span class="token operator">||</span><span class="token string">''</span><span class="token punctuation">;</span>ret_code <span class="token operator">=</span> SQLCODE<span class="token punctuation">;</span>insert into obj_log <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>start_time<span class="token variable">`</span></span>,<span class="token variable"><span class="token variable">`</span>end_time<span class="token variable">`</span></span>,<span class="token variable"><span class="token variable">`</span>ret_code<span class="token variable">`</span></span><span class="token punctuation">)</span>  values<span class="token punctuation">(</span>start_time,end_time,ret_code<span class="token punctuation">)</span><span class="token punctuation">;</span>exception when others <span class="token keyword">then</span>      end_time <span class="token operator">=</span> SYSDATE<span class="token operator">||</span><span class="token string">''</span><span class="token punctuation">;</span>     ret_code <span class="token operator">=</span> SQLCODE<span class="token punctuation">;</span>     insert into obj_log<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>start_time<span class="token variable">`</span></span>,<span class="token variable"><span class="token variable">`</span>end_time<span class="token variable">`</span></span>,<span class="token variable"><span class="token variable">`</span>ret_code<span class="token variable">`</span></span><span class="token punctuation">)</span> values<span class="token punctuation">(</span>start_time,end_time,ret_code<span class="token punctuation">)</span><span class="token punctuation">;</span>     dbms_output.putline<span class="token punctuation">(</span><span class="token string">'SQL error is :'</span> <span class="token operator">||</span> ret_code<span class="token punctuation">)</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span><span class="token comment">#执行结果如下：</span>root@hadoop283:/usr/ndp/current/hive_client/hplsql<span class="token comment"># ./hplsql -f demo_mysql.sql</span>SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/mnt/dfs/0/ndp/5.4.0/hive_client/lib/log4j-slf4j-impl-2.8.2.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/mnt/dfs/0/ndp/5.4.0/yarn_client/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: See http://www.slf4j.org/codes.html<span class="token comment">#multiple_bindings for an explanation.</span>SLF4J: Actual binding is of <span class="token builtin class-name">type</span> <span class="token punctuation">[</span>org.apache.logging.slf4j.Log4jLoggerFactory<span class="token punctuation">]</span>Open connection: jdbc:hive2://hadoop283.lt.163.org:2181,hadoop284.lt.163.org:2181,hadoop285.lt.163.org:2181/<span class="token punctuation">;</span><span class="token assign-left variable">serviceDiscoveryMode</span><span class="token operator">=</span>zooKeeper<span class="token punctuation">;</span><span class="token assign-left variable">zooKeeperNamespace</span><span class="token operator">=</span>hiveserver2<span class="token punctuation">;</span><span class="token assign-left variable">principal</span><span class="token operator">=</span>hive/_HOST@BDMS.163.COM <span class="token punctuation">(</span><span class="token number">970</span> ms<span class="token punctuation">)</span>Starting SQL statementSQL statement executed successfully <span class="token punctuation">(</span><span class="token number">1.08</span> sec<span class="token punctuation">)</span>Starting SQL statementSQL statement executed successfully <span class="token punctuation">(</span><span class="token number">21.42</span> sec<span class="token punctuation">)</span>Tue Apr 02 <span class="token number">17</span>:08:08 CST <span class="token number">2019</span> WARN: Establishing SSL connection without server<span class="token string">'s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn'</span>t set. For compliance with existing applications not using SSL the verifyServerCertificate property is <span class="token builtin class-name">set</span> to <span class="token string">'false'</span><span class="token builtin class-name">.</span> You need either to explicitly disable SSL by setting <span class="token assign-left variable">useSSL</span><span class="token operator">=</span>false, or <span class="token builtin class-name">set</span> <span class="token assign-left variable">useSSL</span><span class="token operator">=</span>true and provide truststore <span class="token keyword">for</span> server certificate verification.Open connection: jdbc:mysql://hadoop290.lt.163.org:3306/demo <span class="token punctuation">(</span><span class="token number">243</span> ms<span class="token punctuation">)</span>Starting SQL statementSQL statement executed successfully <span class="token punctuation">(</span><span class="token number">4</span> ms<span class="token punctuation">)</span><span class="token comment">#查询mysql插入数据</span>root@hadoop283:/usr/ndp/current/hive_client/hplsql<span class="token comment"># mysql -h hadoop290.lt.163.org -usemon -psemon</span>Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">20</span>Server version: <span class="token number">5.7</span>.25 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2015</span>, Oracle, MariaDB Corporation Ab and others.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> * from demo.demo<span class="token punctuation">;</span>+----------------------+----------------------+----------+<span class="token operator">|</span> start_time           <span class="token operator">|</span> end_time             <span class="token operator">|</span> ret_code <span class="token operator">|</span>+----------------------+----------------------+----------+<span class="token operator">|</span> <span class="token number">2019</span>-04-02 <span class="token number">17</span>:07:44. <span class="token operator">|</span> <span class="token number">2019</span>-04-02 <span class="token number">17</span>:08:08. <span class="token operator">|</span> <span class="token number">0</span>        <span class="token operator">|</span>+----------------------+----------------------+----------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python链接Hadoop集群[Kerberos]</title>
      <link href="/2021/04/26/03-hadoop/python-lian-jie-hadoop-ji-qun-kerberos/"/>
      <url>/2021/04/26/03-hadoop/python-lian-jie-hadoop-ji-qun-kerberos/</url>
      
        <content type="html"><![CDATA[<h1 id="Python链接Hadoop集群-Kerberos"><a href="#Python链接Hadoop集群-Kerberos" class="headerlink" title="Python链接Hadoop集群[Kerberos]"></a>Python链接Hadoop集群[Kerberos]</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置环境变量  其中xxx替换为节点上jdk实际安装目录）</span><span class="token builtin class-name">echo</span>  <span class="token string">"export JAVA_HOME=xxx"</span> <span class="token operator">&gt;</span>~/.bash_profile<span class="token builtin class-name">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装系统依赖包"><a href="#安装系统依赖包" class="headerlink" title="安装系统依赖包"></a>安装系统依赖包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装kerberos客户端</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> krb5-lib krb5-workstation<span class="token comment"># 安装python相关模块系统依赖包</span>yum <span class="token function">install</span>  libffi-devel python-devel openssl-devel  cyrus-sasl cyrus-sasl-devel cyrus-sasl-lib  gcc-c++ <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装python模块"><a href="#安装python模块" class="headerlink" title="安装python模块"></a>安装python模块</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> setuptoolspip <span class="token function">install</span> saslpip <span class="token function">install</span> thriftpip <span class="token function">install</span> thrift-saslpip <span class="token function">install</span> impylapip <span class="token function">install</span> krbcontext<span class="token comment">## 以下为ibis依赖</span>pip <span class="token function">install</span> ibis-frameworkpip <span class="token function">install</span> futurepip <span class="token function">install</span> PyHivepip <span class="token function">install</span> thriftpypip <span class="token function">install</span> --ignore-installed requests hdfs<span class="token punctuation">[</span>kerberos<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络端口授权"><a href="#网络端口授权" class="headerlink" title="网络端口授权"></a>网络端口授权</h3><blockquote><p>KDC：750 88</p><p>Namenode：8020</p><p>ResourceManager：8030 8031 8032</p><p>Hiveserver2：9999</p><p>Metastore：9083</p><p>MySQL：3306</p></blockquote><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><ol><li><p>从集群节点拷贝<code>krb5.conf</code>配置文件至客户端主机<code>/etc/</code>目录下；</p></li><li><p>从集群执行节点拷贝spark及hdfs文件夹至客户端主机；</p></li><li><p>拷贝<code>hive-site.xml</code>配置文件至<code>spark/conf</code>文件夹下；</p></li><li><p>确认hdfs配置文件路径为<code>$HADOOP_HOME/etc/hadoop</code>下，否则需手动拷贝配置文件至该路径下；（仅需要保留<code>hdfs-site.xml</code>、<code>core-site.xml</code>、<code>yarn-site.xml</code>及<code>hadoop-env.sh</code>）</p></li><li><p>删除所有配置文件中关于集群路径信息相关配置参数，避免日志打印异常信息干扰；</p></li><li><p>如需自定义<code>krb5.conf</code>及认证缓存文件路径，则在<code>hadoop-env.sh</code>中添加以下环境该变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">KRB5_CONFIG</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$HADOOP_CONF_DIR</span>"</span>/krb5.conf<span class="token builtin class-name">export</span> <span class="token assign-left variable">KRB5CCNAME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$HADOOP_CONF_DIR</span>"</span>/krb5cc_<span class="token environment constant">$UID</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_OPTS</span><span class="token operator">=</span><span class="token string">"-Djava.security.krb5.conf=<span class="token variable">$KRB5_CONFIG</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="python链接Hive脚本"><a href="#python链接Hive脚本" class="headerlink" title="python链接Hive脚本"></a>python链接Hive脚本</h2><h3 id="方案一：提交至默认队列"><a href="#方案一：提交至默认队列" class="headerlink" title="方案一：提交至默认队列"></a>方案一：提交至默认队列</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">from</span> impala<span class="token punctuation">.</span>dbapi <span class="token keyword">import</span> connect<span class="token keyword">from</span> krbcontext <span class="token keyword">import</span> krbcontextconfig <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"kerberos_principal"</span><span class="token punctuation">:</span> <span class="token string">"hive/bigdata-demo1.jdlt.163.org@BDMS.163.COM"</span><span class="token punctuation">,</span>    <span class="token string">"keytab_file"</span><span class="token punctuation">:</span> <span class="token string">'/home/wangsong03/hive.service.keytab'</span><span class="token punctuation">,</span>    <span class="token string">"kerberos_ccache_file"</span><span class="token punctuation">:</span> <span class="token string">'/home/wangsong03/hive_ccache_uid'</span><span class="token punctuation">,</span>    <span class="token string">"AUTH_MECHANISM"</span><span class="token punctuation">:</span> <span class="token string">"GSSAPI"</span><span class="token punctuation">}</span><span class="token keyword">with</span> krbcontext<span class="token punctuation">(</span>using_keytab<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                               principal<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'kerberos_principal'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               keytab_file<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'keytab_file'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               ccache_file<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'kerberos_ccache_file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'bigdata-demo1.jdlt.163.org'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">,</span> auth_mechanism<span class="token operator">=</span><span class="token string">'GSSAPI'</span><span class="token punctuation">,</span>kerberos_service_name<span class="token operator">=</span><span class="token string">'hive'</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SHOW databases'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方案二：提交至指定队列"><a href="#方案二：提交至指定队列" class="headerlink" title="方案二：提交至指定队列"></a>方案二：提交至指定队列</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">from</span> pyhive <span class="token keyword">import</span> hive<span class="token keyword">from</span> krbcontext <span class="token keyword">import</span> krbcontextconfig <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"kerberos_principal"</span><span class="token punctuation">:</span> <span class="token string">"jzt_dmp/dev@BDMS.163.COM"</span><span class="token punctuation">,</span>    <span class="token string">"keytab_file"</span><span class="token punctuation">:</span> <span class="token string">'/root/jzt_dmp.keytab'</span><span class="token punctuation">,</span>    <span class="token string">"kerberos_ccache_file"</span><span class="token punctuation">:</span> <span class="token string">'./hive_ccache_uid'</span><span class="token punctuation">,</span>    <span class="token string">"AUTH_MECHANISM"</span><span class="token punctuation">:</span> <span class="token string">"GSSAPI"</span><span class="token punctuation">}</span><span class="token keyword">with</span> krbcontext<span class="token punctuation">(</span>using_keytab<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                               principal<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'kerberos_principal'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               keytab_file<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'keytab_file'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               ccache_file<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'kerberos_ccache_file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> hive<span class="token punctuation">.</span>connection<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'bigdata004.dmp.jztweb.com'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">,</span> auth_mechanism<span class="token operator">=</span><span class="token string">'GSSAPI'</span><span class="token punctuation">,</span>kerberos_service_name<span class="token operator">=</span><span class="token string">'hive'</span><span class="token punctuation">,</span>configuration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"mapreduce.job.queuename"</span><span class="token punctuation">:</span><span class="token string">"root.schedule_queue"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select count(1) from b2b_ods.dim_plat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="python链接Impala脚本"><a href="#python链接Impala脚本" class="headerlink" title="python链接Impala脚本"></a>python链接Impala脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">from</span> impala<span class="token punctuation">.</span>dbapi <span class="token keyword">import</span> connect<span class="token keyword">from</span> krbcontext <span class="token keyword">import</span> krbcontextconfig <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"kerberos_principal"</span><span class="token punctuation">:</span> <span class="token string">"bdms_wangsong03/dev@BDMS.163.COM"</span><span class="token punctuation">,</span>    <span class="token string">"keytab_file"</span><span class="token punctuation">:</span> <span class="token string">'/home/wangsong03/bdms_wangsong03.keytab'</span><span class="token punctuation">,</span>    <span class="token string">"kerberos_ccache_file"</span><span class="token punctuation">:</span> <span class="token string">'/home/wangsong03/wangsong03_ccache_uid'</span><span class="token punctuation">,</span>    <span class="token string">"AUTH_MECHANISM"</span><span class="token punctuation">:</span> <span class="token string">"GSSAPI"</span><span class="token punctuation">}</span><span class="token keyword">with</span> krbcontext<span class="token punctuation">(</span>using_keytab<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                               principal<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'kerberos_principal'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               keytab_file<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'keytab_file'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               ccache_file<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'kerberos_ccache_file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'bigdata-demo5.jdlt.163.org'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">21050</span><span class="token punctuation">,</span> auth_mechanism<span class="token operator">=</span><span class="token string">'GSSAPI'</span><span class="token punctuation">,</span>kerberos_service_name<span class="token operator">=</span><span class="token string">'impala'</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SHOW databases'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="python链接hdfs脚本"><a href="#python链接hdfs脚本" class="headerlink" title="python链接hdfs脚本"></a>python链接hdfs脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> ibis<span class="token keyword">from</span> krbcontext <span class="token keyword">import</span> krbcontextconf<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"impala_host"</span><span class="token punctuation">:</span><span class="token string">"bigdata-demo5.jdlt.163.org"</span><span class="token punctuation">,</span><span class="token string">"impala_port"</span><span class="token punctuation">:</span><span class="token number">21050</span><span class="token punctuation">,</span><span class="token string">"kerberos_service_name"</span><span class="token punctuation">:</span><span class="token string">"impala"</span><span class="token punctuation">,</span><span class="token string">"auth_mechanism"</span><span class="token punctuation">:</span><span class="token string">"GSSAPI"</span><span class="token punctuation">,</span><span class="token string">"webhdfs_host1"</span><span class="token punctuation">:</span><span class="token string">"bigdata-demo1.jdlt.163.org"</span><span class="token punctuation">,</span><span class="token string">"webhdfs_host2"</span><span class="token punctuation">:</span><span class="token string">"bigdata-demo2.jdlt.163.org"</span><span class="token punctuation">,</span><span class="token string">"webhdfs_port"</span><span class="token punctuation">:</span><span class="token number">50070</span><span class="token punctuation">}</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"kerberos_principal"</span><span class="token punctuation">:</span> <span class="token string">"bdms_wangsong03/dev@BDMS.163.COM"</span><span class="token punctuation">,</span>    <span class="token string">"keytab_file"</span><span class="token punctuation">:</span> <span class="token string">'/home/wangsong03/bdms_wangsong03.keytab'</span><span class="token punctuation">,</span>    <span class="token string">"kerberos_ccache_file"</span><span class="token punctuation">:</span> <span class="token string">'/home/wangsong03/wangsong03_ccache_uid'</span><span class="token punctuation">,</span>    <span class="token string">"AUTH_MECHANISM"</span><span class="token punctuation">:</span> <span class="token string">"GSSAPI"</span><span class="token punctuation">}</span><span class="token keyword">with</span> krbcontext<span class="token punctuation">(</span>using_keytab<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                               principal<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'kerberos_principal'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               keytab_file<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'keytab_file'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               ccache_file<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'kerberos_ccache_file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># get hdfs_connect</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>    hdfs_client<span class="token operator">=</span>ibis<span class="token punctuation">.</span>hdfs_connect<span class="token punctuation">(</span>host<span class="token operator">=</span>conf<span class="token punctuation">[</span><span class="token string">"webhdfs_host1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>port<span class="token operator">=</span>conf<span class="token punctuation">[</span><span class="token string">"webhdfs_port"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>auth_mechanism<span class="token operator">=</span>conf<span class="token punctuation">[</span><span class="token string">"auth_mechanism"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>use_https<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    hdfs_client<span class="token punctuation">.</span>ls<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>  <span class="token keyword">except</span><span class="token punctuation">:</span>    hdfs_client<span class="token operator">=</span>ibis<span class="token punctuation">.</span>hdfs_connect<span class="token punctuation">(</span>host<span class="token operator">=</span>conf<span class="token punctuation">[</span><span class="token string">"webhdfs_host2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>port<span class="token operator">=</span>conf<span class="token punctuation">[</span><span class="token string">"webhdfs_port"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>auth_mechanism<span class="token operator">=</span>conf<span class="token punctuation">[</span><span class="token string">"auth_mechanism"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>use_https<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    hdfs_client<span class="token punctuation">.</span>ls<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>hdfs_client<span class="token punctuation">.</span>ls<span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># connect impala method2</span>  impala_client<span class="token operator">=</span>ibis<span class="token punctuation">.</span>impala<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span>conf<span class="token punctuation">[</span><span class="token string">"impala_host"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>port<span class="token operator">=</span>conf<span class="token punctuation">[</span><span class="token string">"impala_port"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>hdfs_client <span class="token operator">=</span> hdfs_client<span class="token punctuation">,</span> auth_mechanism<span class="token operator">=</span>conf<span class="token punctuation">[</span><span class="token string">"auth_mechanism"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">)</span>  res<span class="token operator">=</span>impala_client<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""select * from poc.demo limit 10"""</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pyspark提交任务至kerberos集群"><a href="#pyspark提交任务至kerberos集群" class="headerlink" title="pyspark提交任务至kerberos集群"></a>pyspark提交任务至kerberos集群</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># _*_ coding: utf-8 _*_</span><span class="token keyword">import</span> findsparkfindspark<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'JAVA_HOME'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'/usr/lib64/jdk8'</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'SPARK_HOME'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'~/spark2'</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'HADOOP_HOME'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'~/hadoop'</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'HADOOP_CONF_DIR'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'~/hadoop/etc/hadoop'</span><span class="token comment"># 增加client模式driver内存</span>memory <span class="token operator">=</span> <span class="token string">'10g'</span>pyspark_submit_args <span class="token operator">=</span> <span class="token string">' --driver-memory '</span> <span class="token operator">+</span> memory <span class="token operator">+</span> <span class="token string">'   pyspark-shell'</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"PYSPARK_SUBMIT_ARGS"</span><span class="token punctuation">]</span> <span class="token operator">=</span> pyspark_submit_args<span class="token keyword">from</span> krbcontext <span class="token keyword">import</span> krbcontext<span class="token keyword">from</span> pyspark <span class="token keyword">import</span> SparkConf<span class="token punctuation">,</span> SparkContext<span class="token keyword">class</span> <span class="token class-name">CreateSparksession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">createSpark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        conf <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"appname"</span><span class="token punctuation">:</span> <span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token string">"driver_memory"</span><span class="token punctuation">:</span> <span class="token string">"4g"</span><span class="token punctuation">,</span> <span class="token string">"executor_memory"</span><span class="token punctuation">:</span> <span class="token string">"4g"</span><span class="token punctuation">,</span> <span class="token string">"executor_cores"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"executor_num"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"master"</span><span class="token punctuation">:</span> <span class="token string">"yarn"</span><span class="token punctuation">,</span> <span class="token string">"deploy_mode"</span><span class="token punctuation">:</span> <span class="token string">"client"</span><span class="token punctuation">}</span>        sc <span class="token operator">=</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>        sc<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span>conf<span class="token punctuation">[</span><span class="token string">'master'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \            <span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span>conf<span class="token punctuation">[</span><span class="token string">'appname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \            <span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'spark.driver.memory'</span><span class="token punctuation">,</span> conf<span class="token punctuation">[</span><span class="token string">'driver_memory'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \            <span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'spark.executor.memory'</span><span class="token punctuation">,</span> conf<span class="token punctuation">[</span><span class="token string">'executor_memory'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \            <span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'spark.executor.cores'</span><span class="token punctuation">,</span> conf<span class="token punctuation">[</span><span class="token string">'executor_cores'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \            <span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'spark.deploy_mode'</span><span class="token punctuation">,</span> conf<span class="token punctuation">[</span><span class="token string">"deploy_mode"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\            <span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'spark.yarn.queue'</span><span class="token punctuation">,</span> <span class="token string">'root.poc'</span><span class="token punctuation">)</span>\            <span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'spark.executor.memoryOverhead'</span><span class="token punctuation">,</span> <span class="token string">'2g'</span><span class="token punctuation">)</span>\            <span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'spark.driver.memoryOverhead'</span><span class="token punctuation">,</span> <span class="token string">'2g'</span><span class="token punctuation">)</span>        spark<span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>config<span class="token punctuation">(</span>conf<span class="token operator">=</span>sc<span class="token punctuation">)</span><span class="token punctuation">.</span>enableHiveSupport<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>        sctx <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext        <span class="token keyword">return</span> spark<span class="token punctuation">,</span> sctxconfig <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"kerberos_principal"</span><span class="token punctuation">:</span> <span class="token string">"bdms_wangsong03/dev@BDMS.163.COM"</span><span class="token punctuation">,</span>    <span class="token string">"keytab_file"</span><span class="token punctuation">:</span> <span class="token string">'/home/wangsong03/bdms_wangsong03.keytab'</span><span class="token punctuation">,</span>    <span class="token string">"kerberos_ccache_file"</span><span class="token punctuation">:</span> <span class="token string">'/home/wangsong03/wangsong03_ccache_uid'</span><span class="token punctuation">,</span>    <span class="token string">"AUTH_MECHANISM"</span><span class="token punctuation">:</span> <span class="token string">"GSSAPI"</span><span class="token punctuation">}</span><span class="token keyword">with</span> krbcontext<span class="token punctuation">(</span>using_keytab<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                principal<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'kerberos_principal'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                keytab_file<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'keytab_file'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                ccache_file<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'kerberos_ccache_file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    spark<span class="token punctuation">,</span> sctx <span class="token operator">=</span> CreateSparksession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>createSpark<span class="token punctuation">(</span><span class="token punctuation">)</span>    rdd <span class="token operator">=</span> sctx<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"hdfs://easyops-cluster/user/poc/pysparkdemo/demo.txt"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>rdd<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select count(*) from poc.demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>sctx<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过python基础模块实现kerberos认证"><a href="#通过python基础模块实现kerberos认证" class="headerlink" title="通过python基础模块实现kerberos认证"></a>通过python基础模块实现kerberos认证</h2><h3 id="创建上下文管理器"><a href="#创建上下文管理器" class="headerlink" title="创建上下文管理器"></a>创建上下文管理器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>sys<span class="token keyword">import</span> subprocess<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> contextmanager<span class="token keyword">def</span> <span class="token function">KRB5KinitError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">kinit_with_keytab</span><span class="token punctuation">(</span>keytab_file<span class="token punctuation">,</span>principal<span class="token punctuation">,</span>ccache_file<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">'''   initialize kerberos using keytab filereturn the tgt filename'''</span>cmd <span class="token operator">=</span> <span class="token string">'kinit -kt %(keytab_file)s -c %(ccache_file)s %(principal)s'</span>    args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>args<span class="token punctuation">[</span><span class="token string">'keytab_file'</span><span class="token punctuation">]</span> <span class="token operator">=</span> keytab_fileargs<span class="token punctuation">[</span><span class="token string">'principal'</span><span class="token punctuation">]</span> <span class="token operator">=</span> principalargs<span class="token punctuation">[</span><span class="token string">'ccache_file'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ccache_filekinit_proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">(</span>cmd <span class="token operator">%</span> args<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stderr <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>stdout_data<span class="token punctuation">,</span>stderr_data <span class="token operator">=</span> kinit_proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> kinit_proc<span class="token punctuation">.</span>returncode <span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>  <span class="token keyword">raise</span> KRB5KinitError<span class="token punctuation">(</span>stderr_data<span class="token punctuation">)</span>    <span class="token keyword">return</span> ccache_file<span class="token decorator annotation punctuation">@contextmanager</span><span class="token keyword">def</span> <span class="token function">krbcontext</span><span class="token punctuation">(</span>using_keytab<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">'''  A context manager for krberos-related actions  Using_keytab: specify to use keytab file in kerberos context  if true, or be as a regular user.  kwargs:contains the necessary arguments used in kerberos context, it can contain principal,keytab_file, ccache_file  '''</span>  env_name<span class="token operator">=</span><span class="token string">'KRB5CCNAME'</span>  h_ccache <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span>env_name<span class="token punctuation">)</span>  ccache_file <span class="token operator">=</span> kinit_with_keytab<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span>env_name<span class="token punctuation">]</span> <span class="token operator">=</span> ccache_file  <span class="token keyword">yield</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用非默认python执行任务，需在代码中指定目标python环境变量  <code>PYSPARK_PYTHON</code></p></blockquote><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p><strong>Q</strong>: <code>sys.stderr.write(f"ERROR: {exc}")</code></p><p><strong>A</strong>: 因python2 已经停止支持导致pip进行安装时报错，从官网下载2.7版本的get-pip.py，然后安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://bootstrap.pypa.io/pip/2.7/get-pip.pypython get-pip.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Q</strong>：<code>ImportError: cannot import name TFrozenDict</code></p><p><strong>A</strong>：安装pyhive时需添加[hive]后缀，否则有些关联的包装不上，会导致报错</p><p><strong>Q</strong>: <code>gcc: error trying to exec 'cc1plus' : execvp: No such file or directory</code></p><p><strong>A</strong>: 因操作系统缺少基础gcc依赖包导致，通过yum安装即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Q</strong>：<code>AttributeError: 'SparkConf' object has no attribute '_get_object_id'</code></p><p><strong>A</strong>：<code>SparkSession.builder.config(conf = sc)</code> 括号中必须使用<code>conf =sc</code></p><p><strong>Q</strong>：<code>Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: bigdata11/10.4.9.68:39005</code></p><p><strong>A</strong>：问题表象spark am Container链接client失败，如测试节点间网络端口确实不通，则需申请权限；如测试网络端口正常，则一般为客户端多网卡问题导致；</p><p>​        方案一：调整客户端与集群节点<code>/etc/hosts</code>中ip主机名映射一致，且映射IP与集群可正常通讯；<br>​        方案二：调整集群与客户端hdfs-site.xml配置文件，增加以下参数        </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.client.use.datanode.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git简介及使用</title>
      <link href="/2021/03/15/05-dev/git-jian-jie-ji-chang-yong-ming-ling/"/>
      <url>/2021/03/15/05-dev/git-jian-jie-ji-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h1><p>Git是什么？</p><p>Git是目前世界上最先进的分布式版本控制系统，没有之一！</p><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，目前已经成为最大的服务器系统软件；</p><p>在2002年以前，Linux系统的开发方式是由全世界各地的志愿者将源码文件通过diff的方式发送给linus，然后由linus本人通过手工方式进行代码合并，到了2002年，Linux系统已经发展了10年，代码库之大让linus很难继续通过手工方式进行管理；于是linus选择了一个商业化版本控制系统BitKeeper，BitKeeper软件的公司BitMover处于人道主义精神，授权linux社区免费使用这个版本系统</p><p>2005年由于Samba的Andrew视图破解BitKeeper协议被BitMover公司发现，要收回Linux社区的免费使用权；</p><p>linus在此情况下花费两周时间自己用c语言编写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码纳入了Git管理。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线，他为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery、PHP、Ruby等；</p><p>下图为git架构及常用操作：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20200426113305606.png" alt="image-20200426113305606"><p>专有名词解释：</p><ul><li>Workspace：工作区，即本地文件系统初始化后目录，初始化命令为<code>git init</code>；</li><li>Index：暂存区，工作区变更后提交的中转站，提交命令为<code>git add</code>；</li><li>Repository：仓库区，也叫本地仓库，实现本地代码版本控制，提交命令为<code>git commit</code>；</li><li>Remote：远程库，一般位于公网或办公网服务器上，实现多人协作，提交命令为<code>git push</code>；</li><li>Branch：版本分支，用于在当前版本的基础上进行feature功能开发；</li></ul><h2 id="git初始化"><a href="#git初始化" class="headerlink" title="git初始化"></a>git初始化</h2><p>git初始化<code>git init</code>会在当前目录下生成一个隐藏目录<code>.git</code>及一个隐藏文件<code>.gitignore</code>；</p><ul><li><code>.gitignore</code>：配置当前工作区中不纳入git管理的文件及文件夹列表，文件名支持模糊匹配；</li><li><code>.git</code>：用于保存暂存区及仓库区相关信息；</li></ul><h2 id="git常用配置"><a href="#git常用配置" class="headerlink" title="git常用配置"></a>git常用配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前git配置</span><span class="token function">git</span> config <span class="token parameter variable">--list</span><span class="token comment"># 添加git配置</span><span class="token function">git</span> config <span class="token parameter variable">-e</span><span class="token comment"># 添加git全局配置</span><span class="token function">git</span> config <span class="token parameter variable">-e</span> <span class="token parameter variable">--global</span><span class="token comment"># 查看git全局参数</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--list</span><span class="token comment"># 查看git本地参数</span><span class="token function">git</span> config <span class="token parameter variable">--local</span> <span class="token parameter variable">--list</span><span class="token comment"># 查看git系统参数</span><span class="token function">git</span> config <span class="token parameter variable">--system</span> <span class="token parameter variable">--list</span><span class="token comment"># 查看git所有参数：全局+本地+系统</span><span class="token function">git</span> config <span class="token parameter variable">--list</span><span class="token comment"># 配置git显示相关颜色</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> color.ui <span class="token boolean">true</span><span class="token comment"># 查看当前配置远程仓库</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span><span class="token comment"># 关联远程仓库</span><span class="token comment">## origin 为自定义远程仓库别名  如需使用公钥进行数据同步，仓库链接需使用ssh协议</span><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:destinys/blog.git<span class="token comment">## 删除远程仓库别名</span><span class="token function">git</span> remote <span class="token function">rm</span> origin<span class="token comment"># 本地分支关联成成分支</span><span class="token function">git</span> branch <span class="token parameter variable">-u</span> origin/remote_branch local_branch<span class="token function">git</span> branch --set-upstream-to <span class="token operator">&lt;</span>local_branch<span class="token operator">&gt;</span> origin/<span class="token operator">&lt;</span>remote_branch<span class="token operator">&gt;</span><span class="token comment"># 在本地创建与远程分支对应的分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> local_branch origin/<span class="token operator">&lt;</span>remote_branch<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git远程仓库管理"><a href="#git远程仓库管理" class="headerlink" title="git远程仓库管理"></a>git远程仓库管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取远程仓库</span><span class="token comment">## clone是一个从无到有的操作，不需要本地必须是一个git仓库，clone会将远程仓库完整的克隆到本地，包括仓库的版本变化</span><span class="token comment">## 语法：git clone &lt;远程仓库&gt; [本地目录] 本地目录省略则拉取至当前目录</span><span class="token function">git</span> clone origin  local_dir<span class="token comment">## pull是拉取远程仓库更新并与本地分支进行合并  pull = fetch + merge</span><span class="token comment">## 语法： git pull &lt;远程仓库&gt; [远程分支]:[本地分支]，如果省略远程分支与本地分支参数，则默认拉取远程master分支并与本地当前分支合并</span><span class="token function">git</span> pull origin  master:master<span class="token comment">## fetch是拉取远程仓库指定分支至本地仓库指定分支</span><span class="token comment">## 语法：git fetch &lt;远程仓库&gt; &lt;远程分支&gt;:[指定分支]，如果省略指定分支，如果省略指定分支，则默认拉取远程分支至本地master分支</span><span class="token function">git</span> fetch origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git本地仓库管理"><a href="#git本地仓库管理" class="headerlink" title="git本地仓库管理"></a>git本地仓库管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 工作区提交至暂存区</span><span class="token comment">## 语法：git add [-f] &lt;文件名1 文件名2| 文件夹名 |.&gt; git提交支持指定文件或使用"."进行通配提交所有变更 参数-f用于强制提交被.gitignore忽略的文件</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 暂存区提交至本地仓库</span><span class="token comment">## 语法： git commit -m "remark" 将当前暂存区变更提交至本地仓库，并进行备注</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"bug fix"</span><span class="token comment"># 版本回退</span><span class="token comment"># 语法：git reset --hard HEAD^  HEAD^表示上一个版本,HEAD^^表示上上一个版本，HEAD~100表示上100个版本</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^<span class="token comment"># 仓库与工作区对比</span><span class="token comment"># 语法：git diff HEAD -- &lt;文件名&gt; 对比工作区与本地仓库的指定文件</span><span class="token function">git</span> <span class="token function">diff</span> HEAD -- readme.txt<span class="token comment"># 撤销工作区修改</span><span class="token comment">## git checkout --&lt;文件名&gt; 撤销工作区文件的修改，回到与本地库或暂存区一致</span><span class="token function">git</span> checkout <span class="token parameter variable">--readme.txt</span><span class="token comment"># 撤销暂存区修改</span><span class="token comment">## git reset HEAD &lt;文件名&gt; 撤销暂存区修改</span><span class="token function">git</span> reset HEAD readme.txt<span class="token comment"># 删除本地库文件</span><span class="token comment">## 语法：git rm &lt;文件名&gt; &amp;&amp; git commit -m "remark"</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> readme.txt<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"remove file"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git分支管理"><a href="#git分支管理" class="headerlink" title="git分支管理"></a>git分支管理</h2><p>git仓库初始化后，默认会在仓库中创建出master分支；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建本地分支</span><span class="token comment">## 语法：git branch  &lt;分支名称&gt;</span><span class="token function">git</span> branch dev<span class="token comment"># 切换本地分支</span><span class="token comment">## 语法：git checkout/switch &lt;分支名称&gt;   新版本建议使用swith进行分支切换</span><span class="token function">git</span> checkout dev<span class="token comment"># 创建并切换至分支</span><span class="token comment">## 语法：git checkout -b &lt;分支名称&gt;</span><span class="token comment">## 语法：git switch -c &lt;分支名称&gt;</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev<span class="token comment"># 查看所有分支 当前分支以*标识</span><span class="token comment">## git branch [-ravv]：查看本地分支，参数r查看远程所有分支；参数a查看本地+远程所有分支；vv查看本地分支对应的远程分支</span><span class="token function">git</span> branch<span class="token comment"># 删除本地分支</span><span class="token comment">## 语法：git branch -d|D &lt;分支dev&gt;：删除分支dev，参数D为强制删除dev</span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev<span class="token comment"># 分支重命名</span><span class="token comment">## 语法：git branch -m oldname newname：将分支名称从oldname重命名为newname</span><span class="token function">git</span> branch <span class="token parameter variable">-m</span> dev ops<span class="token comment"># 分支合并</span><span class="token comment">## 语法：git merge &lt;分支dev&gt; [--no-ff]：将分支dev合并至当前分支 no-ff，禁用fast forward模式</span><span class="token function">git</span> merge dev<span class="token comment">## 语法：git rebase &lt;分支名&gt;：指定所有分支变更为以&lt;分支名&gt;为基础分支</span><span class="token function">git</span> rebase master<span class="token comment">## 语法：git merge --abort &lt;分支dev&gt;：分支合并，存在冲突则重建合并前状态</span><span class="token function">git</span> merge <span class="token parameter variable">--abort</span> dev<span class="token comment"># 分支冲突查看</span><span class="token comment">## 语法：git status （需在执行分支合并命令后执行，根据提示的冲突文件，手工进行处理后在提交）</span><span class="token function">git</span> status<span class="token comment"># 查看分支合并情况</span><span class="token comment">## 语法：git log [--graph] [--pretty=oneline] [--abbrev-commit]： graph图形化显示 pretty定义显示格式 abbrev-commit 仅显示sha1前几个字符</span><span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit<span class="token comment"># 删除分支</span><span class="token comment">## git branch -d|D &lt;分支名&gt;：D强制删除没有提交的分支</span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev<span class="token comment"># 工作区暂存</span><span class="token comment">## 语法：git stash：将当前工作区中修改但尚未提交至暂存区的内容存储起来</span><span class="token function">git</span> stash<span class="token comment">## 语法：git stash list：查看暂存工作区列表</span><span class="token function">git</span> stash list<span class="token comment">## 语法：git stash pop：恢复暂存工作区并删除暂存</span><span class="token function">git</span> stash pop<span class="token comment">## 语法：git stash apply stash@{0}：指定要恢复的暂存内容，stash@{0}为通过git stash list查看结果的序号</span><span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">## 语法：git stash drop stash@{0}：删除指定的暂存内容</span><span class="token function">git</span> stash drop stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">## git cherry-pick &lt;sha1-id&gt;：将指定commit合并至当前分支</span><span class="token function">git</span> cherry-pick 4ch05e1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>HEAD：指向当前分支最新提交节点</p><p>分支名：指向各自分支最后提交节点</p><p>快进模式：又名Fast-forward，当被合并分支与当前分支存在继承关系，进行合并时，git会直接将当前分支移动到被合并分支最新节点，并将HEAD指向当前分支；</p><p>普通模式：当被合并分支与当前分支不存在继承关系时，git会使用两个分支最近的共同父节点及两个分支的最新节点进行合并生成一个新的节点，并将当前分支指向新节点，HEAD指向当前分支；</p><p>变基合并：又名rebase，当存在多个分支依赖的基础分支不同时，可通过rebase将所有分支变更为依赖相同的基础分支，然后在进行普通分支合并，使项目提交时间线条理清晰；</p></blockquote><h2 id="git标签管理"><a href="#git标签管理" class="headerlink" title="git标签管理"></a>git标签管理</h2><p>git在进行版本提交前，可以对本地将要提交的版本打标签进行标记，相比于每次提交自动生成的sha1编码，自定义的标签明显更直观易懂；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 对当前提交进行标记</span><span class="token comment">## 语法：git tag &lt;tag_name&gt; [commit_id] tag_name由用户自定定义，一般使用直观易理解的短语，如需对历史已提交版本进行标签，则指定对应提交版本的commit_id</span><span class="token function">git</span> tag v1.0<span class="token comment"># 查看当前分支所有标签</span><span class="token comment">## 语法：git tag</span><span class="token function">git</span> tag<span class="token comment"># 创建带说明的标签</span><span class="token comment">## 语法：git tag -a &lt;tag_name&gt; -m "description" [commit_id]</span><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.0 <span class="token parameter variable">-m</span> <span class="token string">"demo"</span> 1094adb<span class="token comment"># 查看标签说明</span><span class="token comment">## 语法：git show &lt;tag_name&gt;</span><span class="token function">git</span> show v1.0<span class="token comment"># 删除标签</span><span class="token comment">## 语法：git tag -d &lt;tag_name&gt;</span><span class="token function">git</span> tag <span class="token parameter variable">-d</span> v1.0<span class="token comment"># 推送标签至远程仓库</span><span class="token comment">## 语法：git push &lt;origin&gt; &lt;tag_name&gt;</span><span class="token function">git</span> push origin v1.0<span class="token comment"># 推送所有未推送标签至远程仓库</span><span class="token comment">## 语法：git push &lt;origin&gt; --tags</span><span class="token function">git</span> push origin <span class="token parameter variable">--tags</span><span class="token comment"># 删除远程仓库便签</span><span class="token comment">## 语法：git tag -d &lt;tag_name&gt; &amp;&amp; git push &lt;origin&gt; :refs/tags/&lt;tag_name&gt;</span><span class="token function">git</span> tag <span class="token parameter variable">-d</span> v1.0<span class="token function">git</span> push origin :refs/tags/v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>Q：<code>ssh: connect to host github.com port 22: Connection timed out</code><br>A：因git默认使用443端口，ssh协议默认使用22端口导致，可通过添加配置文件解决；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host github.com Hostname ssh.github.com Port <span class="token number">443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx架构原理及使用</title>
      <link href="/2021/03/13/05-dev/nginx-jie-shao-ji-bu-shu/"/>
      <url>/2021/03/13/05-dev/nginx-jie-shao-ji-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx详解"><a href="#Nginx详解" class="headerlink" title="Nginx详解"></a>Nginx详解</h1><h2 id="1-序言"><a href="#1-序言" class="headerlink" title="1. 序言"></a>1. 序言</h2><p>Nginx是lgor Sysoev为俄罗斯访问量第二的rambler.ru站点设计开发的。从2004年发布至今，凭借开源的力量，已经接近成熟与完善。</p><p>Nginx功能丰富，可作为HTTP服务器，也可作为反向代理服务器，邮件服务器。支持FastCGI、SSL、Virtual Host、URL Rewrite、Gzip等功能。并且支持很多第三方的模块扩展。</p><p>另外，一些厂商基于Nginx进行了衍生版本开发，其中较为成功的版本为Tengine，官方的简介说针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。</p><p>传统的 Web 服务器，每个客户端连接作为一个单独的进程或线程处理，需在切换任务时将 CPU 切换到新的任务并创建一个新的运行时上下文，消耗额外的内存和 CPU 时间，当并发请求增加时，服务器响应变慢，从而对性能产生负面影响。</p><p>Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。性能是 Nginx 最重要的考量，其占用内存少、并发能力强、能支持高达 5w 个并发连接数，最重要的是，Nginx 是免费的并可以商业化，配置使用也比较简单。</p><p>Nginx 的最重要的几个使用场景：</p><ol><li>静态资源服务，通过本地文件系统提供服务；</li><li>反向代理服务，延伸出包括缓存、负载均衡等；</li><li>API 服务，OpenResty ；</li></ol><h2 id="2-相关概念"><a href="#2-相关概念" class="headerlink" title="2. 相关概念"></a>2. 相关概念</h2><h3 id="2-1-简单请求与非简单请求"><a href="#2-1-简单请求与非简单请求" class="headerlink" title="2.1 简单请求与非简单请求"></a>2.1 简单请求与非简单请求</h3><p>同时满足一下条件的请求即为简单请求：</p><p>a. 请求方法为HEAD、GET、POST三种之一；</p><p>b. HTTP头部不超过以下键值：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">AcceptAccept-LanguageContent-LanguageLast-Event-IDContent-Type: application/x-www-form-urlencoded、multipart/form-data、text/plain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器在处理简单请求与非简单请求的方式存在很大差别：</p><p><strong>简单请求</strong></p><p>对于简单请求，浏览器会自动在头部信息中增加<code>Origin</code>字段后直接发出,<code>Origin</code>字段用来说明本次请求来自哪个源，源的格式为”协议+域名+端口”。</p><p>服务器对于存在<code>Origin</code>字段的请求会优先检测源是否在许可范围内，如果源在许可范围内，服务器返回的响应会添加<code>Access-Control-</code>开头的信息字段，反之则会返回一个正常的HTTP响应；浏览器接收到返回的响应后，会检查响应头是否包含<code>Access-Control-Allow-Origin</code>字段，如果没有则抛出一个XHR的<code>error</code>事件；</p><p><strong>非简单请求</strong></p><p>非简单请求即对服务器有特殊操作的请求，比如方法为<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>的值为<code>application/json</code>。浏览器再省事通信前，或发送一次HTTP遇见<code>OPTION</code>请求，询问服务器当前网页所在域名是否在服务器许可名单之内，以及可用HTTP请求方法及请求头字段信息。验证通过，浏览器才会发起正式的<code>XHR</code>请求，否则直接报错。</p><h3 id="2-2-跨域请求"><a href="#2-2-跨域请求" class="headerlink" title="2.2 跨域请求"></a>2.2 跨域请求</h3><p>在浏览器上当前访问的网站向另一个网站发送请求获取数据的过程就是跨域请求。</p><p>跨域是浏览器的同源策略决定的，是一个重要的浏览器安全策略，用于限制一个origin的文档或者它加载的脚本与另一个源的资源进行交互，他能够帮助阻隔恶意文档，减少可能被公技的媒介，可以使用CORS配置解除跨域限制。</p><p>以下举例说明：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"># 非跨域 同源不同目录http://demo.com/app1/index.htmlhttp://demo.com/app2/index.html# 跨域 协议不同http://demo.comhttps://demo.com# 跨域 端口不同  默认端口为80，可省略http://demo.com:81http://demo.com# 跨域 主机不同http://demo.comhttp://demo01.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-代理"><a href="#2-3-代理" class="headerlink" title="2.3 代理"></a>2.3 代理</h3><p>代理分为正向代理(Forward Proxy)与反向代理(Reverse Proxy)，他们的区别为：</p><p><strong>正向代理</strong>：一般的访问流程为客户端直接向目标服务器发送请求并获取内容，使用正向代理后，客户端想代理服务器发送请求，并指定目标服务器，然后由代理服务器和目标服务器通信，转交请求并获取内容，再返回给客户端。正向代理隐藏了真实的客户端，为客户端收发请求，使真实客户端对服务器不可见。</p><p><strong>反向代理</strong>：反向代理的流程仍然是客户端向代理服务器发送请求，但不需要客户端指定目标服务器，代理服务器根据规则进行客户端的请求转发，获取内容并返回给客户端；反向代理隐藏了真实的服务器，为服务器收发请求，使真实的服务器对客户端不可见。一般在处理跨域请求的时候比较常用。</p><p>举个栗子：</p><p>1、某天我想吃雪糕，拿起手机下单让外卖小哥帮我去XX超市买箱雪糕给我送过来；此时，我是客户端，外卖小哥是代理服务器，XX超市是目标服务器。</p><p>2、某天我又想吃雪糕了，拿起手机在某东下单购买一箱雪糕送货上门；此时，我仍然是客户端，某东是反向代理服务器，雪糕厂是目标服务器；对于我来说，我不用管雪糕是哪个厂商生产的，我只要知道找某东可以买到雪糕即可，雪糕厂对我不可见，只有某东才知道这箱雪糕采购自哪个厂商。</p><p>原理参见下图：</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20200521214542628.png" alt="image-20200521214542628"><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20200521214557656.png" alt="image-20200521214557656"><h3 id="2-4-负载均衡"><a href="#2-4-负载均衡" class="headerlink" title="2.4 负载均衡"></a>2.4 负载均衡</h3><p>一般情况下，客户端发送多个请求到服务器，服务器处理请求，处理完毕后，将结果返回给客户端。</p><p>随着互联网时代到来，访问量与数据量飞速增长，业务系统复杂度持续上升，并发量激增很容易导致服务器宕机。此时除了升级服务器外，性价比最高的做法就是多台服务器组成集群实现负载均衡；负载均衡的核心是分摊压力。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20200521215100663.png" alt="image-20200521215100663"><h3 id="2-5-动静分离"><a href="#2-5-动静分离" class="headerlink" title="2.5 动静分离"></a>2.5 动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来完成解析，加快解析速度，降低单个服务器压力。</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20200521215204551.png" alt="image-20200521215204551"><p>一般来说，大型应用都需要进行动静分离，由于Nginx的高并发及静态资源缓存等特性，经常将静态资源部署在Nginx上。如果请求的是静态资源，直接到静态资源目录获取资源，如果是动态资源请求，则利用反向代理，把请求转发给对应服务器进行处理，从而实现动静分离。</p><p>使用前后端分离，可以很大程度提升静态资源访问速度，即使动态服务不可用，静态资源访问仍不受影响。</p><h2 id="3-Nginx部署"><a href="#3-Nginx部署" class="headerlink" title="3. Nginx部署"></a>3. Nginx部署</h2><h3 id="3-1-YUM安装"><a href="#3-1-YUM安装" class="headerlink" title="3.1 YUM安装"></a>3.1 YUM安装</h3><p>最简单的安装方式为通过linux自带包管理服务yum进行安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nginx安装</span>yum <span class="token function">install</span> nginx<span class="token comment"># nginx版本查看</span>nginx <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-源码包安装"><a href="#3-2-源码包安装" class="headerlink" title="3.2 源码包安装"></a>3.2 源码包安装</h3><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 下载源码包wget http://nginx.org/download/nginx-1.16.1.tar.gz # 安装依赖包yum install -y openssl zlib pcre-devel#编译安装tar -zxvf nginx-1.16.1.tar.gz ./configure --prefix=/usr/ndp/5.4.0/nginx-1.16.1 make &amp; make install/usr/ndp/5.4.0/nginx-1.16.1/sbin/nginx# 添加第三方模块-健康检查wget http://github.com/yaoweibin/nginx_upstream_check_moduleunzip nginx_upstream_check_modulepatch -p1 &lt; /home/semon/nginx_upstream_check_module/check_1.16.1+.patchcd ~/nginx-1.16.1./configure --prefix=/usr/ndp/5.4.0/nginx-1.16.1  --add-module=/home/semon/nginx_upstream_check_modulemake cd /usr/ndp/5.4.0/nginx-1.16.1/sbincp  nginx  nginx.bakcp ~/nginx-1.16.1/objs/nginx  /usr/ndp/5.4.0/nginx-1.16.1/sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Nginx常用命令"><a href="#4-Nginx常用命令" class="headerlink" title="4. Nginx常用命令"></a>4. Nginx常用命令</h2><p>Nginx的命令可以通过<code>nginx -h</code>查看所有命令，以下为常用命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-s</span> reload  <span class="token comment"># 动态加载配置文件，也叫热重启</span>nginx <span class="token parameter variable">-s</span> reopen  <span class="token comment"># 重启nginx</span>nginx <span class="token parameter variable">-s</span> stop   <span class="token comment"># 快速停止nginx</span>nginx <span class="token parameter variable">-s</span> quit   <span class="token comment"># 等待释放所有进程后停止nginx</span>nginx <span class="token parameter variable">-T</span>   <span class="token comment"># 测试配置文件是否异常</span>nginx <span class="token parameter variable">-t</span> <span class="token parameter variable">-c</span>  <span class="token operator">&lt;</span>指定目录<span class="token operator">&gt;</span>  <span class="token comment">#检查nginx配置目录外的配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Nginx配置语法"><a href="#5-Nginx配置语法" class="headerlink" title="5. Nginx配置语法"></a>5. Nginx配置语法</h2><p>Nginx的主配置文件为<code>nginx.conf</code>，整体结构图概括如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">main          <span class="token comment"># 全局配置</span>├── events  <span class="token comment"># 配置影Nginx服务器或与用户的网络连接</span>├── http    <span class="token comment"># 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置</span>│   ├── upstream <span class="token comment"># 配置反向代理服务器地址</span>│   ├── server   <span class="token comment"># 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块</span>│   ├── server│   │   ├── location  <span class="token comment"># server 块可以包含多个 location 块，location 指令用于匹配 uri</span>│   │   ├── location│   │   └── <span class="token punctuation">..</span>.│   └── <span class="token punctuation">..</span>.└── <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx配置文件语法规则如下：</p><ol><li>配置文件由指令与指令块构成；</li><li>每条指令以<code>；</code>结尾，指令与参数间以空格进行分隔；</li><li>指令块以<code>{}</code>将多条指令组织在一起；</li><li><code>include</code>语句允许组合多个配置文件以提升维护性；</li><li>使用<code>#</code>进行注释，提高代码可读性；</li><li>使用<code>$</code>引用变量；</li><li>部分指令参数，如location支持正则表达式；</li></ol><h3 id="5-1-Nginx配置样例"><a href="#5-1-Nginx配置样例" class="headerlink" title="5.1 Nginx配置样例"></a>5.1 Nginx配置样例</h3><p>Nginx 的样例配置如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## main块</span>user nginx nginx<span class="token punctuation">;</span>  <span class="token comment">#配置用户或者用户组，用户组为可选项，默认为nobody:nobody</span>worker_processess <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment"># 指定了Nginx要开启的进程数。每个Nginx进程平均耗费10M~12M内存。建议指定和CPU的数量一致即可，默认为1，可配置为auto，由nginx自行检测</span>pid /nginx/pid/nginx.pid  <span class="token comment">#指定进行运行文件存放路径</span>error_log log/error.log debug  <span class="token comment">#指定日志文件存放路径及日志级别， 级别枚举：debug|info|notice|warn|error|crit|alert|emerg</span><span class="token comment">### events块</span>events <span class="token punctuation">{</span>accept_mutex on<span class="token punctuation">;</span> <span class="token comment"># 设置网络连接序列化，防止惊群现象，默认为on；惊群现象：一个网路连接到来，多个睡眠的进程被同事叫醒，但只有一个进程能获得链接，这样会影响系统性能。</span>multi_accept on<span class="token punctuation">;</span> <span class="token comment">#设置一个进程是否可同时接受多个网络连接，默认为off</span>use epoll<span class="token punctuation">;</span> <span class="token comment">#设置时间驱动模型，枚举类型为select|poll|kqueue|epoll|resig|/dev/poll|eventport；select|poll为标准工作模式，kqueue|epoll为高效工作模式，linux系统推荐为epoll，BSD系统推荐为kqueue</span>worker_connection <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">#最大连接数，默认为1024</span><span class="token punctuation">}</span><span class="token comment"># http块</span>http <span class="token punctuation">{</span>include mime.types<span class="token punctuation">;</span>  <span class="token comment">#引入文件扩展名与文件类型映射关系表</span>default_typeapplication/octet-stream<span class="token punctuation">;</span>  <span class="token comment"># 默认文件类型，octet-stream为二进制流，当文件类型未定义时，使用application/octet-stream</span>log_format myFormat <span class="token string">'$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'</span><span class="token punctuation">;</span> <span class="token comment">#自定义日志存储格式，默认为combined格式</span>sendfile on<span class="token punctuation">;</span> <span class="token comment">#允许sendfile方式传输文件，默认为off；on表示开启高效文件传输模式</span>sendfile_max_chunk <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">#每个进程单词调用传输数量上限值，0为无上限</span>keepalive_timeout <span class="token number">65</span>  <span class="token comment"># 链接超时时间，单位为s</span><span class="token comment"># server块</span>server <span class="token punctuation">{</span>listen <span class="token number">80</span><span class="token punctuation">;</span> <span class="token comment"># 配置监听端口，转发至虚拟主机</span>server <span class="token number">912.168</span>.1.100 demo01<span class="token punctuation">;</span> <span class="token comment">#指定虚拟主机IP或域名 多个域名用空格分隔</span><span class="token comment"># 启用https相关配置</span>ssl on<span class="token punctuation">;</span>    ssl_certificate /data/nginx/conf/ssl/kevin.cer<span class="token punctuation">;</span>    ssl_certificate_key /data/nginx/conf/ssl/kevin.key<span class="token punctuation">;</span>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="token punctuation">;</span>    ssl_session_cache    shared:SSL:1m<span class="token punctuation">;</span>    ssl_session_timeout  5m<span class="token punctuation">;</span>    ssl_ciphers  ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:<span class="token operator">!</span>NULL:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>ADH:<span class="token operator">!</span>RC4:<span class="token operator">!</span>DH:<span class="token operator">!</span>DHE<span class="token punctuation">;</span>    ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>indexindex.htmlindex.htmindex.php<span class="token punctuation">;</span>  <span class="token comment"># 指定默认访问首页文件</span>root/www/www.demo.com<span class="token comment"># 指定虚拟主机网页根目录</span>charset gb2312<span class="token comment">#指定网页默认编码格式</span>access_loglogs/access.log main<span class="token punctuation">;</span> <span class="token comment">#指定本虚拟主机日志访问存放路径，main表示继承全局日志格式输出</span><span class="token comment"># location块</span>location ~ .*<span class="token punctuation">\</span>.<span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>  <span class="token comment"># location支持正则匹配  ~ 为区分大小写匹配   ~* 为不区分大小写匹配 （|）表示匹配其中任意项，|用于分割</span>root /www/www.demo.com<span class="token punctuation">;</span>  <span class="token comment"># 配置请求根目录</span>indexa.txt<span class="token punctuation">;</span><span class="token comment"># 设置默认页</span>proxy_passhttp://myserver<span class="token punctuation">;</span> <span class="token comment">#请求转发至myserver定义的虚拟主机列表</span>      deny <span class="token number">192.168</span>.1.201<span class="token punctuation">;</span><span class="token comment">#拒绝IP</span>      allow <span class="token number">192.168</span>.1.100； <span class="token comment">#允许你的IP</span>            <span class="token comment">## 定义转发消息请求头内容</span>      proxy_set_header Host <span class="token variable">$host</span>:1000<span class="token punctuation">;</span>  <span class="token comment">#配置转发请求头中主机信息</span>      prox_set_headerX-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span> <span class="token comment"># 获取请求真实IP和上一次转发IP地址</span>      proxy_set_header X-From-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>      proxy_set_header X-Forwarded-Proto <span class="token variable">$scheme</span><span class="token punctuation">;</span>      proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>      proxy_set_header Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>      proxy_pass http://bdms-dev-http<span class="token punctuation">;</span>      proxy_redirect http:// https://<span class="token punctuation">;</span>  <span class="token comment"># 修改返回请求头信息中服务器信息，支持变量，替换内容中服务器和端口可省略，server默认值为同名服务器，端口默认值为80 </span>      <span class="token comment"># proxy_redirect http://localhost:8000/two/ /; 实际返回头信息为http://localhost:80</span>      <span class="token comment"># proxy_redirect http://192.168.1.100:8000/two/ http://demo.com; 实际返回信息为 http://demo.com</span><span class="token punctuation">}</span><span class="token comment"># proxy_deirect 配置1</span>location /one <span class="token punctuation">{</span>proxy_pass http://myserver:port/two/<span class="token punctuation">;</span>proxy_redirect  http://myserver:port/two/ /one<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment"># proxy_redirect 配置2   配置1与配置2等价  </span>location /one <span class="token punctuation">{</span>proxy_pass http://myserver:port/two/<span class="token punctuation">;</span>proxy_redirect  default<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># upstream块</span>upstream myserver <span class="token punctuation">{</span>   <span class="token comment"># myserver 自定义转发虚拟主机列表名称</span>ip_hash<span class="token punctuation">;</span>server<span class="token number">192.168</span>.1.10:1000<span class="token punctuation">;</span><span class="token comment">#转发主机1</span>server<span class="token number">192.168</span>.1.11:1000 backup<span class="token punctuation">;</span> <span class="token comment">#转发主机2  backup：热备主机 down：正常情况不参与负载均衡  max_fails：允许最大失败次数 fail_timeout：最大失败次数后暂定服务时间</span>check <span class="token assign-left variable">interval</span><span class="token operator">=</span><span class="token number">30000</span> <span class="token assign-left variable">rise</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">fall</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">5000</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>http <span class="token assign-left variable">default_down</span><span class="token operator">=</span>false<span class="token punctuation">;</span>    check_http_send <span class="token string">"GET /login.jsp HTTP/1.0<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">;</span>    check_http_expect_alive http_2xx http_3xx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>server块可以包含多个location块，location指令用于匹配uri，语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location <span class="token punctuation">[</span> <span class="token operator">=</span> <span class="token operator">|</span> ~ <span class="token operator">|</span> ~* <span class="token operator">|</span> ^~<span class="token punctuation">]</span> uri <span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>正则说明：</p><ol><li><code>=</code>：精确匹配，用户不含正则表达式的uri前，匹配成功后，不再继续查找；</li><li><code>^~</code>：用于不含正则表达式的uri前，表示该符号后面的字符为最佳匹配，匹配成功后，不在继续查找；</li><li><code>~</code>：表示用该符号后面的正则去匹配路径，区分大小写；</li><li><code>~*</code>：表示用该符号后面的正则去匹配，不区分大小写；</li></ol><p>如果uri包含正则匹配，则必须使用<code>~</code>或<code>~*</code>标志，正则匹配优先级较低，如存在多个正则匹配，则使用表达式最长的那个。</p><h3 id="5-2-全局变量"><a href="#5-2-全局变量" class="headerlink" title="5.2 全局变量"></a>5.2 全局变量</h3><p>Nginx有一些常用的全局变量，可以在配置文件的任意位置引用。</p><table><thead><tr><th align="left">全局变量名</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left"><code>$host</code></td><td align="left">请求信息中的 <code>Host</code>，如果请求中没有 <code>Host</code> 行，则等于设置的服务器名，不包含端口</td></tr><tr><td align="left"><code>$request_method</code></td><td align="left">客户端请求类型，如 <code>GET</code>、<code>POST</code></td></tr><tr><td align="left"><code>$remote_addr</code></td><td align="left">客户端的 <code>IP</code> 地址</td></tr><tr><td align="left"><code>$args</code></td><td align="left">请求中的参数</td></tr><tr><td align="left"><code>$arg_PARAMETER</code></td><td align="left"><code>GET</code> 请求中变量名 PARAMETER 参数的值，例如：<code>$http_user_agent</code>(Uaer-Agent 值), <code>$http_referer</code>…</td></tr><tr><td align="left"><code>$content_length</code></td><td align="left">请求头中的 <code>Content-length</code> 字段</td></tr><tr><td align="left"><code>$http_user_agent</code></td><td align="left">客户端agent信息</td></tr><tr><td align="left"><code>$http_cookie</code></td><td align="left">客户端cookie信息</td></tr><tr><td align="left"><code>$remote_addr</code></td><td align="left">客户端的IP地址</td></tr><tr><td align="left"><code>$remote_port</code></td><td align="left">客户端的端口</td></tr><tr><td align="left"><code>$http_user_agent</code></td><td align="left">客户端agent信息</td></tr><tr><td align="left"><code>$server_protocol</code></td><td align="left">请求使用的协议，如 <code>HTTP/1.0</code>、<code>HTTP/1.1</code></td></tr><tr><td align="left"><code>$server_addr</code></td><td align="left">服务器地址</td></tr><tr><td align="left"><code>$server_name</code></td><td align="left">服务器名称</td></tr><tr><td align="left"><code>$server_port</code></td><td align="left">服务器的端口号</td></tr><tr><td align="left"><code>$scheme</code></td><td align="left">HTTP 方法（如http，https）</td></tr></tbody></table><h2 id="6-gzip压缩"><a href="#6-gzip压缩" class="headerlink" title="6. gzip压缩"></a>6. gzip压缩</h2><p>gzip压缩是一种常用的网页压缩技术，传输的网页经过gzip压缩之后大小通常可以缩减到原来的一般甚至更小，更小的网页体积意味着带宽的节约与传输速度的提升，特别是对于访问量巨大的大型应用来说，每个静态资源体积的缩小，都会带来相当可观的流量与带宽节省。</p><h3 id="6-1-Nginx配置gzip"><a href="#6-1-Nginx配置gzip" class="headerlink" title="6.1 Nginx配置gzip"></a>6.1 Nginx配置gzip</h3><p>使用gzip压缩不仅需要Nginx配置，浏览器端也需要配合，需要在请求消息头中包含<code>Accept-Encoding:gzip</code>（IE5之后浏览器默认配置）。一般在请求html和css等静态资源的时候，支持的浏览器再request请求静态资源的时候，会自动加上<code>Accept-Encoding:gzip</code>这个header，表示自己支持gzip压缩，nginx拿到这个请求的时候，如果nginx也启用了gzip，就会返回经过压缩后的文件给浏览器，并在request响应的时候加上<code>content-encoding:gzip</code>告诉浏览器返回的响应内容采用了压缩，浏览器拿到压缩的文件后，会根据自己的解压方式进行解析。</p><p>为了便于管理，一般在<code>$NGINX_HOME/conf</code>下创建gzip.conf来定义gzip压缩相关配置，在http、server或location块中直接include即可，配置样例如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">gzip</span> on<span class="token punctuation">;</span> <span class="token comment"># 默认off，是否开启gzip</span>gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript<span class="token punctuation">;</span><span class="token comment"># 上面两个开启基本就能跑起了，下面的愿意折腾就了解一下</span>gzip_static on<span class="token punctuation">;</span>gzip_proxied any<span class="token punctuation">;</span>gzip_vary on<span class="token punctuation">;</span>gzip_comp_level <span class="token number">6</span><span class="token punctuation">;</span>gzip_buffers <span class="token number">16</span> 8k<span class="token punctuation">;</span><span class="token comment"># gzip_min_length 1k;</span>gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置说明：</p><ol><li><strong>gzip_types</strong>：要采用 gzip 压缩的 MIME 文件类型，其中 text/html 被系统强制启用；</li><li><strong>gzip_static</strong>：默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 <code>.gz</code> 文件内容；</li><li><strong>gzip_proxied</strong>：默认 off，nginx做为反向代理时启用，用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩；</li><li><strong>gzip_vary</strong>：用于在响应消息头中添加 <code>Vary：Accept-Encoding</code>，使代理服务器根据请求头中的 <code>Accept-Encoding</code> 识别是否启用 gzip 压缩；</li><li><strong>gzip_comp_level</strong>：gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6；</li><li><strong>gzip_buffers</strong>：获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位获得；</li><li><strong>gzip_min_length</strong>：允许压缩的页面最小字节数，页面字节数从header头中的 <code>Content-Length</code> 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大；</li><li><strong>gzip_http_version</strong>：默认 1.1，启用 gzip 所需的 HTTP 最低版本；</li></ol><h2 id="7-负载均衡配置"><a href="#7-负载均衡配置" class="headerlink" title="7. 负载均衡配置"></a>7. 负载均衡配置</h2><p>负载均衡样例配置如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http <span class="token punctuation">{</span>  upstream myserver <span class="token punctuation">{</span>  ip_hash<span class="token punctuation">;</span>  <span class="token comment"># ip_hash 方式</span>    server <span class="token number">127.0</span>.0.1:81<span class="token punctuation">;</span>  <span class="token comment"># 负载均衡目的服务地址</span>    server <span class="token number">127.0</span>.0.1:81<span class="token punctuation">;</span>    server <span class="token number">127.0</span>.0.1:82 <span class="token assign-left variable">weight</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment"># weight 方式，不写默认为 1</span>  <span class="token punctuation">}</span>   server <span class="token punctuation">{</span>    location / <span class="token punctuation">{</span>    proxy_pass http://myserver<span class="token punctuation">;</span>      proxy_connect_timeout <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Nginx默认提供了三种负载分配方式，默认为轮询。常用有以下几种分配方式：</p><ol><li>轮询：默认方式，每个请求按时间顺序逐一分配至不同的后端服务器，如果后端服务器宕机，可自动剔除；</li><li>weight：权重分配，指定轮询纪律，权重越高，被访问的概率就越大，用于调整后端服务器性能不均的情况；</li><li>ip_hash：每个请求按照客户端的IP进行hash后的结果分配，这样每个用户固定访问一个后端服务器，可以解决动态网页session共享问题。</li><li>fair：第三方分配算法，按照后端服务器的响应时间分配，响应时间短的优先分配，依赖第三方插件nginx-upstream-fair模块。</li></ol><h2 id="8-动静分离配置"><a href="#8-动静分离配置" class="headerlink" title="8. 动静分离配置"></a>8. 动静分离配置</h2><p>配置样例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">{</span>  location /www/ <span class="token punctuation">{</span>  root /data/<span class="token punctuation">;</span>    index index.html index.htm<span class="token punctuation">;</span>    expires 10d<span class="token punctuation">;</span> <span class="token comment"># -1表示不缓存</span>  <span class="token punctuation">}</span>    location /image/ <span class="token punctuation">{</span>  root /data/<span class="token punctuation">;</span>    autoindex on<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过location指定不同的后缀名实现不同的请求转发。通过expires参数配置浏览器缓存过期时间，减少与服务器之间的请求与流量。</p><h2 id="9-双机热备配置"><a href="#9-双机热备配置" class="headerlink" title="9. 双机热备配置"></a>9. 双机热备配置</h2><p>双机热备可实现当Nginx服务器宕机之后，自动切换至备用Nginx服务器提供服务；</p><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20200521224507801.png" alt="image-20200521224507801"><p>首先安装软件包keepalived：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> keepalived<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件样例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">global_defs<span class="token punctuation">{</span>   notification_email <span class="token punctuation">{</span>        receive<span class="token annotation punctuation">@demo.com</span>   <span class="token punctuation">}</span>   notification_email_from send<span class="token annotation punctuation">@demo.com</span>   smtp_server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>   smtp_connect_timeout <span class="token number">30</span> <span class="token comment">// 上面都是邮件配置，没卵用</span>   router_id <span class="token constant">DEMO01</span>     <span class="token comment">// 当前服务器名字，用hostname命令来查看</span><span class="token punctuation">}</span>vrrp_script chk_maintainace <span class="token punctuation">{</span> <span class="token comment">// 检测机制的脚本名称为chk_maintainace</span>    script <span class="token string">"[[ -e/etc/keepalived/nginx_check.sh ]] &amp;&amp; exit 1 || exit 0"</span><span class="token comment">// 可以是脚本路径或脚本命令</span>    interval <span class="token number">2</span>  <span class="token comment">// 每隔2秒检测一次</span>    weight <span class="token operator">-</span><span class="token number">20</span>  <span class="token comment">// 当脚本执行成立，那么把当前服务器优先级改为-20</span><span class="token punctuation">}</span>vrrp_instanceVI_1 <span class="token punctuation">{</span>   <span class="token comment">// 每一个vrrp_instance就是定义一个虚拟路由器</span>    state <span class="token constant">MASTER</span>      <span class="token comment">// 主机为MASTER，备用机为BACKUP</span>    <span class="token keyword">interface</span> eth0    <span class="token comment">// 网卡名字，可以从ifconfig中查找</span>    virtual_router_id <span class="token number">51</span> <span class="token comment">// 虚拟路由的id号，一般小于255，主备机id需要一样</span>    priority <span class="token number">100</span>      <span class="token comment">// 优先级，master的优先级比backup的大</span>    advert_int <span class="token number">1</span>      <span class="token comment">// 默认心跳间隔</span>    authentication <span class="token punctuation">{</span>  <span class="token comment">// 认证机制</span>        auth_type <span class="token constant">PASS</span>        auth_pass <span class="token number">0000</span>   <span class="token comment">// 密码</span>    <span class="token punctuation">}</span>    virtual_ipaddress <span class="token punctuation">{</span>  <span class="token comment">// 虚拟地址vip</span>       <span class="token number">172.0</span><span class="token number">.0</span><span class="token number">.11</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx_check.sh脚本如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-C</span> nginx --no-header <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$A</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    /usr/sbin/nginx <span class="token comment"># 尝试重新启动nginx</span>    <span class="token function">sleep</span> <span class="token number">2</span>         <span class="token comment"># 睡眠2秒</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-C</span> nginx --no-header <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token function">killall</span> keepalived <span class="token comment"># 启动失败，将keepalived服务杀死。将vip漂移到其它备份节点</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制一份配置到备份服务器，备份 Nginx 的配置要将 <code>state</code> 后改为 <code>BACKUP</code>，<code>priority</code> 改为比主机小。</p><p>设置完毕后各自 <code>service keepalived start</code> 启动，经过访问成功之后，可以把 Master 机的 keepalived 停掉，此时 Master 机就不再是主机了 <code>service keepalived stop</code>，看访问虚拟 IP 时是否能够自动切换到备机 <code>ip addr</code>。</p><p>再次启动 Master 的 keepalived，此时 vip 又变到了主机上。</p><h2 id="10-HTTPS配置"><a href="#10-HTTPS配置" class="headerlink" title="10. HTTPS配置"></a>10. HTTPS配置</h2><p>配置HTTPS需要域名服务商提供对应的证书，下载证书的压缩文件，将其中的xx.crt和xx.key文件拷贝至服务器目录，修改server配置，添加以下内容即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">{</span>      ssl_certificate /etc/nginx/https/1_sherlocked93.club_bundle.crt<span class="token punctuation">;</span>   <span class="token comment"># 证书文件地址</span>  ssl_certificate_key /etc/nginx/https/2_sherlocked93.club.key<span class="token punctuation">;</span>      <span class="token comment"># 私钥文件地址</span>  ssl_session_timeout 10m<span class="token punctuation">;</span>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="token punctuation">;</span>      <span class="token comment">#请按照以下协议配置</span>  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>RC4:<span class="token operator">!</span>DHE<span class="token punctuation">;</span>  ssl_prefer_server_ciphers on<span class="token punctuation">;</span>    <span class="token comment">#安全增强配置</span>  add_header X-Frame-Options DENY<span class="token punctuation">;</span>           <span class="token comment"># 减少点击劫持</span>add_header X-Content-Type-Options nosniff<span class="token punctuation">;</span> <span class="token comment"># 禁止服务器自动解析资源类型</span>add_header X-Xss-Protection <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment"># 防XSS攻击</span>    location / <span class="token punctuation">{</span>  ……  ……  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-常用技巧"><a href="#11-常用技巧" class="headerlink" title="11. 常用技巧"></a>11. 常用技巧</h2><h3 id="11-1-静态服务"><a href="#11-1-静态服务" class="headerlink" title="11.1 静态服务"></a>11.1 静态服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">{</span>  listen       <span class="token number">80</span><span class="token punctuation">;</span>  server_name  static.sherlocked93.club<span class="token punctuation">;</span>  charset utf-8<span class="token punctuation">;</span>    <span class="token comment"># 防止中文文件名乱码</span>  location /download <span class="token punctuation">{</span>    <span class="token builtin class-name">alias</span>          /usr/share/nginx/html/static<span class="token punctuation">;</span>  <span class="token comment"># 静态资源目录</span>        autoindex               on<span class="token punctuation">;</span>    <span class="token comment"># 开启静态资源列目录</span>    autoindex_exact_size    off<span class="token punctuation">;</span>   <span class="token comment"># on(默认)显示文件的确切大小，单位是byte；off显示文件大概大小，单位KB、MB、GB</span>    autoindex_localtime     off<span class="token punctuation">;</span>   <span class="token comment"># off(默认)时显示的文件时间为GMT时间；on显示的文件时间为服务器时间</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2-图片防盗链"><a href="#11-2-图片防盗链" class="headerlink" title="11.2 图片防盗链"></a>11.2 图片防盗链</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">{</span>  listen       <span class="token number">80</span><span class="token punctuation">;</span>  server_name  *.sherlocked93.club<span class="token punctuation">;</span>    <span class="token comment"># 图片防盗链</span>  location ~* <span class="token punctuation">\</span>.<span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token operator">|</span>bmp<span class="token operator">|</span>swf<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>    valid_referers none blocked <span class="token number">192.168</span>.0.2<span class="token punctuation">;</span>  <span class="token comment"># 只允许本机 IP 外链引用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$invalid_referer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token builtin class-name">return</span> <span class="token number">403</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3-请求过滤"><a href="#11-3-请求过滤" class="headerlink" title="11.3 请求过滤"></a>11.3 请求过滤</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 非指定请求全返回 403</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$request_method</span> <span class="token operator">!</span>~ ^<span class="token punctuation">(</span>GET<span class="token operator">|</span>POST<span class="token operator">|</span>HEAD<span class="token punctuation">)</span>$ <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">return</span> <span class="token number">403</span><span class="token punctuation">;</span><span class="token punctuation">}</span>location / <span class="token punctuation">{</span>  <span class="token comment"># IP访问限制（只允许IP是 192.168.0.2 机器访问）</span>  allow <span class="token number">192.168</span>.0.2<span class="token punctuation">;</span>  deny all<span class="token punctuation">;</span>    root   html<span class="token punctuation">;</span>  index  index.html index.htm<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-4-HTTP转发HTTPS"><a href="#11-4-HTTP转发HTTPS" class="headerlink" title="11.4 HTTP转发HTTPS"></a>11.4 HTTP转发HTTPS</h3><p>配置完 HTTPS 后，浏览器还是可以访问 HTTP 的地址 <code>http://www.demo.com/</code> 的，可以做一个 301 跳转，把对应域名的 HTTP 请求重定向到 HTTPS 上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen      <span class="token number">80</span><span class="token punctuation">;</span>    server_name www.demo.com<span class="token punctuation">;</span>    <span class="token comment"># 单域名重定向</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$host</span> <span class="token operator">=</span> <span class="token string">'www.demo.com'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> <span class="token number">301</span> https://www.demo.com<span class="token variable">$request_uri</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment"># 全局非 https 协议时重定向</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$scheme</span> <span class="token operator">!=</span> <span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment"># 或者全部重定向</span>    <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>    <span class="token comment"># 以上配置选择自己需要的即可，不用全部加</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-5-子目录转发"><a href="#11-5-子目录转发" class="headerlink" title="11.5 子目录转发"></a>11.5 子目录转发</h3><p>通过nginx实现反向代理，可指定子目录转发，但建议保持<code>location</code>与<code>proxy_pass</code>均已<code>/</code>结尾</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可实现通过bigdata-demo3.jdlt.163.org:12345代理访问http://59.111.148.45/ma/</span><span class="token comment"># 如proxy_pass最后/丢失将导致404</span>server <span class="token punctuation">{</span>    listen <span class="token number">12345</span><span class="token punctuation">;</span>  server_name bigdata-demo3.jdlt.163.org<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>client_max_body_size 200m<span class="token punctuation">;</span>proxy_set_header Connection <span class="token string">""</span><span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$host</span><span class="token builtin class-name">:</span><span class="token variable">$server_port</span><span class="token punctuation">;</span>proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>        proxy_set_header Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>    proxy_set_header X-From-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>    proxy_set_header X-Forwarded-Proto <span class="token variable">$scheme</span><span class="token punctuation">;</span>proxy_pass http://59.111.148.45/ma/<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-5-HTTPS转发"><a href="#11-5-HTTPS转发" class="headerlink" title="11.5 HTTPS转发"></a>11.5 HTTPS转发</h3><p>通过nginx实现http反向代理https服务</p><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">server{listen 3001;  server_name bigdata-demo3.jdlt.163.org;  access_log /mnt/dfs/0/access_log;  error_log /mnt/dfs/0/error_log;    location / {        proxy_ssl_server_name on;   # 启用ssl代理服务        proxy_set_header X-Protocol https;   # 声明转发协议为https        proxy_pass https://ip.help.bj.cn;            }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux互信配置</title>
      <link href="/2021/03/12/01-linux/linux-hu-xin-pei-zhi/"/>
      <url>/2021/03/12/01-linux/linux-hu-xin-pei-zhi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建秘钥存储路径</span><span class="token function">mkdir</span> ~/.ssh<span class="token comment"># 生成公钥及私钥</span>ssh-keygen <span class="token parameter variable">-t</span> rsa  <span class="token parameter variable">-P</span> <span class="token string">''</span> <span class="token parameter variable">-f</span> ~/.ssh/id_rsa<span class="token comment"># 生成登陆认证文件</span><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span class="token operator">&gt;</span>authorized_keys<span class="token comment"># 修改文件权限</span><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/*<span class="token function">chmod</span> <span class="token number">700</span> ~/.ssh<span class="token comment"># 手工跳转所有节点，将所有主机指纹添加至know_hosts中，避免后期跳转或scp时弹窗认证</span><span class="token function">ssh</span> <span class="token parameter variable">-p14816</span> bigdataXXX.demo.com.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongo分片集群部署</title>
      <link href="/2021/03/12/04-database/mongodb-fen-pian-ji-qun-bu-shu/"/>
      <url>/2021/03/12/04-database/mongodb-fen-pian-ji-qun-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Mongodb-分片集群部署"><a href="#Mongodb-分片集群部署" class="headerlink" title="Mongodb 分片集群部署"></a>Mongodb 分片集群部署</h1><p>mongodb可主要有四个组件：mongos、config、shard、replica set。</p><p>Mongos：数据库集群请求的入口，所有的请求都通过mongos进行协调，不需要在应用程序添加一个路由选择器，mongos自己就是一个请求分发中心，它负责把对应的数据请求请求转发到对应的shard服务器上。在生产环境通常有多mongos作为请求的入口，防止其中一个挂掉所有的mongodb请求都没有办法操作。</p><p>Config：顾名思义为配置服务器，存储所有数据库元信息（路由、分片）的配置。mongos本身没有物理存储分片服务器和数据路由信息，只是缓存在内存里，配置服务器则实际存储这些数据。mongos第一次启动或者关掉重启就会从 config 加载配置信息，以后如果配置服务器信息变化会通知到所有的 mongos 更新自己的状态，这样 mongos 就能继续准确路由。在生产环境通常有多个 config server 配置服务器，因为它存储了分片路由的元数据，防止数据丢失！</p><p>Shard：将数据库拆分，将其分散在不同的机器上的过程。将数据分散到不同的机器上，可以通过廉价PC集群模式替代昂贵服务器。基本思想就是将集合切成小块，这些块分散到若干片里，每个片只负责总数据的一部分，最后通过一个均衡器来对各个分片进行均衡（数据迁移）。</p><p>Replica set：副本集，通过副本集可实现数据读写分离；通过多副本模式实现数据冗余备份，提高了数据的可用性， 并可以保证数据的安全性。</p><p>Primary：承担副本集中数据写入工作；</p><p>Secondary：主要承担副本集中数据读取工作；</p><p>Arbiter：用于Primary异常时重新选主；作用类似zookeeper；</p><p>MongoDB的工作流程可以简单总结为：应用请求mongos对MongoDB进行增删改查请求，config存储MongoDB的元数据信息，并与mongos进行同步，shard存储MongoDB的主数据，为提高性能与安全性，Replica set实现多副本存储；</p><h2 id="MongoDB服务及架构"><a href="#MongoDB服务及架构" class="headerlink" title="MongoDB服务及架构"></a>MongoDB服务及架构</h2><p>以三节点集群为例，每个节点需启动一个config、一个mongos及三个shard；</p><h3 id="服务规划"><a href="#服务规划" class="headerlink" title="服务规划"></a>服务规划</h3><table><thead><tr><th align="center">NodeA</th><th align="center">NodeB</th><th align="center">NodeC</th></tr></thead><tbody><tr><td align="center">config</td><td align="center">config</td><td align="center">config</td></tr><tr><td align="center">mongos</td><td align="center">mongos</td><td align="center">mongos</td></tr><tr><td align="center">shard0</td><td align="center">shard0</td><td align="center">shard0</td></tr><tr><td align="center">shard1</td><td align="center">shard1</td><td align="center">shard1</td></tr><tr><td align="center">Shard2</td><td align="center">Shard2</td><td align="center">Shard2</td></tr></tbody></table><h3 id="端口规划"><a href="#端口规划" class="headerlink" title="端口规划"></a>端口规划</h3><table><thead><tr><th align="center">服务名</th><th align="center">端口</th></tr></thead><tbody><tr><td align="center">mongos</td><td align="center">20000</td></tr><tr><td align="center">config</td><td align="center">21000</td></tr><tr><td align="center">shard</td><td align="center">27000/27001/27002</td></tr></tbody></table><h2 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h2><h3 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h3><p>通过官网下载所需版本压缩包，解压至规划路径，并添加环境变量；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载压缩包</span><span class="token function">wget</span>   http://downloads.mongodb.org/linux/mongodb-linux-x86_64-rhel70-v4.2-latest.tgz<span class="token comment"># debian </span><span class="token function">wget</span> https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian81-3.2.22.tgz<span class="token comment"># 解压</span>gunzip mongodb-linux-x86_64-rhel70-v4.2-latest.tgz<span class="token comment"># 添加环境变量至/etc/profile</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">MONGODB_HOME</span><span class="token operator">=</span>mongodb<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$MONGODB_HOME</span>/bin<span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="目录创建"><a href="#目录创建" class="headerlink" title="目录创建"></a>目录创建</h3><p>在每个节点上创建conf、auth、pid、logs、data/0、data/1、data/2、data/config目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable">$MONGODB_HOME</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> conf auth pid logs data/0 data/1 data/2 data/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置文件生成"><a href="#配置文件生成" class="headerlink" title="配置文件生成"></a>配置文件生成</h3><p>建议以下配置文件除keyfile外均生成三份，然后分发至各节点用于服务启动</p><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">#生成keyfileopenssl rand -base64 753 &gt;/usr/ndp/mongodb/auth/mongo-keyfilechmod 600 /usr/ndp/mongodb/auth/mongo-keyfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># conf/config.yaml</span><span class="token key atrule">systemLog</span><span class="token punctuation">:</span>  <span class="token key atrule">destination</span><span class="token punctuation">:</span> file  <span class="token comment">#日志存储位置</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/usr/ndp/mongodb/logs/config.log"</span>  <span class="token key atrule">logAppend</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">storage</span><span class="token punctuation">:</span>  <span class="token key atrule">journal</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#数据文件存储位置</span>  <span class="token key atrule">dbPath</span><span class="token punctuation">:</span> <span class="token string">"/usr/ndp/mongodb/data/config"</span>  <span class="token comment">#是否一个库一个文件夹</span>  <span class="token key atrule">directoryPerDB</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#WT引擎配置</span>  <span class="token key atrule">wiredTiger</span><span class="token punctuation">:</span>    <span class="token key atrule">engineConfig</span><span class="token punctuation">:</span>      <span class="token comment">#WT最大使用cache（根据服务器实际情况调节）</span>      <span class="token key atrule">cacheSizeGB</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token comment">#是否将索引也按数据库名单独存储</span>      <span class="token key atrule">directoryForIndexes</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#表压缩配置</span>    <span class="token key atrule">collectionConfig</span><span class="token punctuation">:</span>      <span class="token key atrule">blockCompressor</span><span class="token punctuation">:</span> zlib    <span class="token comment">#索引配置</span>    <span class="token key atrule">indexConfig</span><span class="token punctuation">:</span>      <span class="token key atrule">prefixCompression</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#端口配置</span><span class="token key atrule">net</span><span class="token punctuation">:</span>  <span class="token key atrule">bindIp</span><span class="token punctuation">:</span> NodeA<span class="token punctuation">-</span>ip  <span class="token comment">################根据节点进行修改######################</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">21000</span><span class="token key atrule">replication</span><span class="token punctuation">:</span>  <span class="token key atrule">oplogSizeMB</span><span class="token punctuation">:</span> <span class="token number">2048</span>  <span class="token key atrule">replSetName</span><span class="token punctuation">:</span> configs         <span class="token comment">### 初始化时需与此处保持一致</span><span class="token key atrule">sharding</span><span class="token punctuation">:</span>  <span class="token key atrule">clusterRole</span><span class="token punctuation">:</span> configsvr<span class="token key atrule">processManagement</span><span class="token punctuation">:</span>  <span class="token key atrule">fork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">## 初始化时需注释掉一下安全相关配置</span><span class="token key atrule">security</span><span class="token punctuation">:</span>  <span class="token key atrule">keyFile</span><span class="token punctuation">:</span> /usr/ndp/mongodb/auth/mongo<span class="token punctuation">-</span>keyfile  <span class="token key atrule">authorization</span><span class="token punctuation">:</span> enabled     <span class="token comment"># conf/shard0.yaml</span>  <span class="token key atrule">systemLog</span><span class="token punctuation">:</span>   <span class="token key atrule">destination</span><span class="token punctuation">:</span> file   <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/usr/ndp/mongodb/logs/shard0.log"</span>    <span class="token comment"># 日志文件名需根据分片同步变更</span>   <span class="token key atrule">logAppend</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">storage</span><span class="token punctuation">:</span>   <span class="token key atrule">journal</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">dbPath</span><span class="token punctuation">:</span> <span class="token string">"/usr/ndp/mongodb/data/0"</span>     <span class="token comment"># 数据文件路径需根据分片同步变更</span><span class="token key atrule">processManagement</span><span class="token punctuation">:</span>   <span class="token key atrule">fork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">net</span><span class="token punctuation">:</span>   <span class="token key atrule">bindIp</span><span class="token punctuation">:</span> 0.0.0.0   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">27000</span>                      <span class="token comment">########不同分片对应端口需进行变更</span><span class="token key atrule">setParameter</span><span class="token punctuation">:</span>   <span class="token key atrule">enableLocalhostAuthBypass</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">replication</span><span class="token punctuation">:</span>   <span class="token key atrule">replSetName</span><span class="token punctuation">:</span> <span class="token string">"rs0"</span>  <span class="token comment"># 副本集跟随分片变更</span><span class="token key atrule">sharding</span><span class="token punctuation">:</span>   <span class="token key atrule">clusterRole</span><span class="token punctuation">:</span> shardsvr<span class="token comment">## 初始化时需注释掉一下安全相关配置</span><span class="token key atrule">security</span><span class="token punctuation">:</span>  <span class="token key atrule">keyFile</span><span class="token punctuation">:</span> /usr/ndp/mongodb/auth/mongo<span class="token punctuation">-</span>keyfile  <span class="token key atrule">authorization</span><span class="token punctuation">:</span> enabled<span class="token comment"># conf/mongos.yaml</span><span class="token key atrule">systemLog</span><span class="token punctuation">:</span>  <span class="token key atrule">destination</span><span class="token punctuation">:</span> file  <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/usr/ndp/mongodb/logs/mongos.log"</span>  <span class="token key atrule">logAppend</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">net</span><span class="token punctuation">:</span>  <span class="token key atrule">bindIp</span><span class="token punctuation">:</span> 10.173.32.226          <span class="token comment">############根据启动服务节点IP进行修改</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20000</span><span class="token comment"># 将confige server 添加到路由</span><span class="token key atrule">sharding</span><span class="token punctuation">:</span><span class="token comment">########### 以下列表为所有启动config服务的主机IP及对应端口</span>  <span class="token key atrule">configDB</span><span class="token punctuation">:</span> configs/10.173.32.226<span class="token punctuation">:</span><span class="token number">21000</span><span class="token punctuation">,</span>10.173.32.227<span class="token punctuation">:</span><span class="token number">21000</span><span class="token punctuation">,</span>10.173.32.228<span class="token punctuation">:</span><span class="token number">21000</span><span class="token key atrule">processManagement</span><span class="token punctuation">:</span>  <span class="token key atrule">fork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">## 初始化时需注释掉一下安全相关配置</span><span class="token key atrule">security</span><span class="token punctuation">:</span>  <span class="token key atrule">keyFile</span><span class="token punctuation">:</span> /usr/ndp/mongodb/auth/mongo<span class="token punctuation">-</span>keyfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>启动服务顺序为：config–&gt; shard –&gt; mongos</p><p>首先将每个节点的config服务全部启动，然后启动每个节点上的所有shard服务，最后启动mongos服务；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># config服务</span><span class="token comment"># 每个节点启动一个服务，但需根据节点修改bindIp，启动所有节点config</span>mongod <span class="token parameter variable">-f</span> /usr/ndp/mongodb/conf/config.yaml<span class="token comment"># shard服务</span><span class="token comment"># 每个节点启动三个服务，不同服务需修改端口号</span>mongod <span class="token parameter variable">-f</span> /usr/ndp/mongodb/conf/shard0.yamlmongod <span class="token parameter variable">-f</span> /usr/ndp/mongodb/conf/shard1.yamlmongod <span class="token parameter variable">-f</span> /usr/ndp/mongodb/conf/shard2.yaml<span class="token comment">#初始化副本集</span>mongo <span class="token parameter variable">-port</span> <span class="token number">27000</span><span class="token operator">&gt;</span> rs.initiate<span class="token punctuation">(</span> <span class="token punctuation">{</span>   _id <span class="token builtin class-name">:</span> <span class="token string">"rs0"</span>,   members: <span class="token punctuation">[</span>      <span class="token punctuation">{</span> _id: <span class="token number">0</span>, host: <span class="token string">"10.173.32.226:27000"</span> <span class="token punctuation">}</span>,      <span class="token punctuation">{</span> _id: <span class="token number">1</span>, host: <span class="token string">"10.173.32.227:27000"</span> <span class="token punctuation">}</span>,      <span class="token punctuation">{</span> _id: <span class="token number">2</span>, host: <span class="token string">"10.173.32.228:27000"</span> <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>mongo <span class="token parameter variable">-port</span> <span class="token number">27001</span><span class="token operator">&gt;</span> rs.initiate<span class="token punctuation">(</span> <span class="token punctuation">{</span>   _id <span class="token builtin class-name">:</span> <span class="token string">"rs1"</span>,   members: <span class="token punctuation">[</span>      <span class="token punctuation">{</span> _id: <span class="token number">0</span>, host: <span class="token string">"10.173.32.226:27001"</span> <span class="token punctuation">}</span>,      <span class="token punctuation">{</span> _id: <span class="token number">1</span>, host: <span class="token string">"10.173.32.227:27001"</span> <span class="token punctuation">}</span>,      <span class="token punctuation">{</span> _id: <span class="token number">2</span>, host: <span class="token string">"10.173.32.228:27001"</span> <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>mongo <span class="token parameter variable">-port</span> <span class="token number">27002</span>rs.initiate<span class="token punctuation">(</span> <span class="token punctuation">{</span>   _id <span class="token builtin class-name">:</span> <span class="token string">"rs2"</span>,   members: <span class="token punctuation">[</span>      <span class="token punctuation">{</span> _id: <span class="token number">0</span>, host: <span class="token string">"10.173.32.226:27002"</span> <span class="token punctuation">}</span>,      <span class="token punctuation">{</span> _id: <span class="token number">1</span>, host: <span class="token string">"10.173.32.227:27002"</span> <span class="token punctuation">}</span>,      <span class="token punctuation">{</span> _id: <span class="token number">2</span>, host: <span class="token string">"10.173.32.228:27002"</span> <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># 配置服务器初始化</span>mongo <span class="token parameter variable">-port</span> <span class="token number">21000</span> <span class="token parameter variable">-host</span> NodeA-ip  <span class="token comment"># 需与配置文件保持一致，同为IP或主机名</span><span class="token operator">&gt;</span> rs.initiate<span class="token punctuation">(</span> <span class="token punctuation">{</span>   _id <span class="token builtin class-name">:</span> <span class="token string">"configs"</span>,   configsvr: true,   members: <span class="token punctuation">[</span>      <span class="token punctuation">{</span> _id: <span class="token number">0</span>, host: <span class="token string">"10.173.32.226:21000"</span> <span class="token punctuation">}</span>,      <span class="token punctuation">{</span> _id: <span class="token number">1</span>, host: <span class="token string">"10.173.32.227:21000"</span> <span class="token punctuation">}</span>,      <span class="token punctuation">{</span> _id: <span class="token number">2</span>, host: <span class="token string">"10.173.32.228:21000"</span> <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># mongos服务</span><span class="token comment"># 每个节点启动一个服务，但需根据节点修改bindIp</span>mongos <span class="token parameter variable">-f</span> /usr/ndp/mongodb/conf/mongos.yaml<span class="token comment"># 添加分片</span>mongo <span class="token parameter variable">-port</span> <span class="token number">20000</span> <span class="token parameter variable">-host</span> <span class="token number">10.173</span>.32.226<span class="token operator">&gt;</span> use admin<span class="token operator">&gt;</span> db.runCommand<span class="token punctuation">(</span> <span class="token punctuation">{</span> addshard:<span class="token string">"rs0/10.173.32.226:27000,10.173.32.227:27000,10.173.32.228:27000"</span>,name:<span class="token string">"shard0"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token operator">&gt;</span> db.runCommand<span class="token punctuation">(</span> <span class="token punctuation">{</span> addshard:<span class="token string">"rs1/10.173.32.226:27001,10.173.32.227:27001,10.173.32.228:27001"</span>,name:<span class="token string">"shard1"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token operator">&gt;</span> db.runCommand<span class="token punctuation">(</span> <span class="token punctuation">{</span> addshard:<span class="token string">"rs2/10.173.32.226:27002,10.173.32.227:27002,10.173.32.228:27002"</span>,name:<span class="token string">"shard2"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token operator">&gt;</span> db.runCommand<span class="token punctuation">(</span> <span class="token punctuation">{</span> enablesharding <span class="token builtin class-name">:</span> <span class="token string">"testdb"</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token operator">&gt;</span> db.runCommand<span class="token punctuation">(</span> <span class="token punctuation">{</span> shardcollection <span class="token builtin class-name">:</span> <span class="token string">"testdb.users"</span>,key <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>id: <span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token comment"># 测试数据</span>mongo <span class="token parameter variable">-port</span> <span class="token number">20000</span> <span class="token parameter variable">-host</span> <span class="token number">10.173</span>.32.226<span class="token operator">&gt;</span> var <span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>var <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20000</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>var uid <span class="token operator">=</span> i<span class="token punctuation">;</span>var name <span class="token operator">=</span> <span class="token string">"mongodb"</span>+i<span class="token punctuation">;</span>arr.push<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"id"</span>:uid,<span class="token string">"name"</span>:name<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>db.users.insertMany<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 添加身份认证</span>use admindb.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span>user: <span class="token string">"admin"</span>,pwd: <span class="token string">"mongodb"</span>,roles: <span class="token punctuation">[</span> <span class="token punctuation">{</span> role: <span class="token string">"root"</span>, db: <span class="token string">"admin"</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">#root所有权限</span>db.auth<span class="token punctuation">(</span><span class="token string">"admin"</span>,<span class="token string">"mongodb"</span><span class="token punctuation">)</span><span class="token comment">#创建用户</span><span class="token comment">#用户是分DB的，在哪个db下创建，就是该db专有用户</span>use metahub_lineagedb.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span>user: <span class="token string">"metahub"</span>,pwd: <span class="token string">"metahub"</span>,roles: <span class="token punctuation">[</span> <span class="token punctuation">{</span> role: <span class="token string">"readWrite"</span>, db: <span class="token string">"metahub_lineage"</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># 创建集合</span>db.createCollection<span class="token punctuation">(</span><span class="token string">"metahub_task_lineage_msg_v2"</span><span class="token punctuation">)</span> <span class="token comment"># 带身份认证登陆mongo</span> mongo <span class="token parameter variable">--host</span> <span class="token number">10.173</span>.32.226 <span class="token parameter variable">--port</span> <span class="token number">20000</span>  <span class="token parameter variable">-u</span> <span class="token string">"metahub"</span> <span class="token parameter variable">-p</span> <span class="token string">"metahub"</span> <span class="token parameter variable">--authenticationDatabase</span> <span class="token string">"metahub_lineage"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h3><p>服务关闭顺序为 mongos –&gt; config –&gt; shard</p><p>mongos为无状态服务，可直接通过kill -9进行终止服务；</p><p>config服务：<code>mongod --shutdown -f /usr/ndp/mongodb/conf/config.yaml</code></p><p>shard服务：<code>mongod --shutdown -f /usr/ndp/mongodb/conf/shard0.yaml</code></p><h3 id="滚动日志"><a href="#滚动日志" class="headerlink" title="滚动日志"></a>滚动日志</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">mongod_pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> mongo <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span><span class="token operator">|</span><span class="token function">grep</span> config<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{ print $2}'</span><span class="token variable">`</span></span><span class="token function">kill</span> <span class="token parameter variable">-SIGUSR1</span> mongod_pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL部署</title>
      <link href="/2021/03/12/04-database/mysql1-bu-shu/"/>
      <url>/2021/03/12/04-database/mysql1-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h1><h2 id="YUM安装"><a href="#YUM安装" class="headerlink" title="YUM安装"></a>YUM安装</h2><p>在具备外网环境或配置本地yum源的情况下，可直接通过yum安装mysql</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum isntall <span class="token parameter variable">-y</span> mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Tar包安装"><a href="#Tar包安装" class="headerlink" title="Tar包安装"></a>Tar<code>包安装</code></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过官网下载mysql对应tar包</span><span class="token function">wget</span> https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.30-el7-x86_64.tar<span class="token comment"># 解包</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> mysql-5.7.30-el7-x86_64.tar<span class="token comment"># 配置环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">MYSQL_HOME</span><span class="token operator">=~</span>/mysql-5.7.30-el7-x86_64<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$MYSQL_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token comment"># 添加mysql至系统服务</span><span class="token comment">## vim /usr/lib/systemd/system/mysql.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>MySQL Server<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>man:mysqld<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>http://dev.mysql.com/doc/refman/en/using-systemd.html<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">User</span><span class="token operator">=</span>mysql<span class="token assign-left variable">Group</span><span class="token operator">=</span>mysql<span class="token comment"># 按照实际pid文件路径配置</span><span class="token assign-left variable">PIDFile</span><span class="token operator">=</span>/data/mysql/pid/mysqld.pid<span class="token comment"># Disable service start and stop timeout logic of systemd for mysqld service.</span><span class="token assign-left variable">TimeoutSec</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment"># Execute pre and post scripts as root</span><span class="token assign-left variable">PermissionsStartOnly</span><span class="token operator">=</span>true<span class="token comment"># Needed to create system tables</span><span class="token comment">#ExecStartPre=/usr/bin/mysqld_pre_systemd</span><span class="token comment"># Start main service</span><span class="token comment"># 按照实际mysql安装路径配置</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/mysql/bin/mysqld <span class="token parameter variable">--daemonize</span> --pid-file<span class="token operator">=</span>/data/mysql/pid/mysqld.pid<span class="token comment">#注意这里要加上 --daemonize</span><span class="token comment"># Use this to switch malloc implementation</span><span class="token comment">#EnvironmentFile=-/etc/sysconfig/mysql</span><span class="token comment"># Sets open_files_limit</span>LimitNOFILE <span class="token operator">=</span> <span class="token number">5000</span><span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-failure<span class="token assign-left variable">RestartPreventExitStatus</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>false<span class="token comment"># systemctl模块重新加载</span>systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="MySQL初始化"><a href="#MySQL初始化" class="headerlink" title="MySQL初始化"></a>MySQL初始化</h1><p>修改配置文件my.cnf，并进行初始化；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 软件安装</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> mysql-community-server<span class="token comment"># 创建mysql相关目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mnt/data01/mysql/data  /mnt/data01/mysql/logs  /mnt/data01/mysql/binlogs<span class="token function">chown</span> <span class="token parameter variable">-R</span> mysql:mysql /mnt/data01/mysql<span class="token comment"># 修改配置文件 /etc/my.cnf</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>character-set-server<span class="token operator">=</span>utf8<span class="token assign-left variable">datadir</span><span class="token operator">=</span>/mnt/data01/mysql/datalog-error<span class="token operator">=</span>/mnt/data01/mysql/logs/mysqld.log<span class="token assign-left variable">socket</span><span class="token operator">=</span>/mnt/data01/mysql/mysql.sockpid-file<span class="token operator">=</span>/mnt/data01/mysql/mysqld.pid<span class="token comment"># 主从相关配置，单节点不需要</span>server-id<span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">log_bin</span><span class="token operator">=</span>/mnt/data01/mysql/binlogs/mysql-bin.log<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>row<span class="token assign-left variable">binlog_rows_query_log_events</span><span class="token operator">=</span>on<span class="token assign-left variable">binlog_row_image</span><span class="token operator">=</span>minimal<span class="token assign-left variable">log_slave_updates</span><span class="token operator">=</span>on<span class="token assign-left variable">expire_logs_days</span><span class="token operator">=</span><span class="token number">7</span><span class="token assign-left variable">binlog_cache_size</span><span class="token operator">=</span><span class="token number">65535</span><span class="token assign-left variable">sync_binlog</span><span class="token operator">=</span><span class="token number">1</span>slave-preserve-commit-order<span class="token operator">=</span>ON<span class="token assign-left variable">gtid_mode</span><span class="token operator">=</span>on<span class="token assign-left variable">enforce_gtid_consistency</span><span class="token operator">=</span>on<span class="token assign-left variable">sql_mode</span><span class="token operator">=</span>STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<span class="token assign-left variable">log_bin_trust_function_creators</span><span class="token operator">=</span><span class="token number">1</span>max_connections <span class="token operator">=</span> <span class="token number">3000</span><span class="token assign-left variable">wait_timeout</span><span class="token operator">=</span><span class="token number">28800</span><span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token assign-left variable">socket</span><span class="token operator">=</span>/mnt/data01/mysql/mysql.sockdefault-character-set<span class="token operator">=</span>utf8<span class="token comment"># 初始化MYSQL</span>mysqld <span class="token parameter variable">--initialize</span> <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql<span class="token comment"># 启动mysql服务</span>systemctl start mysqld  <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> mysqld<span class="token comment"># 查看root初始密码</span><span class="token function">cat</span> /mnt/data01/mysql/logs/mysqld.log<span class="token operator">|</span><span class="token function">grep</span> pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MYSQL主从配置"><a href="#MYSQL主从配置" class="headerlink" title="MYSQL主从配置"></a>MYSQL主从配置</h2><p>参考单节点MYSQL安装从库，然后进行主从同步操作；</p><blockquote><p>master节点mysql数据库环境下操作</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--修改默认root密码</span><span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'u19cMtBGd0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span class="token comment">--创建复制账号</span><span class="token keyword">create</span> <span class="token keyword">user</span> repl<span class="token punctuation">;</span><span class="token comment">--复制授权</span><span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'repl'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'vyeIzGQ91n'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>os环境下操作</p></blockquote><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># master node## 备份主库数据cd /mnt/data01/mysqlmysqldump -P3306 -uroot -pu19cMtBGd0 --all-databases --triggers --routines --events --single-transaction &gt;all.sql## 备份数据传输至从库scp all.sql demo02:/mnt/data01/mysql# slave node## 获取gtid信息cat all.sql |grep GLOBAL.GTID_PURGED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>slave节点mysql数据库环境下操作</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 加载主节点备份数据</span>source <span class="token operator">/</span>mnt<span class="token operator">/</span>data01<span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">all</span><span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">;</span><span class="token comment">--初始化主节点信息</span>reset master<span class="token punctuation">;</span><span class="token comment">--配置GTID信息(从上一步骤获取)</span><span class="token keyword">SET</span> @<span class="token variable">@GLOBAL.GTID_PURGED</span><span class="token operator">=</span>xxxx<span class="token punctuation">;</span><span class="token comment">-- 配置master信息</span>change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'demo01'</span><span class="token punctuation">,</span> master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">'repl'</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">'vyeIzGQ91n'</span><span class="token punctuation">,</span>master_auto_position<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 启动从节点</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span><span class="token comment">-- 查看从节点状态 (Slave_IO_Running及Slave_SQL_Running为yes即表示主从配置成功)</span><span class="token keyword">show</span> slave <span class="token keyword">status</span> \G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预置数据库"><a href="#预置数据库" class="headerlink" title="预置数据库"></a>预置数据库</h2><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 预置数据库mysql -u root -pu19cMtBGd0 -e "CREATE USER 'ambari'@'%' IDENTIFIED BY 'AfQUktZcJg'; GRANT ALL PRIVILEGES ON ambari.* TO 'ambari'@'%'; DELETE FROM mysql.user WHERE user=''; flush privileges; create database ambari;"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="脏页刷新"><a href="#脏页刷新" class="headerlink" title="脏页刷新"></a>脏页刷新</h2><h3 id="什么是脏页？"><a href="#什么是脏页？" class="headerlink" title="什么是脏页？"></a>什么是脏页？</h3><p>MySQL InnoDB表基本都是基于B+树索引进行存储的，而数据存储的最小单元就是数据页；而当内存中的数据页与磁盘中的不一致时，该数据页就叫做脏页；当执行<code>flush</code>操作将磁盘数据页和内存数据页进行合并之后，内存和磁盘的数据页同步，称为干净页；</p><blockquote><p>MySQL物理存储结构：表 –&gt; 表空间（索引）–&gt; 段 –&gt; 区 –&gt; 页 –&gt; 行 –&gt; 列；</p><p>Buffer Pool中数据页状态：</p><ol><li>尚未使用的数据页；</li><li>使用了但已完成<code>flush</code>的干净页；</li><li>使用了尚未<code>flush</code>的脏页；</li></ol></blockquote><h3 id="为什么会出现脏页？"><a href="#为什么会出现脏页？" class="headerlink" title="为什么会出现脏页？"></a>为什么会出现脏页？</h3><p>MySQL数据库在执行<code>select</code>、<code>update</code>、<code>delete</code>操作时，InnoDB使用<code>change buffer</code>进行加速写操作，可以将写操作的随机磁盘访问调整为局部顺序操作，而随机磁盘访问是数据库操作中性能影响较大的点；当非唯一索引记录的缓存页发生写操作时，修改完成<code>change buffer</code>就可以立刻返回了；</p><p>当我们需要执行一个简单的查询操作时，可能发生抖动，即某次查询的耗时骤增，外在整体表现就是tp50非常低，但tp999非常高的现象；因为执行某查询操作时，发生了刷脏页的操作，并且更可怕的是发生多次间接的连坐（<code>innodb_flush_neighbors</code>）；</p><h3 id="脏页刷新的刷新时机"><a href="#脏页刷新的刷新时机" class="headerlink" title="脏页刷新的刷新时机"></a>脏页刷新的刷新时机</h3><ul><li><p>InnoDB的<code>redo log</code>日志写满</p><p>此时操作系统不得不停止所有更新操作，将<code>check point</code>向前推，<code>redo log</code>可以留出更多的空间，并把该部分的脏页<code>flush</code>到磁盘中；（<code>flush</code>动作期间该段不可写）</p></li><li><p>系统内存不足</p><p>需要新的数据页但是发现需要淘汰部分数据页，而数据页存在脏页，则需要先执行<code>flush</code>操作，才能进行淘汰；</p></li><li><p>后端线程刷新脏页</p><p>即<code>Buffer Pool</code>中的<code>page cleaner Thread</code>；</p></li><li><p>MySQL关闭实例时</p><p>服务实例关闭时，需刷新所有脏页；</p></li></ul><h3 id="脏页刷新影响因素"><a href="#脏页刷新影响因素" class="headerlink" title="脏页刷新影响因素"></a>脏页刷新影响因素</h3><ul><li><p>脏页比例</p><p><code>innodb_max_dirty_pages_pct</code>参数可设置脏页的比例，超过该比例就触发刷新机制，默认值为75%；</p></li><li><p><code>redo log</code>写速度</p><p><code>innodb_io_capacity</code>参数可设置磁盘刷新的页数，该值可设置为磁盘的IOPS；具体值可使用工具进行测试；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fio <span class="token parameter variable">-filename</span><span class="token operator">=</span><span class="token variable">$filename</span> <span class="token parameter variable">-direct</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-iodepth</span> <span class="token number">1</span> <span class="token parameter variable">-thread</span> <span class="token parameter variable">-rw</span><span class="token operator">=</span>randrw <span class="token parameter variable">-ioengine</span><span class="token operator">=</span>psync <span class="token parameter variable">-bs</span><span class="token operator">=</span>16k <span class="token parameter variable">-size</span><span class="token operator">=</span>500M <span class="token parameter variable">-numjobs</span><span class="token operator">=</span><span class="token number">10</span> <span class="token parameter variable">-runtime</span><span class="token operator">=</span><span class="token number">10</span> <span class="token parameter variable">-group_reporting</span> <span class="token parameter variable">-name</span><span class="token operator">=</span>mytest <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="存储引擎层优化"><a href="#存储引擎层优化" class="headerlink" title="存储引擎层优化"></a>存储引擎层优化</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#缓存池大小，一般为物理内存的 60% - 80%</span><span class="token assign-left variable">innodb_buffer_pool_size</span><span class="token operator">=</span><span class="token comment">#如果 innodb_buffer_pool_size 大小超过 1GB，innodb_buffer_pool_instances 值就默认为 8；否则，默认为 1；</span><span class="token assign-left variable">innodb_buffer_pool_instances</span><span class="token operator">=</span> <span class="token number">4</span><span class="token comment">#</span><span class="token assign-left variable">innodb_file_per_table</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1,0</span><span class="token punctuation">)</span><span class="token comment"># 1-最安全  0-高性能  2-折中</span><span class="token assign-left variable">innodb_flush_log_at_trx_commit</span><span class="token operator">=</span> <span class="token number">0</span>Innodb_flush_methodinnodb_log_buffer_sizeinnodb_log_files_in_groupinnodb_max_dirty_pages_pctinnodb_additional_mem_pool_sizemax_binlog_cache_sizemax_binlog_size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vsftp部署</title>
      <link href="/2021/01/10/05-dev/vsftp-da-jian/"/>
      <url>/2021/01/10/05-dev/vsftp-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="VSFTP简介"><a href="#VSFTP简介" class="headerlink" title="VSFTP简介"></a>VSFTP简介</h1><p>FTP服务器(File Transfer Protocol Server)是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。 FTP是File Transfer Protocol(文件传输协议)。顾名思义，就是专门用来传输文件的协议。简单地说，支持FTP协议的服务器就是FTP服务器。</p><p>VSFTP是一个基于GPL发布的类Unix系统上使用的FTP服务器软件，它的全称是Very Secure FTP 从此名称可以看出来，编制者的初衷是代码的安全。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>它是一个安全、高速、稳定的FTP服务器;</li><li>它可以做基于多个IP的虚拟FTP主机服务器;</li><li>匿名服务设置十分方便;</li><li>匿名FTP的根目录不需要任何特殊的目录结构，或系统程序或其它的系统文件;</li><li>不执行任何外部程序，从而减少了安全隐患;</li><li>支持虚拟用户，并且每个虚拟用户可以具有独立的属性配置;</li><li>可以设置从inetd中启动，或者独立的FTP服务器两种运行方式;</li><li>支持两种认证方式(PAP或xinetd/ tcp_wrappers);</li><li>支持带宽限制;</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p>稳定：在RedHat系统下测试，可支持15000个并发；</p></li><li><p>速度：在千兆网卡下下载速度可达86MB/S；</p></li></ol><h1 id="VSFTP登陆方式"><a href="#VSFTP登陆方式" class="headerlink" title="VSFTP登陆方式"></a>VSFTP登陆方式</h1><p>vsftp有多种登录方式：包括匿名登录方式、本地系统用户登录方式和虚拟用户登录，其中虚拟用户登陆安全级别最高。</p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ol><li>只能访问服务器为其提供的FTP服务，而不能访问系统的其他资源。</li><li>虚拟用户支持多用户，且可以配置独立密码，可根据用户适应不同场景。</li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>以本地系统用户为宿主（一般是不能登录系统的本地用户），然后通过虚拟用户和本地系统用户建立映射关系，实现虚拟用户登录FTP服务功能。</p><h1 id="VSFTP搭建"><a href="#VSFTP搭建" class="headerlink" title="VSFTP搭建"></a>VSFTP搭建</h1><h2 id="安装VSFTP"><a href="#安装VSFTP" class="headerlink" title="安装VSFTP"></a>安装VSFTP</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> vsftpd libdb-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /opt/ftp_server   <span class="token comment">#创建ftp根目录</span><span class="token function">useradd</span>  <span class="token parameter variable">-d</span>  /opt/sftp/ftp_server <span class="token parameter variable">-s</span> /sbin/nologin virftp  <span class="token comment"># 指定用户组为sftp  家目录为/opt/sftp/myftp  无法登陆OS</span><span class="token builtin class-name">echo</span> <span class="token string">'passwordstr'</span> <span class="token operator">|</span><span class="token function">passwd</span> --stdin.  <span class="token comment">#设置用户密码为passwordstr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 属主与权限必须严格按照以下配置，如需写权限可在此基础上创建子目录用于写</span><span class="token function">chown</span> virftp:virftp /opt/ftp_server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="重启VSFTPD服务"><a href="#重启VSFTPD服务" class="headerlink" title="重启VSFTPD服务"></a>重启VSFTPD服务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置虚拟用户（方案一）"><a href="#配置虚拟用户（方案一）" class="headerlink" title="配置虚拟用户（方案一）"></a>配置虚拟用户（方案一）</h3><h4 id="虚拟用户创建"><a href="#虚拟用户创建" class="headerlink" title="虚拟用户创建"></a>虚拟用户创建</h4><ol><li><p>创建虚拟用户密码文件；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vi /etc/vsftpd/conf/vir_user</span><span class="token comment"># 虚拟用户名与密码分行存储</span>demo      <span class="token comment">#虚拟用户名</span>demo@123  <span class="token comment">#虚拟用户对应密码</span><span class="token function">chmod</span> <span class="token number">600</span> /etc/vsftpd/conf/vir_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成虚拟用户数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">db_load <span class="token parameter variable">-T</span> <span class="token parameter variable">-t</span> <span class="token builtin class-name">hash</span> <span class="token parameter variable">-f</span> /etc/vsftpd/conf/vir_user /etc/vsftpd/conf/vir_user.db<span class="token function">chmod</span> <span class="token number">600</span> /etc/vsftpd/conf/vir_user.db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置虚拟用户验证文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vi /etc/pam.d/vsftpd   注释文件中所有配置项，新增以下配置项</span>authrequired/lib64/security/pam_userdb.so<span class="token assign-left variable">db</span><span class="token operator">=</span>/etc/vsftpd/conf/vir_useraccountrequired/lib64/security/pam_userdb.so<span class="token assign-left variable">db</span><span class="token operator">=</span>/etc/vsftpd/conf/vir_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="VSFTP服务配置"><a href="#VSFTP服务配置" class="headerlink" title="VSFTP服务配置"></a>VSFTP服务配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vi /etc/vsftpd/vsftpd.conf</span><span class="token comment">#禁止匿名用户登录</span><span class="token assign-left variable">anonymous_enable</span><span class="token operator">=</span>NO<span class="token comment"># 允许用户创建上传</span><span class="token assign-left variable">write_enable</span><span class="token operator">=</span>YES<span class="token comment">#允许本地用户登录，虚拟用户需映射本地用户，需开启该配置</span><span class="token assign-left variable">local_enable</span><span class="token operator">=</span>YES<span class="token comment">#限制本地用户仅可访问家目录</span><span class="token assign-left variable">chroot_local_user</span><span class="token operator">=</span>YES<span class="token comment">#启用虚拟账户映射 </span><span class="token assign-left variable">guest_enable</span><span class="token operator">=</span>YES<span class="token comment">#指定虚拟用户映射本地用户名               </span><span class="token assign-left variable">guest_username</span><span class="token operator">=</span>virftp<span class="token comment">#使用虚拟用户验证（PAM验证），对应/etc/pam.d目录下配置文件名</span><span class="token assign-left variable">pam_service_name</span><span class="token operator">=</span>vsftpd<span class="token comment">#设置存放各虚拟用户配置文件的目录（此目录下与虚拟用户名相同的文件为用户专属配置文件）</span><span class="token assign-left variable">user_config_dir</span><span class="token operator">=</span>/etc/vsftpd/vir_conf<span class="token comment">#启用chroot时，虚拟用户根目录允许写入</span><span class="token assign-left variable">allow_writeable_chroot</span><span class="token operator">=</span>YES<span class="token comment">#是否启用用户清单，启用后根据userlist_deny参数配置判定清单中用户是否可以登陆,与user_list配合使用  ftpusers为禁止登陆用户列表，无开关控制</span><span class="token assign-left variable">userlist_enable</span><span class="token operator">=</span>NO<span class="token comment"># 指定清单属性，YES为拒绝清单，NO为允许清单</span><span class="token assign-left variable">userlist_deny</span><span class="token operator">=</span>NO<span class="token comment">#禁用反向解析，提升登陆ftp速度</span><span class="token assign-left variable">reverse_lookup_enable</span><span class="token operator">=</span>NO<span class="token comment">#指定上传文档umask</span><span class="token assign-left variable">local_umask</span><span class="token operator">=</span>022<span class="token comment">#***************</span><span class="token comment">#以下配置为可选</span><span class="token comment">#****************</span><span class="token comment"># 自定义登陆提示语</span><span class="token assign-left variable">ftpd_banner</span><span class="token operator">=</span>Welcome to blah FTP service.<span class="token comment">#开启日志</span><span class="token assign-left variable">xferlog_enable</span><span class="token operator">=</span>YES<span class="token comment">#使用标准文件日志</span><span class="token assign-left variable">xferlog_std_format</span><span class="token operator">=</span>YES<span class="token comment">#配置日志文件路径</span><span class="token assign-left variable">xferlog_file</span><span class="token operator">=</span>/var/log/vsftpd.log<span class="token comment">#会话超时，客户端连接到ftp但未操作</span><span class="token assign-left variable">idle_session_timeout</span><span class="token operator">=</span><span class="token number">600</span><span class="token comment">#数据传输超时</span><span class="token assign-left variable">data_connection_timeout</span><span class="token operator">=</span><span class="token number">120</span><span class="token comment">#是否允许ascii码方式上传文件</span><span class="token assign-left variable">ascii_upload_enable</span><span class="token operator">=</span>NO<span class="token comment">#是否允许ascii码方式下载二进制文件</span><span class="token assign-left variable">ascii_download_enable</span><span class="token operator">=</span>NO<span class="token comment">#配置最大连接数</span><span class="token assign-left variable">max_clients</span><span class="token operator">=</span><span class="token number">300</span><span class="token comment">#配置单个IP最大链接数</span><span class="token assign-left variable">max_per_ip</span><span class="token operator">=</span><span class="token number">10</span><span class="token comment">#是否启动主动模式</span><span class="token assign-left variable">port_enable</span><span class="token operator">=</span>YES<span class="token comment">#指定主动模式是否使用20端口传输数据，为NO时，可结合ftp_data_port配置数据传输端口</span><span class="token assign-left variable">connect_from_port_20</span><span class="token operator">=</span>NO<span class="token assign-left variable">ftp_data_port</span><span class="token operator">=</span><span class="token number">23</span><span class="token comment">#是否启用被动模式</span><span class="token assign-left variable">pasv_enable</span><span class="token operator">=</span>YES<span class="token comment">#配置被动模式端口上下限</span><span class="token assign-left variable">pasv_min_port</span><span class="token operator">=</span><span class="token number">60000</span><span class="token assign-left variable">pasv_max_port</span><span class="token operator">=</span><span class="token number">65535</span><span class="token comment">#是否允许使用ls -R等命令</span><span class="token assign-left variable">ls_recurse_enable</span><span class="token operator">=</span>YES<span class="token comment">#是否启用监听</span><span class="token assign-left variable">listen</span><span class="token operator">=</span>YES<span class="token comment">#指定监听端口，默认为21</span><span class="token assign-left variable">listen_port</span><span class="token operator">=</span><span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><p>主动模式：服务端只需防火墙开放固定端口，客户端使用高位随机端口访问服务端</p></li><li><p>被动模式：服务端需要防火墙开放监听端口与高位范围端口，客户端发起请求后，服务端从指定范围端口中随机分配端口供客户端连接</p></li><li><p>变更监听端口：修改listen_port及/etc/services配置文件中ftp项端口</p></li></ol></blockquote><h4 id="VSFTP用户级配置"><a href="#VSFTP用户级配置" class="headerlink" title="VSFTP用户级配置"></a>VSFTP用户级配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为虚拟用户创建ftp根目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/ftp_server/demo<span class="token comment">#确保映射用户对所有ftp目录均具备读写权限</span><span class="token function">chown</span> virftp:virftp  /opt/ftp_server/demo<span class="token comment"># vim /etc/vsftpd/vir_conf/demo</span><span class="token comment"># 配置文件与虚拟用户名保持一致</span><span class="token comment">#允许浏览FTP目录和下载</span><span class="token assign-left variable">anon_world_readable_only</span><span class="token operator">=</span>NO<span class="token comment">#允许虚拟用户上传文件</span><span class="token assign-left variable">anon_upload_enable</span><span class="token operator">=</span>YES<span class="token comment">#允许虚拟用户创建目录</span><span class="token assign-left variable">anon_mkdir_write_enable</span><span class="token operator">=</span>YES<span class="token comment">#允许虚拟用户执行其他操作（如改名、删除）</span><span class="token assign-left variable">anon_other_write_enable</span><span class="token operator">=</span>YES<span class="token comment">#上传文件的掩码,如022时，上传目录权限为755,文件权限为644</span><span class="token assign-left variable">anon_umask</span><span class="token operator">=</span>022<span class="token comment">#指定虚拟用户的虚拟目录（虚拟用户登录后的主目录）</span><span class="token assign-left variable">local_root</span><span class="token operator">=</span> /opt/ftp_server/demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="禁止登陆用户清单"><a href="#禁止登陆用户清单" class="headerlink" title="禁止登陆用户清单"></a>禁止登陆用户清单</h4><p>注释配置文件中所有用户，配置文件为：/etc/vsftpd/ftpusers</p><h4 id="重启VSFTPD服务-1"><a href="#重启VSFTPD服务-1" class="headerlink" title="重启VSFTPD服务"></a>重启VSFTPD服务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="登陆验证"><a href="#登陆验证" class="headerlink" title="登陆验证"></a>登陆验证</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ftp</span> localhost<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SFTP方案-（方案二）"><a href="#SFTP方案-（方案二）" class="headerlink" title="SFTP方案 （方案二）"></a>SFTP方案 （方案二）</h3><h4 id="用户配置-1"><a href="#用户配置-1" class="headerlink" title="用户配置"></a>用户配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定ftp工作区</span><span class="token function">mkdir</span> /opt/sftp<span class="token comment"># 创建用户指定家目录,且不允许登陆OS</span><span class="token function">useradd</span> <span class="token parameter variable">-d</span> /opt/sftp <span class="token parameter variable">-s</span> /bin/nologin <span class="token function">sftp</span><span class="token comment"># 修改工作区根目录权限，必须严格按照以下配置，根目录只允许下载，不允许上传，如需上传可在根目录下创建子目录</span><span class="token function">chown</span> root:sftp  /opt/sftp<span class="token function">chmod</span> <span class="token number">755</span> /opt/sftp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SSH服务配置"><a href="#SSH服务配置" class="headerlink" title="SSH服务配置"></a>SSH服务配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vi /etc/ssh/sshd_config</span>PasswordAuthentication<span class="token function">yes</span>  <span class="token comment"># yes：允许使用密码登陆   no：只能使用公钥登陆</span><span class="token comment"># 注释原有 Subsystem</span><span class="token comment"># Subsystem sftp /usr/lib/openssh/sftp-server</span>Subsystem <span class="token function">sftp</span> internal-sftp   <span class="token comment"># 使用sshd的内置sftp代码，不另外启动sftp-server进程</span><span class="token comment"># Match 必须位于文件末尾，否则会导致其后其他配置丢失</span><span class="token comment"># 限制sftp用户组用户</span>Match Group <span class="token function">sftp</span><span class="token comment">#指定ftp用户的根目录</span>ChrootDirectory /opt/sftp/%u<span class="token comment"># 不允许tcp转发</span>AllowTcpForwarding no<span class="token comment"># 不允许图形化转发</span>X11Forwarding no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类加载与生命周期</title>
      <link href="/2020/06/06/02-program/java-bian-cheng-zi-xue-zhi-lu/java-lei-jia-zai/"/>
      <url>/2020/06/06/02-program/java-bian-cheng-zi-xue-zhi-lu/java-lei-jia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="java类生命周期与加载"><a href="#java类生命周期与加载" class="headerlink" title="java类生命周期与加载"></a>java类生命周期与加载</h1><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p>类的生命周期从大的方面可以分为两个部分：</p><ul><li>class–&gt;class对象：状态、链接、初始化</li><li>实例化–&gt;GC：实例化、使用、卸载</li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210522010726835.png" alt="image-20210522010726835"><p>Jvm通过状态、连接和初始化一个java类型，使该类型可以被正在运行的java程序使用；</p><ul><li><p>装载：将二进制class文件读入jvm中；</p></li><li><p>链接：将读入的class文件合并到jvm运行时环境中：</p><ul><li>验证：验证class是否符合jvm标准</li><li>准备：为class分配内存；</li><li>解析：将常量池中的符号引用转化为直接引用，jvm实现可延迟解析实现；</li></ul></li><li><p>初始化：将class中的各类静态成员加载至内存中并赋值；</p></li><li><p>使用：对类进行实例化(普通成员初始化、实例构造、成员赋值)及引用；</p></li><li><p>卸载：通过GC对已无引用对象进行资源回收；</p></li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>JDK 默认提供了如下几种ClassLoader：</p><ul><li><strong>Bootstrap loader</strong>：Bootstrap加载器是用C++语言写的，它是在Java虚拟机启动后初始化的，它主要负责加载%JAVA_HOME%/jre/lib,-Xbootclasspath参数指定的路径以及%JAVA_HOME%/jre/classes中的类。</li><li><strong>ExtClassLoader</strong>：Bootstrp loader加载ExtClassLoader,并且将ExtClassLoader的父加载器设置为Bootstrp loader.ExtClassLoader是用Java写的，具体来说就是 sun.misc.Launcher$ExtClassLoader，ExtClassLoader主要加载%JAVA_HOME%/jre/lib/ext，此路径下的所有classes目录以及java.ext.dirs系统变量指定的路径中类库。</li><li><strong>AppClassLoader</strong>：Bootstrp loader加载完ExtClassLoader后，就会加载AppClassLoader,并且将AppClassLoader的父加载器指定为 ExtClassLoader。AppClassLoader也是用Java写成的，它的实现类是 sun.misc.Launcher$AppClassLoader，另外我们知道ClassLoader中有个getSystemClassLoader方法,此方法返回的正是AppclassLoader.AppClassLoader主要负责加载classpath所指定的位置的类或者是jar文档，<strong>它也是Java程序默认的类加载器</strong>。</li><li><strong>User-Defined Class Loader</strong>：用户自定义加载器 自己定义从哪里加载类的二进制流；定义自己的加载器步骤为：<ul><li>继承java.lang.ClassLoader</li></ul></li><li>重写父类findClass方法（*因为JDK已经在loadClass方法中帮我们实现了ClassLoader搜索类的算法，当在loadClass方法中搜索不到类时，loadClass方法就会调用findClass方法来搜索类，所以我们只需重写该方法即可。如没有特殊的要求，一般不建议重写loadClass搜索类的算法。）；</li></ul><img src="https://fastly.jsdelivr.net/gh/destinys/image_host@master/uPic/image-20210522011827475.png" alt="image-20210522011827475"><p>java采用了委托模型(双亲委托模型)机制，这个机制简单来讲，就是“类装载器有载入类的需求时，会先请示其Parent使用其搜索路径帮忙载入，如果Parent 找不到,那么才由自己依照自己的搜索路径搜索类”</p><p>每一个层次的类加载器都是如此。因此，所有的加载请求最终都应该传送到顶层的启动类加载器中。</p><p>只有当父加载器反馈自己无法完成这个加载请求时（搜索范围中没有找到所需的类），子加载器才会尝试自己去加载。</p><p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。因此，使用双亲委派模型来组织类加载器之间的关系，有一个显而易见的好处：类随着它的类加载器一起具备了一种带有优先级的层次关系。</p><h2 id="类加载与初始化顺序"><a href="#类加载与初始化顺序" class="headerlink" title="类加载与初始化顺序"></a>类加载与初始化顺序</h2><p>Java类加载机制中最重要的就是程序初始化过程，其中包含了静态资源，非静态资源，父类子类，构造方法之间的执行顺序；</p><ul><li><strong>常规顺序</strong>：父类的静态代码块-&gt;子类的静态代码块-&gt;初始化父类的属性值/父类的普通代码块(自上而下的顺序排列)-&gt;父类的构造方法-&gt;初始化子类的属性值/子类的普通代码块(自上而下的顺序排列)-&gt;子类的构造方法。</li><li><strong>特殊情况</strong>：<ul><li>当类中显示创建静态类对象且构造器中包含对静态变量赋值，此时静态对象与静态变量赋值顺序将决定最终结果的产生；</li><li>静态成员变量和静态代码块只有在类被调用时才会初始化；</li><li>静态内部类只有被外部类调用时才会初始化；</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton1</span> <span class="token punctuation">{</span>    <span class="token comment">//先赋值然后自增，结果返回为2和3</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1</span> st1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span>  <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value1<span class="token operator">++</span><span class="token punctuation">;</span>        value2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> st1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Singleton2</span> <span class="token punctuation">{</span>    <span class="token comment">//实例化时静态变量尚未赋值，默认值为0，自增后被后续变量赋值覆盖结果返回为1和2</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton2</span> st2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">private</span>  <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value1<span class="token operator">++</span><span class="token punctuation">;</span>        value2<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> st2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Singleton1</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton2</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//value1=1 value2=2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Singleton value1:"</span> <span class="token operator">+</span> <span class="token class-name">Singleton1</span><span class="token punctuation">.</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Singleton value2:"</span> <span class="token operator">+</span> <span class="token class-name">Singleton1</span><span class="token punctuation">.</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//value1=11 value2=12</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Singleton2 value1:"</span> <span class="token operator">+</span> <span class="token class-name">Singleton2</span><span class="token punctuation">.</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Singleton2 value2:"</span> <span class="token operator">+</span> <span class="token class-name">Singleton2</span><span class="token punctuation">.</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主动引用立即对类进行加载的5中情况："><a href="#主动引用立即对类进行加载的5中情况：" class="headerlink" title="主动引用立即对类进行加载的5中情况："></a>主动引用立即对类进行加载的5中情况：</h2><ol><li>使用new关键字初始化对象、读取或设置static字段、调用类的静态方法；</li><li>使用java.lang.reflect对类进行反射调用时，如果类没有初始化，需先初始化</li><li>初始化子类时，父类未初始化，需先初始化父类；</li><li>虚拟机启动时，会先初始化用户指定主类；</li><li>jdk1.7的动态语言支持，java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，且该方法归属类未实例化，需先触发其实例化；</li></ol><h2 id="被动引用不触发初始化三种情况"><a href="#被动引用不触发初始化三种情况" class="headerlink" title="被动引用不触发初始化三种情况"></a>被动引用不触发初始化三种情况</h2><ol><li>子类引用父类静态成员，不会触发子类初始化；</li><li>通过数组定义来引用类，不会触发类实例化；</li><li>引用其他类常量不会触发本类实例化；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运行环境变量</title>
      <link href="/2020/04/01/02-program/java-bian-cheng-zi-xue-zhi-lu/java-cheng-xu-zhi-xing/"/>
      <url>/2020/04/01/02-program/java-bian-cheng-zi-xue-zhi-lu/java-cheng-xu-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Java执行及classpath"><a href="#Java执行及classpath" class="headerlink" title="Java执行及classpath"></a>Java执行及classpath</h1><h2 id="java-jar包执行"><a href="#java-jar包执行" class="headerlink" title="java jar包执行"></a>java jar包执行</h2><ul><li>java -jar jarname param1：直接指定需要运行的jar包名称，可接参数；</li><li>java -cp .：/etc/*:/conf classname param1：可通过cp指定classpath路径，支持通配符，后接入口main class名称，可接参数<ul><li>指定配置文件时，只能指定到目录，后不可添加/或/*</li><li>指定jar包通配时，需使用目录名后接/*,或枚举所有jar名称(jdk6以前仅支持枚举)；<ul><li>java -cp $(echo /data/apps/ilb/*.jar | tr ‘ ‘ ‘:’) com.chinacache.Main param1<h2 id="查询jar包中类名"><a href="#查询jar包中类名" class="headerlink" title="查询jar包中类名"></a>查询jar包中类名</h2></li></ul></li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> *.jar<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token variable">${file}</span><span class="token punctuation">;</span> jar vtf <span class="token variable">${file}</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'content'</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java读取文件</title>
      <link href="/2020/02/02/02-program/java-bian-cheng-zi-xue-zhi-lu/java-wen-jian-du-qu/"/>
      <url>/2020/02/02/02-program/java-bian-cheng-zi-xue-zhi-lu/java-wen-jian-du-qu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java读取文件"><a href="#Java读取文件" class="headerlink" title="Java读取文件"></a>Java读取文件</h1><h2 id="常用获取文件路径方法"><a href="#常用获取文件路径方法" class="headerlink" title="常用获取文件路径方法"></a>常用获取文件路径方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//该方法获取的路径为class文件当前路径，后面可接相对class文件的相对路径文件或classpath为根目录的绝对路径；</span>getClass<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token comment">// 获取当前class文件所在路径</span><span class="token comment">// 方案一：（需先创建对象再使用）</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProtectionDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCodeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 方案二：（可在静态方法中使用，其中FileUtils为class名）</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getProtectionDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCodeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//该方法获取的路径为classpath的根目录，即'/'，故其后只能跟以非'/'开头的相对路径；</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token comment">//获取执行jar操作系统路径</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span>：   <span class="token comment">//获取当前工作目录，同user.dir</span>  <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> path <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo静态博客搭建</title>
      <link href="/2020/01/01/05-dev/hexo-da-jian-ji-zhu-ti-pei-zhi/"/>
      <url>/2020/01/01/05-dev/hexo-da-jian-ji-zhu-ti-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装zlib-devel依赖包</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> zlib-devel curl-devel<span class="token comment"># 下载源码包</span><span class="token function">wget</span> https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.26.0.tar.gz<span class="token comment"># 解压并编译安装</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> git-2.26.0.tar.gz <span class="token parameter variable">-C</span>  /opt/semon<span class="token function">mv</span> /opt/wangsong03/git-2.26.0 /opt/semon/git-2.26.0-source<span class="token builtin class-name">cd</span> /opt/wangsong03/git-2.26.0-source./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/opt/semon/git-2.26.0<span class="token function">make</span> <span class="token operator">&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 添加git至环境变量</span><span class="token builtin class-name">echo</span> <span class="token string">'export GIT_HOME=/opt/semon/git-2.26.0'</span><span class="token operator">&gt;&gt;</span>/etc/profile<span class="token builtin class-name">echo</span> <span class="token string">'export PATH=$GIT_HOME/bin:$GIT_HOME/libexec/git-core:$PATH'</span><span class="token operator">&gt;&gt;</span>/etc/profile<span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NodeJs安装"><a href="#NodeJs安装" class="headerlink" title="NodeJs安装"></a>NodeJs安装</h2><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 部署node.jstar -zxvf node-v10.16.0-linux-x64.tar.gz -C /opt/semon# 添加node至环境变量 vi /etc/profileexport NODE_HOME=/etc/profile/node-v10.16.0-linux-x64export PATH=$NODE_HOME/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改NPM源地址</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span class="token comment"># 更新NPM并替换为国内镜像源</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment"># 安装hexo-cli</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span class="token comment"># 初始化博客文件夹 blog</span>hexo init blog<span class="token builtin class-name">cd</span> blog<span class="token comment"># 创建标签--生成index.md添加type: tags 以及layout: tags</span>hexo new page tags<span class="token comment"># 创建分类--生成index.md添加type: categories 以及layout: categories</span>hexo new page categories<span class="token comment"># 新建友情链接-- --生成index.md添加type: friends 以及layout: friends</span>hexo new page friends<span class="token comment">## source下新建_data文件夹，创建friends.json文件</span><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token builtin class-name">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span>,    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"码酱"</span>,    <span class="token string">"introduction"</span><span class="token builtin class-name">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span>,    <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"http://luokangyuan.com/"</span>,    <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token builtin class-name">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span>,    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"闪烁之狐"</span>,    <span class="token string">"introduction"</span><span class="token builtin class-name">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span>,    <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://blinkfox.github.io/"</span>,    <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token builtin class-name">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span>,    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"ja_rome"</span>,    <span class="token string">"introduction"</span><span class="token builtin class-name">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span>,    <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span>,    <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token builtin class-name">:</span> <span class="token string">"http://static.blinkfox.com/2019/11/23/avatar3.jpeg"</span>,    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"Jark's Blog"</span>,    <span class="token string">"introduction"</span><span class="token builtin class-name">:</span> <span class="token string">"Flink框架研发大佬"</span>,    <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"http://wuchong.me/"</span>,    <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment"># 生成静态页面</span>hexo g<span class="token comment"># 启动服务</span>hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置远程仓库</span><span class="token comment">## 用于向仓库提交时表明提交人身份</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"destinys"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"4304517@qq.com"</span><span class="token comment">#添加公钥至git并测试</span><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span class="token comment"># 初始化本地git</span><span class="token function">git</span> init<span class="token comment"># 添加远程仓库</span><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:destinys/blog.git<span class="token comment"># 查看远程仓库及别名</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span><span class="token comment"># 强制远程覆盖本地</span><span class="token function">git</span> fetch <span class="token parameter variable">--all</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/master<span class="token function">git</span> pull origin master<span class="token comment"># 强制本地覆盖远程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>常见错误：</p><p>Q1：ssh: connect to host github.com port 22: Operation timed out</p><p>A1：添加以下内容至~/.ssh/config中即可</p><p>Host github.com<br>User git<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443</p></blockquote><h2 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h2><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>hexo当前较为热门的主题为next、hexo-theme-matery等；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 主题下载</span><span class="token builtin class-name">cd</span> blog<span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git ./themes/<span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next.git ./themes/<span class="token comment"># 添加搜索插件</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search <span class="token parameter variable">--save</span><span class="token comment">## _config.yml 添加配置</span>search:  path: search.xml  field: post  format:html  limit:1000<span class="token comment">### 跳转至主题配置文件</span>local_search:enable: <span class="token boolean">true</span>trigger: autotop_n_per_article: <span class="token number">1</span>unescape:<span class="token boolean">false</span>preload: <span class="token boolean">false</span><span class="token comment">## 需添加hexo clean 后在重新生成和部署，否则关键字不会变红</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token parameter variable">-d</span><span class="token comment"># 添加快速部署插件</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span>  <span class="token comment"># 添加中文转拼音插件</span><span class="token function">npm</span> i hexo-permalink-pinyin <span class="token parameter variable">--save</span><span class="token comment">## _config.yml 添加配置</span>permalink_pinyin:  enable: <span class="token boolean">true</span>  separator: <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span class="token comment"># 字数统计插件</span><span class="token function">npm</span> i <span class="token parameter variable">--save</span> hexo-wordcount<span class="token comment">## _config.yml 添加配置</span>postInfo:  date: <span class="token boolean">true</span>  update: <span class="token boolean">false</span>  wordCount: <span class="token boolean">false</span> <span class="token comment"># set true.</span>  totalCount: <span class="token boolean">false</span> <span class="token comment"># set true.</span>  min2read: <span class="token boolean">false</span> <span class="token comment"># set true.</span>  readCount: <span class="token boolean">false</span> <span class="token comment"># set true.</span><span class="token comment">#添加表情支持插件</span><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis <span class="token parameter variable">--save</span><span class="token comment">## _config.yml 添加配置</span>githubEmojis:  enable: <span class="token boolean">true</span>  className: github-emoji  inject: <span class="token boolean">true</span>  styles:  customEmojis:  <span class="token comment"># 添加本地图片支持 --必须使用这个连接安装，否则生成路径不对</span><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image <span class="token comment">## _config.yml 修改配置 图片保存文件夹需与文档同名</span>post_asset_folder: <span class="token boolean">true</span><span class="token comment"># 配置当前主题</span><span class="token comment">## vi blog/_config.yaml</span><span class="token comment"># 添加algolia搜索</span><span class="token function">npm</span> <span class="token function">install</span> hexo-algolia <span class="token parameter variable">--save</span><span class="token comment"># 注册algolia</span><span class="token comment">## 登陆官网地址：https://www.algolia.com/</span><span class="token comment">## 创建index，然后点击左侧API Keys，跳转后点击上方 ALL API Keys(要自己新建一个)，点击右上角New API Key跳转页面中，仅修改最下方ACL属性即可，其他保持默认，ACL添加所有项；</span>algolia:  applicationID: <span class="token string">'your applicationID'</span>  apiKey: <span class="token string">'your apiKey'</span>  adminApiKey: <span class="token string">'your adminApiKey'</span>  indexName: <span class="token string">'your indexName'</span>  chunkSize: <span class="token number">5000</span>  <span class="token comment"># 上传数据至algolia</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HEXO_ALGOLIA_INDEXING_KEY</span><span class="token operator">=</span>your apiKeyhexo algolia<span class="token comment"># 切换至主题目录下的配置文件themes/xxx/_config.yml</span>algolia_search:  enable: <span class="token boolean">true</span>  hits:    per_page: <span class="token number">10</span>  labels:    input_placeholder: Search <span class="token keyword">for</span> Posts    hits_empty: <span class="token string">"我们没有找到任何搜索结果: <span class="token variable">${query}</span>"</span>    hits_stats: <span class="token string">"找到<span class="token variable">${hits}</span>条结果（用时<span class="token variable">${time}</span> ms）"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
